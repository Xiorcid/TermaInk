
build/debug/TermaInk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .ram2         00001ff0  10000000  10000000  00010000  2**2
                  ALLOC
  1 .isr_vector   00000190  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bcd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001850  0800be60  0800be60  0000ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800d6b0  0800d6b0  0000f278  2**0
                  CONTENTS
  5 .ARM          00000008  0800d6b0  0800d6b0  0000e6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800d6b8  0800d6b8  0000f278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0800d6b8  0800d6b8  0000e6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0800d6c0  0800d6c0  0000e6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000278  20000000  0800d6c8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000025e4  20000278  0800d940  0000f278  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2000285c  0800d940  0000f85c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f278  2**0
                  CONTENTS, READONLY
 13 .comment      00000045  00000000  00000000  0000f2a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000304e3  00000000  00000000  0000f2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000628d  00000000  00000000  0003f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00012ffa  00000000  00000000  00045a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001cb0  00000000  00000000  00058a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000196d  00000000  00000000  0005a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eb57  00000000  00000000  0005c075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00008768  00000000  00000000  0007abcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005750  00000000  00000000  00083334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000232  00000000  00000000  00088a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strcmp>:
 8000190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000198:	2a01      	cmp	r2, #1
 800019a:	bf28      	it	cs
 800019c:	429a      	cmpcs	r2, r3
 800019e:	d0f7      	beq.n	8000190 <strcmp>
 80001a0:	1ad0      	subs	r0, r2, r3
 80001a2:	4770      	bx	lr

080001a4 <strlen>:
 80001a4:	4603      	mov	r3, r0
 80001a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001aa:	2a00      	cmp	r2, #0
 80001ac:	d1fb      	bne.n	80001a6 <strlen+0x2>
 80001ae:	1a18      	subs	r0, r3, r0
 80001b0:	3801      	subs	r0, #1
 80001b2:	4770      	bx	lr
	...

080001c0 <memchr>:
 80001c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001c4:	2a10      	cmp	r2, #16
 80001c6:	db2b      	blt.n	8000220 <memchr+0x60>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	d008      	beq.n	80001e0 <memchr+0x20>
 80001ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001d2:	3a01      	subs	r2, #1
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d02d      	beq.n	8000234 <memchr+0x74>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	b342      	cbz	r2, 8000230 <memchr+0x70>
 80001de:	d1f6      	bne.n	80001ce <memchr+0xe>
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
 80001e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ea:	f022 0407 	bic.w	r4, r2, #7
 80001ee:	f07f 0700 	mvns.w	r7, #0
 80001f2:	2300      	movs	r3, #0
 80001f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001f8:	3c08      	subs	r4, #8
 80001fa:	ea85 0501 	eor.w	r5, r5, r1
 80001fe:	ea86 0601 	eor.w	r6, r6, r1
 8000202:	fa85 f547 	uadd8	r5, r5, r7
 8000206:	faa3 f587 	sel	r5, r3, r7
 800020a:	fa86 f647 	uadd8	r6, r6, r7
 800020e:	faa5 f687 	sel	r6, r5, r7
 8000212:	b98e      	cbnz	r6, 8000238 <memchr+0x78>
 8000214:	d1ee      	bne.n	80001f4 <memchr+0x34>
 8000216:	bcf0      	pop	{r4, r5, r6, r7}
 8000218:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800021c:	f002 0207 	and.w	r2, r2, #7
 8000220:	b132      	cbz	r2, 8000230 <memchr+0x70>
 8000222:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000226:	3a01      	subs	r2, #1
 8000228:	ea83 0301 	eor.w	r3, r3, r1
 800022c:	b113      	cbz	r3, 8000234 <memchr+0x74>
 800022e:	d1f8      	bne.n	8000222 <memchr+0x62>
 8000230:	2000      	movs	r0, #0
 8000232:	4770      	bx	lr
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr
 8000238:	2d00      	cmp	r5, #0
 800023a:	bf06      	itte	eq
 800023c:	4635      	moveq	r5, r6
 800023e:	3803      	subeq	r0, #3
 8000240:	3807      	subne	r0, #7
 8000242:	f015 0f01 	tst.w	r5, #1
 8000246:	d107      	bne.n	8000258 <memchr+0x98>
 8000248:	3001      	adds	r0, #1
 800024a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800024e:	bf02      	ittt	eq
 8000250:	3001      	addeq	r0, #1
 8000252:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000256:	3001      	addeq	r0, #1
 8000258:	bcf0      	pop	{r4, r5, r6, r7}
 800025a:	3801      	subs	r0, #1
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop

08000260 <__aeabi_drsub>:
 8000260:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000264:	e002      	b.n	800026c <__adddf3>
 8000266:	bf00      	nop

08000268 <__aeabi_dsub>:
 8000268:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800026c <__adddf3>:
 800026c:	b530      	push	{r4, r5, lr}
 800026e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000272:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000276:	ea94 0f05 	teq	r4, r5
 800027a:	bf08      	it	eq
 800027c:	ea90 0f02 	teqeq	r0, r2
 8000280:	bf1f      	itttt	ne
 8000282:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000286:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000292:	f000 80e2 	beq.w	800045a <__adddf3+0x1ee>
 8000296:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029e:	bfb8      	it	lt
 80002a0:	426d      	neglt	r5, r5
 80002a2:	dd0c      	ble.n	80002be <__adddf3+0x52>
 80002a4:	442c      	add	r4, r5
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	ea82 0000 	eor.w	r0, r2, r0
 80002b2:	ea83 0101 	eor.w	r1, r3, r1
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	2d36      	cmp	r5, #54	@ 0x36
 80002c0:	bf88      	it	hi
 80002c2:	bd30      	pophi	{r4, r5, pc}
 80002c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x70>
 80002d6:	4240      	negs	r0, r0
 80002d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x84>
 80002ea:	4252      	negs	r2, r2
 80002ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f0:	ea94 0f05 	teq	r4, r5
 80002f4:	f000 80a7 	beq.w	8000446 <__adddf3+0x1da>
 80002f8:	f1a4 0401 	sub.w	r4, r4, #1
 80002fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000300:	db0d      	blt.n	800031e <__adddf3+0xb2>
 8000302:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000306:	fa22 f205 	lsr.w	r2, r2, r5
 800030a:	1880      	adds	r0, r0, r2
 800030c:	f141 0100 	adc.w	r1, r1, #0
 8000310:	fa03 f20e 	lsl.w	r2, r3, lr
 8000314:	1880      	adds	r0, r0, r2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	4159      	adcs	r1, r3
 800031c:	e00e      	b.n	800033c <__adddf3+0xd0>
 800031e:	f1a5 0520 	sub.w	r5, r5, #32
 8000322:	f10e 0e20 	add.w	lr, lr, #32
 8000326:	2a01      	cmp	r2, #1
 8000328:	fa03 fc0e 	lsl.w	ip, r3, lr
 800032c:	bf28      	it	cs
 800032e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	18c0      	adds	r0, r0, r3
 8000338:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800033c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000340:	d507      	bpl.n	8000352 <__adddf3+0xe6>
 8000342:	f04f 0e00 	mov.w	lr, #0
 8000346:	f1dc 0c00 	rsbs	ip, ip, #0
 800034a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000352:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000356:	d31b      	bcc.n	8000390 <__adddf3+0x124>
 8000358:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800035c:	d30c      	bcc.n	8000378 <__adddf3+0x10c>
 800035e:	0849      	lsrs	r1, r1, #1
 8000360:	ea5f 0030 	movs.w	r0, r0, rrx
 8000364:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000368:	f104 0401 	add.w	r4, r4, #1
 800036c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000370:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000374:	f080 809a 	bcs.w	80004ac <__adddf3+0x240>
 8000378:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800037c:	bf08      	it	eq
 800037e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000382:	f150 0000 	adcs.w	r0, r0, #0
 8000386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038a:	ea41 0105 	orr.w	r1, r1, r5
 800038e:	bd30      	pop	{r4, r5, pc}
 8000390:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000394:	4140      	adcs	r0, r0
 8000396:	eb41 0101 	adc.w	r1, r1, r1
 800039a:	3c01      	subs	r4, #1
 800039c:	bf28      	it	cs
 800039e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003a2:	d2e9      	bcs.n	8000378 <__adddf3+0x10c>
 80003a4:	f091 0f00 	teq	r1, #0
 80003a8:	bf04      	itt	eq
 80003aa:	4601      	moveq	r1, r0
 80003ac:	2000      	moveq	r0, #0
 80003ae:	fab1 f381 	clz	r3, r1
 80003b2:	bf08      	it	eq
 80003b4:	3320      	addeq	r3, #32
 80003b6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ba:	f1b3 0220 	subs.w	r2, r3, #32
 80003be:	da0c      	bge.n	80003da <__adddf3+0x16e>
 80003c0:	320c      	adds	r2, #12
 80003c2:	dd08      	ble.n	80003d6 <__adddf3+0x16a>
 80003c4:	f102 0c14 	add.w	ip, r2, #20
 80003c8:	f1c2 020c 	rsb	r2, r2, #12
 80003cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d0:	fa21 f102 	lsr.w	r1, r1, r2
 80003d4:	e00c      	b.n	80003f0 <__adddf3+0x184>
 80003d6:	f102 0214 	add.w	r2, r2, #20
 80003da:	bfd8      	it	le
 80003dc:	f1c2 0c20 	rsble	ip, r2, #32
 80003e0:	fa01 f102 	lsl.w	r1, r1, r2
 80003e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e8:	bfdc      	itt	le
 80003ea:	ea41 010c 	orrle.w	r1, r1, ip
 80003ee:	4090      	lslle	r0, r2
 80003f0:	1ae4      	subs	r4, r4, r3
 80003f2:	bfa2      	ittt	ge
 80003f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f8:	4329      	orrge	r1, r5
 80003fa:	bd30      	popge	{r4, r5, pc}
 80003fc:	ea6f 0404 	mvn.w	r4, r4
 8000400:	3c1f      	subs	r4, #31
 8000402:	da1c      	bge.n	800043e <__adddf3+0x1d2>
 8000404:	340c      	adds	r4, #12
 8000406:	dc0e      	bgt.n	8000426 <__adddf3+0x1ba>
 8000408:	f104 0414 	add.w	r4, r4, #20
 800040c:	f1c4 0220 	rsb	r2, r4, #32
 8000410:	fa20 f004 	lsr.w	r0, r0, r4
 8000414:	fa01 f302 	lsl.w	r3, r1, r2
 8000418:	ea40 0003 	orr.w	r0, r0, r3
 800041c:	fa21 f304 	lsr.w	r3, r1, r4
 8000420:	ea45 0103 	orr.w	r1, r5, r3
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f1c4 040c 	rsb	r4, r4, #12
 800042a:	f1c4 0220 	rsb	r2, r4, #32
 800042e:	fa20 f002 	lsr.w	r0, r0, r2
 8000432:	fa01 f304 	lsl.w	r3, r1, r4
 8000436:	ea40 0003 	orr.w	r0, r0, r3
 800043a:	4629      	mov	r1, r5
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	fa21 f004 	lsr.w	r0, r1, r4
 8000442:	4629      	mov	r1, r5
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f094 0f00 	teq	r4, #0
 800044a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800044e:	bf06      	itte	eq
 8000450:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000454:	3401      	addeq	r4, #1
 8000456:	3d01      	subne	r5, #1
 8000458:	e74e      	b.n	80002f8 <__adddf3+0x8c>
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf18      	it	ne
 8000460:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000464:	d029      	beq.n	80004ba <__adddf3+0x24e>
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	d005      	beq.n	800047e <__adddf3+0x212>
 8000472:	ea54 0c00 	orrs.w	ip, r4, r0
 8000476:	bf04      	itt	eq
 8000478:	4619      	moveq	r1, r3
 800047a:	4610      	moveq	r0, r2
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea91 0f03 	teq	r1, r3
 8000482:	bf1e      	ittt	ne
 8000484:	2100      	movne	r1, #0
 8000486:	2000      	movne	r0, #0
 8000488:	bd30      	popne	{r4, r5, pc}
 800048a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048e:	d105      	bne.n	800049c <__adddf3+0x230>
 8000490:	0040      	lsls	r0, r0, #1
 8000492:	4149      	adcs	r1, r1
 8000494:	bf28      	it	cs
 8000496:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800049a:	bd30      	pop	{r4, r5, pc}
 800049c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004a0:	bf3c      	itt	cc
 80004a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004a6:	bd30      	popcc	{r4, r5, pc}
 80004a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf1a      	itte	ne
 80004c0:	4619      	movne	r1, r3
 80004c2:	4610      	movne	r0, r2
 80004c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c8:	bf1c      	itt	ne
 80004ca:	460b      	movne	r3, r1
 80004cc:	4602      	movne	r2, r0
 80004ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d2:	bf06      	itte	eq
 80004d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d8:	ea91 0f03 	teqeq	r1, r3
 80004dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	bf00      	nop

080004e4 <__aeabi_ui2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f04f 0500 	mov.w	r5, #0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e750      	b.n	80003a4 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_i2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800051c:	bf48      	it	mi
 800051e:	4240      	negmi	r0, r0
 8000520:	f04f 0100 	mov.w	r1, #0
 8000524:	e73e      	b.n	80003a4 <__adddf3+0x138>
 8000526:	bf00      	nop

08000528 <__aeabi_f2d>:
 8000528:	0042      	lsls	r2, r0, #1
 800052a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000532:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000536:	bf1f      	itttt	ne
 8000538:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800053c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000540:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000544:	4770      	bxne	lr
 8000546:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800054a:	bf08      	it	eq
 800054c:	4770      	bxeq	lr
 800054e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000552:	bf04      	itt	eq
 8000554:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000558:	4770      	bxeq	lr
 800055a:	b530      	push	{r4, r5, lr}
 800055c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000568:	e71c      	b.n	80003a4 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_ul2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f04f 0500 	mov.w	r5, #0
 800057a:	e00a      	b.n	8000592 <__aeabi_l2d+0x16>

0800057c <__aeabi_l2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800058a:	d502      	bpl.n	8000592 <__aeabi_l2d+0x16>
 800058c:	4240      	negs	r0, r0
 800058e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000592:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000596:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800059a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800059e:	f43f aed8 	beq.w	8000352 <__adddf3+0xe6>
 80005a2:	f04f 0203 	mov.w	r2, #3
 80005a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005aa:	bf18      	it	ne
 80005ac:	3203      	addne	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ba:	f1c2 0320 	rsb	r3, r2, #32
 80005be:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c2:	fa20 f002 	lsr.w	r0, r0, r2
 80005c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ca:	ea40 000e 	orr.w	r0, r0, lr
 80005ce:	fa21 f102 	lsr.w	r1, r1, r2
 80005d2:	4414      	add	r4, r2
 80005d4:	e6bd      	b.n	8000352 <__adddf3+0xe6>
 80005d6:	bf00      	nop

080005d8 <__aeabi_dmul>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005e6:	bf1d      	ittte	ne
 80005e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ec:	ea94 0f0c 	teqne	r4, ip
 80005f0:	ea95 0f0c 	teqne	r5, ip
 80005f4:	f000 f8de 	bleq	80007b4 <__aeabi_dmul+0x1dc>
 80005f8:	442c      	add	r4, r5
 80005fa:	ea81 0603 	eor.w	r6, r1, r3
 80005fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000602:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000606:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060a:	bf18      	it	ne
 800060c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000610:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000614:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000618:	d038      	beq.n	800068c <__aeabi_dmul+0xb4>
 800061a:	fba0 ce02 	umull	ip, lr, r0, r2
 800061e:	f04f 0500 	mov.w	r5, #0
 8000622:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000626:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800062a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800062e:	f04f 0600 	mov.w	r6, #0
 8000632:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000636:	f09c 0f00 	teq	ip, #0
 800063a:	bf18      	it	ne
 800063c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000640:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000644:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000648:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800064c:	d204      	bcs.n	8000658 <__aeabi_dmul+0x80>
 800064e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000652:	416d      	adcs	r5, r5
 8000654:	eb46 0606 	adc.w	r6, r6, r6
 8000658:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800065c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000660:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000664:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000668:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800066c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000670:	bf88      	it	hi
 8000672:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000676:	d81e      	bhi.n	80006b6 <__aeabi_dmul+0xde>
 8000678:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800067c:	bf08      	it	eq
 800067e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000682:	f150 0000 	adcs.w	r0, r0, #0
 8000686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000690:	ea46 0101 	orr.w	r1, r6, r1
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	ea81 0103 	eor.w	r1, r1, r3
 800069c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a0:	bfc2      	ittt	gt
 80006a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	popgt	{r4, r5, r6, pc}
 80006ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006b0:	f04f 0e00 	mov.w	lr, #0
 80006b4:	3c01      	subs	r4, #1
 80006b6:	f300 80ab 	bgt.w	8000810 <__aeabi_dmul+0x238>
 80006ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006be:	bfde      	ittt	le
 80006c0:	2000      	movle	r0, #0
 80006c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006c6:	bd70      	pople	{r4, r5, r6, pc}
 80006c8:	f1c4 0400 	rsb	r4, r4, #0
 80006cc:	3c20      	subs	r4, #32
 80006ce:	da35      	bge.n	800073c <__aeabi_dmul+0x164>
 80006d0:	340c      	adds	r4, #12
 80006d2:	dc1b      	bgt.n	800070c <__aeabi_dmul+0x134>
 80006d4:	f104 0414 	add.w	r4, r4, #20
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f305 	lsl.w	r3, r0, r5
 80006e0:	fa20 f004 	lsr.w	r0, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f8:	fa21 f604 	lsr.w	r6, r1, r4
 80006fc:	eb42 0106 	adc.w	r1, r2, r6
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 040c 	rsb	r4, r4, #12
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f304 	lsl.w	r3, r0, r4
 8000718:	fa20 f005 	lsr.w	r0, r0, r5
 800071c:	fa01 f204 	lsl.w	r2, r1, r4
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	f141 0100 	adc.w	r1, r1, #0
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f205 	lsl.w	r2, r0, r5
 8000744:	ea4e 0e02 	orr.w	lr, lr, r2
 8000748:	fa20 f304 	lsr.w	r3, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea43 0302 	orr.w	r3, r3, r2
 8000754:	fa21 f004 	lsr.w	r0, r1, r4
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	fa21 f204 	lsr.w	r2, r1, r4
 8000760:	ea20 0002 	bic.w	r0, r0, r2
 8000764:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f094 0f00 	teq	r4, #0
 8000778:	d10f      	bne.n	800079a <__aeabi_dmul+0x1c2>
 800077a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800077e:	0040      	lsls	r0, r0, #1
 8000780:	eb41 0101 	adc.w	r1, r1, r1
 8000784:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3c01      	subeq	r4, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1a6>
 800078e:	ea41 0106 	orr.w	r1, r1, r6
 8000792:	f095 0f00 	teq	r5, #0
 8000796:	bf18      	it	ne
 8000798:	4770      	bxne	lr
 800079a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800079e:	0052      	lsls	r2, r2, #1
 80007a0:	eb43 0303 	adc.w	r3, r3, r3
 80007a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3d01      	subeq	r5, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1c6>
 80007ae:	ea43 0306 	orr.w	r3, r3, r6
 80007b2:	4770      	bx	lr
 80007b4:	ea94 0f0c 	teq	r4, ip
 80007b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007bc:	bf18      	it	ne
 80007be:	ea95 0f0c 	teqne	r5, ip
 80007c2:	d00c      	beq.n	80007de <__aeabi_dmul+0x206>
 80007c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ce:	d1d1      	bne.n	8000774 <__aeabi_dmul+0x19c>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d8:	f04f 0000 	mov.w	r0, #0
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
 80007de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e2:	bf06      	itte	eq
 80007e4:	4610      	moveq	r0, r2
 80007e6:	4619      	moveq	r1, r3
 80007e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ec:	d019      	beq.n	8000822 <__aeabi_dmul+0x24a>
 80007ee:	ea94 0f0c 	teq	r4, ip
 80007f2:	d102      	bne.n	80007fa <__aeabi_dmul+0x222>
 80007f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f8:	d113      	bne.n	8000822 <__aeabi_dmul+0x24a>
 80007fa:	ea95 0f0c 	teq	r5, ip
 80007fe:	d105      	bne.n	800080c <__aeabi_dmul+0x234>
 8000800:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000804:	bf1c      	itt	ne
 8000806:	4610      	movne	r0, r2
 8000808:	4619      	movne	r1, r3
 800080a:	d10a      	bne.n	8000822 <__aeabi_dmul+0x24a>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000818:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000826:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800082a:	bd70      	pop	{r4, r5, r6, pc}

0800082c <__aeabi_ddiv>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000832:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083a:	bf1d      	ittte	ne
 800083c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000840:	ea94 0f0c 	teqne	r4, ip
 8000844:	ea95 0f0c 	teqne	r5, ip
 8000848:	f000 f8a7 	bleq	800099a <__aeabi_ddiv+0x16e>
 800084c:	eba4 0405 	sub.w	r4, r4, r5
 8000850:	ea81 0e03 	eor.w	lr, r1, r3
 8000854:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000858:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800085c:	f000 8088 	beq.w	8000970 <__aeabi_ddiv+0x144>
 8000860:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000864:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000868:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800086c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000870:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000874:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000878:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800087c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000880:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000884:	429d      	cmp	r5, r3
 8000886:	bf08      	it	eq
 8000888:	4296      	cmpeq	r6, r2
 800088a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800088e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000892:	d202      	bcs.n	800089a <__aeabi_ddiv+0x6e>
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	1ab6      	subs	r6, r6, r2
 800089c:	eb65 0503 	sbc.w	r5, r5, r3
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000908:	ea55 0e06 	orrs.w	lr, r5, r6
 800090c:	d018      	beq.n	8000940 <__aeabi_ddiv+0x114>
 800090e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000912:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000916:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800091e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000922:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000926:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092a:	d1c0      	bne.n	80008ae <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000930:	d10b      	bne.n	800094a <__aeabi_ddiv+0x11e>
 8000932:	ea41 0100 	orr.w	r1, r1, r0
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800093e:	e7b6      	b.n	80008ae <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000944:	bf04      	itt	eq
 8000946:	4301      	orreq	r1, r0
 8000948:	2000      	moveq	r0, #0
 800094a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800094e:	bf88      	it	hi
 8000950:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000954:	f63f aeaf 	bhi.w	80006b6 <__aeabi_dmul+0xde>
 8000958:	ebb5 0c03 	subs.w	ip, r5, r3
 800095c:	bf04      	itt	eq
 800095e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000966:	f150 0000 	adcs.w	r0, r0, #0
 800096a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000974:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000978:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800097c:	bfc2      	ittt	gt
 800097e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000986:	bd70      	popgt	{r4, r5, r6, pc}
 8000988:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800098c:	f04f 0e00 	mov.w	lr, #0
 8000990:	3c01      	subs	r4, #1
 8000992:	e690      	b.n	80006b6 <__aeabi_dmul+0xde>
 8000994:	ea45 0e06 	orr.w	lr, r5, r6
 8000998:	e68d      	b.n	80006b6 <__aeabi_dmul+0xde>
 800099a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800099e:	ea94 0f0c 	teq	r4, ip
 80009a2:	bf08      	it	eq
 80009a4:	ea95 0f0c 	teqeq	r5, ip
 80009a8:	f43f af3b 	beq.w	8000822 <__aeabi_dmul+0x24a>
 80009ac:	ea94 0f0c 	teq	r4, ip
 80009b0:	d10a      	bne.n	80009c8 <__aeabi_ddiv+0x19c>
 80009b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009b6:	f47f af34 	bne.w	8000822 <__aeabi_dmul+0x24a>
 80009ba:	ea95 0f0c 	teq	r5, ip
 80009be:	f47f af25 	bne.w	800080c <__aeabi_dmul+0x234>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e72c      	b.n	8000822 <__aeabi_dmul+0x24a>
 80009c8:	ea95 0f0c 	teq	r5, ip
 80009cc:	d106      	bne.n	80009dc <__aeabi_ddiv+0x1b0>
 80009ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d2:	f43f aefd 	beq.w	80007d0 <__aeabi_dmul+0x1f8>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e722      	b.n	8000822 <__aeabi_dmul+0x24a>
 80009dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e6:	f47f aec5 	bne.w	8000774 <__aeabi_dmul+0x19c>
 80009ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ee:	f47f af0d 	bne.w	800080c <__aeabi_dmul+0x234>
 80009f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009f6:	f47f aeeb 	bne.w	80007d0 <__aeabi_dmul+0x1f8>
 80009fa:	e712      	b.n	8000822 <__aeabi_dmul+0x24a>

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b80c 	b.w	8000acc <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f00b f846 	bl	800bb4c <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <deregister_tm_clones>:
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <deregister_tm_clones+0x10>)
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <deregister_tm_clones+0x14>)
 8000ad4:	4283      	cmp	r3, r0
 8000ad6:	d002      	beq.n	8000ade <deregister_tm_clones+0xe>
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <deregister_tm_clones+0x18>)
 8000ada:	b103      	cbz	r3, 8000ade <deregister_tm_clones+0xe>
 8000adc:	4718      	bx	r3
 8000ade:	4770      	bx	lr
 8000ae0:	20000278 	.word	0x20000278
 8000ae4:	20000278 	.word	0x20000278
 8000ae8:	00000000 	.word	0x00000000

08000aec <register_tm_clones>:
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <register_tm_clones+0x18>)
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <register_tm_clones+0x1c>)
 8000af0:	1a1b      	subs	r3, r3, r0
 8000af2:	0fd9      	lsrs	r1, r3, #31
 8000af4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000af8:	1049      	asrs	r1, r1, #1
 8000afa:	d002      	beq.n	8000b02 <register_tm_clones+0x16>
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <register_tm_clones+0x20>)
 8000afe:	b103      	cbz	r3, 8000b02 <register_tm_clones+0x16>
 8000b00:	4718      	bx	r3
 8000b02:	4770      	bx	lr
 8000b04:	20000278 	.word	0x20000278
 8000b08:	20000278 	.word	0x20000278
 8000b0c:	00000000 	.word	0x00000000

08000b10 <__do_global_dtors_aux>:
 8000b10:	b510      	push	{r4, lr}
 8000b12:	4c06      	ldr	r4, [pc, #24]	@ (8000b2c <__do_global_dtors_aux+0x1c>)
 8000b14:	7823      	ldrb	r3, [r4, #0]
 8000b16:	b943      	cbnz	r3, 8000b2a <__do_global_dtors_aux+0x1a>
 8000b18:	f7ff ffda 	bl	8000ad0 <deregister_tm_clones>
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__do_global_dtors_aux+0x20>)
 8000b1e:	b113      	cbz	r3, 8000b26 <__do_global_dtors_aux+0x16>
 8000b20:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <__do_global_dtors_aux+0x24>)
 8000b22:	f3af 8000 	nop.w
 8000b26:	2301      	movs	r3, #1
 8000b28:	7023      	strb	r3, [r4, #0]
 8000b2a:	bd10      	pop	{r4, pc}
 8000b2c:	20000278 	.word	0x20000278
 8000b30:	00000000 	.word	0x00000000
 8000b34:	0800be44 	.word	0x0800be44

08000b38 <frame_dummy>:
 8000b38:	b508      	push	{r3, lr}
 8000b3a:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <frame_dummy+0x18>)
 8000b3c:	b11b      	cbz	r3, 8000b46 <frame_dummy+0xe>
 8000b3e:	4905      	ldr	r1, [pc, #20]	@ (8000b54 <frame_dummy+0x1c>)
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <frame_dummy+0x20>)
 8000b42:	f3af 8000 	nop.w
 8000b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b4a:	f7ff bfcf 	b.w	8000aec <register_tm_clones>
 8000b4e:	bf00      	nop
 8000b50:	00000000 	.word	0x00000000
 8000b54:	2000027c 	.word	0x2000027c
 8000b58:	0800be44 	.word	0x0800be44

08000b5c <EPD_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_Reset(void)
{
 8000b5c:	b508      	push	{r3, lr}
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2108      	movs	r1, #8
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f003 fb4a 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 8000b6a:	2014      	movs	r0, #20
 8000b6c:	f002 f9a4 	bl	8002eb8 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f003 fb41 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f002 f99b 	bl	8002eb8 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2108      	movs	r1, #8
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f003 fb38 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 8000b8e:	2014      	movs	r0, #20
 8000b90:	f002 f992 	bl	8002eb8 <HAL_Delay>
}
 8000b94:	bd08      	pop	{r3, pc}

08000b96 <EPD_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_SendCommand(UBYTE Reg)
{
 8000b96:	b510      	push	{r4, lr}
 8000b98:	4604      	mov	r4, r0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f003 fb2c 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bae:	f003 fb26 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f000 f94c 	bl	8000e50 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f003 fb1d 	bl	80041fe <HAL_GPIO_WritePin>
}
 8000bc4:	bd10      	pop	{r4, pc}

08000bc6 <EPD_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_SendData(UBYTE Data)
{
 8000bc6:	b510      	push	{r4, lr}
 8000bc8:	4604      	mov	r4, r0
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2140      	movs	r1, #64	@ 0x40
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd2:	f003 fb14 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2110      	movs	r1, #16
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f003 fb0e 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8000be2:	4620      	mov	r0, r4
 8000be4:	f000 f934 	bl	8000e50 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2110      	movs	r1, #16
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f003 fb05 	bl	80041fe <HAL_GPIO_WritePin>
}
 8000bf4:	bd10      	pop	{r4, pc}

08000bf6 <EPD_SetWindows>:
	Ystart : Y-axis starting position
	Xend : End position of X-axis
	Yend : End position of Y-axis
******************************************************************************/
static void EPD_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8000bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf8:	4607      	mov	r7, r0
 8000bfa:	460d      	mov	r5, r1
 8000bfc:	4616      	mov	r6, r2
 8000bfe:	461c      	mov	r4, r3
    EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000c00:	2044      	movs	r0, #68	@ 0x44
 8000c02:	f7ff ffc8 	bl	8000b96 <EPD_SendCommand>
    EPD_SendData((Xstart>>3) & 0xFF);
 8000c06:	f3c7 00c7 	ubfx	r0, r7, #3, #8
 8000c0a:	f7ff ffdc 	bl	8000bc6 <EPD_SendData>
    EPD_SendData((Xend>>3) & 0xFF);
 8000c0e:	f3c6 00c7 	ubfx	r0, r6, #3, #8
 8000c12:	f7ff ffd8 	bl	8000bc6 <EPD_SendData>
	
    EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000c16:	2045      	movs	r0, #69	@ 0x45
 8000c18:	f7ff ffbd 	bl	8000b96 <EPD_SendCommand>
    EPD_SendData(Ystart & 0xFF);
 8000c1c:	b2e8      	uxtb	r0, r5
 8000c1e:	f7ff ffd2 	bl	8000bc6 <EPD_SendData>
    EPD_SendData((Ystart >> 8) & 0xFF);
 8000c22:	0a28      	lsrs	r0, r5, #8
 8000c24:	f7ff ffcf 	bl	8000bc6 <EPD_SendData>
    EPD_SendData(Yend & 0xFF);
 8000c28:	b2e0      	uxtb	r0, r4
 8000c2a:	f7ff ffcc 	bl	8000bc6 <EPD_SendData>
    EPD_SendData((Yend >> 8) & 0xFF);
 8000c2e:	0a20      	lsrs	r0, r4, #8
 8000c30:	f7ff ffc9 	bl	8000bc6 <EPD_SendData>
}
 8000c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c36 <EPD_SetCursor>:
parameter:
	Xstart : X-axis starting position
	Ystart : Y-axis starting position
******************************************************************************/
static void EPD_SetCursor(UWORD Xstart, UWORD Ystart)
{
 8000c36:	b538      	push	{r3, r4, r5, lr}
 8000c38:	4605      	mov	r5, r0
 8000c3a:	460c      	mov	r4, r1
    EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000c3c:	204e      	movs	r0, #78	@ 0x4e
 8000c3e:	f7ff ffaa 	bl	8000b96 <EPD_SendCommand>
    EPD_SendData(Xstart & 0xFF);
 8000c42:	b2e8      	uxtb	r0, r5
 8000c44:	f7ff ffbf 	bl	8000bc6 <EPD_SendData>

    EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000c48:	204f      	movs	r0, #79	@ 0x4f
 8000c4a:	f7ff ffa4 	bl	8000b96 <EPD_SendCommand>
    EPD_SendData(Ystart & 0xFF);
 8000c4e:	b2e0      	uxtb	r0, r4
 8000c50:	f7ff ffb9 	bl	8000bc6 <EPD_SendData>
    EPD_SendData((Ystart >> 8) & 0xFF);
 8000c54:	0a20      	lsrs	r0, r4, #8
 8000c56:	f7ff ffb6 	bl	8000bc6 <EPD_SendData>
}
 8000c5a:	bd38      	pop	{r3, r4, r5, pc}

08000c5c <EPD_ReadBusy>:
{
 8000c5c:	b508      	push	{r3, lr}
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8000c5e:	2120      	movs	r1, #32
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c64:	f003 fac4 	bl	80041f0 <HAL_GPIO_ReadPin>
 8000c68:	b118      	cbz	r0, 8000c72 <EPD_ReadBusy+0x16>
		DEV_Delay_ms(10);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f002 f924 	bl	8002eb8 <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8000c70:	e7f5      	b.n	8000c5e <EPD_ReadBusy+0x2>
	DEV_Delay_ms(10);
 8000c72:	200a      	movs	r0, #10
 8000c74:	f002 f920 	bl	8002eb8 <HAL_Delay>
}
 8000c78:	bd08      	pop	{r3, pc}

08000c7a <EPD_LUT>:
{
 8000c7a:	b538      	push	{r3, r4, r5, lr}
 8000c7c:	4605      	mov	r5, r0
	EPD_SendCommand(0x32);
 8000c7e:	2032      	movs	r0, #50	@ 0x32
 8000c80:	f7ff ff89 	bl	8000b96 <EPD_SendCommand>
	for(count=0; count<153; count++) 
 8000c84:	2400      	movs	r4, #0
 8000c86:	e004      	b.n	8000c92 <EPD_LUT+0x18>
		EPD_SendData(lut[count]); 
 8000c88:	5d28      	ldrb	r0, [r5, r4]
 8000c8a:	f7ff ff9c 	bl	8000bc6 <EPD_SendData>
	for(count=0; count<153; count++) 
 8000c8e:	3401      	adds	r4, #1
 8000c90:	b2e4      	uxtb	r4, r4
 8000c92:	2c98      	cmp	r4, #152	@ 0x98
 8000c94:	d9f8      	bls.n	8000c88 <EPD_LUT+0xe>
	EPD_ReadBusy();
 8000c96:	f7ff ffe1 	bl	8000c5c <EPD_ReadBusy>
}
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}

08000c9c <EPD_2IN13_V2_LUT_by_host>:
{
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	4604      	mov	r4, r0
	EPD_LUT((UBYTE *)lut);			//lut
 8000ca0:	f7ff ffeb 	bl	8000c7a <EPD_LUT>
	EPD_SendCommand(0x3f);
 8000ca4:	203f      	movs	r0, #63	@ 0x3f
 8000ca6:	f7ff ff76 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(*(lut+153));
 8000caa:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 8000cae:	f7ff ff8a 	bl	8000bc6 <EPD_SendData>
	EPD_SendCommand(0x03);	// gate voltage
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f7ff ff6f 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(*(lut+154));
 8000cb8:	f894 009a 	ldrb.w	r0, [r4, #154]	@ 0x9a
 8000cbc:	f7ff ff83 	bl	8000bc6 <EPD_SendData>
	EPD_SendCommand(0x04);	// source voltage
 8000cc0:	2004      	movs	r0, #4
 8000cc2:	f7ff ff68 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(*(lut+155));	// VSH
 8000cc6:	f894 009b 	ldrb.w	r0, [r4, #155]	@ 0x9b
 8000cca:	f7ff ff7c 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(*(lut+156));	// VSH2
 8000cce:	f894 009c 	ldrb.w	r0, [r4, #156]	@ 0x9c
 8000cd2:	f7ff ff78 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(*(lut+157));	// VSL
 8000cd6:	f894 009d 	ldrb.w	r0, [r4, #157]	@ 0x9d
 8000cda:	f7ff ff74 	bl	8000bc6 <EPD_SendData>
	EPD_SendCommand(0x2c);		// VCOM
 8000cde:	202c      	movs	r0, #44	@ 0x2c
 8000ce0:	f7ff ff59 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(*(lut+158));
 8000ce4:	f894 009e 	ldrb.w	r0, [r4, #158]	@ 0x9e
 8000ce8:	f7ff ff6d 	bl	8000bc6 <EPD_SendData>
}
 8000cec:	bd10      	pop	{r4, pc}

08000cee <EPD_TurnOnDisplay>:
{
 8000cee:	b508      	push	{r3, lr}
	EPD_SendCommand(0x22); // Display Update Control
 8000cf0:	2022      	movs	r0, #34	@ 0x22
 8000cf2:	f7ff ff50 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0xc7);
 8000cf6:	20c7      	movs	r0, #199	@ 0xc7
 8000cf8:	f7ff ff65 	bl	8000bc6 <EPD_SendData>
	EPD_SendCommand(0x20); // Activate Display Update Sequence
 8000cfc:	2020      	movs	r0, #32
 8000cfe:	f7ff ff4a 	bl	8000b96 <EPD_SendCommand>
	EPD_ReadBusy();
 8000d02:	f7ff ffab 	bl	8000c5c <EPD_ReadBusy>
}
 8000d06:	bd08      	pop	{r3, pc}

08000d08 <EPD_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_Init(void)
{
 8000d08:	b508      	push	{r3, lr}
	DEV_Digital_Write(EPD_PWR_PIN, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4824      	ldr	r0, [pc, #144]	@ (8000da0 <EPD_Init+0x98>)
 8000d10:	f003 fa75 	bl	80041fe <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8000d14:	2064      	movs	r0, #100	@ 0x64
 8000d16:	f002 f8cf 	bl	8002eb8 <HAL_Delay>
	EPD_Reset();
 8000d1a:	f7ff ff1f 	bl	8000b5c <EPD_Reset>
	DEV_Delay_ms(100);
 8000d1e:	2064      	movs	r0, #100	@ 0x64
 8000d20:	f002 f8ca 	bl	8002eb8 <HAL_Delay>

	EPD_ReadBusy();   
 8000d24:	f7ff ff9a 	bl	8000c5c <EPD_ReadBusy>
	EPD_SendCommand(0x12);  //SWRESET
 8000d28:	2012      	movs	r0, #18
 8000d2a:	f7ff ff34 	bl	8000b96 <EPD_SendCommand>
	EPD_ReadBusy();   
 8000d2e:	f7ff ff95 	bl	8000c5c <EPD_ReadBusy>

	EPD_SendCommand(0x01); //Driver output control      
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff ff2f 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0xf9);
 8000d38:	20f9      	movs	r0, #249	@ 0xf9
 8000d3a:	f7ff ff44 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(0x00);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff ff41 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(0x00);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff ff3e 	bl	8000bc6 <EPD_SendData>

	EPD_SendCommand(0x11); //data entry mode       
 8000d4a:	2011      	movs	r0, #17
 8000d4c:	f7ff ff23 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x03);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f7ff ff38 	bl	8000bc6 <EPD_SendData>

	EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000d56:	23f9      	movs	r3, #249	@ 0xf9
 8000d58:	2279      	movs	r2, #121	@ 0x79
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	f7ff ff4a 	bl	8000bf6 <EPD_SetWindows>
	EPD_SetCursor(0, 0);
 8000d62:	2100      	movs	r1, #0
 8000d64:	4608      	mov	r0, r1
 8000d66:	f7ff ff66 	bl	8000c36 <EPD_SetCursor>
	
	EPD_SendCommand(0x3C); //BorderWavefrom
 8000d6a:	203c      	movs	r0, #60	@ 0x3c
 8000d6c:	f7ff ff13 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x05);	
 8000d70:	2005      	movs	r0, #5
 8000d72:	f7ff ff28 	bl	8000bc6 <EPD_SendData>

	EPD_SendCommand(0x21); //  Display update control
 8000d76:	2021      	movs	r0, #33	@ 0x21
 8000d78:	f7ff ff0d 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x00);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ff22 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(0x80);	
 8000d82:	2080      	movs	r0, #128	@ 0x80
 8000d84:	f7ff ff1f 	bl	8000bc6 <EPD_SendData>

	EPD_SendCommand(0x18); //Read built-in temperature sensor
 8000d88:	2018      	movs	r0, #24
 8000d8a:	f7ff ff04 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x80);	
 8000d8e:	2080      	movs	r0, #128	@ 0x80
 8000d90:	f7ff ff19 	bl	8000bc6 <EPD_SendData>

	EPD_ReadBusy();
 8000d94:	f7ff ff62 	bl	8000c5c <EPD_ReadBusy>
	EPD_2IN13_V2_LUT_by_host(WS_20_30);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <EPD_Init+0x9c>)
 8000d9a:	f7ff ff7f 	bl	8000c9c <EPD_2IN13_V2_LUT_by_host>
}
 8000d9e:	bd08      	pop	{r3, pc}
 8000da0:	48000400 	.word	0x48000400
 8000da4:	20000000 	.word	0x20000000

08000da8 <EPD_Display_Base>:
function :	Refresh a base image
parameter:
	image : Image data	
******************************************************************************/
void EPD_Display_Base(UBYTE *Image)
{  
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	4605      	mov	r5, r0
	UWORD Width, Height;
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
    Height = EPD_HEIGHT;
	
	EPD_SendCommand(0x24);   //Write Black and White image to RAM
 8000dac:	2024      	movs	r0, #36	@ 0x24
 8000dae:	f7ff fef2 	bl	8000b96 <EPD_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000db2:	2600      	movs	r6, #0
 8000db4:	e001      	b.n	8000dba <EPD_Display_Base+0x12>
 8000db6:	3601      	adds	r6, #1
 8000db8:	b2b6      	uxth	r6, r6
 8000dba:	2ef9      	cmp	r6, #249	@ 0xf9
 8000dbc:	d80a      	bhi.n	8000dd4 <EPD_Display_Base+0x2c>
        for (UWORD i = 0; i < Width; i++) {        
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2c0f      	cmp	r4, #15
 8000dc2:	d8f8      	bhi.n	8000db6 <EPD_Display_Base+0xe>
			EPD_SendData(Image[i + j * Width]);
 8000dc4:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 8000dc8:	5ce8      	ldrb	r0, [r5, r3]
 8000dca:	f7ff fefc 	bl	8000bc6 <EPD_SendData>
        for (UWORD i = 0; i < Width; i++) {        
 8000dce:	3401      	adds	r4, #1
 8000dd0:	b2a4      	uxth	r4, r4
 8000dd2:	e7f5      	b.n	8000dc0 <EPD_Display_Base+0x18>
		}
	}
	EPD_SendCommand(0x26);   //Write Black and White image to RAM
 8000dd4:	2026      	movs	r0, #38	@ 0x26
 8000dd6:	f7ff fede 	bl	8000b96 <EPD_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000dda:	2600      	movs	r6, #0
 8000ddc:	e00a      	b.n	8000df4 <EPD_Display_Base+0x4c>
        for (UWORD i = 0; i < Width; i++) {
			EPD_SendData(Image[i + j * Width]);
 8000dde:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 8000de2:	5ce8      	ldrb	r0, [r5, r3]
 8000de4:	f7ff feef 	bl	8000bc6 <EPD_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000de8:	3401      	adds	r4, #1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	2c0f      	cmp	r4, #15
 8000dee:	d9f6      	bls.n	8000dde <EPD_Display_Base+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8000df0:	3601      	adds	r6, #1
 8000df2:	b2b6      	uxth	r6, r6
 8000df4:	2ef9      	cmp	r6, #249	@ 0xf9
 8000df6:	d801      	bhi.n	8000dfc <EPD_Display_Base+0x54>
        for (UWORD i = 0; i < Width; i++) {
 8000df8:	2400      	movs	r4, #0
 8000dfa:	e7f7      	b.n	8000dec <EPD_Display_Base+0x44>
		}
	}
	EPD_TurnOnDisplay();	
 8000dfc:	f7ff ff77 	bl	8000cee <EPD_TurnOnDisplay>
}
 8000e00:	bd70      	pop	{r4, r5, r6, pc}

08000e02 <EPD_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_Sleep(void)
{	
 8000e02:	b508      	push	{r3, lr}
	// EPD_SendCommand(0x22); //enter deep sleep
	// EPD_SendData(0xC3); 
	// EPD_SendCommand(0x20); //enter deep sleep
	EPD_SendCommand(0x10); //enter deep sleep
 8000e04:	2010      	movs	r0, #16
 8000e06:	f7ff fec6 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x01); 
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff fedb 	bl	8000bc6 <EPD_SendData>
	DEV_Delay_ms(100);
 8000e10:	2064      	movs	r0, #100	@ 0x64
 8000e12:	f002 f851 	bl	8002eb8 <HAL_Delay>
}
 8000e16:	bd08      	pop	{r3, pc}

08000e18 <EPD_Exit>:

void EPD_Exit(void)
{
 8000e18:	b508      	push	{r3, lr}
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2140      	movs	r1, #64	@ 0x40
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e22:	f003 f9ec 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2e:	f003 f9e6 	bl	80041fe <HAL_GPIO_WritePin>

    //close 5V
	DEV_Digital_Write(EPD_PWR_PIN, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2102      	movs	r1, #2
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <EPD_Exit+0x34>)
 8000e38:	f003 f9e1 	bl	80041fe <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2108      	movs	r1, #8
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f003 f9db 	bl	80041fe <HAL_GPIO_WritePin>
 8000e48:	bd08      	pop	{r3, pc}
 8000e4a:	bf00      	nop
 8000e4c:	48000400 	.word	0x48000400

08000e50 <DEV_SPI_WriteByte>:
#include "EPD_Conf.h"
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000e50:	b500      	push	{lr}
 8000e52:	b083      	sub	sp, #12
 8000e54:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f10d 0107 	add.w	r1, sp, #7
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <DEV_SPI_WriteByte+0x20>)
 8000e64:	f005 ffa6 	bl	8006db4 <HAL_SPI_Transmit>
}
 8000e68:	b003      	add	sp, #12
 8000e6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e6e:	bf00      	nop
 8000e70:	20001324 	.word	0x20001324

08000e74 <EPD_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void EPD_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000e74:	b430      	push	{r4, r5}
    Paint.Image = NULL;
 8000e76:	4c12      	ldr	r4, [pc, #72]	@ (8000ec0 <EPD_NewImage+0x4c>)
 8000e78:	2500      	movs	r5, #0
 8000e7a:	6025      	str	r5, [r4, #0]
    Paint.Image = image;
 8000e7c:	6020      	str	r0, [r4, #0]

    Paint.WidthMemory = Width;
 8000e7e:	8121      	strh	r1, [r4, #8]
    Paint.HeightMemory = Height;
 8000e80:	8162      	strh	r2, [r4, #10]
    Paint.Color = Color;    
 8000e82:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8000e86:	81a0      	strh	r0, [r4, #12]
	Paint.Scale = 2;
 8000e88:	2002      	movs	r0, #2
 8000e8a:	82e0      	strh	r0, [r4, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000e8c:	f011 0f07 	tst.w	r1, #7
 8000e90:	d10d      	bne.n	8000eae <EPD_NewImage+0x3a>
 8000e92:	08cc      	lsrs	r4, r1, #3
 8000e94:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <EPD_NewImage+0x4c>)
 8000e96:	8244      	strh	r4, [r0, #18]
    Paint.HeightByte = Height;    
 8000e98:	8282      	strh	r2, [r0, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000e9a:	81c3      	strh	r3, [r0, #14]
    Paint.Mirror = MIRROR_NONE;
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	8204      	strh	r4, [r0, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000ea0:	b143      	cbz	r3, 8000eb4 <EPD_NewImage+0x40>
 8000ea2:	2bb4      	cmp	r3, #180	@ 0xb4
 8000ea4:	d006      	beq.n	8000eb4 <EPD_NewImage+0x40>
        Paint.Width = Width;
        Paint.Height = Height;
    } else {
        Paint.Width = Height;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <EPD_NewImage+0x4c>)
 8000ea8:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8000eaa:	80d9      	strh	r1, [r3, #6]
    }
}
 8000eac:	e005      	b.n	8000eba <EPD_NewImage+0x46>
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000eae:	08cc      	lsrs	r4, r1, #3
 8000eb0:	3401      	adds	r4, #1
 8000eb2:	e7ef      	b.n	8000e94 <EPD_NewImage+0x20>
        Paint.Width = Width;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	@ (8000ec0 <EPD_NewImage+0x4c>)
 8000eb6:	8099      	strh	r1, [r3, #4]
        Paint.Height = Height;
 8000eb8:	80da      	strh	r2, [r3, #6]
}
 8000eba:	bc30      	pop	{r4, r5}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000294 	.word	0x20000294

08000ec4 <EPD_SelectImage>:
parameter:
    image : Pointer to the image cache
******************************************************************************/
void EPD_SelectImage(UBYTE *image)
{
    Paint.Image = image;
 8000ec4:	4b01      	ldr	r3, [pc, #4]	@ (8000ecc <EPD_SelectImage+0x8>)
 8000ec6:	6018      	str	r0, [r3, #0]
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000294 	.word	0x20000294

08000ed0 <EPD_SetRotate>:
parameter:
    Rotate : 0,90,180,270
******************************************************************************/
void EPD_SetRotate(UWORD Rotate)
{
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b130      	cbz	r0, 8000ee2 <EPD_SetRotate+0x12>
 8000ed4:	285a      	cmp	r0, #90	@ 0x5a
 8000ed6:	d004      	beq.n	8000ee2 <EPD_SetRotate+0x12>
 8000ed8:	28b4      	cmp	r0, #180	@ 0xb4
 8000eda:	d002      	beq.n	8000ee2 <EPD_SetRotate+0x12>
 8000edc:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8000ee0:	d101      	bne.n	8000ee6 <EPD_SetRotate+0x16>
        Paint.Rotate = Rotate;
 8000ee2:	4a01      	ldr	r2, [pc, #4]	@ (8000ee8 <EPD_SetRotate+0x18>)
 8000ee4:	81d3      	strh	r3, [r2, #14]
    } else {
    }
}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000294 	.word	0x20000294

08000eec <EPD_SetPixel>:
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void EPD_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000eec:	4b58      	ldr	r3, [pc, #352]	@ (8001050 <EPD_SetPixel+0x164>)
 8000eee:	889b      	ldrh	r3, [r3, #4]
 8000ef0:	4283      	cmp	r3, r0
 8000ef2:	f0c0 80ab 	bcc.w	800104c <EPD_SetPixel+0x160>
 8000ef6:	4b56      	ldr	r3, [pc, #344]	@ (8001050 <EPD_SetPixel+0x164>)
 8000ef8:	88db      	ldrh	r3, [r3, #6]
 8000efa:	428b      	cmp	r3, r1
 8000efc:	f0c0 80a6 	bcc.w	800104c <EPD_SetPixel+0x160>
{
 8000f00:	b410      	push	{r4}
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000f02:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f04:	89db      	ldrh	r3, [r3, #14]
 8000f06:	2bb4      	cmp	r3, #180	@ 0xb4
 8000f08:	d016      	beq.n	8000f38 <EPD_SetPixel+0x4c>
 8000f0a:	d80a      	bhi.n	8000f22 <EPD_SetPixel+0x36>
 8000f0c:	b1fb      	cbz	r3, 8000f4e <EPD_SetPixel+0x62>
 8000f0e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000f10:	d13b      	bne.n	8000f8a <EPD_SetPixel+0x9e>
    case 0:
        X = Xpoint;
        Y = Ypoint;  
        break;
    case 90:
        X = Paint.WidthMemory - Ypoint - 1;
 8000f12:	4b4f      	ldr	r3, [pc, #316]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f14:	891b      	ldrh	r3, [r3, #8]
 8000f16:	1a5b      	subs	r3, r3, r1
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
        Y = Xpoint;
 8000f1c:	4601      	mov	r1, r0
        X = Paint.WidthMemory - Ypoint - 1;
 8000f1e:	b298      	uxth	r0, r3
        break;
 8000f20:	e015      	b.n	8000f4e <EPD_SetPixel+0x62>
    switch(Paint.Rotate) {
 8000f22:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000f26:	d130      	bne.n	8000f8a <EPD_SetPixel+0x9e>
        X = Paint.WidthMemory - Xpoint - 1;
        Y = Paint.HeightMemory - Ypoint - 1;
        break;
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
 8000f28:	4b49      	ldr	r3, [pc, #292]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f2a:	895b      	ldrh	r3, [r3, #10]
 8000f2c:	1a1b      	subs	r3, r3, r0
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3b01      	subs	r3, #1
        X = Ypoint;
 8000f32:	4608      	mov	r0, r1
        Y = Paint.HeightMemory - Xpoint - 1;
 8000f34:	b299      	uxth	r1, r3
        break;
 8000f36:	e00a      	b.n	8000f4e <EPD_SetPixel+0x62>
        X = Paint.WidthMemory - Xpoint - 1;
 8000f38:	4c45      	ldr	r4, [pc, #276]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f3a:	8923      	ldrh	r3, [r4, #8]
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b298      	uxth	r0, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 8000f44:	8963      	ldrh	r3, [r4, #10]
 8000f46:	1a5b      	subs	r3, r3, r1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b299      	uxth	r1, r3
    default:
        return;
    }
    
    switch(Paint.Mirror) {
 8000f4e:	4b40      	ldr	r3, [pc, #256]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f50:	8a1b      	ldrh	r3, [r3, #16]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d819      	bhi.n	8000f8a <EPD_SetPixel+0x9e>
 8000f56:	e8df f003 	tbb	[pc, r3]
 8000f5a:	0208      	.short	0x0208
 8000f5c:	221b      	.short	0x221b
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f60:	891b      	ldrh	r3, [r3, #8]
 8000f62:	1a1b      	subs	r3, r3, r0
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3b01      	subs	r3, #1
 8000f68:	b298      	uxth	r0, r3
        break;
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000f6a:	4b39      	ldr	r3, [pc, #228]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f6c:	891b      	ldrh	r3, [r3, #8]
 8000f6e:	4283      	cmp	r3, r0
 8000f70:	d30b      	bcc.n	8000f8a <EPD_SetPixel+0x9e>
 8000f72:	4b37      	ldr	r3, [pc, #220]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f74:	895b      	ldrh	r3, [r3, #10]
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d307      	bcc.n	8000f8a <EPD_SetPixel+0x9e>
        return;
    }
    
    if(Paint.Scale == 2){
 8000f7a:	4b35      	ldr	r3, [pc, #212]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f7c:	8adb      	ldrh	r3, [r3, #22]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d019      	beq.n	8000fb6 <EPD_SetPixel+0xca>
        UBYTE Rdata = Paint.Image[Addr];
        if(Color == BLACK)
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
    }else if(Paint.Scale == 4){
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d030      	beq.n	8000fe8 <EPD_SetPixel+0xfc>
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
        UBYTE Rdata = Paint.Image[Addr];
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
    }else if(Paint.Scale == 7){
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	d048      	beq.n	800101c <EPD_SetPixel+0x130>
		UBYTE Rdata = Paint.Image[Addr];
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8000f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f8e:	4770      	bx	lr
        Y = Paint.HeightMemory - Y - 1;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f92:	895b      	ldrh	r3, [r3, #10]
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b299      	uxth	r1, r3
        break;
 8000f9c:	e7e5      	b.n	8000f6a <EPD_SetPixel+0x7e>
        X = Paint.WidthMemory - X - 1;
 8000f9e:	4c2c      	ldr	r4, [pc, #176]	@ (8001050 <EPD_SetPixel+0x164>)
 8000fa0:	8923      	ldrh	r3, [r4, #8]
 8000fa2:	1a1b      	subs	r3, r3, r0
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b298      	uxth	r0, r3
        Y = Paint.HeightMemory - Y - 1;
 8000faa:	8963      	ldrh	r3, [r4, #10]
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	b299      	uxth	r1, r3
        break;
 8000fb4:	e7d9      	b.n	8000f6a <EPD_SetPixel+0x7e>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8000fb6:	f3c0 03cf 	ubfx	r3, r0, #3, #16
 8000fba:	4c25      	ldr	r4, [pc, #148]	@ (8001050 <EPD_SetPixel+0x164>)
 8000fbc:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 8000fc0:	fb0c 3301 	mla	r3, ip, r1, r3
        UBYTE Rdata = Paint.Image[Addr];
 8000fc4:	6824      	ldr	r4, [r4, #0]
 8000fc6:	5ce1      	ldrb	r1, [r4, r3]
        if(Color == BLACK)
 8000fc8:	b93a      	cbnz	r2, 8000fda <EPD_SetPixel+0xee>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000fca:	f000 0007 	and.w	r0, r0, #7
 8000fce:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8000fd2:	4102      	asrs	r2, r0
 8000fd4:	4011      	ands	r1, r2
 8000fd6:	54e1      	strb	r1, [r4, r3]
 8000fd8:	e7d7      	b.n	8000f8a <EPD_SetPixel+0x9e>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000fda:	f000 0007 	and.w	r0, r0, #7
 8000fde:	2280      	movs	r2, #128	@ 0x80
 8000fe0:	4102      	asrs	r2, r0
 8000fe2:	4311      	orrs	r1, r2
 8000fe4:	54e1      	strb	r1, [r4, r3]
 8000fe6:	e7d0      	b.n	8000f8a <EPD_SetPixel+0x9e>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000fe8:	f3c0 048f 	ubfx	r4, r0, #2, #16
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <EPD_SetPixel+0x164>)
 8000fee:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8000ff2:	fb0c 4101 	mla	r1, ip, r1, r4
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8000ff6:	f002 0203 	and.w	r2, r2, #3
        UBYTE Rdata = Paint.Image[Addr];
 8000ffa:	681c      	ldr	r4, [r3, #0]
 8000ffc:	f814 c001 	ldrb.w	ip, [r4, r1]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8001000:	f000 0003 	and.w	r0, r0, #3
 8001004:	0040      	lsls	r0, r0, #1
 8001006:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 800100a:	4103      	asrs	r3, r0
 800100c:	ea03 030c 	and.w	r3, r3, ip
 8001010:	b25b      	sxtb	r3, r3
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8001012:	0192      	lsls	r2, r2, #6
 8001014:	4102      	asrs	r2, r0
 8001016:	4313      	orrs	r3, r2
 8001018:	5463      	strb	r3, [r4, r1]
 800101a:	e7b6      	b.n	8000f8a <EPD_SetPixel+0x9e>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 800101c:	f3c0 044f 	ubfx	r4, r0, #1, #16
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <EPD_SetPixel+0x164>)
 8001022:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8001026:	fb0c 4101 	mla	r1, ip, r1, r4
		UBYTE Rdata = Paint.Image[Addr];
 800102a:	681c      	ldr	r4, [r3, #0]
 800102c:	f814 c001 	ldrb.w	ip, [r4, r1]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8001030:	f000 0001 	and.w	r0, r0, #1
 8001034:	0080      	lsls	r0, r0, #2
 8001036:	f06f 03f0 	mvn.w	r3, #240	@ 0xf0
 800103a:	4103      	asrs	r3, r0
 800103c:	ea03 030c 	and.w	r3, r3, ip
 8001040:	b25b      	sxtb	r3, r3
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	4102      	asrs	r2, r0
 8001046:	4313      	orrs	r3, r2
 8001048:	5463      	strb	r3, [r4, r1]
 800104a:	e79e      	b.n	8000f8a <EPD_SetPixel+0x9e>
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000294 	.word	0x20000294

08001054 <EPD_Clear>:
parameter:
    Color : Painted colors
******************************************************************************/
void EPD_Clear(UWORD Color)
{
	if(Paint.Scale == 2) {
 8001054:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <EPD_Clear+0xc0>)
 8001056:	8adb      	ldrh	r3, [r3, #22]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d01a      	beq.n	8001092 <EPD_Clear+0x3e>
{
 800105c:	b510      	push	{r4, lr}
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = Color;
			}
		}		
    }else if(Paint.Scale == 4) {
 800105e:	2b04      	cmp	r3, #4
 8001060:	d03a      	beq.n	80010d8 <EPD_Clear+0x84>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
			}
		}		
	}else if(Paint.Scale == 7) {
 8001062:	2b07      	cmp	r3, #7
 8001064:	d053      	beq.n	800110e <EPD_Clear+0xba>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8001066:	bd10      	pop	{r4, pc}
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001068:	fb02 320c 	mla	r2, r2, ip, r3
				Paint.Image[Addr] = Color;
 800106c:	4929      	ldr	r1, [pc, #164]	@ (8001114 <EPD_Clear+0xc0>)
 800106e:	6809      	ldr	r1, [r1, #0]
 8001070:	5488      	strb	r0, [r1, r2]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001072:	3301      	adds	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	4a27      	ldr	r2, [pc, #156]	@ (8001114 <EPD_Clear+0xc0>)
 8001078:	8a52      	ldrh	r2, [r2, #18]
 800107a:	429a      	cmp	r2, r3
 800107c:	d8f4      	bhi.n	8001068 <EPD_Clear+0x14>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800107e:	f10c 0c01 	add.w	ip, ip, #1
 8001082:	fa1f fc8c 	uxth.w	ip, ip
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <EPD_Clear+0xc0>)
 8001088:	8a9b      	ldrh	r3, [r3, #20]
 800108a:	4563      	cmp	r3, ip
 800108c:	d904      	bls.n	8001098 <EPD_Clear+0x44>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800108e:	2300      	movs	r3, #0
 8001090:	e7f1      	b.n	8001076 <EPD_Clear+0x22>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001092:	f04f 0c00 	mov.w	ip, #0
 8001096:	e7f6      	b.n	8001086 <EPD_Clear+0x32>
 8001098:	4770      	bx	lr
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800109a:	fb03 1c0e 	mla	ip, r3, lr, r1
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 800109e:	b242      	sxtb	r2, r0
 80010a0:	0113      	lsls	r3, r2, #4
 80010a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	4c19      	ldr	r4, [pc, #100]	@ (8001114 <EPD_Clear+0xc0>)
 80010b0:	6824      	ldr	r4, [r4, #0]
 80010b2:	431a      	orrs	r2, r3
 80010b4:	f804 200c 	strb.w	r2, [r4, ip]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80010b8:	3101      	adds	r1, #1
 80010ba:	b289      	uxth	r1, r1
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <EPD_Clear+0xc0>)
 80010be:	8a5b      	ldrh	r3, [r3, #18]
 80010c0:	428b      	cmp	r3, r1
 80010c2:	d8ea      	bhi.n	800109a <EPD_Clear+0x46>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80010c4:	f10e 0e01 	add.w	lr, lr, #1
 80010c8:	fa1f fe8e 	uxth.w	lr, lr
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <EPD_Clear+0xc0>)
 80010ce:	8a9b      	ldrh	r3, [r3, #20]
 80010d0:	4573      	cmp	r3, lr
 80010d2:	d9c8      	bls.n	8001066 <EPD_Clear+0x12>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80010d4:	2100      	movs	r1, #0
 80010d6:	e7f1      	b.n	80010bc <EPD_Clear+0x68>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80010d8:	f04f 0e00 	mov.w	lr, #0
 80010dc:	e7f6      	b.n	80010cc <EPD_Clear+0x78>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80010de:	f10c 0c01 	add.w	ip, ip, #1
 80010e2:	fa1f fc8c 	uxth.w	ip, ip
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <EPD_Clear+0xc0>)
 80010e8:	8a9b      	ldrh	r3, [r3, #20]
 80010ea:	4563      	cmp	r3, ip
 80010ec:	d9bb      	bls.n	8001066 <EPD_Clear+0x12>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80010ee:	2200      	movs	r2, #0
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <EPD_Clear+0xc0>)
 80010f2:	8a5b      	ldrh	r3, [r3, #18]
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d9f2      	bls.n	80010de <EPD_Clear+0x8a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80010f8:	fb03 210c 	mla	r1, r3, ip, r2
				Paint.Image[Addr] = (Color<<4)|Color;
 80010fc:	b243      	sxtb	r3, r0
 80010fe:	4c05      	ldr	r4, [pc, #20]	@ (8001114 <EPD_Clear+0xc0>)
 8001100:	6824      	ldr	r4, [r4, #0]
 8001102:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 8001106:	5463      	strb	r3, [r4, r1]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001108:	3201      	adds	r2, #1
 800110a:	b292      	uxth	r2, r2
 800110c:	e7f0      	b.n	80010f0 <EPD_Clear+0x9c>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800110e:	f04f 0c00 	mov.w	ip, #0
 8001112:	e7e8      	b.n	80010e6 <EPD_Clear+0x92>
 8001114:	20000294 	.word	0x20000294

08001118 <EPD_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void EPD_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8001118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800111c:	461d      	mov	r5, r3
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <EPD_DrawPoint+0xbc>)
 8001120:	889b      	ldrh	r3, [r3, #4]
 8001122:	4283      	cmp	r3, r0
 8001124:	d353      	bcc.n	80011ce <EPD_DrawPoint+0xb6>
 8001126:	4606      	mov	r6, r0
 8001128:	460f      	mov	r7, r1
 800112a:	4690      	mov	r8, r2
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <EPD_DrawPoint+0xbc>)
 800112e:	88db      	ldrh	r3, [r3, #6]
 8001130:	428b      	cmp	r3, r1
 8001132:	d34c      	bcc.n	80011ce <EPD_DrawPoint+0xb6>
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8001134:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8001138:	2b01      	cmp	r3, #1
 800113a:	d029      	beq.n	8001190 <EPD_DrawPoint+0x78>
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                EPD_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800113c:	f04f 0900 	mov.w	r9, #0
 8001140:	e040      	b.n	80011c4 <EPD_DrawPoint+0xac>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001142:	3401      	adds	r4, #1
 8001144:	b224      	sxth	r4, r4
 8001146:	46a2      	mov	sl, r4
 8001148:	ea4f 0945 	mov.w	r9, r5, lsl #1
 800114c:	f109 39ff 	add.w	r9, r9, #4294967295
 8001150:	454c      	cmp	r4, r9
 8001152:	da3c      	bge.n	80011ce <EPD_DrawPoint+0xb6>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001154:	2300      	movs	r3, #0
 8001156:	454b      	cmp	r3, r9
 8001158:	daf3      	bge.n	8001142 <EPD_DrawPoint+0x2a>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800115a:	eb06 020a 	add.w	r2, r6, sl
 800115e:	1b52      	subs	r2, r2, r5
 8001160:	2a00      	cmp	r2, #0
 8001162:	dbee      	blt.n	8001142 <EPD_DrawPoint+0x2a>
 8001164:	18fa      	adds	r2, r7, r3
 8001166:	1b52      	subs	r2, r2, r5
 8001168:	2a00      	cmp	r2, #0
 800116a:	dbea      	blt.n	8001142 <EPD_DrawPoint+0x2a>
                EPD_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800116c:	1930      	adds	r0, r6, r4
 800116e:	b280      	uxth	r0, r0
 8001170:	fa1f fb83 	uxth.w	fp, r3
 8001174:	eb0b 0107 	add.w	r1, fp, r7
 8001178:	b289      	uxth	r1, r1
 800117a:	1b49      	subs	r1, r1, r5
 800117c:	1b40      	subs	r0, r0, r5
 800117e:	4642      	mov	r2, r8
 8001180:	b289      	uxth	r1, r1
 8001182:	b280      	uxth	r0, r0
 8001184:	f7ff feb2 	bl	8000eec <EPD_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001188:	f10b 0301 	add.w	r3, fp, #1
 800118c:	b21b      	sxth	r3, r3
 800118e:	e7e2      	b.n	8001156 <EPD_DrawPoint+0x3e>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001190:	2400      	movs	r4, #0
 8001192:	e7d8      	b.n	8001146 <EPD_DrawPoint+0x2e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
                EPD_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001194:	eb06 0009 	add.w	r0, r6, r9
 8001198:	b280      	uxth	r0, r0
 800119a:	fa1f f48c 	uxth.w	r4, ip
 800119e:	19e1      	adds	r1, r4, r7
 80011a0:	b289      	uxth	r1, r1
 80011a2:	3901      	subs	r1, #1
 80011a4:	3801      	subs	r0, #1
 80011a6:	4642      	mov	r2, r8
 80011a8:	b289      	uxth	r1, r1
 80011aa:	b280      	uxth	r0, r0
 80011ac:	f7ff fe9e 	bl	8000eec <EPD_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80011b0:	f104 0c01 	add.w	ip, r4, #1
 80011b4:	fa0f fc8c 	sxth.w	ip, ip
 80011b8:	45ac      	cmp	ip, r5
 80011ba:	dbeb      	blt.n	8001194 <EPD_DrawPoint+0x7c>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80011bc:	f109 0901 	add.w	r9, r9, #1
 80011c0:	fa0f f989 	sxth.w	r9, r9
 80011c4:	45a9      	cmp	r9, r5
 80011c6:	da02      	bge.n	80011ce <EPD_DrawPoint+0xb6>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80011c8:	f04f 0c00 	mov.w	ip, #0
 80011cc:	e7f4      	b.n	80011b8 <EPD_DrawPoint+0xa0>
            }
        }
    }
}
 80011ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d2:	bf00      	nop
 80011d4:	20000294 	.word	0x20000294

080011d8 <EPD_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void EPD_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011dc:	b08b      	sub	sp, #44	@ 0x2c
 80011de:	4605      	mov	r5, r0
 80011e0:	460e      	mov	r6, r1
 80011e2:	9206      	str	r2, [sp, #24]
 80011e4:	461c      	mov	r4, r3
 80011e6:	9305      	str	r3, [sp, #20]
 80011e8:	f8bd 1050 	ldrh.w	r1, [sp, #80]	@ 0x50
 80011ec:	9103      	str	r1, [sp, #12]
 80011ee:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 80011f2:	f89d a058 	ldrb.w	sl, [sp, #88]	@ 0x58
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80011f6:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <EPD_DrawLine+0xfc>)
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	4283      	cmp	r3, r0
 80011fc:	d366      	bcc.n	80012cc <EPD_DrawLine+0xf4>
 80011fe:	4610      	mov	r0, r2
 8001200:	4a34      	ldr	r2, [pc, #208]	@ (80012d4 <EPD_DrawLine+0xfc>)
 8001202:	88d2      	ldrh	r2, [r2, #6]
 8001204:	42b2      	cmp	r2, r6
 8001206:	d361      	bcc.n	80012cc <EPD_DrawLine+0xf4>
 8001208:	4283      	cmp	r3, r0
 800120a:	d35f      	bcc.n	80012cc <EPD_DrawLine+0xf4>
        Xend > Paint.Width || Yend > Paint.Height) {
 800120c:	42a2      	cmp	r2, r4
 800120e:	d35d      	bcc.n	80012cc <EPD_DrawLine+0xf4>
        return;
    }

    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001210:	eba0 0905 	sub.w	r9, r0, r5
 8001214:	f1b9 0f00 	cmp.w	r9, #0
 8001218:	bfb8      	it	lt
 800121a:	f1c9 0900 	rsblt	r9, r9, #0
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800121e:	1ba3      	subs	r3, r4, r6
 8001220:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001224:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001228:	9107      	str	r1, [sp, #28]
 800122a:	424b      	negs	r3, r1
 800122c:	9304      	str	r3, [sp, #16]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800122e:	4285      	cmp	r5, r0
 8001230:	d20b      	bcs.n	800124a <EPD_DrawLine+0x72>
 8001232:	2301      	movs	r3, #1
 8001234:	9308      	str	r3, [sp, #32]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001236:	9b05      	ldr	r3, [sp, #20]
 8001238:	429e      	cmp	r6, r3
 800123a:	d20a      	bcs.n	8001252 <EPD_DrawLine+0x7a>
 800123c:	2301      	movs	r3, #1
 800123e:	9309      	str	r3, [sp, #36]	@ 0x24

    //Cumulative error
    int Esp = dx + dy;
 8001240:	9b07      	ldr	r3, [sp, #28]
 8001242:	eba9 0803 	sub.w	r8, r9, r3
    char Dotted_Len = 0;
 8001246:	2400      	movs	r4, #0
 8001248:	e026      	b.n	8001298 <EPD_DrawLine+0xc0>
    int XAddway = Xstart < Xend ? 1 : -1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	9308      	str	r3, [sp, #32]
 8001250:	e7f1      	b.n	8001236 <EPD_DrawLine+0x5e>
    int YAddway = Ystart < Yend ? 1 : -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9309      	str	r3, [sp, #36]	@ 0x24
 8001258:	e7f2      	b.n	8001240 <EPD_DrawLine+0x68>
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
            //Debug("LINE_DOTTED\r\n");
            EPD_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
            Dotted_Len = 0;
        } else {
            EPD_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800125a:	2301      	movs	r3, #1
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	465b      	mov	r3, fp
 8001260:	9a03      	ldr	r2, [sp, #12]
 8001262:	4631      	mov	r1, r6
 8001264:	4628      	mov	r0, r5
 8001266:	f7ff ff57 	bl	8001118 <EPD_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800126a:	9b04      	ldr	r3, [sp, #16]
 800126c:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
 8001270:	dc08      	bgt.n	8001284 <EPD_DrawLine+0xac>
            if (Xpoint == Xend)
 8001272:	9b06      	ldr	r3, [sp, #24]
 8001274:	429d      	cmp	r5, r3
 8001276:	d029      	beq.n	80012cc <EPD_DrawLine+0xf4>
                break;
            Esp += dy;
 8001278:	9b07      	ldr	r3, [sp, #28]
 800127a:	eba8 0803 	sub.w	r8, r8, r3
            Xpoint += XAddway;
 800127e:	9b08      	ldr	r3, [sp, #32]
 8001280:	441d      	add	r5, r3
 8001282:	b2ad      	uxth	r5, r5
        }
        if (2 * Esp <= dx) {
 8001284:	ebb9 0f48 	cmp.w	r9, r8, lsl #1
 8001288:	db06      	blt.n	8001298 <EPD_DrawLine+0xc0>
            if (Ypoint == Yend)
 800128a:	9b05      	ldr	r3, [sp, #20]
 800128c:	429e      	cmp	r6, r3
 800128e:	d01d      	beq.n	80012cc <EPD_DrawLine+0xf4>
                break;
            Esp += dx;
 8001290:	44c8      	add	r8, r9
            Ypoint += YAddway;
 8001292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001294:	441e      	add	r6, r3
 8001296:	b2b6      	uxth	r6, r6
        Dotted_Len++;
 8001298:	3401      	adds	r4, #1
 800129a:	b2e4      	uxtb	r4, r4
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800129c:	f1ba 0f01 	cmp.w	sl, #1
 80012a0:	d1db      	bne.n	800125a <EPD_DrawLine+0x82>
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <EPD_DrawLine+0x100>)
 80012a4:	fba3 2304 	umull	r2, r3, r3, r4
 80012a8:	f023 0701 	bic.w	r7, r3, #1
 80012ac:	eb07 0753 	add.w	r7, r7, r3, lsr #1
 80012b0:	1be7      	subs	r7, r4, r7
 80012b2:	f017 07ff 	ands.w	r7, r7, #255	@ 0xff
 80012b6:	d1d0      	bne.n	800125a <EPD_DrawLine+0x82>
            EPD_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80012b8:	2301      	movs	r3, #1
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	465b      	mov	r3, fp
 80012be:	22ff      	movs	r2, #255	@ 0xff
 80012c0:	4631      	mov	r1, r6
 80012c2:	4628      	mov	r0, r5
 80012c4:	f7ff ff28 	bl	8001118 <EPD_DrawPoint>
            Dotted_Len = 0;
 80012c8:	463c      	mov	r4, r7
 80012ca:	e7ce      	b.n	800126a <EPD_DrawLine+0x92>
        }
    }
}
 80012cc:	b00b      	add	sp, #44	@ 0x2c
 80012ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d2:	bf00      	nop
 80012d4:	20000294 	.word	0x20000294
 80012d8:	aaaaaaab 	.word	0xaaaaaaab

080012dc <EPD_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void EPD_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80012dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e0:	461f      	mov	r7, r3
 80012e2:	f8bd b028 	ldrh.w	fp, [sp, #40]	@ 0x28
 80012e6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	@ 0x2c
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80012ea:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <EPD_DrawChar+0xd0>)
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	4283      	cmp	r3, r0
 80012f0:	d359      	bcc.n	80013a6 <EPD_DrawChar+0xca>
 80012f2:	4681      	mov	r9, r0
 80012f4:	468a      	mov	sl, r1
 80012f6:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <EPD_DrawChar+0xd0>)
 80012f8:	88db      	ldrh	r3, [r3, #6]
 80012fa:	428b      	cmp	r3, r1
 80012fc:	d353      	bcc.n	80013a6 <EPD_DrawChar+0xca>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80012fe:	3a20      	subs	r2, #32
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	88b9      	ldrh	r1, [r7, #4]
 8001308:	f011 0207 	ands.w	r2, r1, #7
 800130c:	bf18      	it	ne
 800130e:	2201      	movne	r2, #1
 8001310:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001314:	683d      	ldr	r5, [r7, #0]
 8001316:	fb02 5503 	mla	r5, r2, r3, r5

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800131a:	2600      	movs	r6, #0
 800131c:	e03e      	b.n	800139c <EPD_DrawChar+0xc0>
        for (Column = 0; Column < Font->Width; Column ++ ) {

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 800131e:	782a      	ldrb	r2, [r5, #0]
 8001320:	f004 0107 	and.w	r1, r4, #7
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	410b      	asrs	r3, r1
 8001328:	421a      	tst	r2, r3
 800132a:	d012      	beq.n	8001352 <EPD_DrawChar+0x76>
                    EPD_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800132c:	eb06 010a 	add.w	r1, r6, sl
 8001330:	eb04 0009 	add.w	r0, r4, r9
 8001334:	465a      	mov	r2, fp
 8001336:	b289      	uxth	r1, r1
 8001338:	b280      	uxth	r0, r0
 800133a:	f7ff fdd7 	bl	8000eec <EPD_SetPixel>
 800133e:	e008      	b.n	8001352 <EPD_DrawChar+0x76>
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
                    EPD_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
                    // EPD_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    EPD_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001340:	eb06 010a 	add.w	r1, r6, sl
 8001344:	eb04 0009 	add.w	r0, r4, r9
 8001348:	4642      	mov	r2, r8
 800134a:	b289      	uxth	r1, r1
 800134c:	b280      	uxth	r0, r0
 800134e:	f7ff fdcd 	bl	8000eec <EPD_SetPixel>
                    // EPD_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001352:	f004 0307 	and.w	r3, r4, #7
 8001356:	2b07      	cmp	r3, #7
 8001358:	d018      	beq.n	800138c <EPD_DrawChar+0xb0>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800135a:	3401      	adds	r4, #1
 800135c:	b2a4      	uxth	r4, r4
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	42a3      	cmp	r3, r4
 8001362:	d915      	bls.n	8001390 <EPD_DrawChar+0xb4>
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001364:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8001368:	d0d9      	beq.n	800131e <EPD_DrawChar+0x42>
                if (*ptr & (0x80 >> (Column % 8))) {
 800136a:	782a      	ldrb	r2, [r5, #0]
 800136c:	f004 0107 	and.w	r1, r4, #7
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	410b      	asrs	r3, r1
 8001374:	421a      	tst	r2, r3
 8001376:	d0e3      	beq.n	8001340 <EPD_DrawChar+0x64>
                    EPD_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001378:	eb06 010a 	add.w	r1, r6, sl
 800137c:	eb04 0009 	add.w	r0, r4, r9
 8001380:	465a      	mov	r2, fp
 8001382:	b289      	uxth	r1, r1
 8001384:	b280      	uxth	r0, r0
 8001386:	f7ff fdb1 	bl	8000eec <EPD_SetPixel>
 800138a:	e7e2      	b.n	8001352 <EPD_DrawChar+0x76>
                ptr++;
 800138c:	3501      	adds	r5, #1
 800138e:	e7e4      	b.n	800135a <EPD_DrawChar+0x7e>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001390:	f013 0f07 	tst.w	r3, #7
 8001394:	d000      	beq.n	8001398 <EPD_DrawChar+0xbc>
            ptr++;
 8001396:	3501      	adds	r5, #1
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001398:	3601      	adds	r6, #1
 800139a:	b2b6      	uxth	r6, r6
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	42b3      	cmp	r3, r6
 80013a0:	d901      	bls.n	80013a6 <EPD_DrawChar+0xca>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80013a2:	2400      	movs	r4, #0
 80013a4:	e7db      	b.n	800135e <EPD_DrawChar+0x82>
    }// Write all
}
 80013a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013aa:	bf00      	nop
 80013ac:	20000294 	.word	0x20000294

080013b0 <EPD_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void EPD_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80013b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b4:	b083      	sub	sp, #12
 80013b6:	461c      	mov	r4, r3
 80013b8:	f8bd a030 	ldrh.w	sl, [sp, #48]	@ 0x30
 80013bc:	f8bd b034 	ldrh.w	fp, [sp, #52]	@ 0x34
    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <EPD_DrawString_EN+0x78>)
 80013c2:	889b      	ldrh	r3, [r3, #4]
 80013c4:	4283      	cmp	r3, r0
 80013c6:	d32b      	bcc.n	8001420 <EPD_DrawString_EN+0x70>
 80013c8:	4680      	mov	r8, r0
 80013ca:	4689      	mov	r9, r1
 80013cc:	4616      	mov	r6, r2
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <EPD_DrawString_EN+0x78>)
 80013d0:	88db      	ldrh	r3, [r3, #6]
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d324      	bcc.n	8001420 <EPD_DrawString_EN+0x70>
    UWORD Ypoint = Ystart;
 80013d6:	460f      	mov	r7, r1
    UWORD Xpoint = Xstart;
 80013d8:	4605      	mov	r5, r0
 80013da:	e00c      	b.n	80013f6 <EPD_DrawString_EN+0x46>
        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
            Xpoint = Xstart;
            Ypoint = Ystart;
        }
        EPD_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80013dc:	f8cd a004 	str.w	sl, [sp, #4]
 80013e0:	f8cd b000 	str.w	fp, [sp]
 80013e4:	4623      	mov	r3, r4
 80013e6:	4639      	mov	r1, r7
 80013e8:	4628      	mov	r0, r5
 80013ea:	f7ff ff77 	bl	80012dc <EPD_DrawChar>

        //The next character of the address
        pString ++;
 80013ee:	3601      	adds	r6, #1

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80013f0:	88a3      	ldrh	r3, [r4, #4]
 80013f2:	442b      	add	r3, r5
 80013f4:	b29d      	uxth	r5, r3
    while (* pString != '\0') {
 80013f6:	7832      	ldrb	r2, [r6, #0]
 80013f8:	b192      	cbz	r2, 8001420 <EPD_DrawString_EN+0x70>
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80013fa:	88a3      	ldrh	r3, [r4, #4]
 80013fc:	442b      	add	r3, r5
 80013fe:	490a      	ldr	r1, [pc, #40]	@ (8001428 <EPD_DrawString_EN+0x78>)
 8001400:	8889      	ldrh	r1, [r1, #4]
 8001402:	428b      	cmp	r3, r1
 8001404:	dd03      	ble.n	800140e <EPD_DrawString_EN+0x5e>
            Ypoint += Font->Height;
 8001406:	88e3      	ldrh	r3, [r4, #6]
 8001408:	443b      	add	r3, r7
 800140a:	b29f      	uxth	r7, r3
            Xpoint = Xstart;
 800140c:	4645      	mov	r5, r8
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800140e:	88e3      	ldrh	r3, [r4, #6]
 8001410:	443b      	add	r3, r7
 8001412:	4905      	ldr	r1, [pc, #20]	@ (8001428 <EPD_DrawString_EN+0x78>)
 8001414:	88c9      	ldrh	r1, [r1, #6]
 8001416:	428b      	cmp	r3, r1
 8001418:	dde0      	ble.n	80013dc <EPD_DrawString_EN+0x2c>
            Ypoint = Ystart;
 800141a:	464f      	mov	r7, r9
            Xpoint = Xstart;
 800141c:	4645      	mov	r5, r8
 800141e:	e7dd      	b.n	80013dc <EPD_DrawString_EN+0x2c>
    }
}
 8001420:	b003      	add	sp, #12
 8001422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001426:	bf00      	nop
 8001428:	20000294 	.word	0x20000294

0800142c <EPD_DrawDate>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void EPD_DrawDate(UWORD Xstart, UWORD Ystart, EPD_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 800142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001430:	b08b      	sub	sp, #44	@ 0x2c
 8001432:	4606      	mov	r6, r0
 8001434:	460f      	mov	r7, r1
 8001436:	4615      	mov	r5, r2
 8001438:	4698      	mov	r8, r3
 800143a:	f8bd a050 	ldrh.w	sl, [sp, #80]	@ 0x50
 800143e:	f8bd 9054 	ldrh.w	r9, [sp, #84]	@ 0x54
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8001442:	4a5e      	ldr	r2, [pc, #376]	@ (80015bc <EPD_DrawDate+0x190>)
 8001444:	ac07      	add	r4, sp, #28
 8001446:	ca07      	ldmia	r2, {r0, r1, r2}
 8001448:	c403      	stmia	r4!, {r0, r1}
 800144a:	8022      	strh	r2, [r4, #0]

    UWORD Dx = Font->Width;
 800144c:	889c      	ldrh	r4, [r3, #4]

    //Write data into the cache
    EPD_DrawChar(Xstart                           , Ystart, value[pTime->Day / 10], Font, Color_Background, Color_Foreground);
 800144e:	9503      	str	r5, [sp, #12]
 8001450:	78ea      	ldrb	r2, [r5, #3]
 8001452:	4d5b      	ldr	r5, [pc, #364]	@ (80015c0 <EPD_DrawDate+0x194>)
 8001454:	fba5 1202 	umull	r1, r2, r5, r2
 8001458:	a90a      	add	r1, sp, #40	@ 0x28
 800145a:	eb01 02d2 	add.w	r2, r1, r2, lsr #3
 800145e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001462:	f8cd a004 	str.w	sl, [sp, #4]
 8001466:	f8cd 9000 	str.w	r9, [sp]
 800146a:	4639      	mov	r1, r7
 800146c:	4630      	mov	r0, r6
 800146e:	f7ff ff35 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Day % 10], Font, Color_Background, Color_Foreground);
 8001472:	eb04 0b06 	add.w	fp, r4, r6
 8001476:	fa1f fb8b 	uxth.w	fp, fp
 800147a:	9a03      	ldr	r2, [sp, #12]
 800147c:	78d3      	ldrb	r3, [r2, #3]
 800147e:	fba5 1203 	umull	r1, r2, r5, r3
 8001482:	08d2      	lsrs	r2, r2, #3
 8001484:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001488:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800148c:	a90a      	add	r1, sp, #40	@ 0x28
 800148e:	fa51 f383 	uxtab	r3, r1, r3
 8001492:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001496:	f8cd a004 	str.w	sl, [sp, #4]
 800149a:	f8cd 9000 	str.w	r9, [sp]
 800149e:	4643      	mov	r3, r8
 80014a0:	4639      	mov	r1, r7
 80014a2:	4658      	mov	r0, fp
 80014a4:	f7ff ff1a 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, '.'                    , Font, Color_Background, Color_Foreground);
 80014a8:	08a3      	lsrs	r3, r4, #2
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	eb0b 0094 	add.w	r0, fp, r4, lsr #2
 80014b0:	ea4f 0b54 	mov.w	fp, r4, lsr #1
 80014b4:	fa1b f080 	uxtah	r0, fp, r0
 80014b8:	f8cd a004 	str.w	sl, [sp, #4]
 80014bc:	f8cd 9000 	str.w	r9, [sp]
 80014c0:	4643      	mov	r3, r8
 80014c2:	222e      	movs	r2, #46	@ 0x2e
 80014c4:	4639      	mov	r1, r7
 80014c6:	b280      	uxth	r0, r0
 80014c8:	f7ff ff08 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Month / 10] , Font, Color_Background, Color_Foreground);
 80014cc:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80014d0:	9a03      	ldr	r2, [sp, #12]
 80014d2:	7893      	ldrb	r3, [r2, #2]
 80014d4:	fba5 2303 	umull	r2, r3, r5, r3
 80014d8:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80014dc:	eb0c 03d3 	add.w	r3, ip, r3, lsr #3
 80014e0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80014e4:	fa1b f080 	uxtah	r0, fp, r0
 80014e8:	f8cd a004 	str.w	sl, [sp, #4]
 80014ec:	f8cd 9000 	str.w	r9, [sp]
 80014f0:	4643      	mov	r3, r8
 80014f2:	4639      	mov	r1, r7
 80014f4:	b280      	uxth	r0, r0
 80014f6:	f7ff fef1 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Month % 10] , Font, Color_Background, Color_Foreground);
 80014fa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80014fe:	9304      	str	r3, [sp, #16]
 8001500:	18f0      	adds	r0, r6, r3
 8001502:	9a03      	ldr	r2, [sp, #12]
 8001504:	7893      	ldrb	r3, [r2, #2]
 8001506:	fba5 1203 	umull	r1, r2, r5, r3
 800150a:	08d2      	lsrs	r2, r2, #3
 800150c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001510:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8001514:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8001518:	fa5c f383 	uxtab	r3, ip, r3
 800151c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001520:	fa1b f080 	uxtah	r0, fp, r0
 8001524:	f8cd a004 	str.w	sl, [sp, #4]
 8001528:	f8cd 9000 	str.w	r9, [sp]
 800152c:	4643      	mov	r3, r8
 800152e:	4639      	mov	r1, r7
 8001530:	b280      	uxth	r0, r0
 8001532:	f7ff fed3 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, '.'                    , Font, Color_Background, Color_Foreground);
 8001536:	eb06 0084 	add.w	r0, r6, r4, lsl #2
 800153a:	fa1b f080 	uxtah	r0, fp, r0
 800153e:	b280      	uxth	r0, r0
 8001540:	9905      	ldr	r1, [sp, #20]
 8001542:	1a40      	subs	r0, r0, r1
 8001544:	f8cd a004 	str.w	sl, [sp, #4]
 8001548:	f8cd 9000 	str.w	r9, [sp]
 800154c:	4643      	mov	r3, r8
 800154e:	222e      	movs	r2, #46	@ 0x2e
 8001550:	4639      	mov	r1, r7
 8001552:	b280      	uxth	r0, r0
 8001554:	f7ff fec2 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Year / 10] , Font, Color_Background, Color_Foreground);
 8001558:	9a03      	ldr	r2, [sp, #12]
 800155a:	8813      	ldrh	r3, [r2, #0]
 800155c:	fba5 2303 	umull	r2, r3, r5, r3
 8001560:	a90a      	add	r1, sp, #40	@ 0x28
 8001562:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8001566:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800156a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800156e:	1930      	adds	r0, r6, r4
 8001570:	f8cd a004 	str.w	sl, [sp, #4]
 8001574:	f8cd 9000 	str.w	r9, [sp]
 8001578:	4643      	mov	r3, r8
 800157a:	4639      	mov	r1, r7
 800157c:	b280      	uxth	r0, r0
 800157e:	f7ff fead 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Year % 10] , Font, Color_Background, Color_Foreground);
 8001582:	9a03      	ldr	r2, [sp, #12]
 8001584:	8813      	ldrh	r3, [r2, #0]
 8001586:	fba5 2503 	umull	r2, r5, r5, r3
 800158a:	08ed      	lsrs	r5, r5, #3
 800158c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001590:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 8001594:	aa0a      	add	r2, sp, #40	@ 0x28
 8001596:	fa12 f383 	uxtah	r3, r2, r3
 800159a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800159e:	9b04      	ldr	r3, [sp, #16]
 80015a0:	eb06 0043 	add.w	r0, r6, r3, lsl #1
 80015a4:	f8cd a004 	str.w	sl, [sp, #4]
 80015a8:	f8cd 9000 	str.w	r9, [sp]
 80015ac:	4643      	mov	r3, r8
 80015ae:	4639      	mov	r1, r7
 80015b0:	b280      	uxth	r0, r0
 80015b2:	f7ff fe93 	bl	80012dc <EPD_DrawChar>
}
 80015b6:	b00b      	add	sp, #44	@ 0x2c
 80015b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015bc:	0800be6c 	.word	0x0800be6c
 80015c0:	cccccccd 	.word	0xcccccccd

080015c4 <EPD_DrawBMP>:
						(unsigned char)image_buffer[Addr+ (Paint.HeightByte)*Paint.WidthByte*(Region - 1)];
				}
		}
}

void EPD_DrawBMP(uint8_t xs, uint8_t ys, uint8_t xl, uint8_t yl, uint8_t bmp[xl][yl]){
 80015c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015c8:	4682      	mov	sl, r0
 80015ca:	4689      	mov	r9, r1
 80015cc:	4617      	mov	r7, r2
 80015ce:	461e      	mov	r6, r3
 80015d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    for (uint8_t y = 0; y < yl; y++){
 80015d4:	2500      	movs	r5, #0
 80015d6:	e012      	b.n	80015fe <EPD_DrawBMP+0x3a>
      for (uint8_t x = 0; x < xl; x++){
        if(bmp[x][y] == 0){
          EPD_SetPixel(x+xs, y+ys, BLACK);
 80015d8:	2200      	movs	r2, #0
 80015da:	eb05 0109 	add.w	r1, r5, r9
 80015de:	eb04 000a 	add.w	r0, r4, sl
 80015e2:	f7ff fc83 	bl	8000eec <EPD_SetPixel>
      for (uint8_t x = 0; x < xl; x++){
 80015e6:	3401      	adds	r4, #1
 80015e8:	b2e4      	uxtb	r4, r4
 80015ea:	42bc      	cmp	r4, r7
 80015ec:	d205      	bcs.n	80015fa <EPD_DrawBMP+0x36>
        if(bmp[x][y] == 0){
 80015ee:	fb06 8304 	mla	r3, r6, r4, r8
 80015f2:	5d5b      	ldrb	r3, [r3, r5]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f6      	bne.n	80015e6 <EPD_DrawBMP+0x22>
 80015f8:	e7ee      	b.n	80015d8 <EPD_DrawBMP+0x14>
    for (uint8_t y = 0; y < yl; y++){
 80015fa:	3501      	adds	r5, #1
 80015fc:	b2ed      	uxtb	r5, r5
 80015fe:	42b5      	cmp	r5, r6
 8001600:	d201      	bcs.n	8001606 <EPD_DrawBMP+0x42>
      for (uint8_t x = 0; x < xl; x++){
 8001602:	2400      	movs	r4, #0
 8001604:	e7f1      	b.n	80015ea <EPD_DrawBMP+0x26>
        }
      }
    }
  }
 8001606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800160c <UDISK_init>:
uint16_t last_pointer __attribute__((section(".ram2_bss")));
uint16_t length __attribute__((section(".ram2_bss")));
bool is_first_writing __attribute__((section(".ram2_bss")));
uint32_t data_retention_code __attribute__((section(".ram2_bss")));

void UDISK_init(){
 800160c:	b508      	push	{r3, lr}
    is_first_writing = true;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <UDISK_init+0x24>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
    last_pointer = 0;
 8001614:	2100      	movs	r1, #0
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <UDISK_init+0x28>)
 8001618:	8019      	strh	r1, [r3, #0]
    length = 0;
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <UDISK_init+0x2c>)
 800161c:	8019      	strh	r1, [r3, #0]
    data_retention_code = 0xAAFF55FF;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <UDISK_init+0x30>)
 8001620:	4a07      	ldr	r2, [pc, #28]	@ (8001640 <UDISK_init+0x34>)
 8001622:	601a      	str	r2, [r3, #0]
    memset(USBDisk, 0x00, 4080);
 8001624:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <UDISK_init+0x38>)
 800162a:	f008 fbd7 	bl	8009ddc <memset>
}
 800162e:	bd08      	pop	{r3, pc}
 8001630:	10000004 	.word	0x10000004
 8001634:	10000008 	.word	0x10000008
 8001638:	10000006 	.word	0x10000006
 800163c:	10000000 	.word	0x10000000
 8001640:	aaff55ff 	.word	0xaaff55ff
 8001644:	10000010 	.word	0x10000010

08001648 <UDISK_push>:

void UDISK_push(int16_t temp, uint32_t timestamp){
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4604      	mov	r4, r0
 800164c:	460d      	mov	r5, r1
    if(data_retention_code != 0xAAFF55FF){
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <UDISK_push+0x54>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <UDISK_push+0x58>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d11d      	bne.n	8001694 <UDISK_push+0x4c>
        UDISK_init();
    }
    last_timestamp = timestamp;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <UDISK_push+0x5c>)
 800165a:	601d      	str	r5, [r3, #0]
    USBDisk[last_pointer] = temp;
 800165c:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <UDISK_push+0x60>)
 800165e:	8813      	ldrh	r3, [r2, #0]
 8001660:	4912      	ldr	r1, [pc, #72]	@ (80016ac <UDISK_push+0x64>)
 8001662:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
    last_pointer++;
 8001666:	3301      	adds	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	8013      	strh	r3, [r2, #0]
    length++;
 800166c:	4910      	ldr	r1, [pc, #64]	@ (80016b0 <UDISK_push+0x68>)
 800166e:	880a      	ldrh	r2, [r1, #0]
 8001670:	3201      	adds	r2, #1
 8001672:	800a      	strh	r2, [r1, #0]
    if(last_pointer >= 4080){
 8001674:	f5b3 6f7f 	cmp.w	r3, #4080	@ 0xff0
 8001678:	d304      	bcc.n	8001684 <UDISK_push+0x3c>
        is_first_writing = false;
 800167a:	2300      	movs	r3, #0
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <UDISK_push+0x6c>)
 800167e:	7013      	strb	r3, [r2, #0]
        last_pointer = 0;
 8001680:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <UDISK_push+0x60>)
 8001682:	8013      	strh	r3, [r2, #0]
    }
    if(!is_first_writing){
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <UDISK_push+0x6c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b91b      	cbnz	r3, 8001692 <UDISK_push+0x4a>
        length = 4079;
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <UDISK_push+0x68>)
 800168c:	f640 72ef 	movw	r2, #4079	@ 0xfef
 8001690:	801a      	strh	r2, [r3, #0]
    }
}
 8001692:	bd38      	pop	{r3, r4, r5, pc}
        UDISK_init();
 8001694:	f7ff ffba 	bl	800160c <UDISK_init>
 8001698:	e7de      	b.n	8001658 <UDISK_push+0x10>
 800169a:	bf00      	nop
 800169c:	10000000 	.word	0x10000000
 80016a0:	aaff55ff 	.word	0xaaff55ff
 80016a4:	1000000c 	.word	0x1000000c
 80016a8:	10000008 	.word	0x10000008
 80016ac:	10000010 	.word	0x10000010
 80016b0:	10000006 	.word	0x10000006
 80016b4:	10000004 	.word	0x10000004

080016b8 <UDISK_get>:

int16_t UDISK_get(uint16_t i){
    if(data_retention_code != 0xAAFF55FF){
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <UDISK_get+0x40>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <UDISK_get+0x44>)
 80016be:	429a      	cmp	r2, r3
 80016c0:	d117      	bne.n	80016f2 <UDISK_get+0x3a>
        return -32768;
    }
    if(is_first_writing){
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <UDISK_get+0x48>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b95b      	cbnz	r3, 80016e0 <UDISK_get+0x28>
        return USBDisk[i];
    }
    if(last_pointer+i-1 < 4080){
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <UDISK_get+0x4c>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	4418      	add	r0, r3
 80016ce:	f5b0 6f7f 	cmp.w	r0, #4080	@ 0xff0
 80016d2:	dd09      	ble.n	80016e8 <UDISK_get+0x30>
        return USBDisk[last_pointer+i-1];
    }
    return USBDisk[last_pointer+i-4081];
 80016d4:	f6a0 70f1 	subw	r0, r0, #4081	@ 0xff1
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <UDISK_get+0x50>)
 80016da:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80016de:	4770      	bx	lr
        return USBDisk[i];
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <UDISK_get+0x50>)
 80016e2:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80016e6:	4770      	bx	lr
        return USBDisk[last_pointer+i-1];
 80016e8:	3801      	subs	r0, #1
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <UDISK_get+0x50>)
 80016ec:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80016f0:	4770      	bx	lr
        return -32768;
 80016f2:	4806      	ldr	r0, [pc, #24]	@ (800170c <UDISK_get+0x54>)
}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	10000000 	.word	0x10000000
 80016fc:	aaff55ff 	.word	0xaaff55ff
 8001700:	10000004 	.word	0x10000004
 8001704:	10000008 	.word	0x10000008
 8001708:	10000010 	.word	0x10000010
 800170c:	ffff8000 	.word	0xffff8000

08001710 <UDISK_len>:

uint16_t UDISK_len(){
    return length;
}
 8001710:	4b01      	ldr	r3, [pc, #4]	@ (8001718 <UDISK_len+0x8>)
 8001712:	8818      	ldrh	r0, [r3, #0]
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	10000006 	.word	0x10000006

0800171c <UDISK_tst>:

uint32_t UDISK_tst(){
    return last_timestamp;
 800171c:	4b01      	ldr	r3, [pc, #4]	@ (8001724 <UDISK_tst+0x8>)
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	1000000c 	.word	0x1000000c

08001728 <tick>:
void init(Button *btt){
    //gpio_SetGPIOmode_In(btt->port, btt->pin, 0);
    btt->btn_flag = true;
}

bool tick(Button *btt){
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	4604      	mov	r4, r0
    bool btn_state = !HAL_GPIO_ReadPin(btt->port, btt->pin);
 800172c:	8881      	ldrh	r1, [r0, #4]
 800172e:	6800      	ldr	r0, [r0, #0]
 8001730:	f002 fd5e 	bl	80041f0 <HAL_GPIO_ReadPin>
 8001734:	fab0 f580 	clz	r5, r0
 8001738:	096d      	lsrs	r5, r5, #5
    btn_state ^= !btt->type;
 800173a:	79a7      	ldrb	r7, [r4, #6]
 800173c:	42af      	cmp	r7, r5
 800173e:	bf0c      	ite	eq
 8001740:	2601      	moveq	r6, #1
 8001742:	2600      	movne	r6, #0

    if (!btn_state && !btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 8001744:	d001      	beq.n	800174a <tick+0x22>
 8001746:	7c23      	ldrb	r3, [r4, #16]
 8001748:	b13b      	cbz	r3, 800175a <tick+0x32>
        btt->btn_flag = true;
        if(!btt->btn_hold){btt->btn_single = true;}
        btt->btn_hold = false;
        btt->btn_timer = HAL_GetTick();
    }
    if (btn_state && btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 800174a:	42af      	cmp	r7, r5
 800174c:	d017      	beq.n	800177e <tick+0x56>
        btt->btn_flag = false;
        btt->btn_timer = HAL_GetTick();
        btt->btn_hold_timer = HAL_GetTick();
    }

    if (!btt->btn_flag && btn_state && (HAL_GetTick() - btt->btn_hold_timer >= 200) && !btt->btn_hold) {
 800174e:	7c23      	ldrb	r3, [r4, #16]
 8001750:	b90b      	cbnz	r3, 8001756 <tick+0x2e>
 8001752:	42af      	cmp	r7, r5
 8001754:	d025      	beq.n	80017a2 <tick+0x7a>
        btt->btn_hold = true;
        btt->btn_hold_timer = HAL_GetTick();
    }

    return btn_state;
}
 8001756:	4630      	mov	r0, r6
 8001758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!btn_state && !btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 800175a:	f001 fba7 	bl	8002eac <HAL_GetTick>
 800175e:	68a3      	ldr	r3, [r4, #8]
 8001760:	1ac0      	subs	r0, r0, r3
 8001762:	2864      	cmp	r0, #100	@ 0x64
 8001764:	d9f1      	bls.n	800174a <tick+0x22>
        btt->btn_flag = true;
 8001766:	2301      	movs	r3, #1
 8001768:	7423      	strb	r3, [r4, #16]
        if(!btt->btn_hold){btt->btn_single = true;}
 800176a:	7c63      	ldrb	r3, [r4, #17]
 800176c:	b90b      	cbnz	r3, 8001772 <tick+0x4a>
 800176e:	2301      	movs	r3, #1
 8001770:	74e3      	strb	r3, [r4, #19]
        btt->btn_hold = false;
 8001772:	2300      	movs	r3, #0
 8001774:	7463      	strb	r3, [r4, #17]
        btt->btn_timer = HAL_GetTick();
 8001776:	f001 fb99 	bl	8002eac <HAL_GetTick>
 800177a:	60a0      	str	r0, [r4, #8]
 800177c:	e7e5      	b.n	800174a <tick+0x22>
    if (btn_state && btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 800177e:	7c23      	ldrb	r3, [r4, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0e4      	beq.n	800174e <tick+0x26>
 8001784:	f001 fb92 	bl	8002eac <HAL_GetTick>
 8001788:	68a3      	ldr	r3, [r4, #8]
 800178a:	1ac0      	subs	r0, r0, r3
 800178c:	2864      	cmp	r0, #100	@ 0x64
 800178e:	d9de      	bls.n	800174e <tick+0x26>
        btt->btn_flag = false;
 8001790:	2300      	movs	r3, #0
 8001792:	7423      	strb	r3, [r4, #16]
        btt->btn_timer = HAL_GetTick();
 8001794:	f001 fb8a 	bl	8002eac <HAL_GetTick>
 8001798:	60a0      	str	r0, [r4, #8]
        btt->btn_hold_timer = HAL_GetTick();
 800179a:	f001 fb87 	bl	8002eac <HAL_GetTick>
 800179e:	60e0      	str	r0, [r4, #12]
 80017a0:	e7d5      	b.n	800174e <tick+0x26>
    if (!btt->btn_flag && btn_state && (HAL_GetTick() - btt->btn_hold_timer >= 200) && !btt->btn_hold) {
 80017a2:	f001 fb83 	bl	8002eac <HAL_GetTick>
 80017a6:	68e3      	ldr	r3, [r4, #12]
 80017a8:	1ac0      	subs	r0, r0, r3
 80017aa:	28c7      	cmp	r0, #199	@ 0xc7
 80017ac:	d9d3      	bls.n	8001756 <tick+0x2e>
 80017ae:	7c63      	ldrb	r3, [r4, #17]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1d0      	bne.n	8001756 <tick+0x2e>
        btt->btn_hold = true;
 80017b4:	2301      	movs	r3, #1
 80017b6:	7463      	strb	r3, [r4, #17]
        btt->btn_hold_timer = HAL_GetTick();
 80017b8:	f001 fb78 	bl	8002eac <HAL_GetTick>
 80017bc:	60e0      	str	r0, [r4, #12]
 80017be:	e7ca      	b.n	8001756 <tick+0x2e>

080017c0 <isClicked>:

bool isClicked(Button *btt){
 80017c0:	4603      	mov	r3, r0
    if(btt->btn_single){
 80017c2:	7cc0      	ldrb	r0, [r0, #19]
 80017c4:	b900      	cbnz	r0, 80017c8 <isClicked+0x8>
        btt->btn_single = false;
        return true;
    } return false;
}
 80017c6:	4770      	bx	lr
        btt->btn_single = false;
 80017c8:	2200      	movs	r2, #0
 80017ca:	74da      	strb	r2, [r3, #19]
        return true;
 80017cc:	e7fb      	b.n	80017c6 <isClicked+0x6>

080017ce <CalculateChecksum>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 80017ce:	b500      	push	{lr}
 80017d0:	4686      	mov	lr, r0
  uint8_t checksum = 0;
 80017d2:	2000      	movs	r0, #0

  while (length--)
 80017d4:	460b      	mov	r3, r1
 80017d6:	3901      	subs	r1, #1
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	b1a3      	cbz	r3, 8001806 <CalculateChecksum+0x38>
  {
    uint8_t currentByte = *data++;
 80017dc:	f81e cb01 	ldrb.w	ip, [lr], #1

    for (uint8_t i = 8; i; i--)
 80017e0:	2308      	movs	r3, #8
 80017e2:	e003      	b.n	80017ec <CalculateChecksum+0x1e>
      if (temp)
      {
        checksum ^= 0x8C;
      }

      currentByte >>= 1;
 80017e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (uint8_t i = 8; i; i--)
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f1      	beq.n	80017d4 <CalculateChecksum+0x6>
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 80017f0:	ea80 020c 	eor.w	r2, r0, ip
      if (temp)
 80017f4:	f012 0f01 	tst.w	r2, #1
 80017f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80017fc:	d0f2      	beq.n	80017e4 <CalculateChecksum+0x16>
        checksum ^= 0x8C;
 80017fe:	f080 008c 	eor.w	r0, r0, #140	@ 0x8c
 8001802:	b2c0      	uxtb	r0, r0
 8001804:	e7ee      	b.n	80017e4 <CalculateChecksum+0x16>
    }
  }

  return checksum;
}
 8001806:	f85d fb04 	ldr.w	pc, [sp], #4

0800180a <ExecuteCommand>:



/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 800180a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180c:	b083      	sub	sp, #12
 800180e:	9101      	str	r1, [sp, #4]
  if (sensor->isConnected == 0)
 8001810:	7843      	ldrb	r3, [r0, #1]
 8001812:	b91b      	cbnz	r3, 800181c <ExecuteCommand+0x12>
  {
    return DS18B20_ERROR;
 8001814:	2701      	movs	r7, #1
      OneWire_ProcessByte(sensor->uart, data[i]);
    }
  }

  return DS18B20_OK;
}
 8001816:	4638      	mov	r0, r7
 8001818:	b003      	add	sp, #12
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	4605      	mov	r5, r0
 800181e:	4616      	mov	r6, r2
  OneWire_ProcessByte(sensor->uart, command.code);
 8001820:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001824:	6840      	ldr	r0, [r0, #4]
 8001826:	f001 f995 	bl	8002b54 <OneWire_ProcessByte>
  if (command.rxBytesNum != 0)
 800182a:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800182e:	b9b7      	cbnz	r7, 800185e <ExecuteCommand+0x54>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8001830:	463c      	mov	r4, r7
 8001832:	e01c      	b.n	800186e <ExecuteCommand+0x64>
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 8001834:	21ff      	movs	r1, #255	@ 0xff
 8001836:	6868      	ldr	r0, [r5, #4]
 8001838:	f001 f98c 	bl	8002b54 <OneWire_ProcessByte>
 800183c:	5530      	strb	r0, [r6, r4]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 800183e:	3401      	adds	r4, #1
 8001840:	b2e4      	uxtb	r4, r4
 8001842:	42a7      	cmp	r7, r4
 8001844:	d8f6      	bhi.n	8001834 <ExecuteCommand+0x2a>
    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 8001846:	1e79      	subs	r1, r7, #1
 8001848:	b2c9      	uxtb	r1, r1
 800184a:	4630      	mov	r0, r6
 800184c:	f7ff ffbf 	bl	80017ce <CalculateChecksum>
    if (checkSum != data[command.rxBytesNum - 1])
 8001850:	443e      	add	r6, r7
 8001852:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8001856:	4283      	cmp	r3, r0
 8001858:	d10e      	bne.n	8001878 <ExecuteCommand+0x6e>
  return DS18B20_OK;
 800185a:	2700      	movs	r7, #0
 800185c:	e7db      	b.n	8001816 <ExecuteCommand+0xc>
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 800185e:	2400      	movs	r4, #0
 8001860:	e7ef      	b.n	8001842 <ExecuteCommand+0x38>
      OneWire_ProcessByte(sensor->uart, data[i]);
 8001862:	5d31      	ldrb	r1, [r6, r4]
 8001864:	6868      	ldr	r0, [r5, #4]
 8001866:	f001 f975 	bl	8002b54 <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 800186a:	3401      	adds	r4, #1
 800186c:	b2e4      	uxtb	r4, r4
 800186e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001872:	42a3      	cmp	r3, r4
 8001874:	d8f5      	bhi.n	8001862 <ExecuteCommand+0x58>
 8001876:	e7ce      	b.n	8001816 <ExecuteCommand+0xc>
      return DS18B20_ERROR;
 8001878:	2701      	movs	r7, #1
 800187a:	e7cc      	b.n	8001816 <ExecuteCommand+0xc>

0800187c <WaitForConversionFinished>:



/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 800187c:	b510      	push	{r4, lr}
 800187e:	4604      	mov	r4, r0
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 8001880:	2101      	movs	r1, #1
 8001882:	6840      	ldr	r0, [r0, #4]
 8001884:	f001 f948 	bl	8002b18 <OneWire_ProcessBit>
  while(data != 0xFF)
 8001888:	e003      	b.n	8001892 <WaitForConversionFinished+0x16>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 800188a:	2101      	movs	r1, #1
 800188c:	6860      	ldr	r0, [r4, #4]
 800188e:	f001 f943 	bl	8002b18 <OneWire_ProcessBit>
  while(data != 0xFF)
 8001892:	28ff      	cmp	r0, #255	@ 0xff
 8001894:	d1f9      	bne.n	800188a <WaitForConversionFinished+0xe>
  }
}
 8001896:	bd10      	pop	{r4, pc}

08001898 <DS18B20_ConvertT>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	4606      	mov	r6, r0
 800189e:	460c      	mov	r4, r1
  DS18B20_Status result;
  uint8_t rxDummyData;

  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 80018a0:	f10d 0207 	add.w	r2, sp, #7
 80018a4:	2144      	movs	r1, #68	@ 0x44
 80018a6:	f7ff ffb0 	bl	800180a <ExecuteCommand>
 80018aa:	4605      	mov	r5, r0

  if (waitCondition == DS18B20_DATA)
 80018ac:	2c01      	cmp	r4, #1
 80018ae:	d004      	beq.n	80018ba <DS18B20_ConvertT+0x22>
  {
    WaitForConversionFinished(sensor);
  }

  if (waitCondition == DS18B20_DELAY)
 80018b0:	2c02      	cmp	r4, #2
 80018b2:	d006      	beq.n	80018c2 <DS18B20_ConvertT+0x2a>

    HAL_Delay(delayValueMs);
  }

  return result;
}
 80018b4:	4628      	mov	r0, r5
 80018b6:	b002      	add	sp, #8
 80018b8:	bd70      	pop	{r4, r5, r6, pc}
    WaitForConversionFinished(sensor);
 80018ba:	4630      	mov	r0, r6
 80018bc:	f7ff ffde 	bl	800187c <WaitForConversionFinished>
 80018c0:	e7f6      	b.n	80018b0 <DS18B20_ConvertT+0x18>
    switch (sensor->configRegister)
 80018c2:	7c33      	ldrb	r3, [r6, #16]
 80018c4:	2b5f      	cmp	r3, #95	@ 0x5f
 80018c6:	d00b      	beq.n	80018e0 <DS18B20_ConvertT+0x48>
 80018c8:	d805      	bhi.n	80018d6 <DS18B20_ConvertT+0x3e>
 80018ca:	2b1f      	cmp	r3, #31
 80018cc:	d00d      	beq.n	80018ea <DS18B20_ConvertT+0x52>
 80018ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80018d0:	d10d      	bne.n	80018ee <DS18B20_ConvertT+0x56>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 80018d2:	20bc      	movs	r0, #188	@ 0xbc
 80018d4:	e006      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
    switch (sensor->configRegister)
 80018d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80018d8:	d10b      	bne.n	80018f2 <DS18B20_ConvertT+0x5a>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 80018da:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80018de:	e001      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 80018e0:	f240 1077 	movw	r0, #375	@ 0x177
    HAL_Delay(delayValueMs);
 80018e4:	f001 fae8 	bl	8002eb8 <HAL_Delay>
 80018e8:	e7e4      	b.n	80018b4 <DS18B20_ConvertT+0x1c>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 80018ea:	205e      	movs	r0, #94	@ 0x5e
 80018ec:	e7fa      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
    switch (sensor->configRegister)
 80018ee:	2000      	movs	r0, #0
 80018f0:	e7f8      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
 80018f2:	2000      	movs	r0, #0
 80018f4:	e7f6      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
	...

080018f8 <DS18B20_ReadScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 80018f8:	b510      	push	{r4, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	4604      	mov	r4, r0
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_SCRATCHPAD_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 80018fe:	aa01      	add	r2, sp, #4
 8001900:	2100      	movs	r1, #0
 8001902:	f06f 0341 	mvn.w	r3, #65	@ 0x41
 8001906:	f363 0107 	bfi	r1, r3, #0, #8
 800190a:	2309      	movs	r3, #9
 800190c:	f363 210f 	bfi	r1, r3, #8, #8
 8001910:	f7ff ff7b 	bl	800180a <ExecuteCommand>

  if (result != DS18B20_OK)
 8001914:	bbd0      	cbnz	r0, 800198c <DS18B20_ReadScratchpad+0x94>
  {
    return result;
  }

  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8001916:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800191a:	73e3      	strb	r3, [r4, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 800191c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001920:	73a3      	strb	r3, [r4, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 8001922:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8001926:	7421      	strb	r1, [r4, #16]

  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 8001928:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800192c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001930:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001934:	4613      	mov	r3, r2
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;

  if (sign != 0)
 8001936:	f412 4278 	ands.w	r2, r2, #63488	@ 0xf800
 800193a:	d001      	beq.n	8001940 <DS18B20_ReadScratchpad+0x48>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 800193c:	425b      	negs	r3, r3
 800193e:	b29b      	uxth	r3, r3
  }

  switch (sensor->configRegister)
 8001940:	295f      	cmp	r1, #95	@ 0x5f
 8001942:	d025      	beq.n	8001990 <DS18B20_ReadScratchpad+0x98>
 8001944:	d80a      	bhi.n	800195c <DS18B20_ReadScratchpad+0x64>
 8001946:	291f      	cmp	r1, #31
 8001948:	d00f      	beq.n	800196a <DS18B20_ReadScratchpad+0x72>
 800194a:	293f      	cmp	r1, #63	@ 0x3f
 800194c:	d127      	bne.n	800199e <DS18B20_ReadScratchpad+0xa6>
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
      break;

    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	055b      	lsls	r3, r3, #21
 8001954:	0d5b      	lsrs	r3, r3, #21
 8001956:	ee07 3a90 	vmov	s15, r3
      break;
 800195a:	e00a      	b.n	8001972 <DS18B20_ReadScratchpad+0x7a>
  switch (sensor->configRegister)
 800195c:	297f      	cmp	r1, #127	@ 0x7f
 800195e:	d11e      	bne.n	800199e <DS18B20_ReadScratchpad+0xa6>
    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
      break;

    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8001960:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001964:	ee07 3a90 	vmov	s15, r3
      break;
 8001968:	e003      	b.n	8001972 <DS18B20_ReadScratchpad+0x7a>
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 800196a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800196e:	ee07 3a90 	vmov	s15, r3
    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
      break;
  }

  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 8001972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001976:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80019a8 <DS18B20_ReadScratchpad+0xb0>
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197e:	edc4 7a05 	vstr	s15, [r4, #20]

  if (sign != 0)
 8001982:	b11a      	cbz	r2, 800198c <DS18B20_ReadScratchpad+0x94>
  {
    sensor->temperature *= (-1);
 8001984:	eef1 7a67 	vneg.f32	s15, s15
 8001988:	edc4 7a05 	vstr	s15, [r4, #20]
  }

  return DS18B20_OK;
}
 800198c:	b004      	add	sp, #16
 800198e:	bd10      	pop	{r4, pc}
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	055b      	lsls	r3, r3, #21
 8001996:	0d5b      	lsrs	r3, r3, #21
 8001998:	ee07 3a90 	vmov	s15, r3
      break;
 800199c:	e7e9      	b.n	8001972 <DS18B20_ReadScratchpad+0x7a>
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 800199e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019a2:	ee07 3a90 	vmov	s15, r3
      break;
 80019a6:	e7e4      	b.n	8001972 <DS18B20_ReadScratchpad+0x7a>
 80019a8:	3d800000 	.word	0x3d800000

080019ac <DS18B20_WriteScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_WriteScratchpad(DS18B20 *sensor, uint8_t *data)
{
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4605      	mov	r5, r0
 80019b0:	460c      	mov	r4, r1
  DS18B20_Status result;

  result = ExecuteCommand(sensor, writeScratchpad, data);
 80019b2:	460a      	mov	r2, r1
 80019b4:	2100      	movs	r1, #0
 80019b6:	234e      	movs	r3, #78	@ 0x4e
 80019b8:	f363 0107 	bfi	r1, r3, #0, #8
 80019bc:	2303      	movs	r3, #3
 80019be:	f363 4117 	bfi	r1, r3, #16, #8
 80019c2:	f7ff ff22 	bl	800180a <ExecuteCommand>

  if (result != DS18B20_OK)
 80019c6:	b928      	cbnz	r0, 80019d4 <DS18B20_WriteScratchpad+0x28>
  {
    return result;
  }

  sensor->temperatureLimitHigh = data[0];
 80019c8:	7823      	ldrb	r3, [r4, #0]
 80019ca:	73eb      	strb	r3, [r5, #15]
  sensor->temperatureLimitLow = data[1];
 80019cc:	7863      	ldrb	r3, [r4, #1]
 80019ce:	73ab      	strb	r3, [r5, #14]
  sensor->configRegister = data[2];
 80019d0:	78a3      	ldrb	r3, [r4, #2]
 80019d2:	742b      	strb	r3, [r5, #16]

  return result;
}
 80019d4:	bd38      	pop	{r3, r4, r5, pc}

080019d6 <DS18B20_InitializationCommand>:


/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
  if (sensor->isInitialized == 0)
 80019d6:	7803      	ldrb	r3, [r0, #0]
 80019d8:	b90b      	cbnz	r3, 80019de <DS18B20_InitializationCommand+0x8>
  {
    return DS18B20_ERROR;
 80019da:	2001      	movs	r0, #1
  else
  {
    sensor->isConnected = 0;
    return DS18B20_ERROR;
  }
}
 80019dc:	4770      	bx	lr
{
 80019de:	b510      	push	{r4, lr}
 80019e0:	4604      	mov	r4, r0
  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 80019e2:	6840      	ldr	r0, [r0, #4]
 80019e4:	f001 f8d5 	bl	8002b92 <OneWire_Reset>
  if (status == ONEWIRE_OK)
 80019e8:	b910      	cbnz	r0, 80019f0 <DS18B20_InitializationCommand+0x1a>
    sensor->isConnected = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	7063      	strb	r3, [r4, #1]
}
 80019ee:	bd10      	pop	{r4, pc}
    sensor->isConnected = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	7063      	strb	r3, [r4, #1]
    return DS18B20_ERROR;
 80019f4:	2001      	movs	r0, #1
 80019f6:	e7fa      	b.n	80019ee <DS18B20_InitializationCommand+0x18>

080019f8 <DS18B20_ReadRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 80019f8:	b510      	push	{r4, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	4604      	mov	r4, r0
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_ROM_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readRom, rxData);
 80019fe:	466a      	mov	r2, sp
 8001a00:	2100      	movs	r1, #0
 8001a02:	2333      	movs	r3, #51	@ 0x33
 8001a04:	f363 0107 	bfi	r1, r3, #0, #8
 8001a08:	2308      	movs	r3, #8
 8001a0a:	f363 210f 	bfi	r1, r3, #8, #8
 8001a0e:	f7ff fefc 	bl	800180a <ExecuteCommand>

  if (result != DS18B20_OK)
 8001a12:	b960      	cbnz	r0, 8001a2e <DS18B20_ReadRom+0x36>
 8001a14:	4603      	mov	r3, r0
 8001a16:	e008      	b.n	8001a2a <DS18B20_ReadRom+0x32>
    return result;
  }

  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	f103 0109 	add.w	r1, r3, #9
 8001a1e:	4469      	add	r1, sp
 8001a20:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8001a24:	4423      	add	r3, r4
 8001a26:	7219      	strb	r1, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8001a28:	b2d3      	uxtb	r3, r2
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d9f4      	bls.n	8001a18 <DS18B20_ReadRom+0x20>
  }

  return DS18B20_OK;
}
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd10      	pop	{r4, pc}

08001a32 <DS18B20_SkipRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_SkipRom(DS18B20 *sensor)
{
 8001a32:	b500      	push	{lr}
 8001a34:	b083      	sub	sp, #12
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, skipRom, &rxDummyData);
 8001a36:	f10d 0207 	add.w	r2, sp, #7
 8001a3a:	21cc      	movs	r1, #204	@ 0xcc
 8001a3c:	f7ff fee5 	bl	800180a <ExecuteCommand>
  {
    return result;
  }

  return DS18B20_OK;
}
 8001a40:	b003      	add	sp, #12
 8001a42:	f85d fb04 	ldr.w	pc, [sp], #4

08001a46 <DS18B20_Init>:


/*----------------------------------------------------------------------------*/
void DS18B20_Init(DS18B20 *sensor, UART_HandleTypeDef *huart)
{
  sensor->isConnected = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	7043      	strb	r3, [r0, #1]
  sensor->uart = huart;
 8001a4a:	6041      	str	r1, [r0, #4]
  sensor->isInitialized = 1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	7003      	strb	r3, [r0, #0]
}
 8001a50:	4770      	bx	lr
	...

08001a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a54:	b500      	push	{lr}
 8001a56:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a58:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <MX_DMA_Init+0x30>)
 8001a5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4611      	mov	r1, r2
 8001a70:	200b      	movs	r0, #11
 8001a72:	f002 f8ff 	bl	8003c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a76:	200b      	movs	r0, #11
 8001a78:	f002 f90c 	bl	8003c94 <HAL_NVIC_EnableIRQ>

}
 8001a7c:	b003      	add	sp, #12
 8001a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a8c:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	ad05      	add	r5, sp, #20
 8001a90:	2400      	movs	r4, #0
 8001a92:	9405      	str	r4, [sp, #20]
 8001a94:	9406      	str	r4, [sp, #24]
 8001a96:	9407      	str	r4, [sp, #28]
 8001a98:	9408      	str	r4, [sp, #32]
 8001a9a:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9c:	4b50      	ldr	r3, [pc, #320]	@ (8001be0 <MX_GPIO_Init+0x158>)
 8001a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001aa0:	f042 0204 	orr.w	r2, r2, #4
 8001aa4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001aa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001aa8:	f002 0204 	and.w	r2, r2, #4
 8001aac:	9201      	str	r2, [sp, #4]
 8001aae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ab8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001aba:	f002 0201 	and.w	r2, r2, #1
 8001abe:	9202      	str	r2, [sp, #8]
 8001ac0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ac4:	f042 0202 	orr.w	r2, r2, #2
 8001ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001acc:	f002 0202 	and.w	r2, r2, #2
 8001ad0:	9203      	str	r2, [sp, #12]
 8001ad2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ad6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ada:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae2:	9304      	str	r3, [sp, #16]
 8001ae4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	2158      	movs	r1, #88	@ 0x58
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aee:	f002 fb86 	bl	80041fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_RESET);
 8001af2:	4f3c      	ldr	r7, [pc, #240]	@ (8001be4 <MX_GPIO_Init+0x15c>)
 8001af4:	4622      	mov	r2, r4
 8001af6:	2102      	movs	r1, #2
 8001af8:	4638      	mov	r0, r7
 8001afa:	f002 fb80 	bl	80041fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OK_Pin */
  GPIO_InitStruct.Pin = OK_Pin;
 8001afe:	2601      	movs	r6, #1
 8001b00:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b02:	f44f 1a88 	mov.w	sl, #1114112	@ 0x110000
 8001b06:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(OK_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b12:	f002 fa0f 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001b16:	f04f 0908 	mov.w	r9, #8
 8001b1a:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b20:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001b24:	4629      	mov	r1, r5
 8001b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2a:	f002 fa03 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 8001b2e:	2350      	movs	r3, #80	@ 0x50
 8001b30:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3e:	f002 f9f9 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin DOWN_Pin UP_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin|DOWN_Pin|UP_Pin;
 8001b42:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001b46:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b52:	f002 f9ef 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001b56:	23d1      	movs	r3, #209	@ 0xd1
 8001b58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5a:	f04f 0803 	mov.w	r8, #3
 8001b5e:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	4629      	mov	r1, r5
 8001b66:	4638      	mov	r0, r7
 8001b68:	f002 f9e4 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_Pin */
  GPIO_InitStruct.Pin = PWR_Pin;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(PWR_GPIO_Port, &GPIO_InitStruct);
 8001b76:	4629      	mov	r1, r5
 8001b78:	4638      	mov	r0, r7
 8001b7a:	f002 f9db 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001b7e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001b82:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b84:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b90:	f002 f9d0 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_WKUP_Pin */
  GPIO_InitStruct.Pin = USB_WKUP_Pin;
 8001b94:	2320      	movs	r3, #32
 8001b96:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b98:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USB_WKUP_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4638      	mov	r0, r7
 8001ba2:	f002 f9c7 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ba6:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001baa:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <MX_GPIO_Init+0x160>)
 8001bb4:	f002 f9be 	bl	8003f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bb8:	4622      	mov	r2, r4
 8001bba:	4621      	mov	r1, r4
 8001bbc:	2006      	movs	r0, #6
 8001bbe:	f002 f859 	bl	8003c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bc2:	2006      	movs	r0, #6
 8001bc4:	f002 f866 	bl	8003c94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001bc8:	4622      	mov	r2, r4
 8001bca:	4621      	mov	r1, r4
 8001bcc:	2017      	movs	r0, #23
 8001bce:	f002 f851 	bl	8003c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bd2:	2017      	movs	r0, #23
 8001bd4:	f002 f85e 	bl	8003c94 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bd8:	b00a      	add	sp, #40	@ 0x28
 8001bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	48000400 	.word	0x48000400
 8001be8:	48001c00 	.word	0x48001c00

08001bec <map>:
  
  EPD_Display_Base(BlackImage);
  HAL_Delay(100);
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001bec:	b410      	push	{r4}
  if(in_min == in_max){
 8001bee:	4291      	cmp	r1, r2
 8001bf0:	d00c      	beq.n	8001c0c <map+0x20>
    return (out_max+out_min)/2;
  }
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001bf2:	1a40      	subs	r0, r0, r1
 8001bf4:	9c01      	ldr	r4, [sp, #4]
 8001bf6:	eba4 0c03 	sub.w	ip, r4, r3
 8001bfa:	fb0c f000 	mul.w	r0, ip, r0
 8001bfe:	1a52      	subs	r2, r2, r1
 8001c00:	fb90 f0f2 	sdiv	r0, r0, r2
 8001c04:	4418      	add	r0, r3
}
 8001c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c0a:	4770      	bx	lr
    return (out_max+out_min)/2;
 8001c0c:	9a01      	ldr	r2, [sp, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001c14:	1058      	asrs	r0, r3, #1
 8001c16:	e7f6      	b.n	8001c06 <map+0x1a>

08001c18 <shutdown>:

void shutdown(bool skipRTC){
 8001c18:	b510      	push	{r4, lr}
 8001c1a:	b086      	sub	sp, #24
  EPD_Sleep();
 8001c1c:	f7ff f8f1 	bl	8000e02 <EPD_Sleep>
  EPD_Exit();
 8001c20:	f7ff f8fa 	bl	8000e18 <EPD_Exit>

  __HAL_RCC_SPI1_CLK_DISABLE();
 8001c24:	4a10      	ldr	r2, [pc, #64]	@ (8001c68 <shutdown+0x50>)
 8001c26:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c2c:	6613      	str	r3, [r2, #96]	@ 0x60
  HAL_SPI_DeInit(&hspi1);
 8001c2e:	480f      	ldr	r0, [pc, #60]	@ (8001c6c <shutdown+0x54>)
 8001c30:	f005 f8aa 	bl	8006d88 <HAL_SPI_DeInit>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	a901      	add	r1, sp, #4
 8001c36:	2300      	movs	r3, #0
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	608b      	str	r3, [r1, #8]
 8001c3e:	60cb      	str	r3, [r1, #12]
 8001c40:	610b      	str	r3, [r1, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 | GPIO_PIN_6;
 8001c42:	23fa      	movs	r3, #250	@ 0xfa
 8001c44:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c46:	2303      	movs	r3, #3
 8001c48:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4e:	f002 f971 	bl	8003f34 <HAL_GPIO_Init>

  go_to_sleep = true;
 8001c52:	2401      	movs	r4, #1
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <shutdown+0x58>)
 8001c56:	701c      	strb	r4, [r3, #0]

  HAL_SuspendTick();
 8001c58:	f001 f942 	bl	8002ee0 <HAL_SuspendTick>
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f003 fef7 	bl	8005a50 <HAL_PWREx_EnterSTOP2Mode>
}
 8001c62:	b006      	add	sp, #24
 8001c64:	bd10      	pop	{r4, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	20001324 	.word	0x20001324
 8001c70:	200002d3 	.word	0x200002d3

08001c74 <Start_Timer>:
  MX_SPI1_Init();
  MX_USB_DEVICE_Init();
  EPD_Init();
}

void Start_Timer(){
 8001c74:	b508      	push	{r3, lr}
  HAL_LPTIM_Counter_Start_IT(&hlptim1, 256);
 8001c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c7a:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <Start_Timer+0x10>)
 8001c7c:	f002 fcd0 	bl	8004620 <HAL_LPTIM_Counter_Start_IT>
}
 8001c80:	bd08      	pop	{r3, pc}
 8001c82:	bf00      	nop
 8001c84:	200013b4 	.word	0x200013b4

08001c88 <DS18_INIT>:
      send_usb = USB_DEVICE_IsConnected();
      seconds_passed = 0;
  } 
}

void DS18_INIT(){
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	b082      	sub	sp, #8
  DS18B20_Init(&temperatureSensor, &huart2);
 8001c8c:	4c11      	ldr	r4, [pc, #68]	@ (8001cd4 <DS18_INIT+0x4c>)
 8001c8e:	4912      	ldr	r1, [pc, #72]	@ (8001cd8 <DS18_INIT+0x50>)
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7ff fed8 	bl	8001a46 <DS18B20_Init>
  DS18B20_InitializationCommand(&temperatureSensor);
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff fe9d 	bl	80019d6 <DS18B20_InitializationCommand>
  DS18B20_ReadRom(&temperatureSensor);
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff feab 	bl	80019f8 <DS18B20_ReadRom>
  DS18B20_ReadScratchpad(&temperatureSensor);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff fe28 	bl	80018f8 <DS18B20_ReadScratchpad>
  uint8_t settings[3];
  settings[0] = temperatureSensor.temperatureLimitHigh;
 8001ca8:	7be3      	ldrb	r3, [r4, #15]
 8001caa:	f88d 3004 	strb.w	r3, [sp, #4]
  settings[1] = temperatureSensor.temperatureLimitLow;
 8001cae:	7ba3      	ldrb	r3, [r4, #14]
 8001cb0:	f88d 3005 	strb.w	r3, [sp, #5]
  settings[2] = DS18B20_12_BITS_CONFIG;
 8001cb4:	237f      	movs	r3, #127	@ 0x7f
 8001cb6:	f88d 3006 	strb.w	r3, [sp, #6]
  DS18B20_InitializationCommand(&temperatureSensor);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fe8b 	bl	80019d6 <DS18B20_InitializationCommand>
  DS18B20_SkipRom(&temperatureSensor);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff feb6 	bl	8001a32 <DS18B20_SkipRom>
  DS18B20_WriteScratchpad(&temperatureSensor, settings);
 8001cc6:	a901      	add	r1, sp, #4
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff fe6f 	bl	80019ac <DS18B20_WriteScratchpad>
}
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd10      	pop	{r4, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000127c 	.word	0x2000127c
 8001cd8:	2000129c 	.word	0x2000129c

08001cdc <DS18_GET>:

float DS18_GET(){
 8001cdc:	b510      	push	{r4, lr}
	DS18B20_InitializationCommand(&temperatureSensor);
 8001cde:	4c0b      	ldr	r4, [pc, #44]	@ (8001d0c <DS18_GET+0x30>)
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f7ff fe78 	bl	80019d6 <DS18B20_InitializationCommand>
	DS18B20_SkipRom(&temperatureSensor);
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7ff fea3 	bl	8001a32 <DS18B20_SkipRom>
	DS18B20_ConvertT(&temperatureSensor, DS18B20_DATA);
 8001cec:	2101      	movs	r1, #1
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7ff fdd2 	bl	8001898 <DS18B20_ConvertT>
	DS18B20_InitializationCommand(&temperatureSensor);
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff fe6e 	bl	80019d6 <DS18B20_InitializationCommand>
	DS18B20_SkipRom(&temperatureSensor);
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff fe99 	bl	8001a32 <DS18B20_SkipRom>
	DS18B20_ReadScratchpad(&temperatureSensor);
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff fdf9 	bl	80018f8 <DS18B20_ReadScratchpad>
	return temperatureSensor.temperature;
}
 8001d06:	ed94 0a05 	vldr	s0, [r4, #20]
 8001d0a:	bd10      	pop	{r4, pc}
 8001d0c:	2000127c 	.word	0x2000127c

08001d10 <set_time>:

void set_time(){
 8001d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d14:	b09c      	sub	sp, #112	@ 0x70
  bool flag = true; // true ONLY FOR DEBUG!!!
  Button bt_ok = {GPIOA, GPIO_PIN_0, TYPE_LOW_PULL};
 8001d16:	af17      	add	r7, sp, #92	@ 0x5c
 8001d18:	2400      	movs	r4, #0
 8001d1a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8001d1c:	9418      	str	r4, [sp, #96]	@ 0x60
 8001d1e:	9419      	str	r4, [sp, #100]	@ 0x64
 8001d20:	941a      	str	r4, [sp, #104]	@ 0x68
 8001d22:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001d24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d28:	9317      	str	r3, [sp, #92]	@ 0x5c
 8001d2a:	f04f 0801 	mov.w	r8, #1
 8001d2e:	f8ad 8060 	strh.w	r8, [sp, #96]	@ 0x60
  Button bt_down = {GPIOA, GPIO_PIN_8, TYPE_LOW_PULL};
 8001d32:	ae12      	add	r6, sp, #72	@ 0x48
 8001d34:	9412      	str	r4, [sp, #72]	@ 0x48
 8001d36:	9413      	str	r4, [sp, #76]	@ 0x4c
 8001d38:	9414      	str	r4, [sp, #80]	@ 0x50
 8001d3a:	9415      	str	r4, [sp, #84]	@ 0x54
 8001d3c:	9416      	str	r4, [sp, #88]	@ 0x58
 8001d3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8001d40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d44:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
  Button bt_up = {GPIOA, GPIO_PIN_9, TYPE_LOW_PULL};
 8001d48:	ad0d      	add	r5, sp, #52	@ 0x34
 8001d4a:	940d      	str	r4, [sp, #52]	@ 0x34
 8001d4c:	940e      	str	r4, [sp, #56]	@ 0x38
 8001d4e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8001d50:	9410      	str	r4, [sp, #64]	@ 0x40
 8001d52:	9411      	str	r4, [sp, #68]	@ 0x44
 8001d54:	930d      	str	r3, [sp, #52]	@ 0x34
 8001d56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d5a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38

  int8_t d_time[5] = {25, 03, 24, 12, 00};
 8001d5e:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <set_time+0xdc>)
 8001d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001d62:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
  uint8_t up_lim[5] = {99, 12, 31, 23, 59};
 8001d66:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <set_time+0xe0>)
 8001d68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d6c:	9009      	str	r0, [sp, #36]	@ 0x24
 8001d6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
  uint8_t down_lim[5] = {0, 1, 1, 0, 0};
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <set_time+0xe4>)
 8001d74:	9307      	str	r3, [sp, #28]
 8001d76:	f88d 4020 	strb.w	r4, [sp, #32]
  uint8_t edit_ptr = 0;

  uint32_t upd_tmr = HAL_GetTick();
 8001d7a:	f001 f897 	bl	8002eac <HAL_GetTick>
  bool edited;
  // FIX THIS
  tick(&bt_ok);
 8001d7e:	4638      	mov	r0, r7
 8001d80:	f7ff fcd2 	bl	8001728 <tick>
  tick(&bt_up);
 8001d84:	4628      	mov	r0, r5
 8001d86:	f7ff fccf 	bl	8001728 <tick>
  tick(&bt_down);
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff fccc 	bl	8001728 <tick>
  isClicked(&bt_ok);
 8001d90:	4638      	mov	r0, r7
 8001d92:	f7ff fd15 	bl	80017c0 <isClicked>
  isClicked(&bt_down);
 8001d96:	4630      	mov	r0, r6
 8001d98:	f7ff fd12 	bl	80017c0 <isClicked>
  isClicked(&bt_up);
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f7ff fd0f 	bl	80017c0 <isClicked>
      if(HAL_GetTick() - upd_tmr > 1000 && edited){
        break;
      }
    }
  }
  RTC_TimeTypeDef sTime = {0};
 8001da2:	ad02      	add	r5, sp, #8
 8001da4:	9402      	str	r4, [sp, #8]
 8001da6:	9403      	str	r4, [sp, #12]
 8001da8:	9404      	str	r4, [sp, #16]
 8001daa:	9405      	str	r4, [sp, #20]
 8001dac:	9406      	str	r4, [sp, #24]
  RTC_DateTypeDef sDate = {0};
 8001dae:	9401      	str	r4, [sp, #4]

  sTime.Hours = d_time[3];
 8001db0:	230c      	movs	r3, #12
 8001db2:	f88d 3008 	strb.w	r3, [sp, #8]
  sTime.Minutes = d_time[4];
  sDate.Year = d_time[0];
 8001db6:	2319      	movs	r3, #25
 8001db8:	f88d 3007 	strb.w	r3, [sp, #7]
  sDate.Month = d_time[1];
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	f88d 3005 	strb.w	r3, [sp, #5]
  sDate.Date = d_time[2];
 8001dc2:	2318      	movs	r3, #24
 8001dc4:	f88d 3006 	strb.w	r3, [sp, #6]
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001dc8:	f88d 8004 	strb.w	r8, [sp, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;

  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001dcc:	4e0a      	ldr	r6, [pc, #40]	@ (8001df8 <set_time+0xe8>)
 8001dce:	4622      	mov	r2, r4
 8001dd0:	a901      	add	r1, sp, #4
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	f004 fda5 	bl	8006922 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001dd8:	4622      	mov	r2, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f004 fd3a 	bl	8006856 <HAL_RTC_SetTime>

  Start_Timer();
 8001de2:	f7ff ff47 	bl	8001c74 <Start_Timer>
}
 8001de6:	b01c      	add	sp, #112	@ 0x70
 8001de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dec:	0c180319 	.word	0x0c180319
 8001df0:	0800be78 	.word	0x0800be78
 8001df4:	00010100 	.word	0x00010100
 8001df8:	20001388 	.word	0x20001388

08001dfc <timestamp_to_time>:
  if(goto_sleep){
    shutdown(false);
  }
}

void timestamp_to_time(uint32_t timestamp, uint8_t* hours, uint8_t* minutes) {
 8001dfc:	b410      	push	{r4}
  uint32_t seconds_in_day = 86400;
  uint32_t seconds_in_hour = 3600;
  uint32_t seconds_in_minute = 60;

  // Get seconds since midnight (UTC)
  uint32_t time_of_day = timestamp % seconds_in_day;
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <timestamp_to_time+0x34>)
 8001e00:	fba3 4300 	umull	r4, r3, r3, r0
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	4c0b      	ldr	r4, [pc, #44]	@ (8001e34 <timestamp_to_time+0x38>)
 8001e08:	fb04 0313 	mls	r3, r4, r3, r0

  *hours = time_of_day / seconds_in_hour;
 8001e0c:	480a      	ldr	r0, [pc, #40]	@ (8001e38 <timestamp_to_time+0x3c>)
 8001e0e:	fba0 4003 	umull	r4, r0, r0, r3
 8001e12:	0ac0      	lsrs	r0, r0, #11
 8001e14:	7008      	strb	r0, [r1, #0]
  *minutes = (time_of_day % seconds_in_hour) / seconds_in_minute;
 8001e16:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001e1a:	fb01 3310 	mls	r3, r1, r0, r3
 8001e1e:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <timestamp_to_time+0x40>)
 8001e20:	fba1 1303 	umull	r1, r3, r1, r3
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	7013      	strb	r3, [r2, #0]
}
 8001e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	c22e4507 	.word	0xc22e4507
 8001e34:	00015180 	.word	0x00015180
 8001e38:	91a2b3c5 	.word	0x91a2b3c5
 8001e3c:	88888889 	.word	0x88888889

08001e40 <plot>:
void plot(){
 8001e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e44:	b09b      	sub	sp, #108	@ 0x6c
  EPD_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 90, WHITE);  	
 8001e46:	4db4      	ldr	r5, [pc, #720]	@ (8002118 <plot+0x2d8>)
 8001e48:	24ff      	movs	r4, #255	@ 0xff
 8001e4a:	9400      	str	r4, [sp, #0]
 8001e4c:	235a      	movs	r3, #90	@ 0x5a
 8001e4e:	22fa      	movs	r2, #250	@ 0xfa
 8001e50:	217a      	movs	r1, #122	@ 0x7a
 8001e52:	4628      	mov	r0, r5
 8001e54:	f7ff f80e 	bl	8000e74 <EPD_NewImage>
  EPD_SelectImage(BlackImage);
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f7ff f833 	bl	8000ec4 <EPD_SelectImage>
  EPD_Clear(WHITE);
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff f8f8 	bl	8001054 <EPD_Clear>
  int16_t min = q_get(0);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 ff39 	bl	8002cdc <q_get>
 8001e6a:	4605      	mov	r5, r0
  int16_t max = q_get(0);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 ff35 	bl	8002cdc <q_get>
 8001e72:	4607      	mov	r7, r0
  for (uint8_t i = 0; i < q_len(); i++){
 8001e74:	2400      	movs	r4, #0
 8001e76:	e006      	b.n	8001e86 <plot+0x46>
      min = q_get(i);
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f000 ff2f 	bl	8002cdc <q_get>
 8001e7e:	4605      	mov	r5, r0
 8001e80:	e00a      	b.n	8001e98 <plot+0x58>
  for (uint8_t i = 0; i < q_len(); i++){
 8001e82:	3401      	adds	r4, #1
 8001e84:	b2e4      	uxtb	r4, r4
 8001e86:	f000 ffc1 	bl	8002e0c <q_len>
 8001e8a:	4284      	cmp	r4, r0
 8001e8c:	d20e      	bcs.n	8001eac <plot+0x6c>
    if(q_get(i) <= min){
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f000 ff24 	bl	8002cdc <q_get>
 8001e94:	42a8      	cmp	r0, r5
 8001e96:	ddef      	ble.n	8001e78 <plot+0x38>
    if(q_get(i) >= max){
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f000 ff1f 	bl	8002cdc <q_get>
 8001e9e:	42b8      	cmp	r0, r7
 8001ea0:	dbef      	blt.n	8001e82 <plot+0x42>
      max = q_get(i);
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f000 ff1a 	bl	8002cdc <q_get>
 8001ea8:	4607      	mov	r7, r0
 8001eaa:	e7ea      	b.n	8001e82 <plot+0x42>
  if(min == max){
 8001eac:	42bd      	cmp	r5, r7
 8001eae:	d01a      	beq.n	8001ee6 <plot+0xa6>
  if(min < 0 && max > 0){
 8001eb0:	2d00      	cmp	r5, #0
 8001eb2:	db1d      	blt.n	8001ef0 <plot+0xb0>
  switch (max - min)
 8001eb4:	463e      	mov	r6, r7
 8001eb6:	46a8      	mov	r8, r5
 8001eb8:	eba7 0c05 	sub.w	ip, r7, r5
 8001ebc:	f5bc 7fc8 	cmp.w	ip, #400	@ 0x190
 8001ec0:	da40      	bge.n	8001f44 <plot+0x104>
 8001ec2:	f1bc 0ffa 	cmp.w	ip, #250	@ 0xfa
 8001ec6:	da59      	bge.n	8001f7c <plot+0x13c>
 8001ec8:	f1bc 0f63 	cmp.w	ip, #99	@ 0x63
 8001ecc:	dc30      	bgt.n	8001f30 <plot+0xf0>
 8001ece:	f1bc 0f32 	cmp.w	ip, #50	@ 0x32
 8001ed2:	da63      	bge.n	8001f9c <plot+0x15c>
 8001ed4:	f1bc 0f18 	cmp.w	ip, #24
 8001ed8:	dc20      	bgt.n	8001f1c <plot+0xdc>
 8001eda:	f1bc 0f00 	cmp.w	ip, #0
 8001ede:	db60      	blt.n	8001fa2 <plot+0x162>
    dt = 5;
 8001ee0:	f04f 0905 	mov.w	r9, #5
 8001ee4:	e04c      	b.n	8001f80 <plot+0x140>
    min-=10;
 8001ee6:	3d0a      	subs	r5, #10
 8001ee8:	b22d      	sxth	r5, r5
    max+=10;
 8001eea:	370a      	adds	r7, #10
 8001eec:	b23f      	sxth	r7, r7
 8001eee:	e7df      	b.n	8001eb0 <plot+0x70>
  if(min < 0 && max > 0){
 8001ef0:	2f00      	cmp	r7, #0
 8001ef2:	dddf      	ble.n	8001eb4 <plot+0x74>
    EPD_DrawLine(10, map(0, min, max, 110, 22), 250, map(0, min, max, 110, 22), BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8001ef4:	2316      	movs	r3, #22
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	236e      	movs	r3, #110	@ 0x6e
 8001efa:	463a      	mov	r2, r7
 8001efc:	4629      	mov	r1, r5
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fe74 	bl	8001bec <map>
 8001f04:	b281      	uxth	r1, r0
 8001f06:	2300      	movs	r3, #0
 8001f08:	9302      	str	r3, [sp, #8]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	9201      	str	r2, [sp, #4]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	22fa      	movs	r2, #250	@ 0xfa
 8001f14:	200a      	movs	r0, #10
 8001f16:	f7ff f95f 	bl	80011d8 <EPD_DrawLine>
 8001f1a:	e7cb      	b.n	8001eb4 <plot+0x74>
  switch (max - min)
 8001f1c:	f1ac 0319 	sub.w	r3, ip, #25
 8001f20:	2b18      	cmp	r3, #24
 8001f22:	d802      	bhi.n	8001f2a <plot+0xea>
    dt = 10;
 8001f24:	f04f 090a 	mov.w	r9, #10
 8001f28:	e02a      	b.n	8001f80 <plot+0x140>
    dt = 2000;
 8001f2a:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f2e:	e027      	b.n	8001f80 <plot+0x140>
  switch (max - min)
 8001f30:	f1ac 0364 	sub.w	r3, ip, #100	@ 0x64
 8001f34:	2b95      	cmp	r3, #149	@ 0x95
 8001f36:	d802      	bhi.n	8001f3e <plot+0xfe>
    dt = 50;
 8001f38:	f04f 0932 	mov.w	r9, #50	@ 0x32
 8001f3c:	e020      	b.n	8001f80 <plot+0x140>
    dt = 2000;
 8001f3e:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f42:	e01d      	b.n	8001f80 <plot+0x140>
  switch (max - min)
 8001f44:	f5bc 6ffa 	cmp.w	ip, #2000	@ 0x7d0
 8001f48:	da0d      	bge.n	8001f66 <plot+0x126>
 8001f4a:	f5bc 7f48 	cmp.w	ip, #800	@ 0x320
 8001f4e:	da2b      	bge.n	8001fa8 <plot+0x168>
 8001f50:	f5ac 73c8 	sub.w	r3, ip, #400	@ 0x190
 8001f54:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001f58:	d202      	bcs.n	8001f60 <plot+0x120>
    dt = 200;
 8001f5a:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8001f5e:	e00f      	b.n	8001f80 <plot+0x140>
    dt = 2000;
 8001f60:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f64:	e00c      	b.n	8001f80 <plot+0x140>
  switch (max - min)
 8001f66:	f5ac 63fa 	sub.w	r3, ip, #2000	@ 0x7d0
 8001f6a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001f6e:	d802      	bhi.n	8001f76 <plot+0x136>
 8001f70:	f44f 797a 	mov.w	r9, #1000	@ 0x3e8
 8001f74:	e004      	b.n	8001f80 <plot+0x140>
    dt = 2000;
 8001f76:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f7a:	e001      	b.n	8001f80 <plot+0x140>
    dt = 100;
 8001f7c:	f04f 0964 	mov.w	r9, #100	@ 0x64
  for (int16_t x = roundUpToDiv(min, dt); x < max+dt; x += dt){
 8001f80:	2d00      	cmp	r5, #0
 8001f82:	db14      	blt.n	8001fae <plot+0x16e>
 8001f84:	f109 34ff 	add.w	r4, r9, #4294967295
 8001f88:	4444      	add	r4, r8
 8001f8a:	46ca      	mov	sl, r9
 8001f8c:	fb94 f4f9 	sdiv	r4, r4, r9
 8001f90:	fb14 f409 	smulbb	r4, r4, r9
 8001f94:	b224      	sxth	r4, r4
 8001f96:	f8cd c010 	str.w	ip, [sp, #16]
 8001f9a:	e038      	b.n	800200e <plot+0x1ce>
    dt = 20;
 8001f9c:	f04f 0914 	mov.w	r9, #20
 8001fa0:	e7ee      	b.n	8001f80 <plot+0x140>
    dt = 2000;
 8001fa2:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001fa6:	e7eb      	b.n	8001f80 <plot+0x140>
    dt = 500;
 8001fa8:	f44f 79fa 	mov.w	r9, #500	@ 0x1f4
 8001fac:	e7e8      	b.n	8001f80 <plot+0x140>
  for (int16_t x = roundUpToDiv(min, dt); x < max+dt; x += dt){
 8001fae:	f1c9 0401 	rsb	r4, r9, #1
 8001fb2:	e7e9      	b.n	8001f88 <plot+0x148>
    if(x == 0){st = LINE_STYLE_SOLID;}
 8001fb4:	f04f 0b00 	mov.w	fp, #0
 8001fb8:	e032      	b.n	8002020 <plot+0x1e0>
      ln = sprintf(buf, "%d", x/100);
 8001fba:	4b58      	ldr	r3, [pc, #352]	@ (800211c <plot+0x2dc>)
 8001fbc:	fb83 2304 	smull	r2, r3, r3, r4
 8001fc0:	17e2      	asrs	r2, r4, #31
 8001fc2:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8001fc6:	b212      	sxth	r2, r2
 8001fc8:	4955      	ldr	r1, [pc, #340]	@ (8002120 <plot+0x2e0>)
 8001fca:	a808      	add	r0, sp, #32
 8001fcc:	f007 fee2 	bl	8009d94 <siprintf>
 8001fd0:	fa5f fb80 	uxtb.w	fp, r0
    EPD_SetRotate(0);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7fe ff7b 	bl	8000ed0 <EPD_SetRotate>
    EPD_DrawString_EN(map(x, min, max, 2, 88)+8-(2*ln), 0,  buf, &Font8, WHITE, BLACK);
 8001fda:	2358      	movs	r3, #88	@ 0x58
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	4632      	mov	r2, r6
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f7ff fe01 	bl	8001bec <map>
 8001fea:	eba0 004b 	sub.w	r0, r0, fp, lsl #1
 8001fee:	b280      	uxth	r0, r0
 8001ff0:	3008      	adds	r0, #8
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	9101      	str	r1, [sp, #4]
 8001ff6:	23ff      	movs	r3, #255	@ 0xff
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8002124 <plot+0x2e4>)
 8001ffc:	aa08      	add	r2, sp, #32
 8001ffe:	b280      	uxth	r0, r0
 8002000:	f7ff f9d6 	bl	80013b0 <EPD_DrawString_EN>
    EPD_SetRotate(90);
 8002004:	205a      	movs	r0, #90	@ 0x5a
 8002006:	f7fe ff63 	bl	8000ed0 <EPD_SetRotate>
  for (int16_t x = roundUpToDiv(min, dt); x < max+dt; x += dt){
 800200a:	444c      	add	r4, r9
 800200c:	b224      	sxth	r4, r4
 800200e:	4625      	mov	r5, r4
 8002010:	eb06 030a 	add.w	r3, r6, sl
 8002014:	429c      	cmp	r4, r3
 8002016:	da76      	bge.n	8002106 <plot+0x2c6>
    if(x == 0){st = LINE_STYLE_SOLID;}
 8002018:	2c00      	cmp	r4, #0
 800201a:	d0cb      	beq.n	8001fb4 <plot+0x174>
    bool st = LINE_STYLE_DOTTED;
 800201c:	f04f 0b01 	mov.w	fp, #1
    if(x > max && map(x, min, max, 110, 22) < 22){break;}
 8002020:	42a7      	cmp	r7, r4
 8002022:	da09      	bge.n	8002038 <plot+0x1f8>
 8002024:	2316      	movs	r3, #22
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	236e      	movs	r3, #110	@ 0x6e
 800202a:	4632      	mov	r2, r6
 800202c:	4641      	mov	r1, r8
 800202e:	4628      	mov	r0, r5
 8002030:	f7ff fddc 	bl	8001bec <map>
 8002034:	2815      	cmp	r0, #21
 8002036:	dd66      	ble.n	8002106 <plot+0x2c6>
    EPD_DrawLine(10, map(x, min, max, 110, 22), 250, map(x, min, max, 110, 22), BLACK, DOT_PIXEL_1X1, st);
 8002038:	2316      	movs	r3, #22
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	236e      	movs	r3, #110	@ 0x6e
 800203e:	4632      	mov	r2, r6
 8002040:	4641      	mov	r1, r8
 8002042:	4628      	mov	r0, r5
 8002044:	f7ff fdd2 	bl	8001bec <map>
 8002048:	b281      	uxth	r1, r0
 800204a:	f8cd b008 	str.w	fp, [sp, #8]
 800204e:	2301      	movs	r3, #1
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	2300      	movs	r3, #0
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	460b      	mov	r3, r1
 8002058:	22fa      	movs	r2, #250	@ 0xfa
 800205a:	200a      	movs	r0, #10
 800205c:	f7ff f8bc 	bl	80011d8 <EPD_DrawLine>
    if(x%100 == 0){
 8002060:	4a2e      	ldr	r2, [pc, #184]	@ (800211c <plot+0x2dc>)
 8002062:	fb82 3204 	smull	r3, r2, r2, r4
 8002066:	17e3      	asrs	r3, r4, #31
 8002068:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800206c:	2264      	movs	r2, #100	@ 0x64
 800206e:	fb02 4313 	mls	r3, r2, r3, r4
 8002072:	b21b      	sxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0a0      	beq.n	8001fba <plot+0x17a>
    else if(x%10 == 0 && max-min < 100){
 8002078:	492b      	ldr	r1, [pc, #172]	@ (8002128 <plot+0x2e8>)
 800207a:	fb81 2104 	smull	r2, r1, r1, r4
 800207e:	17e2      	asrs	r2, r4, #31
 8002080:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8002084:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002088:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
 800208c:	b212      	sxth	r2, r2
 800208e:	b912      	cbnz	r2, 8002096 <plot+0x256>
 8002090:	9a04      	ldr	r2, [sp, #16]
 8002092:	2a63      	cmp	r2, #99	@ 0x63
 8002094:	dd1d      	ble.n	80020d2 <plot+0x292>
    }else if(x%5 == 0 && max-min < 10){
 8002096:	4924      	ldr	r1, [pc, #144]	@ (8002128 <plot+0x2e8>)
 8002098:	fb81 2104 	smull	r2, r1, r1, r4
 800209c:	17e2      	asrs	r2, r4, #31
 800209e:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 80020a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80020a6:	1aa2      	subs	r2, r4, r2
 80020a8:	b212      	sxth	r2, r2
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d1ad      	bne.n	800200a <plot+0x1ca>
 80020ae:	9a04      	ldr	r2, [sp, #16]
 80020b0:	2a09      	cmp	r2, #9
 80020b2:	dcaa      	bgt.n	800200a <plot+0x1ca>
      uint8_t int_part = x / 100;
 80020b4:	4919      	ldr	r1, [pc, #100]	@ (800211c <plot+0x2dc>)
 80020b6:	fb81 2104 	smull	r2, r1, r1, r4
 80020ba:	17e2      	asrs	r2, r4, #31
 80020bc:	ebc2 1261 	rsb	r2, r2, r1, asr #5
      ln = sprintf(buf, "%d.%d", int_part, frac_part);
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	4919      	ldr	r1, [pc, #100]	@ (800212c <plot+0x2ec>)
 80020c6:	a808      	add	r0, sp, #32
 80020c8:	f007 fe64 	bl	8009d94 <siprintf>
 80020cc:	fa5f fb80 	uxtb.w	fp, r0
    }else if(x%5 == 0 && max-min < 10){
 80020d0:	e780      	b.n	8001fd4 <plot+0x194>
      uint16_t rounded = (x + 5) / 10;
 80020d2:	1d6b      	adds	r3, r5, #5
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <plot+0x2e8>)
 80020d6:	fb82 1203 	smull	r1, r2, r2, r3
 80020da:	17db      	asrs	r3, r3, #31
 80020dc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80020e0:	b29b      	uxth	r3, r3
      uint8_t int_part = rounded / 10;
 80020e2:	4a13      	ldr	r2, [pc, #76]	@ (8002130 <plot+0x2f0>)
 80020e4:	fba2 1203 	umull	r1, r2, r2, r3
 80020e8:	08d1      	lsrs	r1, r2, #3
      uint8_t frac_part = rounded % 10;
 80020ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80020ee:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
      ln = sprintf(buf, "%d.%d", int_part, frac_part);
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80020f8:	490c      	ldr	r1, [pc, #48]	@ (800212c <plot+0x2ec>)
 80020fa:	a808      	add	r0, sp, #32
 80020fc:	f007 fe4a 	bl	8009d94 <siprintf>
 8002100:	fa5f fb80 	uxtb.w	fp, r0
    else if(x%10 == 0 && max-min < 100){
 8002104:	e766      	b.n	8001fd4 <plot+0x194>
  uint32_t timestamp = UDISK_tst();
 8002106:	f7ff fb09 	bl	800171c <UDISK_tst>
 800210a:	4683      	mov	fp, r0
  for (uint8_t i = 0; i < q_len(); i++){
 800210c:	2700      	movs	r7, #0
 800210e:	f8cd a014 	str.w	sl, [sp, #20]
 8002112:	46b2      	mov	sl, r6
 8002114:	e037      	b.n	8002186 <plot+0x346>
 8002116:	bf00      	nop
 8002118:	200002dc 	.word	0x200002dc
 800211c:	51eb851f 	.word	0x51eb851f
 8002120:	0800be80 	.word	0x0800be80
 8002124:	200000b0 	.word	0x200000b0
 8002128:	66666667 	.word	0x66666667
 800212c:	0800be84 	.word	0x0800be84
 8002130:	cccccccd 	.word	0xcccccccd
    EPD_DrawLine(10+(i*5), map(q_get(i), min, max, 110, 22), 10+((i+1)*5), map(q_get(i+1), min, max, 110, 22), BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8002134:	4638      	mov	r0, r7
 8002136:	f000 fdd1 	bl	8002cdc <q_get>
 800213a:	2616      	movs	r6, #22
 800213c:	9600      	str	r6, [sp, #0]
 800213e:	236e      	movs	r3, #110	@ 0x6e
 8002140:	4652      	mov	r2, sl
 8002142:	4641      	mov	r1, r8
 8002144:	f7ff fd52 	bl	8001bec <map>
 8002148:	9004      	str	r0, [sp, #16]
 800214a:	1c7c      	adds	r4, r7, #1
 800214c:	b2e7      	uxtb	r7, r4
 800214e:	4638      	mov	r0, r7
 8002150:	f000 fdc4 	bl	8002cdc <q_get>
 8002154:	9600      	str	r6, [sp, #0]
 8002156:	236e      	movs	r3, #110	@ 0x6e
 8002158:	4652      	mov	r2, sl
 800215a:	4641      	mov	r1, r8
 800215c:	f7ff fd46 	bl	8001bec <map>
 8002160:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002164:	f104 020a 	add.w	r2, r4, #10
 8002168:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800216c:	350a      	adds	r5, #10
 800216e:	2100      	movs	r1, #0
 8002170:	9102      	str	r1, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	9100      	str	r1, [sp, #0]
 8002178:	b283      	uxth	r3, r0
 800217a:	b292      	uxth	r2, r2
 800217c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8002180:	b2a8      	uxth	r0, r5
 8002182:	f7ff f829 	bl	80011d8 <EPD_DrawLine>
  for (uint8_t i = 0; i < q_len(); i++){
 8002186:	463d      	mov	r5, r7
 8002188:	f000 fe40 	bl	8002e0c <q_len>
 800218c:	4287      	cmp	r7, r0
 800218e:	d3d1      	bcc.n	8002134 <plot+0x2f4>
  for (int8_t i = q_len(); i > 0; i-=8){
 8002190:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002194:	f000 fe3a 	bl	8002e0c <q_len>
 8002198:	b244      	sxtb	r4, r0
 800219a:	e001      	b.n	80021a0 <plot+0x360>
 800219c:	3c08      	subs	r4, #8
 800219e:	b264      	sxtb	r4, r4
 80021a0:	2c00      	cmp	r4, #0
 80021a2:	dd34      	ble.n	800220e <plot+0x3ce>
    if(i == q_len()){continue;}
 80021a4:	f000 fe32 	bl	8002e0c <q_len>
 80021a8:	4284      	cmp	r4, r0
 80021aa:	d0f7      	beq.n	800219c <plot+0x35c>
    EPD_DrawLine(10+(i*5), 20, 10+(i*5), 112, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80021ac:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 80021b0:	b2ad      	uxth	r5, r5
 80021b2:	350a      	adds	r5, #10
 80021b4:	b2ad      	uxth	r5, r5
 80021b6:	2301      	movs	r3, #1
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2600      	movs	r6, #0
 80021be:	9600      	str	r6, [sp, #0]
 80021c0:	2370      	movs	r3, #112	@ 0x70
 80021c2:	462a      	mov	r2, r5
 80021c4:	2114      	movs	r1, #20
 80021c6:	4628      	mov	r0, r5
 80021c8:	f7ff f806 	bl	80011d8 <EPD_DrawLine>
    uint32_t this_time = timestamp - MEASURMENTS_DELTA_SEC*(q_len()-i-1);
 80021cc:	f000 fe1e 	bl	8002e0c <q_len>
 80021d0:	1b00      	subs	r0, r0, r4
 80021d2:	3801      	subs	r0, #1
 80021d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    timestamp_to_time(this_time, &hours, &minutes);
 80021d8:	f10d 021f 	add.w	r2, sp, #31
 80021dc:	f10d 011e 	add.w	r1, sp, #30
 80021e0:	ebab 0040 	sub.w	r0, fp, r0, lsl #1
 80021e4:	f7ff fe0a 	bl	8001dfc <timestamp_to_time>
    sprintf(timest_buf, "%02d:%02d", hours, minutes);
 80021e8:	af08      	add	r7, sp, #32
 80021ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80021ee:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80021f2:	496d      	ldr	r1, [pc, #436]	@ (80023a8 <plot+0x568>)
 80021f4:	4638      	mov	r0, r7
 80021f6:	f007 fdcd 	bl	8009d94 <siprintf>
    EPD_DrawString_EN(10+(i*5), 114, timest_buf, &Font8, WHITE, BLACK);
 80021fa:	9601      	str	r6, [sp, #4]
 80021fc:	23ff      	movs	r3, #255	@ 0xff
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	4b6a      	ldr	r3, [pc, #424]	@ (80023ac <plot+0x56c>)
 8002202:	463a      	mov	r2, r7
 8002204:	2172      	movs	r1, #114	@ 0x72
 8002206:	4628      	mov	r0, r5
 8002208:	f7ff f8d2 	bl	80013b0 <EPD_DrawString_EN>
 800220c:	e7c6      	b.n	800219c <plot+0x35c>
  if(dt < 100 && dt >= 10){
 800220e:	f1a9 030a 	sub.w	r3, r9, #10
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b59      	cmp	r3, #89	@ 0x59
 8002216:	f240 809f 	bls.w	8002358 <plot+0x518>
  }else if(dt < 10){
 800221a:	f1b9 0f09 	cmp.w	r9, #9
 800221e:	f200 80a6 	bhi.w	800236e <plot+0x52e>
    sprintf(buf, "%d.0%d*C/div", dt/100, dt-(dt/100));
 8002222:	4a63      	ldr	r2, [pc, #396]	@ (80023b0 <plot+0x570>)
 8002224:	fba2 9209 	umull	r9, r2, r2, r9
 8002228:	ebaa 1352 	sub.w	r3, sl, r2, lsr #5
 800222c:	0952      	lsrs	r2, r2, #5
 800222e:	4961      	ldr	r1, [pc, #388]	@ (80023b4 <plot+0x574>)
 8002230:	a817      	add	r0, sp, #92	@ 0x5c
 8002232:	f007 fdaf 	bl	8009d94 <siprintf>
  EPD_DrawString_EN(0, 0, buf, &Font12, WHITE, BLACK);
 8002236:	2000      	movs	r0, #0
 8002238:	9001      	str	r0, [sp, #4]
 800223a:	23ff      	movs	r3, #255	@ 0xff
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4b5e      	ldr	r3, [pc, #376]	@ (80023b8 <plot+0x578>)
 8002240:	aa17      	add	r2, sp, #92	@ 0x5c
 8002242:	4601      	mov	r1, r0
 8002244:	f7ff f8b4 	bl	80013b0 <EPD_DrawString_EN>
  mcuVoltage = 0xFFF * 1.18 / adcData;
 8002248:	4b5c      	ldr	r3, [pc, #368]	@ (80023bc <plot+0x57c>)
 800224a:	8818      	ldrh	r0, [r3, #0]
 800224c:	f7fe f95a 	bl	8000504 <__aeabi_i2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	a152      	add	r1, pc, #328	@ (adr r1, 80023a0 <plot+0x560>)
 8002256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800225a:	f7fe fae7 	bl	800082c <__aeabi_ddiv>
 800225e:	f7fe fbcd 	bl	80009fc <__aeabi_d2f>
 8002262:	ee07 0a90 	vmov	s15, r0
 8002266:	4b56      	ldr	r3, [pc, #344]	@ (80023c0 <plot+0x580>)
 8002268:	6018      	str	r0, [r3, #0]
  if(mcuVoltage < 2.25){
 800226a:	eeb0 7a02 	vmov.f32	s14, #2	@ 0x40100000  2.250
 800226e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	f100 8083 	bmi.w	8002380 <plot+0x540>
  EPD_DrawLine(10, 112, 250, 112, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800227a:	2400      	movs	r4, #0
 800227c:	9402      	str	r4, [sp, #8]
 800227e:	2501      	movs	r5, #1
 8002280:	9501      	str	r5, [sp, #4]
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	2370      	movs	r3, #112	@ 0x70
 8002286:	22fa      	movs	r2, #250	@ 0xfa
 8002288:	4619      	mov	r1, r3
 800228a:	200a      	movs	r0, #10
 800228c:	f7fe ffa4 	bl	80011d8 <EPD_DrawLine>
  EPD_DrawLine(10, 20, 10, 112, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8002290:	9402      	str	r4, [sp, #8]
 8002292:	9501      	str	r5, [sp, #4]
 8002294:	9400      	str	r4, [sp, #0]
 8002296:	2370      	movs	r3, #112	@ 0x70
 8002298:	220a      	movs	r2, #10
 800229a:	2114      	movs	r1, #20
 800229c:	4610      	mov	r0, r2
 800229e:	f7fe ff9b 	bl	80011d8 <EPD_DrawLine>
  RTC_TimeTypeDef sTime = {0};
 80022a2:	a912      	add	r1, sp, #72	@ 0x48
 80022a4:	9412      	str	r4, [sp, #72]	@ 0x48
 80022a6:	604c      	str	r4, [r1, #4]
 80022a8:	608c      	str	r4, [r1, #8]
 80022aa:	60cc      	str	r4, [r1, #12]
 80022ac:	610c      	str	r4, [r1, #16]
  RTC_DateTypeDef sDate = {0};
 80022ae:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80022b0:	4d44      	ldr	r5, [pc, #272]	@ (80023c4 <plot+0x584>)
 80022b2:	4622      	mov	r2, r4
 80022b4:	4628      	mov	r0, r5
 80022b6:	f004 fb8f 	bl	80069d8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022ba:	4622      	mov	r2, r4
 80022bc:	a911      	add	r1, sp, #68	@ 0x44
 80022be:	4628      	mov	r0, r5
 80022c0:	f004 fbb0 	bl	8006a24 <HAL_RTC_GetDate>
  time.Day = sDate.Date;
 80022c4:	f89d 3046 	ldrb.w	r3, [sp, #70]	@ 0x46
 80022c8:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
  time.Month = sDate.Month;
 80022cc:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
 80022d0:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
  time.Year = sDate.Year;
 80022d4:	f89d 3047 	ldrb.w	r3, [sp, #71]	@ 0x47
 80022d8:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  EPD_DrawDate(175, 0, &time, &Font16, WHITE, BLACK);
 80022dc:	4e3a      	ldr	r6, [pc, #232]	@ (80023c8 <plot+0x588>)
 80022de:	9401      	str	r4, [sp, #4]
 80022e0:	27ff      	movs	r7, #255	@ 0xff
 80022e2:	9700      	str	r7, [sp, #0]
 80022e4:	4633      	mov	r3, r6
 80022e6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80022e8:	4621      	mov	r1, r4
 80022ea:	20af      	movs	r0, #175	@ 0xaf
 80022ec:	f7ff f89e 	bl	800142c <EPD_DrawDate>
  sprintf(temp_buf, "%d.%dC", q_get(q_len()-1)/100, q_get(q_len()-1)%100);
 80022f0:	f000 fd8c 	bl	8002e0c <q_len>
 80022f4:	3801      	subs	r0, #1
 80022f6:	b2c0      	uxtb	r0, r0
 80022f8:	f000 fcf0 	bl	8002cdc <q_get>
 80022fc:	4605      	mov	r5, r0
 80022fe:	f000 fd85 	bl	8002e0c <q_len>
 8002302:	3801      	subs	r0, #1
 8002304:	b2c0      	uxtb	r0, r0
 8002306:	f000 fce9 	bl	8002cdc <q_get>
 800230a:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <plot+0x570>)
 800230c:	fb83 2100 	smull	r2, r1, r3, r0
 8002310:	17c2      	asrs	r2, r0, #31
 8002312:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 8002316:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800231a:	fb08 0012 	mls	r0, r8, r2, r0
 800231e:	fb83 2305 	smull	r2, r3, r3, r5
 8002322:	17ea      	asrs	r2, r5, #31
 8002324:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8002328:	ad0c      	add	r5, sp, #48	@ 0x30
 800232a:	b203      	sxth	r3, r0
 800232c:	b212      	sxth	r2, r2
 800232e:	4927      	ldr	r1, [pc, #156]	@ (80023cc <plot+0x58c>)
 8002330:	4628      	mov	r0, r5
 8002332:	f007 fd2f 	bl	8009d94 <siprintf>
  EPD_DrawString_EN(85, 0, temp_buf, &Font16, WHITE, BLACK);
 8002336:	9401      	str	r4, [sp, #4]
 8002338:	9700      	str	r7, [sp, #0]
 800233a:	4633      	mov	r3, r6
 800233c:	462a      	mov	r2, r5
 800233e:	4621      	mov	r1, r4
 8002340:	2055      	movs	r0, #85	@ 0x55
 8002342:	f7ff f835 	bl	80013b0 <EPD_DrawString_EN>
  EPD_Display_Base(BlackImage);
 8002346:	4822      	ldr	r0, [pc, #136]	@ (80023d0 <plot+0x590>)
 8002348:	f7fe fd2e 	bl	8000da8 <EPD_Display_Base>
  HAL_Delay(100);
 800234c:	4640      	mov	r0, r8
 800234e:	f000 fdb3 	bl	8002eb8 <HAL_Delay>
}
 8002352:	b01b      	add	sp, #108	@ 0x6c
 8002354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sprintf(buf, "%d.%d*C/div", dt/100, dt-(dt/100));
 8002358:	4a15      	ldr	r2, [pc, #84]	@ (80023b0 <plot+0x570>)
 800235a:	fba2 9209 	umull	r9, r2, r2, r9
 800235e:	ebaa 1352 	sub.w	r3, sl, r2, lsr #5
 8002362:	0952      	lsrs	r2, r2, #5
 8002364:	491b      	ldr	r1, [pc, #108]	@ (80023d4 <plot+0x594>)
 8002366:	a817      	add	r0, sp, #92	@ 0x5c
 8002368:	f007 fd14 	bl	8009d94 <siprintf>
 800236c:	e763      	b.n	8002236 <plot+0x3f6>
    sprintf(buf, "%d*C/div", dt/100);
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <plot+0x570>)
 8002370:	fba3 3209 	umull	r3, r2, r3, r9
 8002374:	0952      	lsrs	r2, r2, #5
 8002376:	4918      	ldr	r1, [pc, #96]	@ (80023d8 <plot+0x598>)
 8002378:	a817      	add	r0, sp, #92	@ 0x5c
 800237a:	f007 fd0b 	bl	8009d94 <siprintf>
 800237e:	e75a      	b.n	8002236 <plot+0x3f6>
    EPD_SetRotate(0);
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fda5 	bl	8000ed0 <EPD_SetRotate>
    EPD_DrawBMP(107, 95, 16, 26, dead_batt_26x16);
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <plot+0x59c>)
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	231a      	movs	r3, #26
 800238c:	2210      	movs	r2, #16
 800238e:	215f      	movs	r1, #95	@ 0x5f
 8002390:	206b      	movs	r0, #107	@ 0x6b
 8002392:	f7ff f917 	bl	80015c4 <EPD_DrawBMP>
    EPD_SetRotate(90);
 8002396:	205a      	movs	r0, #90	@ 0x5a
 8002398:	f7fe fd9a 	bl	8000ed0 <EPD_SetRotate>
 800239c:	e76d      	b.n	800227a <plot+0x43a>
 800239e:	bf00      	nop
 80023a0:	99999999 	.word	0x99999999
 80023a4:	40b2e019 	.word	0x40b2e019
 80023a8:	0800be8c 	.word	0x0800be8c
 80023ac:	200000b0 	.word	0x200000b0
 80023b0:	51eb851f 	.word	0x51eb851f
 80023b4:	0800bea4 	.word	0x0800bea4
 80023b8:	200000a0 	.word	0x200000a0
 80023bc:	20001294 	.word	0x20001294
 80023c0:	20001298 	.word	0x20001298
 80023c4:	20001388 	.word	0x20001388
 80023c8:	200000a8 	.word	0x200000a8
 80023cc:	0800bec0 	.word	0x0800bec0
 80023d0:	200002dc 	.word	0x200002dc
 80023d4:	0800be98 	.word	0x0800be98
 80023d8:	0800beb4 	.word	0x0800beb4
 80023dc:	0800d268 	.word	0x0800d268

080023e0 <USB_CDC_RxHandler>:


void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 80023e0:	b510      	push	{r4, lr}
  switch(Buf[0]){
 80023e2:	7803      	ldrb	r3, [r0, #0]
 80023e4:	2b73      	cmp	r3, #115	@ 0x73
 80023e6:	d00c      	beq.n	8002402 <USB_CDC_RxHandler+0x22>
 80023e8:	2b74      	cmp	r3, #116	@ 0x74
 80023ea:	d005      	beq.n	80023f8 <USB_CDC_RxHandler+0x18>
 80023ec:	2b67      	cmp	r3, #103	@ 0x67
 80023ee:	d107      	bne.n	8002400 <USB_CDC_RxHandler+0x20>
    case 't':
      CDC_Transmit_FS("Termaink Ready\n\r", 17);
      break;
    case 'g':
      send_usb_data = true;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <USB_CDC_RxHandler+0x50>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
      break;
 80023f6:	e003      	b.n	8002400 <USB_CDC_RxHandler+0x20>
      CDC_Transmit_FS("Termaink Ready\n\r", 17);
 80023f8:	2111      	movs	r1, #17
 80023fa:	480e      	ldr	r0, [pc, #56]	@ (8002434 <USB_CDC_RxHandler+0x54>)
 80023fc:	f006 fbf4 	bl	8008be8 <CDC_Transmit_FS>
    case 's':
      set_rtc = true;
      memcpy(rtc_buf, Buf, 25);
      break;
  }
}
 8002400:	bd10      	pop	{r4, pc}
 8002402:	4684      	mov	ip, r0
      set_rtc = true;
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <USB_CDC_RxHandler+0x58>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
      memcpy(rtc_buf, Buf, 25);
 800240a:	4c0c      	ldr	r4, [pc, #48]	@ (800243c <USB_CDC_RxHandler+0x5c>)
 800240c:	6800      	ldr	r0, [r0, #0]
 800240e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002412:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002416:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800241a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8002420:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8002424:	c403      	stmia	r4!, {r0, r1}
 8002426:	f89c 3018 	ldrb.w	r3, [ip, #24]
 800242a:	7023      	strb	r3, [r4, #0]
}
 800242c:	e7e8      	b.n	8002400 <USB_CDC_RxHandler+0x20>
 800242e:	bf00      	nop
 8002430:	200002d7 	.word	0x200002d7
 8002434:	0800bec8 	.word	0x0800bec8
 8002438:	200002d2 	.word	0x200002d2
 800243c:	200002b4 	.word	0x200002b4

08002440 <syncRTC>:

void syncRTC(){
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	b08c      	sub	sp, #48	@ 0x30
  RTC_TimeTypeDef sTime = {0};
 8002444:	ad07      	add	r5, sp, #28
 8002446:	2400      	movs	r4, #0
 8002448:	9407      	str	r4, [sp, #28]
 800244a:	9408      	str	r4, [sp, #32]
 800244c:	9409      	str	r4, [sp, #36]	@ 0x24
 800244e:	940a      	str	r4, [sp, #40]	@ 0x28
 8002450:	940b      	str	r4, [sp, #44]	@ 0x2c
  RTC_DateTypeDef sDate = {0};
 8002452:	9406      	str	r4, [sp, #24]
  // if (matched < 6){
  //   CDC_Transmit_FS("ERR\n\r", 6);
  //   return;
  // }

  memcpy(hours, &rtc_buf[1], 2);
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <syncRTC+0xb8>)
 8002456:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 800245a:	f8ad 2008 	strh.w	r2, [sp, #8]
  memcpy(minutes, &rtc_buf[4], 2);
 800245e:	889a      	ldrh	r2, [r3, #4]
 8002460:	f8ad 2004 	strh.w	r2, [sp, #4]
  memcpy(seconds, &rtc_buf[7], 2);
 8002464:	f8b3 2007 	ldrh.w	r2, [r3, #7]
 8002468:	f8ad 2000 	strh.w	r2, [sp]
  memcpy(year, &rtc_buf[10], 2);
 800246c:	895a      	ldrh	r2, [r3, #10]
 800246e:	f8ad 200c 	strh.w	r2, [sp, #12]
  memcpy(month, &rtc_buf[13], 2);
 8002472:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 8002476:	f8ad 2010 	strh.w	r2, [sp, #16]
  memcpy(day, &rtc_buf[16], 2);
 800247a:	8a1b      	ldrh	r3, [r3, #16]
 800247c:	f8ad 3014 	strh.w	r3, [sp, #20]
  
  sTime.Hours = atoi(hours);
 8002480:	a802      	add	r0, sp, #8
 8002482:	f007 fbfc 	bl	8009c7e <atoi>
 8002486:	f88d 001c 	strb.w	r0, [sp, #28]
  sTime.Minutes = atoi(minutes);
 800248a:	a801      	add	r0, sp, #4
 800248c:	f007 fbf7 	bl	8009c7e <atoi>
 8002490:	f88d 001d 	strb.w	r0, [sp, #29]
  sTime.Seconds = atoi(seconds);
 8002494:	4668      	mov	r0, sp
 8002496:	f007 fbf2 	bl	8009c7e <atoi>
 800249a:	f88d 001e 	strb.w	r0, [sp, #30]
  sDate.Year = atoi(year);
 800249e:	a803      	add	r0, sp, #12
 80024a0:	f007 fbed 	bl	8009c7e <atoi>
 80024a4:	f88d 001b 	strb.w	r0, [sp, #27]
  sDate.Month = atoi(month);
 80024a8:	a804      	add	r0, sp, #16
 80024aa:	f007 fbe8 	bl	8009c7e <atoi>
 80024ae:	f88d 0019 	strb.w	r0, [sp, #25]
  sDate.Date = atoi(day);
 80024b2:	a805      	add	r0, sp, #20
 80024b4:	f007 fbe3 	bl	8009c7e <atoi>
 80024b8:	f88d 001a 	strb.w	r0, [sp, #26]

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80024bc:	2301      	movs	r3, #1
 80024be:	f88d 3018 	strb.w	r3, [sp, #24]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024c2:	940a      	str	r4, [sp, #40]	@ 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024c4:	940b      	str	r4, [sp, #44]	@ 0x2c

  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80024c6:	4e0d      	ldr	r6, [pc, #52]	@ (80024fc <syncRTC+0xbc>)
 80024c8:	4622      	mov	r2, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	4630      	mov	r0, r6
 80024ce:	f004 f9c2 	bl	8006856 <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80024d2:	4622      	mov	r2, r4
 80024d4:	a906      	add	r1, sp, #24
 80024d6:	4630      	mov	r0, r6
 80024d8:	f004 fa23 	bl	8006922 <HAL_RTC_SetDate>

  HAL_PWR_EnableBkUpAccess();  
 80024dc:	f003 fa58 	bl	8005990 <HAL_PWR_EnableBkUpAccess>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, KEY);
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <syncRTC+0xc0>)
 80024e2:	2106      	movs	r1, #6
 80024e4:	4630      	mov	r0, r6
 80024e6:	f004 fabb 	bl	8006a60 <HAL_RTCEx_BKUPWrite>
  
  CDC_Transmit_FS("OK\n\r", 5);
 80024ea:	2105      	movs	r1, #5
 80024ec:	4805      	ldr	r0, [pc, #20]	@ (8002504 <syncRTC+0xc4>)
 80024ee:	f006 fb7b 	bl	8008be8 <CDC_Transmit_FS>
}
 80024f2:	b00c      	add	sp, #48	@ 0x30
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
 80024f6:	bf00      	nop
 80024f8:	200002b4 	.word	0x200002b4
 80024fc:	20001388 	.word	0x20001388
 8002500:	aaff55ff 	.word	0xaaff55ff
 8002504:	0800bedc 	.word	0x0800bedc

08002508 <USB_SendAllData>:

void USB_SendAllData(){
 8002508:	b530      	push	{r4, r5, lr}
 800250a:	b087      	sub	sp, #28
  char buf[20];
  uint16_t len = UDISK_len();
 800250c:	f7ff f900 	bl	8001710 <UDISK_len>
 8002510:	4605      	mov	r5, r0
  uint8_t ln = sprintf(buf, "%d\n\r", len);
 8002512:	ac01      	add	r4, sp, #4
 8002514:	4602      	mov	r2, r0
 8002516:	491b      	ldr	r1, [pc, #108]	@ (8002584 <USB_SendAllData+0x7c>)
 8002518:	4620      	mov	r0, r4
 800251a:	f007 fc3b 	bl	8009d94 <siprintf>
  CDC_Transmit_FS(buf, ln);
 800251e:	b2c1      	uxtb	r1, r0
 8002520:	4620      	mov	r0, r4
 8002522:	f006 fb61 	bl	8008be8 <CDC_Transmit_FS>
  for (uint16_t i = len; i > 0; i--){
 8002526:	e017      	b.n	8002558 <USB_SendAllData+0x50>
    memset(buf, 0x00, 20);
 8002528:	ac01      	add	r4, sp, #4
 800252a:	2300      	movs	r3, #0
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	9303      	str	r3, [sp, #12]
 8002532:	9304      	str	r3, [sp, #16]
 8002534:	9305      	str	r3, [sp, #20]
    ln = sprintf(buf, "%d\n\r", UDISK_get(i));
 8002536:	4628      	mov	r0, r5
 8002538:	f7ff f8be 	bl	80016b8 <UDISK_get>
 800253c:	4602      	mov	r2, r0
 800253e:	4911      	ldr	r1, [pc, #68]	@ (8002584 <USB_SendAllData+0x7c>)
 8002540:	4620      	mov	r0, r4
 8002542:	f007 fc27 	bl	8009d94 <siprintf>
    CDC_Transmit_FS(buf, ln);
 8002546:	b2c1      	uxtb	r1, r0
 8002548:	4620      	mov	r0, r4
 800254a:	f006 fb4d 	bl	8008be8 <CDC_Transmit_FS>
    HAL_Delay(1);
 800254e:	2001      	movs	r0, #1
 8002550:	f000 fcb2 	bl	8002eb8 <HAL_Delay>
  for (uint16_t i = len; i > 0; i--){
 8002554:	3d01      	subs	r5, #1
 8002556:	b2ad      	uxth	r5, r5
 8002558:	2d00      	cmp	r5, #0
 800255a:	d1e5      	bne.n	8002528 <USB_SendAllData+0x20>
  }
  memset(buf, 0x00, 20);
 800255c:	ac01      	add	r4, sp, #4
 800255e:	2300      	movs	r3, #0
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	9303      	str	r3, [sp, #12]
 8002566:	9304      	str	r3, [sp, #16]
 8002568:	9305      	str	r3, [sp, #20]
  ln = sprintf(buf, "T%d\n\r", UDISK_tst());
 800256a:	f7ff f8d7 	bl	800171c <UDISK_tst>
 800256e:	4602      	mov	r2, r0
 8002570:	4905      	ldr	r1, [pc, #20]	@ (8002588 <USB_SendAllData+0x80>)
 8002572:	4620      	mov	r0, r4
 8002574:	f007 fc0e 	bl	8009d94 <siprintf>
  CDC_Transmit_FS(buf, ln);
 8002578:	b2c1      	uxtb	r1, r0
 800257a:	4620      	mov	r0, r4
 800257c:	f006 fb34 	bl	8008be8 <CDC_Transmit_FS>
}
 8002580:	b007      	add	sp, #28
 8002582:	bd30      	pop	{r4, r5, pc}
 8002584:	0800bee4 	.word	0x0800bee4
 8002588:	0800beec 	.word	0x0800beec

0800258c <HAL_GPIO_EXTI_Callback>:
// }


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == GPIO_PIN_5) {
 800258c:	2820      	cmp	r0, #32
 800258e:	d001      	beq.n	8002594 <HAL_GPIO_EXTI_Callback+0x8>
    initialise_usb_connection = true;
  } else {
      __NOP();
 8002590:	bf00      	nop
  }
}
 8002592:	4770      	bx	lr
    initialise_usb_connection = true;
 8002594:	4b01      	ldr	r3, [pc, #4]	@ (800259c <HAL_GPIO_EXTI_Callback+0x10>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	4770      	bx	lr
 800259c:	200002d4 	.word	0x200002d4

080025a0 <USB_DEVICE_IsConnected>:

bool USB_DEVICE_IsConnected(){
 80025a0:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(USB_WKUP_GPIO_Port, USB_WKUP_Pin);
 80025a2:	2120      	movs	r1, #32
 80025a4:	4803      	ldr	r0, [pc, #12]	@ (80025b4 <USB_DEVICE_IsConnected+0x14>)
 80025a6:	f001 fe23 	bl	80041f0 <HAL_GPIO_ReadPin>
}
 80025aa:	3800      	subs	r0, #0
 80025ac:	bf18      	it	ne
 80025ae:	2001      	movne	r0, #1
 80025b0:	bd08      	pop	{r3, pc}
 80025b2:	bf00      	nop
 80025b4:	48000400 	.word	0x48000400

080025b8 <HAL_LPTIM_AutoReloadMatchCallback>:
  seconds_passed++;
 80025b8:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	3201      	adds	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
  if (seconds_passed >= MEASURMENTS_DELTA_SEC)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d800      	bhi.n	80025c8 <HAL_LPTIM_AutoReloadMatchCallback+0x10>
 80025c6:	4770      	bx	lr
{
 80025c8:	b510      	push	{r4, lr}
      measure = true;
 80025ca:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <HAL_LPTIM_AutoReloadMatchCallback+0x34>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
      ready = false;
 80025d0:	2400      	movs	r4, #0
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <HAL_LPTIM_AutoReloadMatchCallback+0x38>)
 80025d4:	701c      	strb	r4, [r3, #0]
      go_to_sleep = false;
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <HAL_LPTIM_AutoReloadMatchCallback+0x3c>)
 80025d8:	701c      	strb	r4, [r3, #0]
      send_usb = USB_DEVICE_IsConnected();
 80025da:	f7ff ffe1 	bl	80025a0 <USB_DEVICE_IsConnected>
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_LPTIM_AutoReloadMatchCallback+0x40>)
 80025e0:	7018      	strb	r0, [r3, #0]
      seconds_passed = 0;
 80025e2:	4b01      	ldr	r3, [pc, #4]	@ (80025e8 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 80025e4:	601c      	str	r4, [r3, #0]
}
 80025e6:	bd10      	pop	{r4, pc}
 80025e8:	200002ac 	.word	0x200002ac
 80025ec:	200002d6 	.word	0x200002d6
 80025f0:	200002d5 	.word	0x200002d5
 80025f4:	200002d3 	.word	0x200002d3
 80025f8:	200002d8 	.word	0x200002d8

080025fc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025fe:	e7fe      	b.n	80025fe <Error_Handler+0x2>

08002600 <MX_SPI1_Init>:
{
 8002600:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8002602:	4811      	ldr	r0, [pc, #68]	@ (8002648 <MX_SPI1_Init+0x48>)
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <MX_SPI1_Init+0x4c>)
 8002606:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002608:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800260c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800260e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002612:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002614:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002618:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800261e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002624:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002626:	2218      	movs	r2, #24
 8002628:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800262a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800262c:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800262e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002630:	2207      	movs	r2, #7
 8002632:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002634:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002636:	2308      	movs	r3, #8
 8002638:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800263a:	f004 fb36 	bl	8006caa <HAL_SPI_Init>
 800263e:	b900      	cbnz	r0, 8002642 <MX_SPI1_Init+0x42>
}
 8002640:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002642:	f7ff ffdb 	bl	80025fc <Error_Handler>
 8002646:	bf00      	nop
 8002648:	20001324 	.word	0x20001324
 800264c:	40013000 	.word	0x40013000

08002650 <MX_RTC_Init>:
{
 8002650:	b500      	push	{lr}
 8002652:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8002654:	2300      	movs	r3, #0
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	9303      	str	r3, [sp, #12]
 800265c:	9304      	str	r3, [sp, #16]
 800265e:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8002660:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 8002662:	4821      	ldr	r0, [pc, #132]	@ (80026e8 <MX_RTC_Init+0x98>)
 8002664:	4a21      	ldr	r2, [pc, #132]	@ (80026ec <MX_RTC_Init+0x9c>)
 8002666:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002668:	6083      	str	r3, [r0, #8]
  hrtc.Init.AsynchPrediv = 127;
 800266a:	227f      	movs	r2, #127	@ 0x7f
 800266c:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 800266e:	22ff      	movs	r2, #255	@ 0xff
 8002670:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002672:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002674:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002676:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002678:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800267c:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800267e:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002680:	f004 f882 	bl	8006788 <HAL_RTC_Init>
 8002684:	bb48      	cbnz	r0, 80026da <MX_RTC_Init+0x8a>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6) == RTC_key){
 8002686:	2106      	movs	r1, #6
 8002688:	4817      	ldr	r0, [pc, #92]	@ (80026e8 <MX_RTC_Init+0x98>)
 800268a:	f004 f9f8 	bl	8006a7e <HAL_RTCEx_BKUPRead>
 800268e:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <MX_RTC_Init+0xa0>)
 8002690:	4298      	cmp	r0, r3
 8002692:	d01f      	beq.n	80026d4 <MX_RTC_Init+0x84>
  sTime.Hours = 0x0;
 8002694:	2300      	movs	r3, #0
 8002696:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 800269a:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 800269e:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
 80026a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026a6:	9204      	str	r2, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026a8:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80026aa:	2201      	movs	r2, #1
 80026ac:	a901      	add	r1, sp, #4
 80026ae:	480e      	ldr	r0, [pc, #56]	@ (80026e8 <MX_RTC_Init+0x98>)
 80026b0:	f004 f8d1 	bl	8006856 <HAL_RTC_SetTime>
 80026b4:	b998      	cbnz	r0, 80026de <MX_RTC_Init+0x8e>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80026b6:	2201      	movs	r2, #1
 80026b8:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 80026bc:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 80026c0:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x25;
 80026c4:	2325      	movs	r3, #37	@ 0x25
 80026c6:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80026ca:	4669      	mov	r1, sp
 80026cc:	4806      	ldr	r0, [pc, #24]	@ (80026e8 <MX_RTC_Init+0x98>)
 80026ce:	f004 f928 	bl	8006922 <HAL_RTC_SetDate>
 80026d2:	b930      	cbnz	r0, 80026e2 <MX_RTC_Init+0x92>
}
 80026d4:	b007      	add	sp, #28
 80026d6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80026da:	f7ff ff8f 	bl	80025fc <Error_Handler>
    Error_Handler();
 80026de:	f7ff ff8d 	bl	80025fc <Error_Handler>
    Error_Handler();
 80026e2:	f7ff ff8b 	bl	80025fc <Error_Handler>
 80026e6:	bf00      	nop
 80026e8:	20001388 	.word	0x20001388
 80026ec:	40002800 	.word	0x40002800
 80026f0:	aaff55ff 	.word	0xaaff55ff

080026f4 <MX_USART2_UART_Init>:
{
 80026f4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80026f6:	480b      	ldr	r0, [pc, #44]	@ (8002724 <MX_USART2_UART_Init+0x30>)
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <MX_USART2_UART_Init+0x34>)
 80026fa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80026fc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002700:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	2300      	movs	r3, #0
 8002704:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002706:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002708:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800270a:	220c      	movs	r2, #12
 800270c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002712:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002714:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002716:	f004 ffd0 	bl	80076ba <HAL_HalfDuplex_Init>
 800271a:	b900      	cbnz	r0, 800271e <MX_USART2_UART_Init+0x2a>
}
 800271c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800271e:	f7ff ff6d 	bl	80025fc <Error_Handler>
 8002722:	bf00      	nop
 8002724:	2000129c 	.word	0x2000129c
 8002728:	40004400 	.word	0x40004400

0800272c <MX_ADC1_Init>:
{
 800272c:	b500      	push	{lr}
 800272e:	b08b      	sub	sp, #44	@ 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8002730:	2300      	movs	r3, #0
 8002732:	9307      	str	r3, [sp, #28]
 8002734:	9308      	str	r3, [sp, #32]
 8002736:	9309      	str	r3, [sp, #36]	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	9303      	str	r3, [sp, #12]
 800273e:	9304      	str	r3, [sp, #16]
 8002740:	9305      	str	r3, [sp, #20]
 8002742:	9306      	str	r3, [sp, #24]
  hadc1.Instance = ADC1;
 8002744:	481c      	ldr	r0, [pc, #112]	@ (80027b8 <MX_ADC1_Init+0x8c>)
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <MX_ADC1_Init+0x90>)
 8002748:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800274a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800274c:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800274e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002750:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002752:	2204      	movs	r2, #4
 8002754:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002756:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002758:	2201      	movs	r2, #1
 800275a:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 800275c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800275e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002762:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002764:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002766:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800276a:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800276c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002770:	f000 fbf2 	bl	8002f58 <HAL_ADC_Init>
 8002774:	b9d0      	cbnz	r0, 80027ac <MX_ADC1_Init+0x80>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002776:	2300      	movs	r3, #0
 8002778:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800277a:	a907      	add	r1, sp, #28
 800277c:	480e      	ldr	r0, [pc, #56]	@ (80027b8 <MX_ADC1_Init+0x8c>)
 800277e:	f001 f999 	bl	8003ab4 <HAL_ADCEx_MultiModeConfigChannel>
 8002782:	b9a8      	cbnz	r0, 80027b0 <MX_ADC1_Init+0x84>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002784:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <MX_ADC1_Init+0x94>)
 8002786:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002788:	2306      	movs	r3, #6
 800278a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800278c:	2300      	movs	r3, #0
 800278e:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002790:	227f      	movs	r2, #127	@ 0x7f
 8002792:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002794:	2204      	movs	r2, #4
 8002796:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8002798:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800279a:	eb0d 0102 	add.w	r1, sp, r2
 800279e:	4806      	ldr	r0, [pc, #24]	@ (80027b8 <MX_ADC1_Init+0x8c>)
 80027a0:	f000 fe72 	bl	8003488 <HAL_ADC_ConfigChannel>
 80027a4:	b930      	cbnz	r0, 80027b4 <MX_ADC1_Init+0x88>
}
 80027a6:	b00b      	add	sp, #44	@ 0x2c
 80027a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80027ac:	f7ff ff26 	bl	80025fc <Error_Handler>
    Error_Handler();
 80027b0:	f7ff ff24 	bl	80025fc <Error_Handler>
    Error_Handler();
 80027b4:	f7ff ff22 	bl	80025fc <Error_Handler>
 80027b8:	20001438 	.word	0x20001438
 80027bc:	50040000 	.word	0x50040000
 80027c0:	80000001 	.word	0x80000001

080027c4 <MX_LPTIM1_Init>:
{
 80027c4:	b508      	push	{r3, lr}
  hlptim1.Instance = LPTIM1;
 80027c6:	480b      	ldr	r0, [pc, #44]	@ (80027f4 <MX_LPTIM1_Init+0x30>)
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <MX_LPTIM1_Init+0x34>)
 80027ca:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80027cc:	2300      	movs	r3, #0
 80027ce:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80027d0:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 80027d4:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80027d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027da:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80027dc:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80027de:	6243      	str	r3, [r0, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80027e0:	6283      	str	r3, [r0, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80027e2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80027e4:	6303      	str	r3, [r0, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80027e6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80027e8:	f001 fea4 	bl	8004534 <HAL_LPTIM_Init>
 80027ec:	b900      	cbnz	r0, 80027f0 <MX_LPTIM1_Init+0x2c>
}
 80027ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80027f0:	f7ff ff04 	bl	80025fc <Error_Handler>
 80027f4:	200013b4 	.word	0x200013b4
 80027f8:	40007c00 	.word	0x40007c00

080027fc <SystemClock_Config>:
{
 80027fc:	b500      	push	{lr}
 80027fe:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002800:	2244      	movs	r2, #68	@ 0x44
 8002802:	2100      	movs	r1, #0
 8002804:	a805      	add	r0, sp, #20
 8002806:	f007 fae9 	bl	8009ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	9302      	str	r3, [sp, #8]
 8002812:	9303      	str	r3, [sp, #12]
 8002814:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002816:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800281a:	f003 f8c9 	bl	80059b0 <HAL_PWREx_ControlVoltageScaling>
 800281e:	bb38      	cbnz	r0, 8002870 <SystemClock_Config+0x74>
  HAL_PWR_EnableBkUpAccess();
 8002820:	f003 f8b6 	bl	8005990 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002824:	4a15      	ldr	r2, [pc, #84]	@ (800287c <SystemClock_Config+0x80>)
 8002826:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800282a:	f023 0318 	bic.w	r3, r3, #24
 800282e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8002832:	2334      	movs	r3, #52	@ 0x34
 8002834:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002836:	2301      	movs	r3, #1
 8002838:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800283a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800283c:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8002842:	2280      	movs	r2, #128	@ 0x80
 8002844:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002846:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002848:	a805      	add	r0, sp, #20
 800284a:	f003 f9bb 	bl	8005bc4 <HAL_RCC_OscConfig>
 800284e:	b988      	cbnz	r0, 8002874 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002850:	230f      	movs	r3, #15
 8002852:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002854:	2100      	movs	r1, #0
 8002856:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800285a:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800285c:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800285e:	4668      	mov	r0, sp
 8002860:	f003 fd1e 	bl	80062a0 <HAL_RCC_ClockConfig>
 8002864:	b940      	cbnz	r0, 8002878 <SystemClock_Config+0x7c>
  HAL_RCCEx_EnableMSIPLLMode();
 8002866:	f003 ff23 	bl	80066b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800286a:	b017      	add	sp, #92	@ 0x5c
 800286c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002870:	f7ff fec4 	bl	80025fc <Error_Handler>
    Error_Handler();
 8002874:	f7ff fec2 	bl	80025fc <Error_Handler>
    Error_Handler();
 8002878:	f7ff fec0 	bl	80025fc <Error_Handler>
 800287c:	40021000 	.word	0x40021000

08002880 <power_on>:
void power_on(void){
 8002880:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8002882:	f000 fb34 	bl	8002eee <HAL_ResumeTick>
  SystemClock_Config();
 8002886:	f7ff ffb9 	bl	80027fc <SystemClock_Config>
  MX_GPIO_Init();
 800288a:	f7ff f8fd 	bl	8001a88 <MX_GPIO_Init>
  MX_SPI1_Init();
 800288e:	f7ff feb7 	bl	8002600 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002892:	f005 fed5 	bl	8008640 <MX_USB_DEVICE_Init>
  EPD_Init();
 8002896:	f7fe fa37 	bl	8000d08 <EPD_Init>
}
 800289a:	bd08      	pop	{r3, pc}

0800289c <get_data>:
void get_data(bool goto_sleep){
 800289c:	b510      	push	{r4, lr}
  if(goto_sleep){
 800289e:	4604      	mov	r4, r0
 80028a0:	b9a0      	cbnz	r0, 80028cc <get_data+0x30>
  q_load();
 80028a2:	f000 fa65 	bl	8002d70 <q_load>
  q_push(DS18_GET()*100);
 80028a6:	f7ff fa19 	bl	8001cdc <DS18_GET>
 80028aa:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80028dc <get_data+0x40>
 80028ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80028b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80028b6:	ee10 3a10 	vmov	r3, s0
 80028ba:	b218      	sxth	r0, r3
 80028bc:	f000 f9a2 	bl	8002c04 <q_push>
  plot();
 80028c0:	f7ff fabe 	bl	8001e40 <plot>
  q_save();
 80028c4:	f000 fa1a 	bl	8002cfc <q_save>
  if(goto_sleep){
 80028c8:	b91c      	cbnz	r4, 80028d2 <get_data+0x36>
}
 80028ca:	bd10      	pop	{r4, pc}
    power_on();
 80028cc:	f7ff ffd8 	bl	8002880 <power_on>
 80028d0:	e7e7      	b.n	80028a2 <get_data+0x6>
    shutdown(false);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff f9a0 	bl	8001c18 <shutdown>
}
 80028d8:	e7f7      	b.n	80028ca <get_data+0x2e>
 80028da:	bf00      	nop
 80028dc:	42c80000 	.word	0x42c80000

080028e0 <main>:
{
 80028e0:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80028e2:	f000 fac1 	bl	8002e68 <HAL_Init>
  SystemClock_Config();
 80028e6:	f7ff ff89 	bl	80027fc <SystemClock_Config>
  MX_GPIO_Init();
 80028ea:	f7ff f8cd 	bl	8001a88 <MX_GPIO_Init>
  MX_DMA_Init();
 80028ee:	f7ff f8b1 	bl	8001a54 <MX_DMA_Init>
  MX_SPI1_Init();
 80028f2:	f7ff fe85 	bl	8002600 <MX_SPI1_Init>
  MX_RTC_Init();
 80028f6:	f7ff feab 	bl	8002650 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80028fa:	f7ff fefb 	bl	80026f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80028fe:	f7ff ff15 	bl	800272c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8002902:	f005 fe9d 	bl	8008640 <MX_USB_DEVICE_Init>
  MX_LPTIM1_Init();
 8002906:	f7ff ff5d 	bl	80027c4 <MX_LPTIM1_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcData, 1);
 800290a:	2201      	movs	r2, #1
 800290c:	4942      	ldr	r1, [pc, #264]	@ (8002a18 <main+0x138>)
 800290e:	4843      	ldr	r0, [pc, #268]	@ (8002a1c <main+0x13c>)
 8002910:	f001 f846 	bl	80039a0 <HAL_ADC_Start_DMA>
  DS18_INIT();
 8002914:	f7ff f9b8 	bl	8001c88 <DS18_INIT>
  EPD_Init();
 8002918:	f7fe f9f6 	bl	8000d08 <EPD_Init>
  q_init();
 800291c:	f000 f964 	bl	8002be8 <q_init>
 bool is_RTC_retained = q_load();
 8002920:	f000 fa26 	bl	8002d70 <q_load>
  if (is_RTC_retained) {
 8002924:	2800      	cmp	r0, #0
 8002926:	d041      	beq.n	80029ac <main+0xcc>
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	4611      	mov	r1, r2
 800292c:	2041      	movs	r0, #65	@ 0x41
 800292e:	f001 f9a1 	bl	8003c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002932:	2041      	movs	r0, #65	@ 0x41
 8002934:	f001 f9ae 	bl	8003c94 <HAL_NVIC_EnableIRQ>
  Start_Timer();
 8002938:	f7ff f99c 	bl	8001c74 <Start_Timer>
  q_push(DS18_GET()*100);
 800293c:	f7ff f9ce 	bl	8001cdc <DS18_GET>
 8002940:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8002a20 <main+0x140>
 8002944:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	b218      	sxth	r0, r3
 8002952:	f000 f957 	bl	8002c04 <q_push>
  q_save();
 8002956:	f000 f9d1 	bl	8002cfc <q_save>
  plot();
 800295a:	f7ff fa71 	bl	8001e40 <plot>
  if(!USB_DEVICE_IsConnected()){  
 800295e:	f7ff fe1f 	bl	80025a0 <USB_DEVICE_IsConnected>
 8002962:	b330      	cbz	r0, 80029b2 <main+0xd2>
{
 8002964:	2400      	movs	r4, #0
    if(measure){
 8002966:	4b2f      	ldr	r3, [pc, #188]	@ (8002a24 <main+0x144>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	bb2b      	cbnz	r3, 80029b8 <main+0xd8>
    if(initialise_usb_connection){
 800296c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a28 <main+0x148>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d12f      	bne.n	80029d4 <main+0xf4>
    if(send_usb_data){
 8002974:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <main+0x14c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d135      	bne.n	80029e8 <main+0x108>
    if(set_rtc){
 800297c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a30 <main+0x150>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d137      	bne.n	80029f4 <main+0x114>
    if(!USB_DEVICE_IsConnected() && old_usb_state && HAL_GetTick()-usb_conn_tmr>150){
 8002984:	f7ff fe0c 	bl	80025a0 <USB_DEVICE_IsConnected>
 8002988:	b908      	cbnz	r0, 800298e <main+0xae>
 800298a:	2c00      	cmp	r4, #0
 800298c:	d138      	bne.n	8002a00 <main+0x120>
    old_usb_state = USB_DEVICE_IsConnected();
 800298e:	f7ff fe07 	bl	80025a0 <USB_DEVICE_IsConnected>
 8002992:	4604      	mov	r4, r0
    if(go_to_sleep && !USB_DEVICE_IsConnected()){
 8002994:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <main+0x154>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0e4      	beq.n	8002966 <main+0x86>
 800299c:	f7ff fe00 	bl	80025a0 <USB_DEVICE_IsConnected>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d1e0      	bne.n	8002966 <main+0x86>
      HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80029a4:	2001      	movs	r0, #1
 80029a6:	f003 f853 	bl	8005a50 <HAL_PWREx_EnterSTOP2Mode>
 80029aa:	e7dc      	b.n	8002966 <main+0x86>
    set_time();
 80029ac:	f7ff f9b0 	bl	8001d10 <set_time>
 80029b0:	e7ba      	b.n	8002928 <main+0x48>
    shutdown(false);
 80029b2:	f7ff f931 	bl	8001c18 <shutdown>
 80029b6:	e7d5      	b.n	8002964 <main+0x84>
      measure = false;
 80029b8:	2600      	movs	r6, #0
 80029ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <main+0x144>)
 80029bc:	701e      	strb	r6, [r3, #0]
      get_data(!send_usb);
 80029be:	4d1e      	ldr	r5, [pc, #120]	@ (8002a38 <main+0x158>)
 80029c0:	7828      	ldrb	r0, [r5, #0]
 80029c2:	f080 0001 	eor.w	r0, r0, #1
 80029c6:	f7ff ff69 	bl	800289c <get_data>
      send_usb = false;
 80029ca:	702e      	strb	r6, [r5, #0]
      ready = true;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <main+0x15c>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e7cb      	b.n	800296c <main+0x8c>
      initialise_usb_connection = false;
 80029d4:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <main+0x148>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
      power_on();
 80029da:	f7ff ff51 	bl	8002880 <power_on>
      usb_conn_tmr = HAL_GetTick();
 80029de:	f000 fa65 	bl	8002eac <HAL_GetTick>
 80029e2:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <main+0x160>)
 80029e4:	6018      	str	r0, [r3, #0]
 80029e6:	e7c5      	b.n	8002974 <main+0x94>
      send_usb_data = false;
 80029e8:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <main+0x14c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
      USB_SendAllData();
 80029ee:	f7ff fd8b 	bl	8002508 <USB_SendAllData>
 80029f2:	e7c3      	b.n	800297c <main+0x9c>
      set_rtc = false;
 80029f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <main+0x150>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
      syncRTC();
 80029fa:	f7ff fd21 	bl	8002440 <syncRTC>
 80029fe:	e7c1      	b.n	8002984 <main+0xa4>
    if(!USB_DEVICE_IsConnected() && old_usb_state && HAL_GetTick()-usb_conn_tmr>150){
 8002a00:	f000 fa54 	bl	8002eac <HAL_GetTick>
 8002a04:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <main+0x160>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1ac0      	subs	r0, r0, r3
 8002a0a:	2896      	cmp	r0, #150	@ 0x96
 8002a0c:	d9bf      	bls.n	800298e <main+0xae>
      shutdown(true);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7ff f902 	bl	8001c18 <shutdown>
 8002a14:	e7bb      	b.n	800298e <main+0xae>
 8002a16:	bf00      	nop
 8002a18:	20001294 	.word	0x20001294
 8002a1c:	20001438 	.word	0x20001438
 8002a20:	42c80000 	.word	0x42c80000
 8002a24:	200002d6 	.word	0x200002d6
 8002a28:	200002d4 	.word	0x200002d4
 8002a2c:	200002d7 	.word	0x200002d7
 8002a30:	200002d2 	.word	0x200002d2
 8002a34:	200002d3 	.word	0x200002d3
 8002a38:	200002d8 	.word	0x200002d8
 8002a3c:	200002d5 	.word	0x200002d5
 8002a40:	200002b0 	.word	0x200002b0

08002a44 <SetBaudrate>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 8002a44:	b510      	push	{r4, lr}
 8002a46:	4604      	mov	r4, r0
  uint32_t pclk = 0;
  huart->Init.BaudRate = baudrate;
 8002a48:	6041      	str	r1, [r0, #4]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#else
    if (huart->Instance == USART1)
 8002a4a:	6802      	ldr	r2, [r0, #0]
 8002a4c:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <SetBaudrate+0xcc>)
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d030      	beq.n	8002ab4 <SetBaudrate+0x70>
      pclk = HAL_RCC_GetPCLK1Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a52:	f003 fcef 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
 8002a56:	4602      	mov	r2, r0
    }

//  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a58:	69e3      	ldr	r3, [r4, #28]
 8002a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a5e:	d02d      	beq.n	8002abc <SetBaudrate+0x78>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a60:	2100      	movs	r1, #0
 8002a62:	1890      	adds	r0, r2, r2
 8002a64:	4149      	adcs	r1, r1
 8002a66:	1880      	adds	r0, r0, r2
 8002a68:	f141 0100 	adc.w	r1, r1, #0
 8002a6c:	00c9      	lsls	r1, r1, #3
 8002a6e:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
 8002a72:	00c0      	lsls	r0, r0, #3
 8002a74:	1880      	adds	r0, r0, r2
 8002a76:	6863      	ldr	r3, [r4, #4]
 8002a78:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002a7c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002a80:	f141 0100 	adc.w	r1, r1, #0
 8002a84:	f7fe f80a 	bl	8000a9c <__aeabi_uldivmod>
 8002a88:	4a22      	ldr	r2, [pc, #136]	@ (8002b14 <SetBaudrate+0xd0>)
 8002a8a:	fba2 3100 	umull	r3, r1, r2, r0
 8002a8e:	0949      	lsrs	r1, r1, #5
 8002a90:	2364      	movs	r3, #100	@ 0x64
 8002a92:	fb03 0311 	mls	r3, r3, r1, r0
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	3332      	adds	r3, #50	@ 0x32
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002aa4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	6821      	ldr	r1, [r4, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	60cb      	str	r3, [r1, #12]
  }
}
 8002ab2:	bd10      	pop	{r4, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f003 fcbe 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	e7cd      	b.n	8002a58 <SetBaudrate+0x14>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002abc:	2300      	movs	r3, #0
 8002abe:	1890      	adds	r0, r2, r2
 8002ac0:	eb43 0103 	adc.w	r1, r3, r3
 8002ac4:	1880      	adds	r0, r0, r2
 8002ac6:	f141 0100 	adc.w	r1, r1, #0
 8002aca:	00c9      	lsls	r1, r1, #3
 8002acc:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
 8002ad0:	00c0      	lsls	r0, r0, #3
 8002ad2:	1880      	adds	r0, r0, r2
 8002ad4:	f141 0100 	adc.w	r1, r1, #0
 8002ad8:	6862      	ldr	r2, [r4, #4]
 8002ada:	1892      	adds	r2, r2, r2
 8002adc:	415b      	adcs	r3, r3
 8002ade:	f7fd ffdd 	bl	8000a9c <__aeabi_uldivmod>
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b14 <SetBaudrate+0xd0>)
 8002ae4:	fba2 3100 	umull	r3, r1, r2, r0
 8002ae8:	0949      	lsrs	r1, r1, #5
 8002aea:	2364      	movs	r3, #100	@ 0x64
 8002aec:	fb03 0311 	mls	r3, r3, r1, r0
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	3332      	adds	r3, #50	@ 0x32
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	005a      	lsls	r2, r3, #1
 8002afc:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002b00:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	6821      	ldr	r1, [r4, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60cb      	str	r3, [r1, #12]
 8002b0e:	e7d0      	b.n	8002ab2 <SetBaudrate+0x6e>
 8002b10:	40013800 	.word	0x40013800
 8002b14:	51eb851f 	.word	0x51eb851f

08002b18 <OneWire_ProcessBit>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	4604      	mov	r4, r0
  uint8_t txData = 0xFF;
 8002b1e:	23ff      	movs	r3, #255	@ 0xff
 8002b20:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t rxData = 0x00;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f88d 3006 	strb.w	r3, [sp, #6]

  if (bit == 0)
 8002b2a:	b909      	cbnz	r1, 8002b30 <OneWire_ProcessBit+0x18>
  {
    txData = 0x00;
 8002b2c:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 8002b30:	230a      	movs	r3, #10
 8002b32:	2201      	movs	r2, #1
 8002b34:	f10d 0107 	add.w	r1, sp, #7
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f004 fc6b 	bl	8007414 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 8002b3e:	230a      	movs	r3, #10
 8002b40:	2201      	movs	r2, #1
 8002b42:	f10d 0106 	add.w	r1, sp, #6
 8002b46:	4620      	mov	r0, r4
 8002b48:	f004 fcc8 	bl	80074dc <HAL_UART_Receive>

  return rxData;
}
 8002b4c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8002b50:	b002      	add	sp, #8
 8002b52:	bd10      	pop	{r4, pc}

08002b54 <OneWire_ProcessByte>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8002b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b58:	4607      	mov	r7, r0
 8002b5a:	460e      	mov	r6, r1
  uint8_t rxByte = 0x00;

  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8002b5c:	2400      	movs	r4, #0
  uint8_t rxByte = 0x00;
 8002b5e:	4625      	mov	r5, r4
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8002b60:	e006      	b.n	8002b70 <OneWire_ProcessByte+0x1c>

    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);

    if (tempRxData == 0xFF)
    {
      rxBit = 1;
 8002b62:	2301      	movs	r3, #1
    }

    rxByte |= (rxBit << i);
 8002b64:	fa03 f308 	lsl.w	r3, r3, r8
 8002b68:	432b      	orrs	r3, r5
 8002b6a:	b2dd      	uxtb	r5, r3
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8002b6c:	3401      	adds	r4, #1
 8002b6e:	b2e4      	uxtb	r4, r4
 8002b70:	2c07      	cmp	r4, #7
 8002b72:	d80b      	bhi.n	8002b8c <OneWire_ProcessByte+0x38>
    uint8_t txBit = (byte >> i) & 0x01;
 8002b74:	46a0      	mov	r8, r4
 8002b76:	fa46 f104 	asr.w	r1, r6, r4
    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 8002b7a:	f001 0101 	and.w	r1, r1, #1
 8002b7e:	4638      	mov	r0, r7
 8002b80:	f7ff ffca 	bl	8002b18 <OneWire_ProcessBit>
    if (tempRxData == 0xFF)
 8002b84:	28ff      	cmp	r0, #255	@ 0xff
 8002b86:	d0ec      	beq.n	8002b62 <OneWire_ProcessByte+0xe>
    uint8_t rxBit = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e7eb      	b.n	8002b64 <OneWire_ProcessByte+0x10>
  }

  return rxByte;
}
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b92 <OneWire_Reset>:



/*----------------------------------------------------------------------------*/
ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8002b92:	b510      	push	{r4, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	4604      	mov	r4, r0
  ONEWIRE_Status status = ONEWIRE_OK;
  uint8_t txByte = ONEWIRE_RESET_BYTE;
 8002b98:	23f0      	movs	r3, #240	@ 0xf0
 8002b9a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t rxByte = 0x00;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f88d 3006 	strb.w	r3, [sp, #6]

  SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8002ba4:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002ba8:	f7ff ff4c 	bl	8002a44 <SetBaudrate>

  HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8002bac:	230a      	movs	r3, #10
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f10d 0107 	add.w	r1, sp, #7
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f004 fc2d 	bl	8007414 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 8002bba:	230a      	movs	r3, #10
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f10d 0106 	add.w	r1, sp, #6
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f004 fc8a 	bl	80074dc <HAL_UART_Receive>

  SetBaudrate(huart, ONEWIRE_BAUDRATE);
 8002bc8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff ff39 	bl	8002a44 <SetBaudrate>

  if (rxByte == txByte)
 8002bd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002bd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d002      	beq.n	8002be4 <OneWire_Reset+0x52>
  ONEWIRE_Status status = ONEWIRE_OK;
 8002bde:	2000      	movs	r0, #0
  {
    status = ONEWIRE_ERROR;
  }

  return status;
}
 8002be0:	b002      	add	sp, #8
 8002be2:	bd10      	pop	{r4, pc}
    status = ONEWIRE_ERROR;
 8002be4:	2001      	movs	r0, #1
 8002be6:	e7fb      	b.n	8002be0 <OneWire_Reset+0x4e>

08002be8 <q_init>:
queue data_queue;
//
static uint8_t flag;
//
void q_init(void){
    data_queue.write_ptr = 0;
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <q_init+0x18>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    data_queue.length = 0;
 8002bf0:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    data_queue.is_first_writing = true;
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	f883 1062 	strb.w	r1, [r3, #98]	@ 0x62
    data_queue.start_ptr = 0;
 8002bfa:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
}
 8002bfe:	4770      	bx	lr
 8002c00:	200014a0 	.word	0x200014a0

08002c04 <q_push>:

void q_push(int16_t temp){
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	b090      	sub	sp, #64	@ 0x40
 8002c08:	4605      	mov	r5, r0
    // TIME - REG5
    data_queue.data[data_queue.write_ptr] = temp;
 8002c0a:	4a31      	ldr	r2, [pc, #196]	@ (8002cd0 <q_push+0xcc>)
 8002c0c:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 8002c10:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    data_queue.write_ptr++;
 8002c14:	3301      	adds	r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
    data_queue.length++;
 8002c1c:	f892 1063 	ldrb.w	r1, [r2, #99]	@ 0x63
 8002c20:	3101      	adds	r1, #1
 8002c22:	f882 1063 	strb.w	r1, [r2, #99]	@ 0x63
    if(data_queue.write_ptr >= 48){
 8002c26:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c28:	d905      	bls.n	8002c36 <q_push+0x32>
        data_queue.is_first_writing = false;
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
        data_queue.write_ptr = 0;
 8002c32:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    }
    if(!data_queue.is_first_writing){
 8002c36:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <q_push+0xcc>)
 8002c38:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002c3c:	b93b      	cbnz	r3, 8002c4e <q_push+0x4a>
        data_queue.start_ptr = data_queue.write_ptr;
 8002c3e:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <q_push+0xcc>)
 8002c40:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8002c44:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        data_queue.length = 47;
 8002c48:	222f      	movs	r2, #47	@ 0x2f
 8002c4a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    }
    RTC_TimeTypeDef sTime = {0};
 8002c4e:	a90b      	add	r1, sp, #44	@ 0x2c
 8002c50:	2400      	movs	r4, #0
 8002c52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002c54:	604c      	str	r4, [r1, #4]
 8002c56:	608c      	str	r4, [r1, #8]
 8002c58:	60cc      	str	r4, [r1, #12]
 8002c5a:	610c      	str	r4, [r1, #16]
    RTC_DateTypeDef sDate = {0};
 8002c5c:	940a      	str	r4, [sp, #40]	@ 0x28

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002c5e:	4e1d      	ldr	r6, [pc, #116]	@ (8002cd4 <q_push+0xd0>)
 8002c60:	4622      	mov	r2, r4
 8002c62:	4630      	mov	r0, r6
 8002c64:	f003 feb8 	bl	80069d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002c68:	4622      	mov	r2, r4
 8002c6a:	a90a      	add	r1, sp, #40	@ 0x28
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f003 fed9 	bl	8006a24 <HAL_RTC_GetDate>

    struct tm t;
    time_t t_of_day;

    t.tm_year = 100+sDate.Year;  // Year - 1900
 8002c72:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 8002c76:	3364      	adds	r3, #100	@ 0x64
 8002c78:	9306      	str	r3, [sp, #24]
    t.tm_mon = sDate.Month-1;           // Month, where 0 = jan
 8002c7a:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	9305      	str	r3, [sp, #20]
    t.tm_mday = sDate.Date;          // Day of the month
 8002c82:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8002c86:	9304      	str	r3, [sp, #16]
    t.tm_hour = sTime.Hours;
 8002c88:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8002c8c:	9303      	str	r3, [sp, #12]
    t.tm_min = sTime.Minutes;
 8002c8e:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8002c92:	9302      	str	r3, [sp, #8]
    t.tm_sec = sTime.Seconds;
 8002c94:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8002c98:	9301      	str	r3, [sp, #4]
    t.tm_isdst = 1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	9309      	str	r3, [sp, #36]	@ 0x24
    t_of_day = mktime(&t);
 8002c9e:	a801      	add	r0, sp, #4
 8002ca0:	f007 f976 	bl	8009f90 <mktime>
 8002ca4:	4604      	mov	r4, r0

    HAL_PWR_EnableBkUpAccess();
 8002ca6:	f002 fe73 	bl	8005990 <HAL_PWR_EnableBkUpAccess>
    if(flag ==0){
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <q_push+0xd4>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b12b      	cbz	r3, 8002cbc <q_push+0xb8>
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, (long) t_of_day);
    flag = 1;}

    UDISK_push(temp, (long) t_of_day);
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f7fe fcc8 	bl	8001648 <UDISK_push>
    // TEST
    // uint32_t testtime = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5)+1800;
    // HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, (long) testtime);
}
 8002cb8:	b010      	add	sp, #64	@ 0x40
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, (long) t_of_day);
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	2105      	movs	r1, #5
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f003 fecd 	bl	8006a60 <HAL_RTCEx_BKUPWrite>
    flag = 1;}
 8002cc6:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <q_push+0xd4>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e7f0      	b.n	8002cb0 <q_push+0xac>
 8002cce:	bf00      	nop
 8002cd0:	200014a0 	.word	0x200014a0
 8002cd4:	20001388 	.word	0x20001388
 8002cd8:	2000149c 	.word	0x2000149c

08002cdc <q_get>:

int16_t q_get(uint8_t pos){
    uint8_t ptr = pos + data_queue.start_ptr;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <q_get+0x1c>)
 8002cde:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002ce2:	4418      	add	r0, r3
 8002ce4:	b2c0      	uxtb	r0, r0
    if(ptr>=48){
 8002ce6:	282f      	cmp	r0, #47	@ 0x2f
 8002ce8:	d901      	bls.n	8002cee <q_get+0x12>
        ptr -= 48;
 8002cea:	3830      	subs	r0, #48	@ 0x30
 8002cec:	b2c0      	uxtb	r0, r0
    }
    return data_queue.data[ptr];
}
 8002cee:	4b02      	ldr	r3, [pc, #8]	@ (8002cf8 <q_get+0x1c>)
 8002cf0:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	200014a0 	.word	0x200014a0

08002cfc <q_save>:

void q_save(void){
 8002cfc:	b510      	push	{r4, lr}
    HAL_PWR_EnableBkUpAccess();
 8002cfe:	f002 fe47 	bl	8005990 <HAL_PWR_EnableBkUpAccess>
    
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, KEY);
 8002d02:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <q_save+0x68>)
 8002d04:	2106      	movs	r1, #6
 8002d06:	4818      	ldr	r0, [pc, #96]	@ (8002d68 <q_save+0x6c>)
 8002d08:	f003 feaa 	bl	8006a60 <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < 24; i++) {
 8002d0c:	2400      	movs	r4, #0
 8002d0e:	e00e      	b.n	8002d2e <q_save+0x32>
        HAL_RTCEx_BKUPWrite(&hrtc, 8+i, ((uint32_t)data_queue.data[2*i] << 16) | (uint32_t)data_queue.data[2*i + 1]);
 8002d10:	0063      	lsls	r3, r4, #1
 8002d12:	4916      	ldr	r1, [pc, #88]	@ (8002d6c <q_save+0x70>)
 8002d14:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8002d22:	f104 0108 	add.w	r1, r4, #8
 8002d26:	4810      	ldr	r0, [pc, #64]	@ (8002d68 <q_save+0x6c>)
 8002d28:	f003 fe9a 	bl	8006a60 <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < 24; i++) {
 8002d2c:	3401      	adds	r4, #1
 8002d2e:	2c17      	cmp	r4, #23
 8002d30:	ddee      	ble.n	8002d10 <q_save+0x14>
    }
    
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((uint32_t)data_queue.length << 24) | \
 8002d32:	4a0e      	ldr	r2, [pc, #56]	@ (8002d6c <q_save+0x70>)
 8002d34:	f892 1063 	ldrb.w	r1, [r2, #99]	@ 0x63
    ((uint32_t)data_queue.start_ptr << 16) | ((uint32_t)data_queue.write_ptr << 8) | \
 8002d38:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002d3c:	041b      	lsls	r3, r3, #16
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((uint32_t)data_queue.length << 24) | \
 8002d3e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    ((uint32_t)data_queue.start_ptr << 16) | ((uint32_t)data_queue.write_ptr << 8) | \
 8002d42:	f892 1060 	ldrb.w	r1, [r2, #96]	@ 0x60
 8002d46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    (data_queue.is_first_writing ? 1 : 0));
 8002d4a:	f892 2062 	ldrb.w	r2, [r2, #98]	@ 0x62
 8002d4e:	b132      	cbz	r2, 8002d5e <q_save+0x62>
 8002d50:	2201      	movs	r2, #1
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((uint32_t)data_queue.length << 24) | \
 8002d52:	431a      	orrs	r2, r3
 8002d54:	2107      	movs	r1, #7
 8002d56:	4804      	ldr	r0, [pc, #16]	@ (8002d68 <q_save+0x6c>)
 8002d58:	f003 fe82 	bl	8006a60 <HAL_RTCEx_BKUPWrite>
}
 8002d5c:	bd10      	pop	{r4, pc}
    (data_queue.is_first_writing ? 1 : 0));
 8002d5e:	2200      	movs	r2, #0
 8002d60:	e7f7      	b.n	8002d52 <q_save+0x56>
 8002d62:	bf00      	nop
 8002d64:	aaff55ff 	.word	0xaaff55ff
 8002d68:	20001388 	.word	0x20001388
 8002d6c:	200014a0 	.word	0x200014a0

08002d70 <q_load>:
 
bool q_load(void){
 8002d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // REGs 6 - 31
    // KEY - REG6
    // SYS - REG7
    // DATA REG8 - 31
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6) != KEY){return false;}
 8002d74:	2106      	movs	r1, #6
 8002d76:	4822      	ldr	r0, [pc, #136]	@ (8002e00 <q_load+0x90>)
 8002d78:	f003 fe81 	bl	8006a7e <HAL_RTCEx_BKUPRead>
 8002d7c:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <q_load+0x94>)
 8002d7e:	4298      	cmp	r0, r3
 8002d80:	d13b      	bne.n	8002dfa <q_load+0x8a>
    for (int i = 0; i < 24; i++) {
 8002d82:	2400      	movs	r4, #0
 8002d84:	e013      	b.n	8002dae <q_load+0x3e>
        data_queue.data[2*i] = (int16_t)(HAL_RTCEx_BKUPRead(&hrtc, 8+i) >> 16);       
 8002d86:	f104 0808 	add.w	r8, r4, #8
 8002d8a:	4f1d      	ldr	r7, [pc, #116]	@ (8002e00 <q_load+0x90>)
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	4638      	mov	r0, r7
 8002d90:	f003 fe75 	bl	8006a7e <HAL_RTCEx_BKUPRead>
 8002d94:	0065      	lsls	r5, r4, #1
 8002d96:	0c00      	lsrs	r0, r0, #16
 8002d98:	4e1b      	ldr	r6, [pc, #108]	@ (8002e08 <q_load+0x98>)
 8002d9a:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
        data_queue.data[2*i + 1] = (int16_t)(HAL_RTCEx_BKUPRead(&hrtc, 8+i) & 0xFFFF);
 8002d9e:	4641      	mov	r1, r8
 8002da0:	4638      	mov	r0, r7
 8002da2:	f003 fe6c 	bl	8006a7e <HAL_RTCEx_BKUPRead>
 8002da6:	3501      	adds	r5, #1
 8002da8:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
    for (int i = 0; i < 24; i++) {
 8002dac:	3401      	adds	r4, #1
 8002dae:	2c17      	cmp	r4, #23
 8002db0:	dde9      	ble.n	8002d86 <q_load+0x16>
    }
    data_queue.length = (uint8_t)(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 24);
 8002db2:	4d13      	ldr	r5, [pc, #76]	@ (8002e00 <q_load+0x90>)
 8002db4:	2107      	movs	r1, #7
 8002db6:	4628      	mov	r0, r5
 8002db8:	f003 fe61 	bl	8006a7e <HAL_RTCEx_BKUPRead>
 8002dbc:	0e00      	lsrs	r0, r0, #24
 8002dbe:	4c12      	ldr	r4, [pc, #72]	@ (8002e08 <q_load+0x98>)
 8002dc0:	f884 0063 	strb.w	r0, [r4, #99]	@ 0x63
    data_queue.start_ptr = (uint8_t)(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 16);
 8002dc4:	2107      	movs	r1, #7
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f003 fe59 	bl	8006a7e <HAL_RTCEx_BKUPRead>
 8002dcc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002dd0:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
    data_queue.write_ptr = (uint8_t)(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 8);
 8002dd4:	2107      	movs	r1, #7
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f003 fe51 	bl	8006a7e <HAL_RTCEx_BKUPRead>
 8002ddc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002de0:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
    data_queue.is_first_writing = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) & 0x01) != 0;
 8002de4:	2107      	movs	r1, #7
 8002de6:	4628      	mov	r0, r5
 8002de8:	f003 fe49 	bl	8006a7e <HAL_RTCEx_BKUPRead>
 8002dec:	f000 0001 	and.w	r0, r0, #1
 8002df0:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
    return true;
 8002df4:	2001      	movs	r0, #1
}
 8002df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6) != KEY){return false;}
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	e7fb      	b.n	8002df6 <q_load+0x86>
 8002dfe:	bf00      	nop
 8002e00:	20001388 	.word	0x20001388
 8002e04:	aaff55ff 	.word	0xaaff55ff
 8002e08:	200014a0 	.word	0x200014a0

08002e0c <q_len>:

uint16_t q_len(void){
    return data_queue.length;
 8002e0c:	4b01      	ldr	r3, [pc, #4]	@ (8002e14 <q_len+0x8>)
 8002e0e:	f893 0063 	ldrb.w	r0, [r3, #99]	@ 0x63
 8002e12:	4770      	bx	lr
 8002e14:	200014a0 	.word	0x200014a0

08002e18 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e18:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <HAL_InitTick+0x44>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b90b      	cbnz	r3, 8002e22 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e1e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002e20:	4770      	bx	lr
{
 8002e22:	b510      	push	{r4, lr}
 8002e24:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e60 <HAL_InitTick+0x48>)
 8002e30:	6810      	ldr	r0, [r2, #0]
 8002e32:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e36:	f000 ff31 	bl	8003c9c <HAL_SYSTICK_Config>
 8002e3a:	b968      	cbnz	r0, 8002e58 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3c:	2c0f      	cmp	r4, #15
 8002e3e:	d901      	bls.n	8002e44 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002e40:	2001      	movs	r0, #1
 8002e42:	e00a      	b.n	8002e5a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e44:	2200      	movs	r2, #0
 8002e46:	4621      	mov	r1, r4
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f000 ff12 	bl	8003c74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <HAL_InitTick+0x4c>)
 8002e52:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e54:	2000      	movs	r0, #0
 8002e56:	e000      	b.n	8002e5a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002e58:	2001      	movs	r0, #1
}
 8002e5a:	bd10      	pop	{r4, pc}
 8002e5c:	200000b8 	.word	0x200000b8
 8002e60:	200000c4 	.word	0x200000c4
 8002e64:	200000bc 	.word	0x200000bc

08002e68 <HAL_Init>:
{
 8002e68:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <HAL_Init+0x28>)
 8002e6c:	6813      	ldr	r3, [r2, #0]
 8002e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e72:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e74:	2003      	movs	r0, #3
 8002e76:	f000 feeb 	bl	8003c50 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e7a:	200f      	movs	r0, #15
 8002e7c:	f7ff ffcc 	bl	8002e18 <HAL_InitTick>
 8002e80:	b110      	cbz	r0, 8002e88 <HAL_Init+0x20>
    status = HAL_ERROR;
 8002e82:	2401      	movs	r4, #1
}
 8002e84:	4620      	mov	r0, r4
 8002e86:	bd10      	pop	{r4, pc}
 8002e88:	4604      	mov	r4, r0
    HAL_MspInit();
 8002e8a:	f001 fc29 	bl	80046e0 <HAL_MspInit>
 8002e8e:	e7f9      	b.n	8002e84 <HAL_Init+0x1c>
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002e94:	4b03      	ldr	r3, [pc, #12]	@ (8002ea4 <HAL_IncTick+0x10>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4a03      	ldr	r2, [pc, #12]	@ (8002ea8 <HAL_IncTick+0x14>)
 8002e9a:	6811      	ldr	r1, [r2, #0]
 8002e9c:	440b      	add	r3, r1
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	200000b8 	.word	0x200000b8
 8002ea8:	20001504 	.word	0x20001504

08002eac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002eac:	4b01      	ldr	r3, [pc, #4]	@ (8002eb4 <HAL_GetTick+0x8>)
 8002eae:	6818      	ldr	r0, [r3, #0]
}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20001504 	.word	0x20001504

08002eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff fff6 	bl	8002eac <HAL_GetTick>
 8002ec0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002ec6:	d002      	beq.n	8002ece <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <HAL_Delay+0x24>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ece:	f7ff ffed 	bl	8002eac <HAL_GetTick>
 8002ed2:	1b40      	subs	r0, r0, r5
 8002ed4:	42a0      	cmp	r0, r4
 8002ed6:	d3fa      	bcc.n	8002ece <HAL_Delay+0x16>
  {
  }
}
 8002ed8:	bd38      	pop	{r3, r4, r5, pc}
 8002eda:	bf00      	nop
 8002edc:	200000b8 	.word	0x200000b8

08002ee0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002ee0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002ee4:	6913      	ldr	r3, [r2, #16]
 8002ee6:	f023 0302 	bic.w	r3, r3, #2
 8002eea:	6113      	str	r3, [r2, #16]
}
 8002eec:	4770      	bx	lr

08002eee <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002eee:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002ef2:	6913      	ldr	r3, [r2, #16]
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	6113      	str	r3, [r2, #16]
}
 8002efa:	4770      	bx	lr

08002efc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002efc:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002efe:	3030      	adds	r0, #48	@ 0x30
 8002f00:	0a0b      	lsrs	r3, r1, #8
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f08:	58c4      	ldr	r4, [r0, r3]
 8002f0a:	f001 011f 	and.w	r1, r1, #31
 8002f0e:	f04f 0c1f 	mov.w	ip, #31
 8002f12:	fa0c fc01 	lsl.w	ip, ip, r1
 8002f16:	ea24 0c0c 	bic.w	ip, r4, ip
 8002f1a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002f1e:	408a      	lsls	r2, r1
 8002f20:	ea4c 0202 	orr.w	r2, ip, r2
 8002f24:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f2c:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f2e:	3014      	adds	r0, #20
 8002f30:	0e4b      	lsrs	r3, r1, #25
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f38:	58c4      	ldr	r4, [r0, r3]
 8002f3a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002f3e:	f04f 0c07 	mov.w	ip, #7
 8002f42:	fa0c fc01 	lsl.w	ip, ip, r1
 8002f46:	ea24 0c0c 	bic.w	ip, r4, ip
 8002f4a:	408a      	lsls	r2, r1
 8002f4c:	ea4c 0202 	orr.w	r2, ip, r2
 8002f50:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f58:	b530      	push	{r4, r5, lr}
 8002f5a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f60:	2800      	cmp	r0, #0
 8002f62:	f000 80d9 	beq.w	8003118 <HAL_ADC_Init+0x1c0>
 8002f66:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f68:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002f6a:	b313      	cbz	r3, 8002fb2 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f6c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8002f74:	d005      	beq.n	8002f82 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8002f7c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002f80:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f82:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f84:	6893      	ldr	r3, [r2, #8]
 8002f86:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002f8a:	d11f      	bne.n	8002fcc <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8002f8c:	6893      	ldr	r3, [r2, #8]
 8002f8e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9a:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800311c <HAL_ADC_Init+0x1c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8003120 <HAL_ADC_Init+0x1c8>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	3301      	adds	r3, #1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002fb0:	e009      	b.n	8002fc6 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8002fb2:	f001 fbad 	bl	8004710 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002fba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8002fbe:	e7d5      	b.n	8002f6c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002fc0:	9b01      	ldr	r3, [sp, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002fc6:	9b01      	ldr	r3, [sp, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fcc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fce:	6893      	ldr	r3, [r2, #8]
 8002fd0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002fd4:	d179      	bne.n	80030ca <HAL_ADC_Init+0x172>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002fd8:	f043 0310 	orr.w	r3, r3, #16
 8002fdc:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe8:	6893      	ldr	r3, [r2, #8]
 8002fea:	f013 0304 	ands.w	r3, r3, #4
 8002fee:	d000      	beq.n	8002ff2 <HAL_ADC_Init+0x9a>
 8002ff0:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ff2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002ff4:	f011 0f10 	tst.w	r1, #16
 8002ff8:	f040 8087 	bne.w	800310a <HAL_ADC_Init+0x1b2>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 8084 	bne.w	800310a <HAL_ADC_Init+0x1b2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003002:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003004:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800300e:	6893      	ldr	r3, [r2, #8]
 8003010:	f013 0f01 	tst.w	r3, #1
 8003014:	d112      	bne.n	800303c <HAL_ADC_Init+0xe4>
 8003016:	4b43      	ldr	r3, [pc, #268]	@ (8003124 <HAL_ADC_Init+0x1cc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f013 0301 	ands.w	r3, r3, #1
 800301e:	d000      	beq.n	8003022 <HAL_ADC_Init+0xca>
 8003020:	2301      	movs	r3, #1
 8003022:	4a41      	ldr	r2, [pc, #260]	@ (8003128 <HAL_ADC_Init+0x1d0>)
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	f012 0f01 	tst.w	r2, #1
 800302a:	d107      	bne.n	800303c <HAL_ADC_Init+0xe4>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800302c:	b933      	cbnz	r3, 800303c <HAL_ADC_Init+0xe4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800302e:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003030:	493e      	ldr	r1, [pc, #248]	@ (800312c <HAL_ADC_Init+0x1d4>)
 8003032:	688a      	ldr	r2, [r1, #8]
 8003034:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800303c:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 800303e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003040:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 8003044:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 8003046:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8003048:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 800304a:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800304c:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003054:	2a01      	cmp	r2, #1
 8003056:	d03a      	beq.n	80030ce <HAL_ADC_Init+0x176>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003058:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800305a:	b122      	cbz	r2, 8003066 <HAL_ADC_Init+0x10e>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800305c:	f402 7270 	and.w	r2, r2, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003060:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003062:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003064:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003066:	6821      	ldr	r1, [r4, #0]
 8003068:	68cd      	ldr	r5, [r1, #12]
 800306a:	4a31      	ldr	r2, [pc, #196]	@ (8003130 <HAL_ADC_Init+0x1d8>)
 800306c:	402a      	ands	r2, r5
 800306e:	431a      	orrs	r2, r3
 8003070:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003072:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003074:	6893      	ldr	r3, [r2, #8]
 8003076:	f013 0308 	ands.w	r3, r3, #8
 800307a:	d000      	beq.n	800307e <HAL_ADC_Init+0x126>
 800307c:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800307e:	b9ab      	cbnz	r3, 80030ac <HAL_ADC_Init+0x154>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003080:	7e23      	ldrb	r3, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003082:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8003086:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003088:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800308c:	68d3      	ldr	r3, [r2, #12]
 800308e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003092:	f023 0302 	bic.w	r3, r3, #2
 8003096:	430b      	orrs	r3, r1
 8003098:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800309a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d01a      	beq.n	80030d8 <HAL_ADC_Init+0x180>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	6913      	ldr	r3, [r2, #16]
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d022      	beq.n	80030f8 <HAL_ADC_Init+0x1a0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80030b6:	f023 030f 	bic.w	r3, r3, #15
 80030ba:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6563      	str	r3, [r4, #84]	@ 0x54
 80030c8:	e024      	b.n	8003114 <HAL_ADC_Init+0x1bc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ca:	2000      	movs	r0, #0
 80030cc:	e78c      	b.n	8002fe8 <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030ce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80030d0:	3a01      	subs	r2, #1
 80030d2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80030d6:	e7bf      	b.n	8003058 <HAL_ADC_Init+0x100>
        MODIFY_REG(hadc->Instance->CFGR2,
 80030d8:	6821      	ldr	r1, [r4, #0]
 80030da:	690b      	ldr	r3, [r1, #16]
 80030dc:	f36f 038a 	bfc	r3, #2, #9
 80030e0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80030e2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80030e4:	432a      	orrs	r2, r5
 80030e6:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80030e8:	432a      	orrs	r2, r5
 80030ea:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80030ec:	432a      	orrs	r2, r5
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	610b      	str	r3, [r1, #16]
 80030f6:	e7d9      	b.n	80030ac <HAL_ADC_Init+0x154>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030f8:	6821      	ldr	r1, [r4, #0]
 80030fa:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80030fc:	f023 030f 	bic.w	r3, r3, #15
 8003100:	69e2      	ldr	r2, [r4, #28]
 8003102:	3a01      	subs	r2, #1
 8003104:	4313      	orrs	r3, r2
 8003106:	630b      	str	r3, [r1, #48]	@ 0x30
 8003108:	e7d8      	b.n	80030bc <HAL_ADC_Init+0x164>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800310c:	f043 0310 	orr.w	r3, r3, #16
 8003110:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003112:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003114:	b003      	add	sp, #12
 8003116:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003118:	2001      	movs	r0, #1
 800311a:	e7fb      	b.n	8003114 <HAL_ADC_Init+0x1bc>
 800311c:	200000c4 	.word	0x200000c4
 8003120:	053e2d63 	.word	0x053e2d63
 8003124:	50040000 	.word	0x50040000
 8003128:	50040100 	.word	0x50040100
 800312c:	50040300 	.word	0x50040300
 8003130:	fff0c007 	.word	0xfff0c007

08003134 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003134:	4770      	bx	lr

08003136 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003136:	4770      	bx	lr

08003138 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003138:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800313a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800313c:	f7ff fffb 	bl	8003136 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003140:	bd08      	pop	{r3, pc}

08003142 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8003142:	4770      	bx	lr

08003144 <HAL_ADC_ErrorCallback>:
}
 8003144:	4770      	bx	lr
	...

08003148 <HAL_ADC_IRQHandler>:
{
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800314c:	6803      	ldr	r3, [r0, #0]
 800314e:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003150:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003152:	4b9a      	ldr	r3, [pc, #616]	@ (80033bc <HAL_ADC_IRQHandler+0x274>)
 8003154:	689e      	ldr	r6, [r3, #8]
 8003156:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800315a:	f017 0f02 	tst.w	r7, #2
 800315e:	d010      	beq.n	8003182 <HAL_ADC_IRQHandler+0x3a>
 8003160:	f015 0f02 	tst.w	r5, #2
 8003164:	d00d      	beq.n	8003182 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003166:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003168:	f013 0f10 	tst.w	r3, #16
 800316c:	d103      	bne.n	8003176 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800316e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003170:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003174:	6543      	str	r3, [r0, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003176:	4620      	mov	r0, r4
 8003178:	f000 fc9a 	bl	8003ab0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	2202      	movs	r2, #2
 8003180:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003182:	f017 0f04 	tst.w	r7, #4
 8003186:	d002      	beq.n	800318e <HAL_ADC_IRQHandler+0x46>
 8003188:	f015 0f04 	tst.w	r5, #4
 800318c:	d105      	bne.n	800319a <HAL_ADC_IRQHandler+0x52>
 800318e:	f017 0f08 	tst.w	r7, #8
 8003192:	d04d      	beq.n	8003230 <HAL_ADC_IRQHandler+0xe8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003194:	f015 0f08 	tst.w	r5, #8
 8003198:	d04a      	beq.n	8003230 <HAL_ADC_IRQHandler+0xe8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800319a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800319c:	f013 0f10 	tst.w	r3, #16
 80031a0:	d103      	bne.n	80031aa <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031a2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a8:	6563      	str	r3, [r4, #84]	@ 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031aa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80031b2:	d137      	bne.n	8003224 <HAL_ADC_IRQHandler+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b4:	4a82      	ldr	r2, [pc, #520]	@ (80033c0 <HAL_ADC_IRQHandler+0x278>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d027      	beq.n	800320a <HAL_ADC_IRQHandler+0xc2>
 80031ba:	461a      	mov	r2, r3
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x88>
 80031c0:	2e09      	cmp	r6, #9
 80031c2:	d825      	bhi.n	8003210 <HAL_ADC_IRQHandler+0xc8>
 80031c4:	f240 2121 	movw	r1, #545	@ 0x221
 80031c8:	40f1      	lsrs	r1, r6
 80031ca:	f011 0f01 	tst.w	r1, #1
 80031ce:	d01f      	beq.n	8003210 <HAL_ADC_IRQHandler+0xc8>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031d0:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031d2:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 80031d6:	d125      	bne.n	8003224 <HAL_ADC_IRQHandler+0xdc>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f012 0f08 	tst.w	r2, #8
 80031de:	d021      	beq.n	8003224 <HAL_ADC_IRQHandler+0xdc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	f012 0f04 	tst.w	r2, #4
 80031e6:	d115      	bne.n	8003214 <HAL_ADC_IRQHandler+0xcc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	f022 020c 	bic.w	r2, r2, #12
 80031ee:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031f6:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031fa:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80031fe:	d111      	bne.n	8003224 <HAL_ADC_IRQHandler+0xdc>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003200:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6563      	str	r3, [r4, #84]	@ 0x54
 8003208:	e00c      	b.n	8003224 <HAL_ADC_IRQHandler+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800320a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800320e:	e7d5      	b.n	80031bc <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003210:	68d2      	ldr	r2, [r2, #12]
 8003212:	e7de      	b.n	80031d2 <HAL_ADC_IRQHandler+0x8a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003214:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003216:	f043 0310 	orr.w	r3, r3, #16
 800321a:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003224:	4620      	mov	r0, r4
 8003226:	f7ff ff85 	bl	8003134 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	220c      	movs	r2, #12
 800322e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003230:	f017 0f20 	tst.w	r7, #32
 8003234:	d002      	beq.n	800323c <HAL_ADC_IRQHandler+0xf4>
 8003236:	f015 0f20 	tst.w	r5, #32
 800323a:	d105      	bne.n	8003248 <HAL_ADC_IRQHandler+0x100>
 800323c:	f017 0f40 	tst.w	r7, #64	@ 0x40
 8003240:	d05c      	beq.n	80032fc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003242:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8003246:	d059      	beq.n	80032fc <HAL_ADC_IRQHandler+0x1b4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003248:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800324a:	f013 0f10 	tst.w	r3, #16
 800324e:	d103      	bne.n	8003258 <HAL_ADC_IRQHandler+0x110>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003250:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003252:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003256:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003258:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800325a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800325c:	f012 0fc0 	tst.w	r2, #192	@ 0xc0
 8003260:	d112      	bne.n	8003288 <HAL_ADC_IRQHandler+0x140>
 8003262:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800326a:	d10f      	bne.n	800328c <HAL_ADC_IRQHandler+0x144>
 800326c:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800326e:	4a54      	ldr	r2, [pc, #336]	@ (80033c0 <HAL_ADC_IRQHandler+0x278>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00d      	beq.n	8003290 <HAL_ADC_IRQHandler+0x148>
 8003274:	461a      	mov	r2, r3
 8003276:	4293      	cmp	r3, r2
 8003278:	d00d      	beq.n	8003296 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800327a:	b166      	cbz	r6, 8003296 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800327c:	2e06      	cmp	r6, #6
 800327e:	d00a      	beq.n	8003296 <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003280:	2e07      	cmp	r6, #7
 8003282:	d008      	beq.n	8003296 <HAL_ADC_IRQHandler+0x14e>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003284:	68d2      	ldr	r2, [r2, #12]
 8003286:	e007      	b.n	8003298 <HAL_ADC_IRQHandler+0x150>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003288:	2100      	movs	r1, #0
 800328a:	e7eb      	b.n	8003264 <HAL_ADC_IRQHandler+0x11c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800328c:	2000      	movs	r0, #0
 800328e:	e7ee      	b.n	800326e <HAL_ADC_IRQHandler+0x126>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003290:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003294:	e7ef      	b.n	8003276 <HAL_ADC_IRQHandler+0x12e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003296:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003298:	b351      	cbz	r1, 80032f0 <HAL_ADC_IRQHandler+0x1a8>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800329a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800329e:	d003      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x160>
 80032a0:	b330      	cbz	r0, 80032f0 <HAL_ADC_IRQHandler+0x1a8>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80032a2:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 80032a6:	d123      	bne.n	80032f0 <HAL_ADC_IRQHandler+0x1a8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80032ae:	d01f      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x1a8>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80032b0:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
 80032b4:	d11c      	bne.n	80032f0 <HAL_ADC_IRQHandler+0x1a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	f012 0f08 	tst.w	r2, #8
 80032bc:	d110      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x198>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032c4:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80032c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032cc:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80032ce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032d0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80032d4:	d10c      	bne.n	80032f0 <HAL_ADC_IRQHandler+0x1a8>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6563      	str	r3, [r4, #84]	@ 0x54
 80032de:	e007      	b.n	80032f0 <HAL_ADC_IRQHandler+0x1a8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032e2:	f043 0310 	orr.w	r3, r3, #16
 80032e6:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032f0:	4620      	mov	r0, r4
 80032f2:	f000 fbd9 	bl	8003aa8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	2260      	movs	r2, #96	@ 0x60
 80032fa:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80032fc:	f017 0f80 	tst.w	r7, #128	@ 0x80
 8003300:	d002      	beq.n	8003308 <HAL_ADC_IRQHandler+0x1c0>
 8003302:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003306:	d12f      	bne.n	8003368 <HAL_ADC_IRQHandler+0x220>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003308:	f417 7f80 	tst.w	r7, #256	@ 0x100
 800330c:	d002      	beq.n	8003314 <HAL_ADC_IRQHandler+0x1cc>
 800330e:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8003312:	d134      	bne.n	800337e <HAL_ADC_IRQHandler+0x236>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003314:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8003318:	d002      	beq.n	8003320 <HAL_ADC_IRQHandler+0x1d8>
 800331a:	f415 7f00 	tst.w	r5, #512	@ 0x200
 800331e:	d13a      	bne.n	8003396 <HAL_ADC_IRQHandler+0x24e>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003320:	f017 0f10 	tst.w	r7, #16
 8003324:	d019      	beq.n	800335a <HAL_ADC_IRQHandler+0x212>
 8003326:	f015 0f10 	tst.w	r5, #16
 800332a:	d016      	beq.n	800335a <HAL_ADC_IRQHandler+0x212>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800332c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800332e:	b133      	cbz	r3, 800333e <HAL_ADC_IRQHandler+0x1f6>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003330:	2e00      	cmp	r6, #0
 8003332:	d03c      	beq.n	80033ae <HAL_ADC_IRQHandler+0x266>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003334:	4b21      	ldr	r3, [pc, #132]	@ (80033bc <HAL_ADC_IRQHandler+0x274>)
 8003336:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003338:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 800333c:	d00a      	beq.n	8003354 <HAL_ADC_IRQHandler+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800333e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003340:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003344:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003346:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 800334e:	4620      	mov	r0, r4
 8003350:	f7ff fef8 	bl	8003144 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	2210      	movs	r2, #16
 8003358:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800335a:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 800335e:	d002      	beq.n	8003366 <HAL_ADC_IRQHandler+0x21e>
 8003360:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003364:	d12e      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x27c>
}
 8003366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003368:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800336a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336e:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff fee6 	bl	8003142 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	2280      	movs	r2, #128	@ 0x80
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e7c4      	b.n	8003308 <HAL_ADC_IRQHandler+0x1c0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800337e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003384:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003386:	4620      	mov	r0, r4
 8003388:	f000 fb90 	bl	8003aac <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e7be      	b.n	8003314 <HAL_ADC_IRQHandler+0x1cc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003396:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800339c:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800339e:	4620      	mov	r0, r4
 80033a0:	f000 fb85 	bl	8003aae <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e7b8      	b.n	8003320 <HAL_ADC_IRQHandler+0x1d8>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f013 0f01 	tst.w	r3, #1
 80033b6:	d0cd      	beq.n	8003354 <HAL_ADC_IRQHandler+0x20c>
 80033b8:	e7c1      	b.n	800333e <HAL_ADC_IRQHandler+0x1f6>
 80033ba:	bf00      	nop
 80033bc:	50040300 	.word	0x50040300
 80033c0:	50040100 	.word	0x50040100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80033c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80033c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ca:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80033cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033ce:	f043 0308 	orr.w	r3, r3, #8
 80033d2:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033da:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80033dc:	4620      	mov	r0, r4
 80033de:	f000 fb64 	bl	8003aaa <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80033e2:	e7c0      	b.n	8003366 <HAL_ADC_IRQHandler+0x21e>

080033e4 <ADC_DMAConvCplt>:
{
 80033e4:	b508      	push	{r3, lr}
 80033e6:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033ea:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80033ec:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80033f0:	d130      	bne.n	8003454 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80033f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033f8:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033fa:	6803      	ldr	r3, [r0, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f012 0f08 	tst.w	r2, #8
 8003402:	d014      	beq.n	800342e <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800340a:	d120      	bne.n	800344e <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003412:	d11c      	bne.n	800344e <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003414:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003416:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800341a:	6543      	str	r3, [r0, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800341c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800341e:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003422:	d114      	bne.n	800344e <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003424:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6543      	str	r3, [r0, #84]	@ 0x54
 800342c:	e00f      	b.n	800344e <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f013 0f02 	tst.w	r3, #2
 8003434:	d10b      	bne.n	800344e <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003436:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800343c:	6543      	str	r3, [r0, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800343e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003440:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003444:	d103      	bne.n	800344e <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003446:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6543      	str	r3, [r0, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800344e:	f7ff fe71 	bl	8003134 <HAL_ADC_ConvCpltCallback>
}
 8003452:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003454:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8003456:	f012 0f10 	tst.w	r2, #16
 800345a:	d104      	bne.n	8003466 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800345c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800345e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003460:	4618      	mov	r0, r3
 8003462:	4790      	blx	r2
}
 8003464:	e7f5      	b.n	8003452 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8003466:	f7ff fe6d 	bl	8003144 <HAL_ADC_ErrorCallback>
 800346a:	e7f2      	b.n	8003452 <ADC_DMAConvCplt+0x6e>

0800346c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800346c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346e:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003470:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003476:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003478:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800347a:	f043 0304 	orr.w	r3, r3, #4
 800347e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003480:	f7ff fe60 	bl	8003144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003484:	bd08      	pop	{r3, pc}
	...

08003488 <HAL_ADC_ConfigChannel>:
{
 8003488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800348c:	2300      	movs	r3, #0
 800348e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003490:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003494:	2b01      	cmp	r3, #1
 8003496:	f000 820b 	beq.w	80038b0 <HAL_ADC_ConfigChannel+0x428>
 800349a:	4604      	mov	r4, r0
 800349c:	460d      	mov	r5, r1
 800349e:	2301      	movs	r3, #1
 80034a0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034a4:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a6:	6883      	ldr	r3, [r0, #8]
 80034a8:	f013 0f04 	tst.w	r3, #4
 80034ac:	d009      	beq.n	80034c2 <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80034b0:	f043 0320 	orr.w	r3, r3, #32
 80034b4:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80034b6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80034b8:	2300      	movs	r3, #0
 80034ba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80034be:	b003      	add	sp, #12
 80034c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t config_rank = pConfig->Rank;
 80034c2:	6849      	ldr	r1, [r1, #4]
    if (pConfig->Rank <= 5U)
 80034c4:	2905      	cmp	r1, #5
 80034c6:	d807      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0x50>
      switch (pConfig->Rank)
 80034c8:	3902      	subs	r1, #2
 80034ca:	2903      	cmp	r1, #3
 80034cc:	d871      	bhi.n	80035b2 <HAL_ADC_ConfigChannel+0x12a>
 80034ce:	e8df f001 	tbb	[pc, r1]
 80034d2:	7202      	.short	0x7202
 80034d4:	6d6b      	.short	0x6d6b
 80034d6:	210c      	movs	r1, #12
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80034d8:	682a      	ldr	r2, [r5, #0]
 80034da:	f7ff fd0f 	bl	8002efc <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	6883      	ldr	r3, [r0, #8]
 80034e2:	f013 0304 	ands.w	r3, r3, #4
 80034e6:	d000      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x62>
 80034e8:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034ea:	6882      	ldr	r2, [r0, #8]
 80034ec:	f012 0208 	ands.w	r2, r2, #8
 80034f0:	d000      	beq.n	80034f4 <HAL_ADC_ConfigChannel+0x6c>
 80034f2:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034f4:	bb23      	cbnz	r3, 8003540 <HAL_ADC_ConfigChannel+0xb8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034f6:	bb1a      	cbnz	r2, 8003540 <HAL_ADC_ConfigChannel+0xb8>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034f8:	68aa      	ldr	r2, [r5, #8]
 80034fa:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80034fe:	d05c      	beq.n	80035ba <HAL_ADC_ConfigChannel+0x132>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003500:	6829      	ldr	r1, [r5, #0]
 8003502:	f7ff fd13 	bl	8002f2c <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003506:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003508:	6953      	ldr	r3, [r2, #20]
 800350a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800350e:	6153      	str	r3, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003510:	6969      	ldr	r1, [r5, #20]
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	68d3      	ldr	r3, [r2, #12]
 8003516:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800351e:	6928      	ldr	r0, [r5, #16]
 8003520:	2804      	cmp	r0, #4
 8003522:	d054      	beq.n	80035ce <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003524:	682e      	ldr	r6, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003526:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8003528:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 800352c:	4ba7      	ldr	r3, [pc, #668]	@ (80037cc <HAL_ADC_ConfigChannel+0x344>)
 800352e:	403b      	ands	r3, r7
 8003530:	f006 46f8 	and.w	r6, r6, #2080374784	@ 0x7c000000
 8003534:	4331      	orrs	r1, r6
 8003536:	430b      	orrs	r3, r1
 8003538:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800353c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003540:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003542:	6893      	ldr	r3, [r2, #8]
 8003544:	f013 0f01 	tst.w	r3, #1
 8003548:	d117      	bne.n	800357a <HAL_ADC_ConfigChannel+0xf2>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800354a:	682b      	ldr	r3, [r5, #0]
 800354c:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800354e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8003552:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003556:	ea21 0106 	bic.w	r1, r1, r6
 800355a:	f000 0c18 	and.w	ip, r0, #24
 800355e:	489c      	ldr	r0, [pc, #624]	@ (80037d0 <HAL_ADC_ConfigChannel+0x348>)
 8003560:	fa20 f00c 	lsr.w	r0, r0, ip
 8003564:	4003      	ands	r3, r0
 8003566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356a:	430b      	orrs	r3, r1
 800356c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003570:	68ea      	ldr	r2, [r5, #12]
 8003572:	4b98      	ldr	r3, [pc, #608]	@ (80037d4 <HAL_ADC_ConfigChannel+0x34c>)
 8003574:	429a      	cmp	r2, r3
 8003576:	f000 8091 	beq.w	800369c <HAL_ADC_ConfigChannel+0x214>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800357a:	682b      	ldr	r3, [r5, #0]
 800357c:	4a96      	ldr	r2, [pc, #600]	@ (80037d8 <HAL_ADC_ConfigChannel+0x350>)
 800357e:	4213      	tst	r3, r2
 8003580:	f000 8192 	beq.w	80038a8 <HAL_ADC_ConfigChannel+0x420>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003584:	4a95      	ldr	r2, [pc, #596]	@ (80037dc <HAL_ADC_ConfigChannel+0x354>)
 8003586:	6892      	ldr	r2, [r2, #8]
 8003588:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800358c:	4994      	ldr	r1, [pc, #592]	@ (80037e0 <HAL_ADC_ConfigChannel+0x358>)
 800358e:	428b      	cmp	r3, r1
 8003590:	f000 813d 	beq.w	800380e <HAL_ADC_ConfigChannel+0x386>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003594:	4993      	ldr	r1, [pc, #588]	@ (80037e4 <HAL_ADC_ConfigChannel+0x35c>)
 8003596:	428b      	cmp	r3, r1
 8003598:	f000 815f 	beq.w	800385a <HAL_ADC_ConfigChannel+0x3d2>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800359c:	4992      	ldr	r1, [pc, #584]	@ (80037e8 <HAL_ADC_ConfigChannel+0x360>)
 800359e:	428b      	cmp	r3, r1
 80035a0:	f000 816f 	beq.w	8003882 <HAL_ADC_ConfigChannel+0x3fa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a4:	2000      	movs	r0, #0
 80035a6:	e787      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
          config_rank = ADC_REGULAR_RANK_4;
 80035a8:	2118      	movs	r1, #24
          break;
 80035aa:	e795      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_5;
 80035ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
          break;
 80035b0:	e792      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_1;
 80035b2:	2106      	movs	r1, #6
          break;
 80035b4:	e790      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_3;
 80035b6:	2112      	movs	r1, #18
 80035b8:	e78e      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x50>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035ba:	2200      	movs	r2, #0
 80035bc:	6829      	ldr	r1, [r5, #0]
 80035be:	f7ff fcb5 	bl	8002f2c <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035c2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035c4:	6953      	ldr	r3, [r2, #20]
 80035c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035ca:	6153      	str	r3, [r2, #20]
}
 80035cc:	e7a0      	b.n	8003510 <HAL_ADC_ConfigChannel+0x88>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035ce:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80035d0:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035d2:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035d6:	682b      	ldr	r3, [r5, #0]
 80035d8:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80035dc:	bb78      	cbnz	r0, 800363e <HAL_ADC_ConfigChannel+0x1b6>
 80035de:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035e2:	4299      	cmp	r1, r3
 80035e4:	d033      	beq.n	800364e <HAL_ADC_ConfigChannel+0x1c6>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e6:	6821      	ldr	r1, [r4, #0]
 80035e8:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80035ea:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 80035ec:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80035f6:	bb78      	cbnz	r0, 8003658 <HAL_ADC_ConfigChannel+0x1d0>
 80035f8:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d033      	beq.n	8003668 <HAL_ADC_ConfigChannel+0x1e0>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003600:	6821      	ldr	r1, [r4, #0]
 8003602:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8003604:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 8003606:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800360a:	682b      	ldr	r3, [r5, #0]
 800360c:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8003610:	bb78      	cbnz	r0, 8003672 <HAL_ADC_ConfigChannel+0x1ea>
 8003612:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003616:	429a      	cmp	r2, r3
 8003618:	d033      	beq.n	8003682 <HAL_ADC_ConfigChannel+0x1fa>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800361a:	6821      	ldr	r1, [r4, #0]
 800361c:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800361e:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 8003620:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800362a:	bb78      	cbnz	r0, 800368c <HAL_ADC_ConfigChannel+0x204>
 800362c:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003630:	429a      	cmp	r2, r3
 8003632:	d185      	bne.n	8003540 <HAL_ADC_ConfigChannel+0xb8>
  MODIFY_REG(*preg,
 8003634:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 8003636:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800363a:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 800363c:	e780      	b.n	8003540 <HAL_ADC_ConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003642:	b113      	cbz	r3, 800364a <HAL_ADC_ConfigChannel+0x1c2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	e7cb      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x15a>
    return 32U;
 800364a:	2320      	movs	r3, #32
 800364c:	e7c9      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x15a>
  MODIFY_REG(*preg,
 800364e:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003654:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8003656:	e7c6      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800365c:	b113      	cbz	r3, 8003664 <HAL_ADC_ConfigChannel+0x1dc>
  return __builtin_clz(value);
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	e7cb      	b.n	80035fc <HAL_ADC_ConfigChannel+0x174>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e7c9      	b.n	80035fc <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 8003668:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800366a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800366e:	664b      	str	r3, [r1, #100]	@ 0x64
}
 8003670:	e7c6      	b.n	8003600 <HAL_ADC_ConfigChannel+0x178>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003676:	b113      	cbz	r3, 800367e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	e7cb      	b.n	8003616 <HAL_ADC_ConfigChannel+0x18e>
    return 32U;
 800367e:	2320      	movs	r3, #32
 8003680:	e7c9      	b.n	8003616 <HAL_ADC_ConfigChannel+0x18e>
  MODIFY_REG(*preg,
 8003682:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8003684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003688:	668b      	str	r3, [r1, #104]	@ 0x68
}
 800368a:	e7c6      	b.n	800361a <HAL_ADC_ConfigChannel+0x192>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003690:	b113      	cbz	r3, 8003698 <HAL_ADC_ConfigChannel+0x210>
  return __builtin_clz(value);
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	e7cb      	b.n	8003630 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e7c9      	b.n	8003630 <HAL_ADC_ConfigChannel+0x1a8>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800369c:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800369e:	682b      	ldr	r3, [r5, #0]
 80036a0:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80036a4:	bb26      	cbnz	r6, 80036f0 <HAL_ADC_ConfigChannel+0x268>
 80036a6:	0e9a      	lsrs	r2, r3, #26
 80036a8:	3201      	adds	r2, #1
 80036aa:	f002 021f 	and.w	r2, r2, #31
 80036ae:	2a09      	cmp	r2, #9
 80036b0:	bf8c      	ite	hi
 80036b2:	2200      	movhi	r2, #0
 80036b4:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	d052      	beq.n	8003760 <HAL_ADC_ConfigChannel+0x2d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036ba:	bb46      	cbnz	r6, 800370e <HAL_ADC_ConfigChannel+0x286>
 80036bc:	0e99      	lsrs	r1, r3, #26
 80036be:	3101      	adds	r1, #1
 80036c0:	0689      	lsls	r1, r1, #26
 80036c2:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80036c6:	bb76      	cbnz	r6, 8003726 <HAL_ADC_ConfigChannel+0x29e>
 80036c8:	0e9f      	lsrs	r7, r3, #26
 80036ca:	3701      	adds	r7, #1
 80036cc:	f007 071f 	and.w	r7, r7, #31
 80036d0:	2201      	movs	r2, #1
 80036d2:	40ba      	lsls	r2, r7
 80036d4:	4311      	orrs	r1, r2
 80036d6:	bbae      	cbnz	r6, 8003744 <HAL_ADC_ConfigChannel+0x2bc>
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	3301      	adds	r3, #1
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80036e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e6:	4319      	orrs	r1, r3
 80036e8:	68aa      	ldr	r2, [r5, #8]
 80036ea:	f7ff fc1f 	bl	8002f2c <LL_ADC_SetChannelSamplingTime>
 80036ee:	e744      	b.n	800357a <HAL_ADC_ConfigChannel+0xf2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80036f4:	b14a      	cbz	r2, 800370a <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 80036f6:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036fa:	3201      	adds	r2, #1
 80036fc:	f002 021f 	and.w	r2, r2, #31
 8003700:	2a09      	cmp	r2, #9
 8003702:	bf8c      	ite	hi
 8003704:	2200      	movhi	r2, #0
 8003706:	2201      	movls	r2, #1
 8003708:	e7d5      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x22e>
    return 32U;
 800370a:	2220      	movs	r2, #32
 800370c:	e7f5      	b.n	80036fa <HAL_ADC_ConfigChannel+0x272>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8003712:	b131      	cbz	r1, 8003722 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003714:	fab1 f181 	clz	r1, r1
 8003718:	3101      	adds	r1, #1
 800371a:	0689      	lsls	r1, r1, #26
 800371c:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003720:	e7d1      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8003722:	2120      	movs	r1, #32
 8003724:	e7f8      	b.n	8003718 <HAL_ADC_ConfigChannel+0x290>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800372a:	b14a      	cbz	r2, 8003740 <HAL_ADC_ConfigChannel+0x2b8>
  return __builtin_clz(value);
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	3201      	adds	r2, #1
 8003732:	f002 021f 	and.w	r2, r2, #31
 8003736:	f04f 0c01 	mov.w	ip, #1
 800373a:	fa0c f202 	lsl.w	r2, ip, r2
 800373e:	e7c9      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x24c>
    return 32U;
 8003740:	2220      	movs	r2, #32
 8003742:	e7f5      	b.n	8003730 <HAL_ADC_ConfigChannel+0x2a8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003748:	b143      	cbz	r3, 800375c <HAL_ADC_ConfigChannel+0x2d4>
  return __builtin_clz(value);
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	3301      	adds	r3, #1
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003758:	051b      	lsls	r3, r3, #20
 800375a:	e7c4      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x25e>
    return 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	e7f6      	b.n	800374e <HAL_ADC_ConfigChannel+0x2c6>
 8003760:	b9ce      	cbnz	r6, 8003796 <HAL_ADC_ConfigChannel+0x30e>
 8003762:	0e99      	lsrs	r1, r3, #26
 8003764:	3101      	adds	r1, #1
 8003766:	0689      	lsls	r1, r1, #26
 8003768:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800376c:	b9fe      	cbnz	r6, 80037ae <HAL_ADC_ConfigChannel+0x326>
 800376e:	0e9f      	lsrs	r7, r3, #26
 8003770:	3701      	adds	r7, #1
 8003772:	f007 071f 	and.w	r7, r7, #31
 8003776:	2201      	movs	r2, #1
 8003778:	40ba      	lsls	r2, r7
 800377a:	4311      	orrs	r1, r2
 800377c:	bbb6      	cbnz	r6, 80037ec <HAL_ADC_ConfigChannel+0x364>
 800377e:	0e9b      	lsrs	r3, r3, #26
 8003780:	3301      	adds	r3, #1
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800378a:	3b1e      	subs	r3, #30
 800378c:	051b      	lsls	r3, r3, #20
 800378e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003792:	4319      	orrs	r1, r3
 8003794:	e7a8      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x260>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800379a:	b131      	cbz	r1, 80037aa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800379c:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037a0:	3101      	adds	r1, #1
 80037a2:	0689      	lsls	r1, r1, #26
 80037a4:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80037a8:	e7e0      	b.n	800376c <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 80037aa:	2120      	movs	r1, #32
 80037ac:	e7f8      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x318>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80037b2:	b14a      	cbz	r2, 80037c8 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 80037b4:	fab2 f282 	clz	r2, r2
 80037b8:	3201      	adds	r2, #1
 80037ba:	f002 021f 	and.w	r2, r2, #31
 80037be:	f04f 0c01 	mov.w	ip, #1
 80037c2:	fa0c f202 	lsl.w	r2, ip, r2
 80037c6:	e7d8      	b.n	800377a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80037c8:	2220      	movs	r2, #32
 80037ca:	e7f5      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x330>
 80037cc:	03fff000 	.word	0x03fff000
 80037d0:	0007ffff 	.word	0x0007ffff
 80037d4:	407f0000 	.word	0x407f0000
 80037d8:	80080000 	.word	0x80080000
 80037dc:	50040300 	.word	0x50040300
 80037e0:	c7520000 	.word	0xc7520000
 80037e4:	cb840000 	.word	0xcb840000
 80037e8:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80037f0:	b15b      	cbz	r3, 800380a <HAL_ADC_ConfigChannel+0x382>
  return __builtin_clz(value);
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003800:	3b1e      	subs	r3, #30
 8003802:	051b      	lsls	r3, r3, #20
 8003804:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003808:	e7c3      	b.n	8003792 <HAL_ADC_ConfigChannel+0x30a>
    return 32U;
 800380a:	2320      	movs	r3, #32
 800380c:	e7f3      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x36e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800380e:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 8003812:	f47f aebf 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x10c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <HAL_ADC_ConfigChannel+0x42c>)
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <HAL_ADC_ConfigChannel+0x39a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381e:	2000      	movs	r0, #0
 8003820:	e64a      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003822:	f440 0300 	orr.w	r3, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003826:	4924      	ldr	r1, [pc, #144]	@ (80038b8 <HAL_ADC_ConfigChannel+0x430>)
 8003828:	688a      	ldr	r2, [r1, #8]
 800382a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003832:	4b22      	ldr	r3, [pc, #136]	@ (80038bc <HAL_ADC_ConfigChannel+0x434>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	4a21      	ldr	r2, [pc, #132]	@ (80038c0 <HAL_ADC_ConfigChannel+0x438>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	3301      	adds	r3, #1
 8003842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	b11b      	cbz	r3, 8003856 <HAL_ADC_ConfigChannel+0x3ce>
            wait_loop_index--;
 800384e:	9b01      	ldr	r3, [sp, #4]
 8003850:	3b01      	subs	r3, #1
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	e7f9      	b.n	800384a <HAL_ADC_ConfigChannel+0x3c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003856:	2000      	movs	r0, #0
 8003858:	e62e      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800385a:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 800385e:	f47f ae9d 	bne.w	800359c <HAL_ADC_ConfigChannel+0x114>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	4b13      	ldr	r3, [pc, #76]	@ (80038b4 <HAL_ADC_ConfigChannel+0x42c>)
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_ADC_ConfigChannel+0x3e6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386a:	2000      	movs	r0, #0
 800386c:	e624      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800386e:	f040 7380 	orr.w	r3, r0, #16777216	@ 0x1000000
 8003872:	4911      	ldr	r1, [pc, #68]	@ (80038b8 <HAL_ADC_ConfigChannel+0x430>)
 8003874:	688a      	ldr	r2, [r1, #8]
 8003876:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800387e:	2000      	movs	r0, #0
}
 8003880:	e61a      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003882:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8003886:	d111      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x424>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003888:	6822      	ldr	r2, [r4, #0]
 800388a:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_ADC_ConfigChannel+0x42c>)
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_ADC_ConfigChannel+0x40c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	2000      	movs	r0, #0
 8003892:	e611      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003894:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003898:	4907      	ldr	r1, [pc, #28]	@ (80038b8 <HAL_ADC_ConfigChannel+0x430>)
 800389a:	688a      	ldr	r2, [r1, #8]
 800389c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a4:	2000      	movs	r0, #0
}
 80038a6:	e607      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
 80038a8:	2000      	movs	r0, #0
 80038aa:	e605      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
 80038ac:	2000      	movs	r0, #0
 80038ae:	e603      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80038b0:	2002      	movs	r0, #2
 80038b2:	e604      	b.n	80034be <HAL_ADC_ConfigChannel+0x36>
 80038b4:	50040000 	.word	0x50040000
 80038b8:	50040300 	.word	0x50040300
 80038bc:	200000c4 	.word	0x200000c4
 80038c0:	053e2d63 	.word	0x053e2d63

080038c4 <ADC_Enable>:
{
 80038c4:	b530      	push	{r4, r5, lr}
 80038c6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038cc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	f012 0f01 	tst.w	r2, #1
 80038d4:	d158      	bne.n	8003988 <ADC_Enable+0xc4>
 80038d6:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	4a2d      	ldr	r2, [pc, #180]	@ (8003990 <ADC_Enable+0xcc>)
 80038dc:	4211      	tst	r1, r2
 80038de:	d119      	bne.n	8003914 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038e6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038f0:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <ADC_Enable+0xd0>)
 80038f2:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038f4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80038f8:	d01c      	beq.n	8003934 <ADC_Enable+0x70>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038fa:	4b27      	ldr	r3, [pc, #156]	@ (8003998 <ADC_Enable+0xd4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	099b      	lsrs	r3, r3, #6
 8003900:	4a26      	ldr	r2, [pc, #152]	@ (800399c <ADC_Enable+0xd8>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	3301      	adds	r3, #1
 800390a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003912:	e00c      	b.n	800392e <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003914:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003916:	f043 0310 	orr.w	r3, r3, #16
 800391a:	6543      	str	r3, [r0, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8003924:	2001      	movs	r0, #1
 8003926:	e030      	b.n	800398a <ADC_Enable+0xc6>
        wait_loop_index--;
 8003928:	9b01      	ldr	r3, [sp, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800392e:	9b01      	ldr	r3, [sp, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f9      	bne.n	8003928 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();
 8003934:	f7ff faba 	bl	8002eac <HAL_GetTick>
 8003938:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f012 0f01 	tst.w	r2, #1
 8003942:	d11f      	bne.n	8003984 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	f012 0f01 	tst.w	r2, #1
 800394a:	d107      	bne.n	800395c <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003952:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800395c:	f7ff faa6 	bl	8002eac <HAL_GetTick>
 8003960:	1b43      	subs	r3, r0, r5
 8003962:	2b02      	cmp	r3, #2
 8003964:	d9e9      	bls.n	800393a <ADC_Enable+0x76>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f013 0f01 	tst.w	r3, #1
 800396e:	d1e4      	bne.n	800393a <ADC_Enable+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003970:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003972:	f043 0310 	orr.w	r3, r3, #16
 8003976:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003978:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
 8003982:	e002      	b.n	800398a <ADC_Enable+0xc6>
  return HAL_OK;
 8003984:	2000      	movs	r0, #0
 8003986:	e000      	b.n	800398a <ADC_Enable+0xc6>
 8003988:	2000      	movs	r0, #0
}
 800398a:	b003      	add	sp, #12
 800398c:	bd30      	pop	{r4, r5, pc}
 800398e:	bf00      	nop
 8003990:	8000003f 	.word	0x8000003f
 8003994:	50040300 	.word	0x50040300
 8003998:	200000c4 	.word	0x200000c4
 800399c:	053e2d63 	.word	0x053e2d63

080039a0 <HAL_ADC_Start_DMA>:
{
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80039a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <HAL_ADC_Start_DMA+0xf4>)
 80039a6:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039a8:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039aa:	6880      	ldr	r0, [r0, #8]
 80039ac:	f010 0f04 	tst.w	r0, #4
 80039b0:	d16c      	bne.n	8003a8c <HAL_ADC_Start_DMA+0xec>
 80039b2:	460e      	mov	r6, r1
 80039b4:	4617      	mov	r7, r2
 80039b6:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 80039ba:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d066      	beq.n	8003a90 <HAL_ADC_Start_DMA+0xf0>
 80039c2:	2301      	movs	r3, #1
 80039c4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80039c8:	2d09      	cmp	r5, #9
 80039ca:	d805      	bhi.n	80039d8 <HAL_ADC_Start_DMA+0x38>
 80039cc:	f240 2321 	movw	r3, #545	@ 0x221
 80039d0:	40eb      	lsrs	r3, r5
 80039d2:	f013 0f01 	tst.w	r3, #1
 80039d6:	d104      	bne.n	80039e2 <HAL_ADC_Start_DMA+0x42>
      __HAL_UNLOCK(hadc);
 80039d8:	2300      	movs	r3, #0
 80039da:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      tmp_hal_status = HAL_ERROR;
 80039de:	2001      	movs	r0, #1
 80039e0:	e055      	b.n	8003a8e <HAL_ADC_Start_DMA+0xee>
      tmp_hal_status = ADC_Enable(hadc);
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7ff ff6e 	bl	80038c4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d14b      	bne.n	8003a84 <HAL_ADC_Start_DMA+0xe4>
        ADC_STATE_CLR_SET(hadc->State,
 80039ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fa:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	4a26      	ldr	r2, [pc, #152]	@ (8003a98 <HAL_ADC_Start_DMA+0xf8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d039      	beq.n	8003a78 <HAL_ADC_Start_DMA+0xd8>
 8003a04:	461a      	mov	r2, r3
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d000      	beq.n	8003a0c <HAL_ADC_Start_DMA+0x6c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a0a:	b91d      	cbnz	r5, 8003a14 <HAL_ADC_Start_DMA+0x74>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a0c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a0e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a12:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a14:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a16:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003a1a:	d030      	beq.n	8003a7e <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a1e:	f023 0306 	bic.w	r3, r3, #6
 8003a22:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a24:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003a26:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <HAL_ADC_Start_DMA+0xfc>)
 8003a28:	62da      	str	r2, [r3, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a2a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <HAL_ADC_Start_DMA+0x100>)
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a30:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003a32:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <HAL_ADC_Start_DMA+0x104>)
 8003a34:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	221c      	movs	r2, #28
 8003a3a:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a42:	6822      	ldr	r2, [r4, #0]
 8003a44:	6853      	ldr	r3, [r2, #4]
 8003a46:	f043 0310 	orr.w	r3, r3, #16
 8003a4a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	68d3      	ldr	r3, [r2, #12]
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a56:	6821      	ldr	r1, [r4, #0]
 8003a58:	463b      	mov	r3, r7
 8003a5a:	4632      	mov	r2, r6
 8003a5c:	3140      	adds	r1, #64	@ 0x40
 8003a5e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003a60:	f000 f9cc 	bl	8003dfc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a64:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003a66:	6893      	ldr	r3, [r2, #8]
 8003a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6093      	str	r3, [r2, #8]
}
 8003a76:	e00a      	b.n	8003a8e <HAL_ADC_Start_DMA+0xee>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a78:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003a7c:	e7c3      	b.n	8003a06 <HAL_ADC_Start_DMA+0x66>
          ADC_CLEAR_ERRORCODE(hadc);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a82:	e7cf      	b.n	8003a24 <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 8003a84:	2300      	movs	r3, #0
 8003a86:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8003a8a:	e000      	b.n	8003a8e <HAL_ADC_Start_DMA+0xee>
    tmp_hal_status = HAL_BUSY;
 8003a8c:	2002      	movs	r0, #2
}
 8003a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8003a90:	2002      	movs	r0, #2
 8003a92:	e7fc      	b.n	8003a8e <HAL_ADC_Start_DMA+0xee>
 8003a94:	50040300 	.word	0x50040300
 8003a98:	50040100 	.word	0x50040100
 8003a9c:	080033e5 	.word	0x080033e5
 8003aa0:	08003139 	.word	0x08003139
 8003aa4:	0800346d 	.word	0x0800346d

08003aa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003aaa:	4770      	bx	lr

08003aac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003aac:	4770      	bx	lr

08003aae <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003aae:	4770      	bx	lr

08003ab0 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab4:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8003ab8:	2a01      	cmp	r2, #1
 8003aba:	d07f      	beq.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x108>
{
 8003abc:	b410      	push	{r4}
 8003abe:	b09b      	sub	sp, #108	@ 0x6c
 8003ac0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003acc:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ace:	6800      	ldr	r0, [r0, #0]
 8003ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003ad2:	4290      	cmp	r0, r2
 8003ad4:	d037      	beq.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	9201      	str	r2, [sp, #4]

  if (tmp_hadc_slave.Instance == NULL)
 8003ada:	9a01      	ldr	r2, [sp, #4]
 8003adc:	2a00      	cmp	r2, #0
 8003ade:	d036      	beq.n	8003b4e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ae0:	6892      	ldr	r2, [r2, #8]
 8003ae2:	f012 0204 	ands.w	r2, r2, #4
 8003ae6:	d000      	beq.n	8003aea <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003ae8:	2201      	movs	r2, #1
 8003aea:	6880      	ldr	r0, [r0, #8]
 8003aec:	f010 0f04 	tst.w	r0, #4
 8003af0:	d150      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	d14e      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003af6:	680a      	ldr	r2, [r1, #0]
 8003af8:	2a00      	cmp	r2, #0
 8003afa:	d031      	beq.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003afc:	4c31      	ldr	r4, [pc, #196]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003afe:	68a2      	ldr	r2, [r4, #8]
 8003b00:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b04:	6848      	ldr	r0, [r1, #4]
 8003b06:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 8003b0a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8003b0e:	4302      	orrs	r2, r0
 8003b10:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b12:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003b14:	6892      	ldr	r2, [r2, #8]
 8003b16:	f012 0201 	ands.w	r2, r2, #1
 8003b1a:	d000      	beq.n	8003b1e <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	482a      	ldr	r0, [pc, #168]	@ (8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8003b20:	6880      	ldr	r0, [r0, #8]
 8003b22:	f010 0f01 	tst.w	r0, #1
 8003b26:	d141      	bne.n	8003bac <HAL_ADCEx_MultiModeConfigChannel+0xf8>
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b28:	2a00      	cmp	r2, #0
 8003b2a:	d141      	bne.n	8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b2c:	4c25      	ldr	r4, [pc, #148]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003b2e:	68a2      	ldr	r2, [r4, #8]
 8003b30:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003b34:	f022 020f 	bic.w	r2, r2, #15
 8003b38:	6808      	ldr	r0, [r1, #0]
 8003b3a:	6889      	ldr	r1, [r1, #8]
 8003b3c:	4301      	orrs	r1, r0
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b42:	2000      	movs	r0, #0
 8003b44:	e02b      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0xea>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b46:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003b4a:	9201      	str	r2, [sp, #4]
 8003b4c:	e7c5      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b50:	f042 0220 	orr.w	r2, r2, #32
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	e021      	b.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b60:	4918      	ldr	r1, [pc, #96]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003b62:	688a      	ldr	r2, [r1, #8]
 8003b64:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b68:	608a      	str	r2, [r1, #8]
 8003b6a:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003b6c:	6892      	ldr	r2, [r2, #8]
 8003b6e:	f012 0201 	ands.w	r2, r2, #1
 8003b72:	d000      	beq.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003b74:	2201      	movs	r2, #1
 8003b76:	4914      	ldr	r1, [pc, #80]	@ (8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8003b78:	6889      	ldr	r1, [r1, #8]
 8003b7a:	f011 0f01 	tst.w	r1, #1
 8003b7e:	d119      	bne.n	8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x100>

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b80:	b9d2      	cbnz	r2, 8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x104>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b82:	4910      	ldr	r1, [pc, #64]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003b84:	688a      	ldr	r2, [r1, #8]
 8003b86:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003b8a:	f022 020f 	bic.w	r2, r2, #15
 8003b8e:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b90:	2000      	movs	r0, #0
 8003b92:	e004      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0xea>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b96:	f042 0220 	orr.w	r2, r2, #32
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b9c:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003ba4:	b01b      	add	sp, #108	@ 0x6c
 8003ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003baa:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bac:	2000      	movs	r0, #0
 8003bae:	e7f6      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	e7f4      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	e7f2      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8003bb8:	2000      	movs	r0, #0
 8003bba:	e7f0      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0xea>
  __HAL_LOCK(hadc);
 8003bbc:	2002      	movs	r0, #2
}
 8003bbe:	4770      	bx	lr
 8003bc0:	50040000 	.word	0x50040000
 8003bc4:	50040300 	.word	0x50040300
 8003bc8:	50040100 	.word	0x50040100

08003bcc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	db07      	blt.n	8003be0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd0:	f000 021f 	and.w	r2, r0, #31
 8003bd4:	0940      	lsrs	r0, r0, #5
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4093      	lsls	r3, r2
 8003bda:	4a02      	ldr	r2, [pc, #8]	@ (8003be4 <__NVIC_EnableIRQ+0x18>)
 8003bdc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000e100 	.word	0xe000e100

08003be8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003be8:	2800      	cmp	r0, #0
 8003bea:	db08      	blt.n	8003bfe <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bec:	0109      	lsls	r1, r1, #4
 8003bee:	b2c9      	uxtb	r1, r1
 8003bf0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003bf4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003bf8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003bfc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfe:	f000 000f 	and.w	r0, r0, #15
 8003c02:	0109      	lsls	r1, r1, #4
 8003c04:	b2c9      	uxtb	r1, r1
 8003c06:	4b01      	ldr	r3, [pc, #4]	@ (8003c0c <__NVIC_SetPriority+0x24>)
 8003c08:	5419      	strb	r1, [r3, r0]
  }
}
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed14 	.word	0xe000ed14

08003c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c10:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c12:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c16:	f1c0 0c07 	rsb	ip, r0, #7
 8003c1a:	f1bc 0f04 	cmp.w	ip, #4
 8003c1e:	bf28      	it	cs
 8003c20:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c24:	1d03      	adds	r3, r0, #4
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d90f      	bls.n	8003c4a <NVIC_EncodePriority+0x3a>
 8003c2a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	f04f 3eff 	mov.w	lr, #4294967295
 8003c30:	fa0e f00c 	lsl.w	r0, lr, ip
 8003c34:	ea21 0100 	bic.w	r1, r1, r0
 8003c38:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c3a:	fa0e fe03 	lsl.w	lr, lr, r3
 8003c3e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8003c42:	ea41 0002 	orr.w	r0, r1, r2
 8003c46:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e7ee      	b.n	8003c2c <NVIC_EncodePriority+0x1c>
	...

08003c50 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c50:	4a07      	ldr	r2, [pc, #28]	@ (8003c70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003c52:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c54:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c5c:	0200      	lsls	r0, r0, #8
 8003c5e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c62:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003c6c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c74:	b510      	push	{r4, lr}
 8003c76:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <HAL_NVIC_SetPriority+0x1c>)
 8003c7a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c7c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003c80:	f7ff ffc6 	bl	8003c10 <NVIC_EncodePriority>
 8003c84:	4601      	mov	r1, r0
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7ff ffae 	bl	8003be8 <__NVIC_SetPriority>
}
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c94:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c96:	f7ff ff99 	bl	8003bcc <__NVIC_EnableIRQ>
}
 8003c9a:	bd08      	pop	{r3, pc}

08003c9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c9c:	3801      	subs	r0, #1
 8003c9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003ca2:	d20b      	bcs.n	8003cbc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ca8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003caa:	4a05      	ldr	r2, [pc, #20]	@ (8003cc0 <HAL_SYSTICK_Config+0x24>)
 8003cac:	21f0      	movs	r1, #240	@ 0xf0
 8003cae:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003cbc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc4:	b430      	push	{r4, r5}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cc6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003cc8:	f004 0c1c 	and.w	ip, r4, #28
 8003ccc:	2401      	movs	r4, #1
 8003cce:	fa04 f40c 	lsl.w	r4, r4, ip
 8003cd2:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003cd4:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cd6:	6804      	ldr	r4, [r0, #0]
 8003cd8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cda:	6883      	ldr	r3, [r0, #8]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d005      	beq.n	8003cec <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003ce0:	6803      	ldr	r3, [r0, #0]
 8003ce2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003ce4:	6803      	ldr	r3, [r0, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
  }
}
 8003ce8:	bc30      	pop	{r4, r5}
 8003cea:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003cec:	6803      	ldr	r3, [r0, #0]
 8003cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003cf0:	6803      	ldr	r3, [r0, #0]
 8003cf2:	60d9      	str	r1, [r3, #12]
 8003cf4:	e7f8      	b.n	8003ce8 <DMA_SetConfig+0x24>
	...

08003cf8 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d071      	beq.n	8003de0 <HAL_DMA_Init+0xe8>
{
 8003cfc:	b410      	push	{r4}
 8003cfe:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d00:	6801      	ldr	r1, [r0, #0]
 8003d02:	4a38      	ldr	r2, [pc, #224]	@ (8003de4 <HAL_DMA_Init+0xec>)
 8003d04:	4291      	cmp	r1, r2
 8003d06:	d848      	bhi.n	8003d9a <HAL_DMA_Init+0xa2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d08:	4a37      	ldr	r2, [pc, #220]	@ (8003de8 <HAL_DMA_Init+0xf0>)
 8003d0a:	440a      	add	r2, r1
 8003d0c:	4837      	ldr	r0, [pc, #220]	@ (8003dec <HAL_DMA_Init+0xf4>)
 8003d0e:	fba0 0202 	umull	r0, r2, r0, r2
 8003d12:	0912      	lsrs	r2, r2, #4
 8003d14:	0092      	lsls	r2, r2, #2
 8003d16:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d18:	4a35      	ldr	r2, [pc, #212]	@ (8003df0 <HAL_DMA_Init+0xf8>)
 8003d1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp = hdma->Instance->CCR;
 8003d22:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d24:	f36f 100e 	bfc	r0, #4, #11
  tmp |=  hdma->Init.Direction        |
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	68dc      	ldr	r4, [r3, #12]
 8003d2c:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2e:	691c      	ldr	r4, [r3, #16]
 8003d30:	4322      	orrs	r2, r4
 8003d32:	695c      	ldr	r4, [r3, #20]
 8003d34:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d36:	699c      	ldr	r4, [r3, #24]
 8003d38:	4322      	orrs	r2, r4
 8003d3a:	69dc      	ldr	r4, [r3, #28]
 8003d3c:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d3e:	6a1c      	ldr	r4, [r3, #32]
 8003d40:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8003d42:	4302      	orrs	r2, r0
  hdma->Instance->CCR = tmp;
 8003d44:	600a      	str	r2, [r1, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003d4c:	d01b      	beq.n	8003d86 <HAL_DMA_Init+0x8e>
    if (DMA1 == hdma->DmaBaseAddress)
 8003d4e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003d50:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <HAL_DMA_Init+0xf8>)
 8003d52:	4291      	cmp	r1, r2
 8003d54:	d02c      	beq.n	8003db0 <HAL_DMA_Init+0xb8>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d56:	4a26      	ldr	r2, [pc, #152]	@ (8003df0 <HAL_DMA_Init+0xf8>)
 8003d58:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 8003d5c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003d5e:	f000 0c1c 	and.w	ip, r0, #28
 8003d62:	200f      	movs	r0, #15
 8003d64:	fa00 f00c 	lsl.w	r0, r0, ip
 8003d68:	ea21 0100 	bic.w	r1, r1, r0
 8003d6c:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d70:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 8003d74:	6858      	ldr	r0, [r3, #4]
 8003d76:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003d78:	f004 0c1c 	and.w	ip, r4, #28
 8003d7c:	fa00 f00c 	lsl.w	r0, r0, ip
 8003d80:	4301      	orrs	r1, r0
 8003d82:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d86:	2000      	movs	r0, #0
 8003d88:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  hdma->Lock = HAL_UNLOCKED;
 8003d90:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
}
 8003d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d98:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d9a:	4a16      	ldr	r2, [pc, #88]	@ (8003df4 <HAL_DMA_Init+0xfc>)
 8003d9c:	440a      	add	r2, r1
 8003d9e:	4813      	ldr	r0, [pc, #76]	@ (8003dec <HAL_DMA_Init+0xf4>)
 8003da0:	fba0 0202 	umull	r0, r2, r0, r2
 8003da4:	0912      	lsrs	r2, r2, #4
 8003da6:	0092      	lsls	r2, r2, #2
 8003da8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003daa:	4a13      	ldr	r2, [pc, #76]	@ (8003df8 <HAL_DMA_Init+0x100>)
 8003dac:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dae:	e7b5      	b.n	8003d1c <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003db0:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
 8003db4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003db6:	f000 0c1c 	and.w	ip, r0, #28
 8003dba:	200f      	movs	r0, #15
 8003dbc:	fa00 f00c 	lsl.w	r0, r0, ip
 8003dc0:	ea21 0100 	bic.w	r1, r1, r0
 8003dc4:	f8c2 10a8 	str.w	r1, [r2, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003dc8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
 8003dcc:	6858      	ldr	r0, [r3, #4]
 8003dce:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003dd0:	f004 0c1c 	and.w	ip, r4, #28
 8003dd4:	fa00 f00c 	lsl.w	r0, r0, ip
 8003dd8:	4301      	orrs	r1, r0
 8003dda:	f8c2 10a8 	str.w	r1, [r2, #168]	@ 0xa8
 8003dde:	e7d2      	b.n	8003d86 <HAL_DMA_Init+0x8e>
    return HAL_ERROR;
 8003de0:	2001      	movs	r0, #1
}
 8003de2:	4770      	bx	lr
 8003de4:	40020407 	.word	0x40020407
 8003de8:	bffdfff8 	.word	0xbffdfff8
 8003dec:	cccccccd 	.word	0xcccccccd
 8003df0:	40020000 	.word	0x40020000
 8003df4:	bffdfbf8 	.word	0xbffdfbf8
 8003df8:	40020400 	.word	0x40020400

08003dfc <HAL_DMA_Start_IT>:
{
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003e00:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8003e04:	2801      	cmp	r0, #1
 8003e06:	d031      	beq.n	8003e6c <HAL_DMA_Start_IT+0x70>
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003e0e:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8003e12:	2801      	cmp	r0, #1
 8003e14:	d004      	beq.n	8003e20 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8003e16:	2300      	movs	r3, #0
 8003e18:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 8003e1c:	2002      	movs	r0, #2
}
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e20:	2002      	movs	r0, #2
 8003e22:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e26:	2000      	movs	r0, #0
 8003e28:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003e2a:	6825      	ldr	r5, [r4, #0]
 8003e2c:	6828      	ldr	r0, [r5, #0]
 8003e2e:	f020 0001 	bic.w	r0, r0, #1
 8003e32:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e34:	4620      	mov	r0, r4
 8003e36:	f7ff ff45 	bl	8003cc4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003e3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e3c:	b15b      	cbz	r3, 8003e56 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	6813      	ldr	r3, [r2, #0]
 8003e42:	f043 030e 	orr.w	r3, r3, #14
 8003e46:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2000      	movs	r0, #0
 8003e54:	e7e3      	b.n	8003e1e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	6813      	ldr	r3, [r2, #0]
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	f043 030a 	orr.w	r3, r3, #10
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e7ed      	b.n	8003e48 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	e7d6      	b.n	8003e1e <HAL_DMA_Start_IT+0x22>

08003e70 <HAL_DMA_IRQHandler>:
{
 8003e70:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e72:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003e74:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003e76:	6804      	ldr	r4, [r0, #0]
 8003e78:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e7a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003e7c:	f003 031c 	and.w	r3, r3, #28
 8003e80:	2204      	movs	r2, #4
 8003e82:	409a      	lsls	r2, r3
 8003e84:	420a      	tst	r2, r1
 8003e86:	d015      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x44>
 8003e88:	f015 0f04 	tst.w	r5, #4
 8003e8c:	d012      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	f013 0f20 	tst.w	r3, #32
 8003e94:	d103      	bne.n	8003e9e <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e9e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003ea0:	f003 021c 	and.w	r2, r3, #28
 8003ea4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	4093      	lsls	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003eac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003eae:	b103      	cbz	r3, 8003eb2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8003eb0:	4798      	blx	r3
}
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	420a      	tst	r2, r1
 8003eba:	d01c      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x86>
 8003ebc:	f015 0f02 	tst.w	r5, #2
 8003ec0:	d019      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	f013 0f20 	tst.w	r3, #32
 8003ec8:	d106      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	f023 030a 	bic.w	r3, r3, #10
 8003ed0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ed8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003eda:	f003 021c 	and.w	r2, r3, #28
 8003ede:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	4093      	lsls	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8003eec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0df      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8003ef2:	4798      	blx	r3
 8003ef4:	e7dd      	b.n	8003eb2 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	420b      	tst	r3, r1
 8003efe:	d0d8      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x42>
 8003f00:	f015 0f08 	tst.w	r5, #8
 8003f04:	d0d5      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	f023 030e 	bic.w	r3, r3, #14
 8003f0c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f0e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003f10:	f003 031c 	and.w	r3, r3, #28
 8003f14:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003f16:	2201      	movs	r2, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f1e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003f20:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003f24:	2300      	movs	r3, #0
 8003f26:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8003f2a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0c0      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003f30:	4798      	blx	r3
  return;
 8003f32:	e7be      	b.n	8003eb2 <HAL_DMA_IRQHandler+0x42>

08003f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f36:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8003f38:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f3a:	e062      	b.n	8004002 <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f3c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f3e:	005e      	lsls	r6, r3, #1
 8003f40:	2403      	movs	r4, #3
 8003f42:	40b4      	lsls	r4, r6
 8003f44:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f48:	68cc      	ldr	r4, [r1, #12]
 8003f4a:	40b4      	lsls	r4, r6
 8003f4c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003f4e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f50:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f52:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f56:	684c      	ldr	r4, [r1, #4]
 8003f58:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003f5c:	409c      	lsls	r4, r3
 8003f5e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003f60:	6044      	str	r4, [r0, #4]
 8003f62:	e05f      	b.n	8004024 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f64:	08dd      	lsrs	r5, r3, #3
 8003f66:	3508      	adds	r5, #8
 8003f68:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f6c:	f003 0c07 	and.w	ip, r3, #7
 8003f70:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f74:	f04f 0e0f 	mov.w	lr, #15
 8003f78:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003f7c:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f80:	690c      	ldr	r4, [r1, #16]
 8003f82:	fa04 f40c 	lsl.w	r4, r4, ip
 8003f86:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003f8a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003f8e:	e060      	b.n	8004052 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f90:	2403      	movs	r4, #3
 8003f92:	e000      	b.n	8003f96 <HAL_GPIO_Init+0x62>
 8003f94:	2400      	movs	r4, #0
 8003f96:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f9a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f9c:	f10c 0c02 	add.w	ip, ip, #2
 8003fa0:	4d4f      	ldr	r5, [pc, #316]	@ (80040e0 <HAL_GPIO_Init+0x1ac>)
 8003fa2:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa6:	4c4f      	ldr	r4, [pc, #316]	@ (80040e4 <HAL_GPIO_Init+0x1b0>)
 8003fa8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003faa:	43d4      	mvns	r4, r2
 8003fac:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fb0:	684f      	ldr	r7, [r1, #4]
 8003fb2:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8003fb6:	d001      	beq.n	8003fbc <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003fb8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003fbc:	4d49      	ldr	r5, [pc, #292]	@ (80040e4 <HAL_GPIO_Init+0x1b0>)
 8003fbe:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003fc0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003fc2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fc6:	684f      	ldr	r7, [r1, #4]
 8003fc8:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8003fcc:	d001      	beq.n	8003fd2 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003fce:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003fd2:	4d44      	ldr	r5, [pc, #272]	@ (80040e4 <HAL_GPIO_Init+0x1b0>)
 8003fd4:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fd6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003fd8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fdc:	684f      	ldr	r7, [r1, #4]
 8003fde:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8003fe2:	d001      	beq.n	8003fe8 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8003fe4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003fe8:	4d3e      	ldr	r5, [pc, #248]	@ (80040e4 <HAL_GPIO_Init+0x1b0>)
 8003fea:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8003fec:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003fee:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ff0:	684e      	ldr	r6, [r1, #4]
 8003ff2:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8003ff6:	d001      	beq.n	8003ffc <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8003ff8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8003ffc:	4a39      	ldr	r2, [pc, #228]	@ (80040e4 <HAL_GPIO_Init+0x1b0>)
 8003ffe:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8004000:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004002:	680a      	ldr	r2, [r1, #0]
 8004004:	fa32 f403 	lsrs.w	r4, r2, r3
 8004008:	d068      	beq.n	80040dc <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800400a:	f04f 0c01 	mov.w	ip, #1
 800400e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004012:	ea1c 0202 	ands.w	r2, ip, r2
 8004016:	d0f3      	beq.n	8004000 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004018:	684c      	ldr	r4, [r1, #4]
 800401a:	f004 0403 	and.w	r4, r4, #3
 800401e:	3c01      	subs	r4, #1
 8004020:	2c01      	cmp	r4, #1
 8004022:	d98b      	bls.n	8003f3c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004024:	684c      	ldr	r4, [r1, #4]
 8004026:	f004 0403 	and.w	r4, r4, #3
 800402a:	2c03      	cmp	r4, #3
 800402c:	d00c      	beq.n	8004048 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800402e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004030:	005d      	lsls	r5, r3, #1
 8004032:	f04f 0c03 	mov.w	ip, #3
 8004036:	fa0c fc05 	lsl.w	ip, ip, r5
 800403a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800403e:	688c      	ldr	r4, [r1, #8]
 8004040:	40ac      	lsls	r4, r5
 8004042:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004046:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004048:	684c      	ldr	r4, [r1, #4]
 800404a:	f004 0403 	and.w	r4, r4, #3
 800404e:	2c02      	cmp	r4, #2
 8004050:	d088      	beq.n	8003f64 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8004052:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004054:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004058:	f04f 0c03 	mov.w	ip, #3
 800405c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004060:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004064:	684c      	ldr	r4, [r1, #4]
 8004066:	f004 0403 	and.w	r4, r4, #3
 800406a:	fa04 f40e 	lsl.w	r4, r4, lr
 800406e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004072:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004074:	684c      	ldr	r4, [r1, #4]
 8004076:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800407a:	d0c1      	beq.n	8004000 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407c:	4c1a      	ldr	r4, [pc, #104]	@ (80040e8 <HAL_GPIO_Init+0x1b4>)
 800407e:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8004080:	f045 0501 	orr.w	r5, r5, #1
 8004084:	6625      	str	r5, [r4, #96]	@ 0x60
 8004086:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8004088:	f004 0401 	and.w	r4, r4, #1
 800408c:	9401      	str	r4, [sp, #4]
 800408e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004090:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004094:	f10c 0502 	add.w	r5, ip, #2
 8004098:	4c11      	ldr	r4, [pc, #68]	@ (80040e0 <HAL_GPIO_Init+0x1ac>)
 800409a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800409e:	f003 0e03 	and.w	lr, r3, #3
 80040a2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80040a6:	240f      	movs	r4, #15
 80040a8:	fa04 f40e 	lsl.w	r4, r4, lr
 80040ac:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040b0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80040b4:	f43f af6e 	beq.w	8003f94 <HAL_GPIO_Init+0x60>
 80040b8:	4c0c      	ldr	r4, [pc, #48]	@ (80040ec <HAL_GPIO_Init+0x1b8>)
 80040ba:	42a0      	cmp	r0, r4
 80040bc:	d00a      	beq.n	80040d4 <HAL_GPIO_Init+0x1a0>
 80040be:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80040c2:	42a0      	cmp	r0, r4
 80040c4:	d008      	beq.n	80040d8 <HAL_GPIO_Init+0x1a4>
 80040c6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80040ca:	42a0      	cmp	r0, r4
 80040cc:	f43f af60 	beq.w	8003f90 <HAL_GPIO_Init+0x5c>
 80040d0:	2407      	movs	r4, #7
 80040d2:	e760      	b.n	8003f96 <HAL_GPIO_Init+0x62>
 80040d4:	2401      	movs	r4, #1
 80040d6:	e75e      	b.n	8003f96 <HAL_GPIO_Init+0x62>
 80040d8:	2402      	movs	r4, #2
 80040da:	e75c      	b.n	8003f96 <HAL_GPIO_Init+0x62>
  }
}
 80040dc:	b003      	add	sp, #12
 80040de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40021000 	.word	0x40021000
 80040ec:	48000400 	.word	0x48000400

080040f0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80040f0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80040f2:	fa31 f203 	lsrs.w	r2, r1, r3
 80040f6:	d074      	beq.n	80041e2 <HAL_GPIO_DeInit+0xf2>
{
 80040f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fa:	e02e      	b.n	800415a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80040fc:	2503      	movs	r5, #3
 80040fe:	e000      	b.n	8004102 <HAL_GPIO_DeInit+0x12>
 8004100:	2500      	movs	r5, #0
 8004102:	fa05 f50c 	lsl.w	r5, r5, ip
 8004106:	42a5      	cmp	r5, r4
 8004108:	d04f      	beq.n	80041aa <HAL_GPIO_DeInit+0xba>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800410a:	6804      	ldr	r4, [r0, #0]
 800410c:	005d      	lsls	r5, r3, #1
 800410e:	f04f 0c03 	mov.w	ip, #3
 8004112:	fa0c fc05 	lsl.w	ip, ip, r5
 8004116:	ea44 040c 	orr.w	r4, r4, ip
 800411a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800411c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004120:	f10e 0e08 	add.w	lr, lr, #8
 8004124:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004128:	f003 0607 	and.w	r6, r3, #7
 800412c:	00b6      	lsls	r6, r6, #2
 800412e:	250f      	movs	r5, #15
 8004130:	40b5      	lsls	r5, r6
 8004132:	ea24 0405 	bic.w	r4, r4, r5
 8004136:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800413a:	6884      	ldr	r4, [r0, #8]
 800413c:	ea24 040c 	bic.w	r4, r4, ip
 8004140:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004142:	6844      	ldr	r4, [r0, #4]
 8004144:	ea24 0202 	bic.w	r2, r4, r2
 8004148:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800414a:	68c2      	ldr	r2, [r0, #12]
 800414c:	ea22 020c 	bic.w	r2, r2, ip
 8004150:	60c2      	str	r2, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004152:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004154:	fa31 f203 	lsrs.w	r2, r1, r3
 8004158:	d042      	beq.n	80041e0 <HAL_GPIO_DeInit+0xf0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800415a:	2201      	movs	r2, #1
 800415c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800415e:	ea12 0701 	ands.w	r7, r2, r1
 8004162:	d0f6      	beq.n	8004152 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004164:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8004168:	f10e 0502 	add.w	r5, lr, #2
 800416c:	4c1d      	ldr	r4, [pc, #116]	@ (80041e4 <HAL_GPIO_DeInit+0xf4>)
 800416e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004172:	f003 0c03 	and.w	ip, r3, #3
 8004176:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800417a:	250f      	movs	r5, #15
 800417c:	fa05 f60c 	lsl.w	r6, r5, ip
 8004180:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004182:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8004186:	d0bb      	beq.n	8004100 <HAL_GPIO_DeInit+0x10>
 8004188:	4d17      	ldr	r5, [pc, #92]	@ (80041e8 <HAL_GPIO_DeInit+0xf8>)
 800418a:	42a8      	cmp	r0, r5
 800418c:	d009      	beq.n	80041a2 <HAL_GPIO_DeInit+0xb2>
 800418e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004192:	42a8      	cmp	r0, r5
 8004194:	d007      	beq.n	80041a6 <HAL_GPIO_DeInit+0xb6>
 8004196:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800419a:	42a8      	cmp	r0, r5
 800419c:	d0ae      	beq.n	80040fc <HAL_GPIO_DeInit+0xc>
 800419e:	2507      	movs	r5, #7
 80041a0:	e7af      	b.n	8004102 <HAL_GPIO_DeInit+0x12>
 80041a2:	2501      	movs	r5, #1
 80041a4:	e7ad      	b.n	8004102 <HAL_GPIO_DeInit+0x12>
 80041a6:	2502      	movs	r5, #2
 80041a8:	e7ab      	b.n	8004102 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80041aa:	4c10      	ldr	r4, [pc, #64]	@ (80041ec <HAL_GPIO_DeInit+0xfc>)
 80041ac:	6825      	ldr	r5, [r4, #0]
 80041ae:	ea25 0507 	bic.w	r5, r5, r7
 80041b2:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80041b4:	6865      	ldr	r5, [r4, #4]
 80041b6:	ea25 0507 	bic.w	r5, r5, r7
 80041ba:	6065      	str	r5, [r4, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 80041bc:	68e5      	ldr	r5, [r4, #12]
 80041be:	ea25 0507 	bic.w	r5, r5, r7
 80041c2:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80041c4:	68a5      	ldr	r5, [r4, #8]
 80041c6:	ea25 0507 	bic.w	r5, r5, r7
 80041ca:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80041cc:	4f05      	ldr	r7, [pc, #20]	@ (80041e4 <HAL_GPIO_DeInit+0xf4>)
 80041ce:	f10e 0402 	add.w	r4, lr, #2
 80041d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80041d6:	ea25 0506 	bic.w	r5, r5, r6
 80041da:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80041de:	e794      	b.n	800410a <HAL_GPIO_DeInit+0x1a>
  }
}
 80041e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e2:	4770      	bx	lr
 80041e4:	40010000 	.word	0x40010000
 80041e8:	48000400 	.word	0x48000400
 80041ec:	40010400 	.word	0x40010400

080041f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041f0:	6903      	ldr	r3, [r0, #16]
 80041f2:	4219      	tst	r1, r3
 80041f4:	d001      	beq.n	80041fa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80041f6:	2001      	movs	r0, #1
 80041f8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fa:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80041fc:	4770      	bx	lr

080041fe <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fe:	b10a      	cbz	r2, 8004204 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004200:	6181      	str	r1, [r0, #24]
 8004202:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004204:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004206:	4770      	bx	lr

08004208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004208:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800420a:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	4203      	tst	r3, r0
 8004210:	d100      	bne.n	8004214 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004212:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004214:	4b02      	ldr	r3, [pc, #8]	@ (8004220 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004216:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004218:	f7fe f9b8 	bl	800258c <HAL_GPIO_EXTI_Callback>
}
 800421c:	e7f9      	b.n	8004212 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800421e:	bf00      	nop
 8004220:	40010400 	.word	0x40010400

08004224 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004224:	4684      	mov	ip, r0
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004226:	4b0c      	ldr	r3, [pc, #48]	@ (8004258 <LPTIM_WaitForFlag+0x34>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a0c      	ldr	r2, [pc, #48]	@ (800425c <LPTIM_WaitForFlag+0x38>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	0b9b      	lsrs	r3, r3, #14
 8004232:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004236:	fb02 f303 	mul.w	r3, r2, r3
  HAL_StatusTypeDef result = HAL_OK;
 800423a:	2000      	movs	r0, #0
 800423c:	e006      	b.n	800424c <LPTIM_WaitForFlag+0x28>
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800423e:	f8dc 2000 	ldr.w	r2, [ip]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	ea31 0202 	bics.w	r2, r1, r2
 8004248:	d004      	beq.n	8004254 <LPTIM_WaitForFlag+0x30>
 800424a:	b11b      	cbz	r3, 8004254 <LPTIM_WaitForFlag+0x30>
    if (count == 0UL)
 800424c:	3b01      	subs	r3, #1
 800424e:	d1f6      	bne.n	800423e <LPTIM_WaitForFlag+0x1a>
      result = HAL_TIMEOUT;
 8004250:	2003      	movs	r0, #3
 8004252:	e7f4      	b.n	800423e <LPTIM_WaitForFlag+0x1a>

  return result;
}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200000c4 	.word	0x200000c4
 800425c:	d1b71759 	.word	0xd1b71759

08004260 <HAL_LPTIM_CompareMatchCallback>:
}
 8004260:	4770      	bx	lr

08004262 <HAL_LPTIM_TriggerCallback>:
}
 8004262:	4770      	bx	lr

08004264 <HAL_LPTIM_CompareWriteCallback>:
}
 8004264:	4770      	bx	lr

08004266 <HAL_LPTIM_AutoReloadWriteCallback>:
}
 8004266:	4770      	bx	lr

08004268 <HAL_LPTIM_DirectionUpCallback>:
}
 8004268:	4770      	bx	lr

0800426a <HAL_LPTIM_DirectionDownCallback>:
}
 800426a:	4770      	bx	lr

0800426c <HAL_LPTIM_UpdateEventCallback>:
}
 800426c:	4770      	bx	lr

0800426e <HAL_LPTIM_RepCounterWriteCallback>:
}
 800426e:	4770      	bx	lr

08004270 <HAL_LPTIM_IRQHandler>:
{
 8004270:	b510      	push	{r4, lr}
 8004272:	4604      	mov	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004274:	6803      	ldr	r3, [r0, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	f012 0f01 	tst.w	r2, #1
 800427c:	d003      	beq.n	8004286 <HAL_LPTIM_IRQHandler+0x16>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	f012 0f01 	tst.w	r2, #1
 8004284:	d148      	bne.n	8004318 <HAL_LPTIM_IRQHandler+0xa8>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	f012 0f02 	tst.w	r2, #2
 800428e:	d003      	beq.n	8004298 <HAL_LPTIM_IRQHandler+0x28>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	f012 0f02 	tst.w	r2, #2
 8004296:	d144      	bne.n	8004322 <HAL_LPTIM_IRQHandler+0xb2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	f012 0f04 	tst.w	r2, #4
 80042a0:	d003      	beq.n	80042aa <HAL_LPTIM_IRQHandler+0x3a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	f012 0f04 	tst.w	r2, #4
 80042a8:	d141      	bne.n	800432e <HAL_LPTIM_IRQHandler+0xbe>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	f012 0f08 	tst.w	r2, #8
 80042b2:	d003      	beq.n	80042bc <HAL_LPTIM_IRQHandler+0x4c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	f012 0f08 	tst.w	r2, #8
 80042ba:	d13e      	bne.n	800433a <HAL_LPTIM_IRQHandler+0xca>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	f012 0f10 	tst.w	r2, #16
 80042c4:	d003      	beq.n	80042ce <HAL_LPTIM_IRQHandler+0x5e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	f012 0f10 	tst.w	r2, #16
 80042cc:	d13b      	bne.n	8004346 <HAL_LPTIM_IRQHandler+0xd6>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f012 0f20 	tst.w	r2, #32
 80042d6:	d003      	beq.n	80042e0 <HAL_LPTIM_IRQHandler+0x70>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	f012 0f20 	tst.w	r2, #32
 80042de:	d138      	bne.n	8004352 <HAL_LPTIM_IRQHandler+0xe2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80042e8:	d003      	beq.n	80042f2 <HAL_LPTIM_IRQHandler+0x82>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80042f0:	d135      	bne.n	800435e <HAL_LPTIM_IRQHandler+0xee>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80042fa:	d003      	beq.n	8004304 <HAL_LPTIM_IRQHandler+0x94>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004302:	d132      	bne.n	800436a <HAL_LPTIM_IRQHandler+0xfa>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800430c:	d003      	beq.n	8004316 <HAL_LPTIM_IRQHandler+0xa6>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004314:	d12f      	bne.n	8004376 <HAL_LPTIM_IRQHandler+0x106>
}
 8004316:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004318:	2201      	movs	r2, #1
 800431a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800431c:	f7ff ffa0 	bl	8004260 <HAL_LPTIM_CompareMatchCallback>
 8004320:	e7b1      	b.n	8004286 <HAL_LPTIM_IRQHandler+0x16>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004322:	2202      	movs	r2, #2
 8004324:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004326:	4620      	mov	r0, r4
 8004328:	f7fe f946 	bl	80025b8 <HAL_LPTIM_AutoReloadMatchCallback>
 800432c:	e7b4      	b.n	8004298 <HAL_LPTIM_IRQHandler+0x28>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800432e:	2204      	movs	r2, #4
 8004330:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 8004332:	4620      	mov	r0, r4
 8004334:	f7ff ff95 	bl	8004262 <HAL_LPTIM_TriggerCallback>
 8004338:	e7b7      	b.n	80042aa <HAL_LPTIM_IRQHandler+0x3a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800433a:	2208      	movs	r2, #8
 800433c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff ff90 	bl	8004264 <HAL_LPTIM_CompareWriteCallback>
 8004344:	e7ba      	b.n	80042bc <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004346:	2210      	movs	r2, #16
 8004348:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800434a:	4620      	mov	r0, r4
 800434c:	f7ff ff8b 	bl	8004266 <HAL_LPTIM_AutoReloadWriteCallback>
 8004350:	e7bd      	b.n	80042ce <HAL_LPTIM_IRQHandler+0x5e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004352:	2220      	movs	r2, #32
 8004354:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff ff86 	bl	8004268 <HAL_LPTIM_DirectionUpCallback>
 800435c:	e7c0      	b.n	80042e0 <HAL_LPTIM_IRQHandler+0x70>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800435e:	2240      	movs	r2, #64	@ 0x40
 8004360:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004362:	4620      	mov	r0, r4
 8004364:	f7ff ff81 	bl	800426a <HAL_LPTIM_DirectionDownCallback>
 8004368:	e7c3      	b.n	80042f2 <HAL_LPTIM_IRQHandler+0x82>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800436a:	2280      	movs	r2, #128	@ 0x80
 800436c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff ff7c 	bl	800426c <HAL_LPTIM_UpdateEventCallback>
 8004374:	e7c6      	b.n	8004304 <HAL_LPTIM_IRQHandler+0x94>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004376:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800437a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff ff76 	bl	800426e <HAL_LPTIM_RepCounterWriteCallback>
}
 8004382:	e7c8      	b.n	8004316 <HAL_LPTIM_IRQHandler+0xa6>

08004384 <HAL_LPTIM_GetState>:
  return hlptim->State;
 8004384:	f890 003a 	ldrb.w	r0, [r0, #58]	@ 0x3a
}
 8004388:	4770      	bx	lr
	...

0800438c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800438c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004390:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004392:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004396:	2301      	movs	r3, #1
 8004398:	f383 8810 	msr	PRIMASK, r3
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800439c:	6803      	ldr	r3, [r0, #0]
 800439e:	4a63      	ldr	r2, [pc, #396]	@ (800452c <LPTIM_Disable+0x1a0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d005      	beq.n	80043b0 <LPTIM_Disable+0x24>
 80043a4:	f502 52c0 	add.w	r2, r2, #6144	@ 0x1800
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d021      	beq.n	80043f0 <LPTIM_Disable+0x64>
 80043ac:	2600      	movs	r6, #0
 80043ae:	e004      	b.n	80043ba <LPTIM_Disable+0x2e>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80043b0:	4a5f      	ldr	r2, [pc, #380]	@ (8004530 <LPTIM_Disable+0x1a4>)
 80043b2:	f8d2 6088 	ldr.w	r6, [r2, #136]	@ 0x88
 80043b6:	f406 2640 	and.w	r6, r6, #786432	@ 0xc0000
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80043ba:	f8d3 b008 	ldr.w	fp, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 80043be:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 80043c2:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 80043c4:	699f      	ldr	r7, [r3, #24]
  tmpOR = hlptim->Instance->OR;
 80043c6:	f8d3 9020 	ldr.w	r9, [r3, #32]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 80043ca:	f8d3 8028 	ldr.w	r8, [r3, #40]	@ 0x28
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80043ce:	4957      	ldr	r1, [pc, #348]	@ (800452c <LPTIM_Disable+0x1a0>)
 80043d0:	428b      	cmp	r3, r1
 80043d2:	d013      	beq.n	80043fc <LPTIM_Disable+0x70>
 80043d4:	f501 51c0 	add.w	r1, r1, #6144	@ 0x1800
 80043d8:	428b      	cmp	r3, r1
 80043da:	d118      	bne.n	800440e <LPTIM_Disable+0x82>
      __HAL_RCC_LPTIM1_FORCE_RESET();
      __HAL_RCC_LPTIM1_RELEASE_RESET();
      break;
#if defined(LPTIM2)
    case LPTIM2_BASE:
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80043dc:	4b54      	ldr	r3, [pc, #336]	@ (8004530 <LPTIM_Disable+0x1a4>)
 80043de:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80043e0:	f041 0120 	orr.w	r1, r1, #32
 80043e4:	63d9      	str	r1, [r3, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80043e6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80043e8:	f021 0120 	bic.w	r1, r1, #32
 80043ec:	63d9      	str	r1, [r3, #60]	@ 0x3c
      break;
 80043ee:	e00e      	b.n	800440e <LPTIM_Disable+0x82>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80043f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004530 <LPTIM_Disable+0x1a4>)
 80043f2:	f8d2 6088 	ldr.w	r6, [r2, #136]	@ 0x88
 80043f6:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
      break;
 80043fa:	e7de      	b.n	80043ba <LPTIM_Disable+0x2e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80043fc:	4b4c      	ldr	r3, [pc, #304]	@ (8004530 <LPTIM_Disable+0x1a4>)
 80043fe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004400:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8004404:	6399      	str	r1, [r3, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004406:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004408:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800440c:	6399      	str	r1, [r3, #56]	@ 0x38
      break;
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 800440e:	b91a      	cbnz	r2, 8004418 <LPTIM_Disable+0x8c>
 8004410:	b917      	cbnz	r7, 8004418 <LPTIM_Disable+0x8c>
 8004412:	f1b8 0f00 	cmp.w	r8, #0
 8004416:	d076      	beq.n	8004506 <LPTIM_Disable+0x17a>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	4944      	ldr	r1, [pc, #272]	@ (800452c <LPTIM_Disable+0x1a0>)
 800441c:	428b      	cmp	r3, r1
 800441e:	d00b      	beq.n	8004438 <LPTIM_Disable+0xac>
 8004420:	f501 51c0 	add.w	r1, r1, #6144	@ 0x1800
 8004424:	428b      	cmp	r3, r1
 8004426:	d10e      	bne.n	8004446 <LPTIM_Disable+0xba>
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
        break;
#if defined(LPTIM2)
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004428:	4941      	ldr	r1, [pc, #260]	@ (8004530 <LPTIM_Disable+0x1a4>)
 800442a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800442e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8004436:	e006      	b.n	8004446 <LPTIM_Disable+0xba>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004438:	493d      	ldr	r1, [pc, #244]	@ (8004530 <LPTIM_Disable+0x1a4>)
 800443a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800443e:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* LPTIM2 */
      default:
        break;
    }

    if (tmpCMP != 0UL)
 8004446:	b9a2      	cbnz	r2, 8004472 <LPTIM_Disable+0xe6>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
    }

    if (tmpARR != 0UL)
 8004448:	bb47      	cbnz	r7, 800449c <LPTIM_Disable+0x110>

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 800444a:	f1b8 0f00 	cmp.w	r8, #0
 800444e:	d13a      	bne.n	80044c6 <LPTIM_Disable+0x13a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	4a36      	ldr	r2, [pc, #216]	@ (800452c <LPTIM_Disable+0x1a0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d04e      	beq.n	80044f6 <LPTIM_Disable+0x16a>
 8004458:	f502 52c0 	add.w	r2, r2, #6144	@ 0x1800
 800445c:	4293      	cmp	r3, r2
 800445e:	d152      	bne.n	8004506 <LPTIM_Disable+0x17a>
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
        break;
#if defined(LPTIM2)
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004460:	4a33      	ldr	r2, [pc, #204]	@ (8004530 <LPTIM_Disable+0x1a4>)
 8004462:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004466:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800446a:	4333      	orrs	r3, r6
 800446c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8004470:	e049      	b.n	8004506 <LPTIM_Disable+0x17a>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004472:	6821      	ldr	r1, [r4, #0]
 8004474:	690b      	ldr	r3, [r1, #16]
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	610b      	str	r3, [r1, #16]
      hlptim->Instance->CMP = tmpCMP;
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	615a      	str	r2, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004480:	2108      	movs	r1, #8
 8004482:	4620      	mov	r0, r4
 8004484:	f7ff fece 	bl	8004224 <LPTIM_WaitForFlag>
 8004488:	2803      	cmp	r0, #3
 800448a:	d003      	beq.n	8004494 <LPTIM_Disable+0x108>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	2208      	movs	r2, #8
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	e7d9      	b.n	8004448 <LPTIM_Disable+0xbc>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 800449a:	e7f7      	b.n	800448c <LPTIM_Disable+0x100>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	6913      	ldr	r3, [r2, #16]
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6113      	str	r3, [r2, #16]
      hlptim->Instance->ARR = tmpARR;
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80044aa:	2110      	movs	r1, #16
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff feb9 	bl	8004224 <LPTIM_WaitForFlag>
 80044b2:	2803      	cmp	r0, #3
 80044b4:	d003      	beq.n	80044be <LPTIM_Disable+0x132>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	2210      	movs	r2, #16
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	e7c5      	b.n	800444a <LPTIM_Disable+0xbe>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 80044c4:	e7f7      	b.n	80044b6 <LPTIM_Disable+0x12a>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	6913      	ldr	r3, [r2, #16]
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6113      	str	r3, [r2, #16]
      hlptim->Instance->RCR = tmpRCR;
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f8c3 8028 	str.w	r8, [r3, #40]	@ 0x28
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80044d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044da:	4620      	mov	r0, r4
 80044dc:	f7ff fea2 	bl	8004224 <LPTIM_WaitForFlag>
 80044e0:	2803      	cmp	r0, #3
 80044e2:	d004      	beq.n	80044ee <LPTIM_Disable+0x162>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	e7b0      	b.n	8004450 <LPTIM_Disable+0xc4>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 80044f4:	e7f6      	b.n	80044e4 <LPTIM_Disable+0x158>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80044f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004530 <LPTIM_Disable+0x1a4>)
 80044f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80044fc:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8004500:	4333      	orrs	r3, r6
 8004502:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	6913      	ldr	r3, [r2, #16]
 800450a:	f023 0301 	bic.w	r3, r3, #1
 800450e:	6113      	str	r3, [r2, #16]
  hlptim->Instance->IER = tmpIER;
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	f8c3 b008 	str.w	fp, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	f8c3 a00c 	str.w	sl, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	f8c3 9020 	str.w	r9, [r3, #32]
 8004522:	f385 8810 	msr	PRIMASK, r5

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452a:	bf00      	nop
 800452c:	40007c00 	.word	0x40007c00
 8004530:	40021000 	.word	0x40021000

08004534 <HAL_LPTIM_Init>:
  if (hlptim == NULL)
 8004534:	2800      	cmp	r0, #0
 8004536:	d06d      	beq.n	8004614 <HAL_LPTIM_Init+0xe0>
{
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	4604      	mov	r4, r0
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800453c:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05d      	beq.n	8004600 <HAL_LPTIM_Init+0xcc>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004544:	2302      	movs	r3, #2
 8004546:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
  __HAL_LPTIM_ENABLE(hlptim);
 800454a:	6822      	ldr	r2, [r4, #0]
 800454c:	6913      	ldr	r3, [r2, #16]
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800455a:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004560:	629a      	str	r2, [r3, #40]	@ 0x28
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004562:	4620      	mov	r0, r4
 8004564:	f7ff fe5e 	bl	8004224 <LPTIM_WaitForFlag>
 8004568:	2803      	cmp	r0, #3
 800456a:	d048      	beq.n	80045fe <HAL_LPTIM_Init+0xca>
  __HAL_LPTIM_DISABLE(hlptim);
 800456c:	4620      	mov	r0, r4
 800456e:	f7ff ff0d 	bl	800438c <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004572:	4620      	mov	r0, r4
 8004574:	f7ff ff06 	bl	8004384 <HAL_LPTIM_GetState>
 8004578:	2803      	cmp	r0, #3
 800457a:	d040      	beq.n	80045fe <HAL_LPTIM_Init+0xca>
  tmpcfgr = hlptim->Instance->CFGR;
 800457c:	6825      	ldr	r5, [r4, #0]
 800457e:	68eb      	ldr	r3, [r5, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004580:	6861      	ldr	r1, [r4, #4]
 8004582:	2901      	cmp	r1, #1
 8004584:	d003      	beq.n	800458e <HAL_LPTIM_Init+0x5a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004586:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004588:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800458c:	d101      	bne.n	8004592 <HAL_LPTIM_Init+0x5e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800458e:	f023 031e 	bic.w	r3, r3, #30
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004592:	6962      	ldr	r2, [r4, #20]
 8004594:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004598:	4282      	cmp	r2, r0
 800459a:	d003      	beq.n	80045a4 <HAL_LPTIM_Init+0x70>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800459c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80045a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80045a4:	481c      	ldr	r0, [pc, #112]	@ (8004618 <HAL_LPTIM_Init+0xe4>)
 80045a6:	4018      	ands	r0, r3
              hlptim->Init.Clock.Prescaler |
 80045a8:	68a3      	ldr	r3, [r4, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045aa:	430b      	orrs	r3, r1
              hlptim->Init.OutputPolarity  |
 80045ac:	6a26      	ldr	r6, [r4, #32]
              hlptim->Init.Clock.Prescaler |
 80045ae:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 80045b0:	6a66      	ldr	r6, [r4, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80045b2:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);
 80045b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80045b6:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045b8:	4303      	orrs	r3, r0
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80045ba:	b919      	cbnz	r1, 80045c4 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80045bc:	69e0      	ldr	r0, [r4, #28]
 80045be:	6927      	ldr	r7, [r4, #16]
 80045c0:	4338      	orrs	r0, r7
 80045c2:	4303      	orrs	r3, r0
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80045c4:	2901      	cmp	r1, #1
 80045c6:	d002      	beq.n	80045ce <HAL_LPTIM_Init+0x9a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045c8:	f5b6 0f00 	cmp.w	r6, #8388608	@ 0x800000
 80045cc:	d103      	bne.n	80045d6 <HAL_LPTIM_Init+0xa2>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80045ce:	68e1      	ldr	r1, [r4, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80045d0:	6920      	ldr	r0, [r4, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80045d2:	4301      	orrs	r1, r0
 80045d4:	430b      	orrs	r3, r1
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80045d6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80045da:	428a      	cmp	r2, r1
 80045dc:	d004      	beq.n	80045e8 <HAL_LPTIM_Init+0xb4>
                hlptim->Init.Trigger.ActiveEdge |
 80045de:	69a1      	ldr	r1, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045e0:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.SampleTime);
 80045e2:	69e1      	ldr	r1, [r4, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80045e4:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045e6:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 80045e8:	60eb      	str	r3, [r5, #12]
  if (hlptim->Instance == LPTIM1)
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	4a0b      	ldr	r2, [pc, #44]	@ (800461c <HAL_LPTIM_Init+0xe8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00b      	beq.n	800460a <HAL_LPTIM_Init+0xd6>
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80045f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80045f4:	621a      	str	r2, [r3, #32]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
  return HAL_OK;
 80045fc:	2000      	movs	r0, #0
}
 80045fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8004600:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
    HAL_LPTIM_MspInit(hlptim);
 8004604:	f000 f8c4 	bl	8004790 <HAL_LPTIM_MspInit>
 8004608:	e79c      	b.n	8004544 <HAL_LPTIM_Init+0x10>
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800460a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800460c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800460e:	430a      	orrs	r2, r1
 8004610:	621a      	str	r2, [r3, #32]
 8004612:	e7f0      	b.n	80045f6 <HAL_LPTIM_Init+0xc2>
    return HAL_ERROR;
 8004614:	2001      	movs	r0, #1
}
 8004616:	4770      	bx	lr
 8004618:	ff19f1fe 	.word	0xff19f1fe
 800461c:	40007c00 	.word	0x40007c00

08004620 <HAL_LPTIM_Counter_Start_IT>:
{
 8004620:	b510      	push	{r4, lr}
 8004622:	4604      	mov	r4, r0
 8004624:	460b      	mov	r3, r1
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004626:	2202      	movs	r2, #2
 8004628:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 800462c:	6801      	ldr	r1, [r0, #0]
 800462e:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <HAL_LPTIM_Counter_Start_IT+0xb8>)
 8004630:	4291      	cmp	r1, r2
 8004632:	d045      	beq.n	80046c0 <HAL_LPTIM_Counter_Start_IT+0xa0>
 8004634:	4929      	ldr	r1, [pc, #164]	@ (80046dc <HAL_LPTIM_Counter_Start_IT+0xbc>)
 8004636:	6a0a      	ldr	r2, [r1, #32]
 8004638:	f042 0202 	orr.w	r2, r2, #2
 800463c:	620a      	str	r2, [r1, #32]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800463e:	6862      	ldr	r2, [r4, #4]
 8004640:	2a01      	cmp	r2, #1
 8004642:	d003      	beq.n	800464c <HAL_LPTIM_Counter_Start_IT+0x2c>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004644:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004646:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800464a:	d03f      	beq.n	80046cc <HAL_LPTIM_Counter_Start_IT+0xac>
  __HAL_LPTIM_ENABLE(hlptim);
 800464c:	6821      	ldr	r1, [r4, #0]
 800464e:	690a      	ldr	r2, [r1, #16]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	610a      	str	r2, [r1, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004656:	6822      	ldr	r2, [r4, #0]
 8004658:	2110      	movs	r1, #16
 800465a:	6051      	str	r1, [r2, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	6193      	str	r3, [r2, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004660:	4620      	mov	r0, r4
 8004662:	f7ff fddf 	bl	8004224 <LPTIM_WaitForFlag>
 8004666:	2803      	cmp	r0, #3
 8004668:	d029      	beq.n	80046be <HAL_LPTIM_Counter_Start_IT+0x9e>
  __HAL_LPTIM_DISABLE(hlptim);
 800466a:	4620      	mov	r0, r4
 800466c:	f7ff fe8e 	bl	800438c <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff fe87 	bl	8004384 <HAL_LPTIM_GetState>
 8004676:	2803      	cmp	r0, #3
 8004678:	d021      	beq.n	80046be <HAL_LPTIM_Counter_Start_IT+0x9e>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	6893      	ldr	r3, [r2, #8]
 800467e:	f043 0310 	orr.w	r3, r3, #16
 8004682:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	6893      	ldr	r3, [r2, #8]
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 800468e:	6822      	ldr	r2, [r4, #0]
 8004690:	6893      	ldr	r3, [r2, #8]
 8004692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004696:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	6893      	ldr	r3, [r2, #8]
 800469c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a0:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	6913      	ldr	r3, [r2, #16]
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	6913      	ldr	r3, [r2, #16]
 80046b0:	f043 0304 	orr.w	r3, r3, #4
 80046b4:	6113      	str	r3, [r2, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
  return HAL_OK;
 80046bc:	2000      	movs	r0, #0
}
 80046be:	bd10      	pop	{r4, pc}
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80046c0:	4906      	ldr	r1, [pc, #24]	@ (80046dc <HAL_LPTIM_Counter_Start_IT+0xbc>)
 80046c2:	6a0a      	ldr	r2, [r1, #32]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	620a      	str	r2, [r1, #32]
 80046ca:	e7b8      	b.n	800463e <HAL_LPTIM_Counter_Start_IT+0x1e>
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80046cc:	6821      	ldr	r1, [r4, #0]
 80046ce:	68ca      	ldr	r2, [r1, #12]
 80046d0:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 80046d4:	60ca      	str	r2, [r1, #12]
 80046d6:	e7b9      	b.n	800464c <HAL_LPTIM_Counter_Start_IT+0x2c>
 80046d8:	40007c00 	.word	0x40007c00
 80046dc:	40010400 	.word	0x40010400

080046e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046e0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e2:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <HAL_MspInit+0x2c>)
 80046e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	661a      	str	r2, [r3, #96]	@ 0x60
 80046ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046ee:	f002 0201 	and.w	r2, r2, #1
 80046f2:	9200      	str	r2, [sp, #0]
 80046f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046f8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80046fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80046fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004708:	b002      	add	sp, #8
 800470a:	4770      	bx	lr
 800470c:	40021000 	.word	0x40021000

08004710 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8004710:	6802      	ldr	r2, [r0, #0]
 8004712:	4b1c      	ldr	r3, [pc, #112]	@ (8004784 <HAL_ADC_MspInit+0x74>)
 8004714:	429a      	cmp	r2, r3
 8004716:	d000      	beq.n	800471a <HAL_ADC_MspInit+0xa>
 8004718:	4770      	bx	lr
{
 800471a:	b510      	push	{r4, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004720:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8004724:	f5a3 33f8 	sub.w	r3, r3, #126976	@ 0x1f000
 8004728:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800472a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800472e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	9b01      	ldr	r3, [sp, #4]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800473a:	4813      	ldr	r0, [pc, #76]	@ (8004788 <HAL_ADC_MspInit+0x78>)
 800473c:	4b13      	ldr	r3, [pc, #76]	@ (800478c <HAL_ADC_MspInit+0x7c>)
 800473e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004740:	2300      	movs	r3, #0
 8004742:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004744:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004746:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004748:	2280      	movs	r2, #128	@ 0x80
 800474a:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800474c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004750:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004752:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004756:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004758:	2220      	movs	r2, #32
 800475a:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800475c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800475e:	f7ff facb 	bl	8003cf8 <HAL_DMA_Init>
 8004762:	b960      	cbnz	r0, 800477e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004764:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <HAL_ADC_MspInit+0x78>)
 8004766:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004768:	629c      	str	r4, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	4611      	mov	r1, r2
 800476e:	2012      	movs	r0, #18
 8004770:	f7ff fa80 	bl	8003c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004774:	2012      	movs	r0, #18
 8004776:	f7ff fa8d 	bl	8003c94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800477a:	b002      	add	sp, #8
 800477c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800477e:	f7fd ff3d 	bl	80025fc <Error_Handler>
 8004782:	e7ef      	b.n	8004764 <HAL_ADC_MspInit+0x54>
 8004784:	50040000 	.word	0x50040000
 8004788:	200013f0 	.word	0x200013f0
 800478c:	40020008 	.word	0x40020008

08004790 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004790:	b510      	push	{r4, lr}
 8004792:	b08e      	sub	sp, #56	@ 0x38
 8004794:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004796:	2234      	movs	r2, #52	@ 0x34
 8004798:	2100      	movs	r1, #0
 800479a:	a801      	add	r0, sp, #4
 800479c:	f005 fb1e 	bl	8009ddc <memset>
  if(hlptim->Instance==LPTIM1)
 80047a0:	6822      	ldr	r2, [r4, #0]
 80047a2:	4b12      	ldr	r3, [pc, #72]	@ (80047ec <HAL_LPTIM_MspInit+0x5c>)
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_LPTIM_MspInit+0x1c>

  /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 80047a8:	b00e      	add	sp, #56	@ 0x38
 80047aa:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80047ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047b0:	9301      	str	r3, [sp, #4]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80047b2:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80047b6:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047b8:	a801      	add	r0, sp, #4
 80047ba:	f001 fe5f 	bl	800647c <HAL_RCCEx_PeriphCLKConfig>
 80047be:	b990      	cbnz	r0, 80047e6 <HAL_LPTIM_MspInit+0x56>
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_LPTIM_MspInit+0x60>)
 80047c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80047d4:	2200      	movs	r2, #0
 80047d6:	4611      	mov	r1, r2
 80047d8:	2041      	movs	r0, #65	@ 0x41
 80047da:	f7ff fa4b 	bl	8003c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80047de:	2041      	movs	r0, #65	@ 0x41
 80047e0:	f7ff fa58 	bl	8003c94 <HAL_NVIC_EnableIRQ>
}
 80047e4:	e7e0      	b.n	80047a8 <HAL_LPTIM_MspInit+0x18>
      Error_Handler();
 80047e6:	f7fd ff09 	bl	80025fc <Error_Handler>
 80047ea:	e7e9      	b.n	80047c0 <HAL_LPTIM_MspInit+0x30>
 80047ec:	40007c00 	.word	0x40007c00
 80047f0:	40021000 	.word	0x40021000

080047f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80047f4:	b510      	push	{r4, lr}
 80047f6:	b08e      	sub	sp, #56	@ 0x38
 80047f8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047fa:	2234      	movs	r2, #52	@ 0x34
 80047fc:	2100      	movs	r1, #0
 80047fe:	a801      	add	r0, sp, #4
 8004800:	f005 faec 	bl	8009ddc <memset>
  if(hrtc->Instance==RTC)
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	4b0d      	ldr	r3, [pc, #52]	@ (800483c <HAL_RTC_MspInit+0x48>)
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800480c:	b00e      	add	sp, #56	@ 0x38
 800480e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004810:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004814:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004816:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800481a:	930d      	str	r3, [sp, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800481c:	a801      	add	r0, sp, #4
 800481e:	f001 fe2d 	bl	800647c <HAL_RCCEx_PeriphCLKConfig>
 8004822:	b938      	cbnz	r0, 8004834 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 8004824:	4a06      	ldr	r2, [pc, #24]	@ (8004840 <HAL_RTC_MspInit+0x4c>)
 8004826:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800482a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800482e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004832:	e7eb      	b.n	800480c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8004834:	f7fd fee2 	bl	80025fc <Error_Handler>
 8004838:	e7f4      	b.n	8004824 <HAL_RTC_MspInit+0x30>
 800483a:	bf00      	nop
 800483c:	40002800 	.word	0x40002800
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004844:	b500      	push	{lr}
 8004846:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	2300      	movs	r3, #0
 800484a:	9303      	str	r3, [sp, #12]
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	9305      	str	r3, [sp, #20]
 8004850:	9306      	str	r3, [sp, #24]
 8004852:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8004854:	6802      	ldr	r2, [r0, #0]
 8004856:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <HAL_SPI_MspInit+0x60>)
 8004858:	429a      	cmp	r2, r3
 800485a:	d002      	beq.n	8004862 <HAL_SPI_MspInit+0x1e>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800485c:	b009      	add	sp, #36	@ 0x24
 800485e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004862:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8004866:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004868:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800486c:	661a      	str	r2, [r3, #96]	@ 0x60
 800486e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004870:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004874:	9201      	str	r2, [sp, #4]
 8004876:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004878:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	9302      	str	r3, [sp, #8]
 8004888:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800488a:	2382      	movs	r3, #130	@ 0x82
 800488c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488e:	2302      	movs	r3, #2
 8004890:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004892:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004894:	2305      	movs	r3, #5
 8004896:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004898:	a903      	add	r1, sp, #12
 800489a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800489e:	f7ff fb49 	bl	8003f34 <HAL_GPIO_Init>
}
 80048a2:	e7db      	b.n	800485c <HAL_SPI_MspInit+0x18>
 80048a4:	40013000 	.word	0x40013000

080048a8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80048a8:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI1)
 80048aa:	6802      	ldr	r2, [r0, #0]
 80048ac:	4b07      	ldr	r3, [pc, #28]	@ (80048cc <HAL_SPI_MspDeInit+0x24>)
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d000      	beq.n	80048b4 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80048b2:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI1_CLK_DISABLE();
 80048b4:	4a06      	ldr	r2, [pc, #24]	@ (80048d0 <HAL_SPI_MspDeInit+0x28>)
 80048b6:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80048b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048bc:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_7);
 80048be:	2182      	movs	r1, #130	@ 0x82
 80048c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048c4:	f7ff fc14 	bl	80040f0 <HAL_GPIO_DeInit>
}
 80048c8:	e7f3      	b.n	80048b2 <HAL_SPI_MspDeInit+0xa>
 80048ca:	bf00      	nop
 80048cc:	40013000 	.word	0x40013000
 80048d0:	40021000 	.word	0x40021000

080048d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048d4:	b510      	push	{r4, lr}
 80048d6:	b094      	sub	sp, #80	@ 0x50
 80048d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048da:	2100      	movs	r1, #0
 80048dc:	910f      	str	r1, [sp, #60]	@ 0x3c
 80048de:	9110      	str	r1, [sp, #64]	@ 0x40
 80048e0:	9111      	str	r1, [sp, #68]	@ 0x44
 80048e2:	9112      	str	r1, [sp, #72]	@ 0x48
 80048e4:	9113      	str	r1, [sp, #76]	@ 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048e6:	2234      	movs	r2, #52	@ 0x34
 80048e8:	a802      	add	r0, sp, #8
 80048ea:	f005 fa77 	bl	8009ddc <memset>
  if(huart->Instance==USART2)
 80048ee:	6822      	ldr	r2, [r4, #0]
 80048f0:	4b18      	ldr	r3, [pc, #96]	@ (8004954 <HAL_UART_MspInit+0x80>)
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d001      	beq.n	80048fa <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80048f6:	b014      	add	sp, #80	@ 0x50
 80048f8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80048fa:	2302      	movs	r3, #2
 80048fc:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048fe:	a802      	add	r0, sp, #8
 8004900:	f001 fdbc 	bl	800647c <HAL_RCCEx_PeriphCLKConfig>
 8004904:	bb10      	cbnz	r0, 800494c <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004906:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <HAL_UART_MspInit+0x84>)
 8004908:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800490a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800490e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004910:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004912:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004916:	9200      	str	r2, [sp, #0]
 8004918:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800492c:	2304      	movs	r3, #4
 800492e:	930f      	str	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004930:	2312      	movs	r3, #18
 8004932:	9310      	str	r3, [sp, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004934:	2301      	movs	r3, #1
 8004936:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004938:	2303      	movs	r3, #3
 800493a:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800493c:	2307      	movs	r3, #7
 800493e:	9313      	str	r3, [sp, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004940:	a90f      	add	r1, sp, #60	@ 0x3c
 8004942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004946:	f7ff faf5 	bl	8003f34 <HAL_GPIO_Init>
}
 800494a:	e7d4      	b.n	80048f6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800494c:	f7fd fe56 	bl	80025fc <Error_Handler>
 8004950:	e7d9      	b.n	8004906 <HAL_UART_MspInit+0x32>
 8004952:	bf00      	nop
 8004954:	40004400 	.word	0x40004400
 8004958:	40021000 	.word	0x40021000

0800495c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800495c:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800495e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004962:	d043      	beq.n	80049ec <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004964:	6804      	ldr	r4, [r0, #0]
 8004966:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 800496a:	f891 c000 	ldrb.w	ip, [r1]
 800496e:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8004972:	fa1e f383 	uxtah	r3, lr, r3
 8004976:	4423      	add	r3, r4
 8004978:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	@ 0x402
 800497c:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8004980:	698b      	ldr	r3, [r1, #24]
 8004982:	42a3      	cmp	r3, r4
 8004984:	d328      	bcc.n	80049d8 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8004986:	1b1b      	subs	r3, r3, r4
 8004988:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800498a:	698b      	ldr	r3, [r1, #24]
 800498c:	b97b      	cbnz	r3, 80049ae <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800498e:	6805      	ldr	r5, [r0, #0]
 8004990:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800499a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049aa:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049ae:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80049b2:	d00e      	beq.n	80049d2 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049b4:	6802      	ldr	r2, [r0, #0]
 80049b6:	780d      	ldrb	r5, [r1, #0]
 80049b8:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049ce:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80049d2:	b924      	cbnz	r4, 80049de <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80049d4:	4620      	mov	r0, r4
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	618b      	str	r3, [r1, #24]
 80049dc:	e7d5      	b.n	800498a <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049de:	4623      	mov	r3, r4
 80049e0:	890a      	ldrh	r2, [r1, #8]
 80049e2:	6949      	ldr	r1, [r1, #20]
 80049e4:	6800      	ldr	r0, [r0, #0]
 80049e6:	f003 fde5 	bl	80085b4 <USB_ReadPMA>
 80049ea:	e7f3      	b.n	80049d4 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049ec:	6804      	ldr	r4, [r0, #0]
 80049ee:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 80049f2:	f891 c000 	ldrb.w	ip, [r1]
 80049f6:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80049fa:	fa1e f383 	uxtah	r3, lr, r3
 80049fe:	4423      	add	r3, r4
 8004a00:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	@ 0x406
 8004a04:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8004a08:	698b      	ldr	r3, [r1, #24]
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	d32f      	bcc.n	8004a6e <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 8004a0e:	1b1b      	subs	r3, r3, r4
 8004a10:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8004a12:	698b      	ldr	r3, [r1, #24]
 8004a14:	b97b      	cbnz	r3, 8004a36 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a16:	6805      	ldr	r5, [r0, #0]
 8004a18:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a32:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a36:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004a3a:	d10f      	bne.n	8004a5c <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a3c:	6802      	ldr	r2, [r0, #0]
 8004a3e:	f891 c000 	ldrb.w	ip, [r1]
 8004a42:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a58:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8004a5c:	2c00      	cmp	r4, #0
 8004a5e:	d0b9      	beq.n	80049d4 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a60:	4623      	mov	r3, r4
 8004a62:	894a      	ldrh	r2, [r1, #10]
 8004a64:	6949      	ldr	r1, [r1, #20]
 8004a66:	6800      	ldr	r0, [r0, #0]
 8004a68:	f003 fda4 	bl	80085b4 <USB_ReadPMA>
 8004a6c:	e7b2      	b.n	80049d4 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	618b      	str	r3, [r1, #24]
 8004a72:	e7ce      	b.n	8004a12 <HAL_PCD_EP_DB_Receive+0xb6>

08004a74 <HAL_PCD_Init>:
{
 8004a74:	b538      	push	{r3, r4, r5, lr}
  if (hpcd == NULL)
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d075      	beq.n	8004b66 <HAL_PCD_Init+0xf2>
 8004a7a:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a7c:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8004a80:	b1a3      	cbz	r3, 8004aac <HAL_PCD_Init+0x38>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a82:	2303      	movs	r3, #3
 8004a84:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  hpcd->Init.dma_enable = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8004a8c:	6820      	ldr	r0, [r4, #0]
 8004a8e:	f002 fe93 	bl	80077b8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a92:	4623      	mov	r3, r4
 8004a94:	f853 0b04 	ldr.w	r0, [r3], #4
 8004a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a9a:	f002 fe7d 	bl	8007798 <USB_CoreInit>
 8004a9e:	b150      	cbz	r0, 8004ab6 <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8004aa6:	2501      	movs	r5, #1
}
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004aac:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
    HAL_PCD_MspInit(hpcd);
 8004ab0:	f004 f8b4 	bl	8008c1c <HAL_PCD_MspInit>
 8004ab4:	e7e5      	b.n	8004a82 <HAL_PCD_Init+0xe>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	f002 fe87 	bl	80077cc <USB_SetCurrentMode>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	b9a8      	cbnz	r0, 8004aee <HAL_PCD_Init+0x7a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	7920      	ldrb	r0, [r4, #4]
 8004ac6:	4290      	cmp	r0, r2
 8004ac8:	d916      	bls.n	8004af8 <HAL_PCD_Init+0x84>
    hpcd->IN_ep[i].is_in = 1U;
 8004aca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004ace:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	7448      	strb	r0, [r1, #17]
    hpcd->IN_ep[i].num = i;
 8004ad6:	740a      	strb	r2, [r1, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ad8:	2000      	movs	r0, #0
 8004ada:	74c8      	strb	r0, [r1, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004adc:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ade:	6248      	str	r0, [r1, #36]	@ 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ae0:	3201      	adds	r2, #1
 8004ae2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004ae6:	00c9      	lsls	r1, r1, #3
 8004ae8:	5060      	str	r0, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	e7ea      	b.n	8004ac4 <HAL_PCD_Init+0x50>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aee:	2302      	movs	r3, #2
 8004af0:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8004af4:	2501      	movs	r5, #1
 8004af6:	e7d7      	b.n	8004aa8 <HAL_PCD_Init+0x34>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af8:	4298      	cmp	r0, r3
 8004afa:	d917      	bls.n	8004b2c <HAL_PCD_Init+0xb8>
    hpcd->OUT_ep[i].is_in = 0U;
 8004afc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004b00:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8004b04:	2100      	movs	r1, #0
 8004b06:	f882 1151 	strb.w	r1, [r2, #337]	@ 0x151
    hpcd->OUT_ep[i].num = i;
 8004b0a:	f882 3150 	strb.w	r3, [r2, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b0e:	f882 1153 	strb.w	r1, [r2, #339]	@ 0x153
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b12:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b16:	f8c2 1164 	str.w	r1, [r2, #356]	@ 0x164
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b1a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004b1e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8004b22:	f8c2 1168 	str.w	r1, [r2, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b26:	3301      	adds	r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e7e5      	b.n	8004af8 <HAL_PCD_Init+0x84>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b34:	f002 fe4c 	bl	80077d0 <USB_DevInit>
 8004b38:	4605      	mov	r5, r0
 8004b3a:	b958      	cbnz	r0, 8004b54 <HAL_PCD_Init+0xe0>
  hpcd->USB_Address = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	7363      	strb	r3, [r4, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  if (hpcd->Init.lpm_enable == 1U)
 8004b46:	7ae3      	ldrb	r3, [r4, #11]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d008      	beq.n	8004b5e <HAL_PCD_Init+0xea>
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	f003 fa4c 	bl	8007fea <USB_DevDisconnect>
  return HAL_OK;
 8004b52:	e7a9      	b.n	8004aa8 <HAL_PCD_Init+0x34>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b54:	2302      	movs	r3, #2
 8004b56:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8004b5a:	2501      	movs	r5, #1
 8004b5c:	e7a4      	b.n	8004aa8 <HAL_PCD_Init+0x34>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 feff 	bl	8005962 <HAL_PCDEx_ActivateLPM>
 8004b64:	e7f2      	b.n	8004b4c <HAL_PCD_Init+0xd8>
    return HAL_ERROR;
 8004b66:	2501      	movs	r5, #1
 8004b68:	e79e      	b.n	8004aa8 <HAL_PCD_Init+0x34>

08004b6a <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8004b6a:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d00e      	beq.n	8004b90 <HAL_PCD_Start+0x26>
{
 8004b72:	b510      	push	{r4, lr}
 8004b74:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004b76:	2301      	movs	r3, #1
 8004b78:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004b7c:	6800      	ldr	r0, [r0, #0]
 8004b7e:	f002 fe12 	bl	80077a6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b82:	6820      	ldr	r0, [r4, #0]
 8004b84:	f003 fa26 	bl	8007fd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8004b8e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004b90:	2002      	movs	r0, #2
}
 8004b92:	4770      	bx	lr

08004b94 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	4605      	mov	r5, r0
 8004b98:	460c      	mov	r4, r1
 8004b9a:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b9c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004ba0:	f000 8120 	beq.w	8004de4 <HAL_PCD_EP_DB_Transmit+0x250>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ba4:	6802      	ldr	r2, [r0, #0]
 8004ba6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004baa:	7809      	ldrb	r1, [r1, #0]
 8004bac:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8004bb0:	fa1c f383 	uxtah	r3, ip, r3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004bba:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8004bbe:	69a3      	ldr	r3, [r4, #24]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d92c      	bls.n	8004c1e <HAL_PCD_EP_DB_Transmit+0x8a>
    {
      ep->xfer_len -= TxPctSize;
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bc8:	69a0      	ldr	r0, [r4, #24]
 8004bca:	b358      	cbz	r0, 8004c24 <HAL_PCD_EP_DB_Transmit+0x90>
      return HAL_OK;
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004bcc:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004bd0:	d00d      	beq.n	8004bee <HAL_PCD_EP_DB_Transmit+0x5a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bd2:	6828      	ldr	r0, [r5, #0]
 8004bd4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bea:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bee:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	f000 808d 	beq.w	8004d12 <HAL_PCD_EP_DB_Transmit+0x17e>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004bf8:	682a      	ldr	r2, [r5, #0]
 8004bfa:	7821      	ldrb	r1, [r4, #0]
 8004bfc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c0a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c16:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61a3      	str	r3, [r4, #24]
 8004c22:	e7d1      	b.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x34>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c24:	7863      	ldrb	r3, [r4, #1]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d148      	bne.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x128>
 8004c2a:	682a      	ldr	r2, [r5, #0]
 8004c2c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004c30:	fa12 f383 	uxtah	r3, r2, r3
 8004c34:	4463      	add	r3, ip
 8004c36:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004c3a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c3e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004c42:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004c46:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004c4a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004c4e:	b292      	uxth	r2, r2
 8004c50:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c54:	682a      	ldr	r2, [r5, #0]
 8004c56:	7863      	ldrb	r3, [r4, #1]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d13b      	bne.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x140>
 8004c5c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004c60:	fa12 f383 	uxtah	r3, r2, r3
 8004c64:	7822      	ldrb	r2, [r4, #0]
 8004c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c6a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004c6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c72:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004c76:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004c7a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004c7e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004c82:	b292      	uxth	r2, r2
 8004c84:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
      if (ep->type == EP_TYPE_BULK)
 8004c88:	78e3      	ldrb	r3, [r4, #3]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d02f      	beq.n	8004cee <HAL_PCD_EP_DB_Transmit+0x15a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c8e:	7821      	ldrb	r1, [r4, #0]
 8004c90:	4628      	mov	r0, r5
 8004c92:	f004 f825 	bl	8008ce0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c96:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004c9a:	d0be      	beq.n	8004c1a <HAL_PCD_EP_DB_Transmit+0x86>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c9c:	682a      	ldr	r2, [r5, #0]
 8004c9e:	7821      	ldrb	r1, [r4, #0]
 8004ca0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      return HAL_OK;
 8004cba:	e7ae      	b.n	8004c1a <HAL_PCD_EP_DB_Transmit+0x86>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d1c9      	bne.n	8004c54 <HAL_PCD_EP_DB_Transmit+0xc0>
 8004cc0:	682a      	ldr	r2, [r5, #0]
 8004cc2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004cc6:	fa12 f383 	uxtah	r3, r2, r3
 8004cca:	4463      	add	r3, ip
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004cd2:	e7bf      	b.n	8004c54 <HAL_PCD_EP_DB_Transmit+0xc0>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d1d7      	bne.n	8004c88 <HAL_PCD_EP_DB_Transmit+0xf4>
 8004cd8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004cdc:	fa12 f383 	uxtah	r3, r2, r3
 8004ce0:	7822      	ldrb	r2, [r4, #0]
 8004ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004cec:	e7cc      	b.n	8004c88 <HAL_PCD_EP_DB_Transmit+0xf4>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004cee:	682a      	ldr	r2, [r5, #0]
 8004cf0:	7821      	ldrb	r1, [r4, #0]
 8004cf2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d00:	f083 0320 	eor.w	r3, r3, #32
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004d10:	e7bd      	b.n	8004c8e <HAL_PCD_EP_DB_Transmit+0xfa>
        ep->xfer_buff += TxPctSize;
 8004d12:	6963      	ldr	r3, [r4, #20]
 8004d14:	4413      	add	r3, r2
 8004d16:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8004d18:	69e3      	ldr	r3, [r4, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d1e:	6a21      	ldr	r1, [r4, #32]
 8004d20:	6923      	ldr	r3, [r4, #16]
 8004d22:	4299      	cmp	r1, r3
 8004d24:	d31d      	bcc.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x1ce>
          ep->xfer_len_db -= len;
 8004d26:	1ac9      	subs	r1, r1, r3
 8004d28:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d2a:	7862      	ldrb	r2, [r4, #1]
 8004d2c:	2a00      	cmp	r2, #0
 8004d2e:	d144      	bne.n	8004dba <HAL_PCD_EP_DB_Transmit+0x226>
 8004d30:	6829      	ldr	r1, [r5, #0]
 8004d32:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004d36:	fa11 f282 	uxtah	r2, r1, r2
 8004d3a:	7821      	ldrb	r1, [r4, #0]
 8004d3c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004d40:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 8004d44:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004d48:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8004d4c:	b9ab      	cbnz	r3, 8004d7a <HAL_PCD_EP_DB_Transmit+0x1e6>
 8004d4e:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 8004d52:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004d56:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004d5a:	b289      	uxth	r1, r1
 8004d5c:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8004d60:	e02d      	b.n	8004dbe <HAL_PCD_EP_DB_Transmit+0x22a>
        else if (ep->xfer_len_db == 0U)
 8004d62:	b921      	cbnz	r1, 8004d6e <HAL_PCD_EP_DB_Transmit+0x1da>
          ep->xfer_fill_db = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	e7dd      	b.n	8004d2a <HAL_PCD_EP_DB_Transmit+0x196>
          ep->xfer_fill_db = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004d74:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8004d76:	460b      	mov	r3, r1
 8004d78:	e7d7      	b.n	8004d2a <HAL_PCD_EP_DB_Transmit+0x196>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d7c:	d80d      	bhi.n	8004d9a <HAL_PCD_EP_DB_Transmit+0x206>
 8004d7e:	0859      	lsrs	r1, r3, #1
 8004d80:	f013 0f01 	tst.w	r3, #1
 8004d84:	d000      	beq.n	8004d88 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8004d86:	3101      	adds	r1, #1
 8004d88:	f8b2 0402 	ldrh.w	r0, [r2, #1026]	@ 0x402
 8004d8c:	b280      	uxth	r0, r0
 8004d8e:	0289      	lsls	r1, r1, #10
 8004d90:	b289      	uxth	r1, r1
 8004d92:	4301      	orrs	r1, r0
 8004d94:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8004d98:	e011      	b.n	8004dbe <HAL_PCD_EP_DB_Transmit+0x22a>
 8004d9a:	0958      	lsrs	r0, r3, #5
 8004d9c:	f013 0f1f 	tst.w	r3, #31
 8004da0:	d100      	bne.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x210>
 8004da2:	3801      	subs	r0, #1
 8004da4:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 8004da8:	b289      	uxth	r1, r1
 8004daa:	0280      	lsls	r0, r0, #10
 8004dac:	b280      	uxth	r0, r0
 8004dae:	4301      	orrs	r1, r0
 8004db0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004db4:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8004db8:	e001      	b.n	8004dbe <HAL_PCD_EP_DB_Transmit+0x22a>
 8004dba:	2a01      	cmp	r2, #1
 8004dbc:	d006      	beq.n	8004dcc <HAL_PCD_EP_DB_Transmit+0x238>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	8922      	ldrh	r2, [r4, #8]
 8004dc2:	6961      	ldr	r1, [r4, #20]
 8004dc4:	6828      	ldr	r0, [r5, #0]
 8004dc6:	f003 f91e 	bl	8008006 <USB_WritePMA>
 8004dca:	e715      	b.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dcc:	6829      	ldr	r1, [r5, #0]
 8004dce:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004dd2:	fa11 f282 	uxtah	r2, r1, r2
 8004dd6:	7821      	ldrb	r1, [r4, #0]
 8004dd8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004ddc:	b299      	uxth	r1, r3
 8004dde:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8004de2:	e7ec      	b.n	8004dbe <HAL_PCD_EP_DB_Transmit+0x22a>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004de4:	6802      	ldr	r2, [r0, #0]
 8004de6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004dea:	7809      	ldrb	r1, [r1, #0]
 8004dec:	00c8      	lsls	r0, r1, #3
 8004dee:	fa10 f383 	uxtah	r3, r0, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004df8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8004dfc:	69a3      	ldr	r3, [r4, #24]
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d346      	bcc.n	8004e90 <HAL_PCD_EP_DB_Transmit+0x2fc>
      ep->xfer_len -= TxPctSize;
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8004e06:	69a3      	ldr	r3, [r4, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d044      	beq.n	8004e96 <HAL_PCD_EP_DB_Transmit+0x302>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e0c:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004e10:	d10d      	bne.n	8004e2e <HAL_PCD_EP_DB_Transmit+0x29a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e12:	6828      	ldr	r0, [r5, #0]
 8004e14:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004e2e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	f47f aee0 	bne.w	8004bf8 <HAL_PCD_EP_DB_Transmit+0x64>
        ep->xfer_buff += TxPctSize;
 8004e38:	6963      	ldr	r3, [r4, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8004e3e:	69e3      	ldr	r3, [r4, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e44:	6a21      	ldr	r1, [r4, #32]
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	f0c0 809c 	bcc.w	8004f86 <HAL_PCD_EP_DB_Transmit+0x3f2>
          ep->xfer_len_db -= len;
 8004e4e:	1ac9      	subs	r1, r1, r3
 8004e50:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e52:	6829      	ldr	r1, [r5, #0]
 8004e54:	7862      	ldrb	r2, [r4, #1]
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	f040 80c1 	bne.w	8004fde <HAL_PCD_EP_DB_Transmit+0x44a>
 8004e5c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004e60:	fa11 f282 	uxtah	r2, r1, r2
 8004e64:	7821      	ldrb	r1, [r4, #0]
 8004e66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004e6a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8004e6e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004e72:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 8091 	bne.w	8004f9e <HAL_PCD_EP_DB_Transmit+0x40a>
 8004e7c:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8004e80:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004e84:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004e88:	b289      	uxth	r1, r1
 8004e8a:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8004e8e:	e0a8      	b.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x44e>
      ep->xfer_len = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61a3      	str	r3, [r4, #24]
 8004e94:	e7b7      	b.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x272>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e96:	7863      	ldrb	r3, [r4, #1]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d149      	bne.n	8004f30 <HAL_PCD_EP_DB_Transmit+0x39c>
 8004e9c:	682a      	ldr	r2, [r5, #0]
 8004e9e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004ea2:	fa12 f383 	uxtah	r3, r2, r3
 8004ea6:	4403      	add	r3, r0
 8004ea8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004eac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004eb0:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004eb4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004eb8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004ebc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ec6:	682a      	ldr	r2, [r5, #0]
 8004ec8:	7863      	ldrb	r3, [r4, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d13c      	bne.n	8004f48 <HAL_PCD_EP_DB_Transmit+0x3b4>
 8004ece:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004ed2:	fa12 f383 	uxtah	r3, r2, r3
 8004ed6:	7822      	ldrb	r2, [r4, #0]
 8004ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004edc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004ee0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004ee4:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004ee8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004eec:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004ef0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
      if (ep->type == EP_TYPE_BULK)
 8004efa:	78e3      	ldrb	r3, [r4, #3]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d030      	beq.n	8004f62 <HAL_PCD_EP_DB_Transmit+0x3ce>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f00:	7821      	ldrb	r1, [r4, #0]
 8004f02:	4628      	mov	r0, r5
 8004f04:	f003 feec 	bl	8008ce0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f08:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004f0c:	f47f ae85 	bne.w	8004c1a <HAL_PCD_EP_DB_Transmit+0x86>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f10:	682a      	ldr	r2, [r5, #0]
 8004f12:	7821      	ldrb	r1, [r4, #0]
 8004f14:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      return HAL_OK;
 8004f2e:	e674      	b.n	8004c1a <HAL_PCD_EP_DB_Transmit+0x86>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d1c8      	bne.n	8004ec6 <HAL_PCD_EP_DB_Transmit+0x332>
 8004f34:	682a      	ldr	r2, [r5, #0]
 8004f36:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004f3a:	fa12 f383 	uxtah	r3, r2, r3
 8004f3e:	4403      	add	r3, r0
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004f46:	e7be      	b.n	8004ec6 <HAL_PCD_EP_DB_Transmit+0x332>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d1d6      	bne.n	8004efa <HAL_PCD_EP_DB_Transmit+0x366>
 8004f4c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004f50:	fa12 f383 	uxtah	r3, r2, r3
 8004f54:	7822      	ldrb	r2, [r4, #0]
 8004f56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004f60:	e7cb      	b.n	8004efa <HAL_PCD_EP_DB_Transmit+0x366>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004f62:	682a      	ldr	r2, [r5, #0]
 8004f64:	7821      	ldrb	r1, [r4, #0]
 8004f66:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f74:	f083 0320 	eor.w	r3, r3, #32
 8004f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f80:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004f84:	e7bc      	b.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x36c>
        else if (ep->xfer_len_db == 0U)
 8004f86:	b921      	cbnz	r1, 8004f92 <HAL_PCD_EP_DB_Transmit+0x3fe>
          ep->xfer_fill_db = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8004f8e:	4613      	mov	r3, r2
 8004f90:	e75f      	b.n	8004e52 <HAL_PCD_EP_DB_Transmit+0x2be>
          ep->xfer_len_db = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8004f96:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	e759      	b.n	8004e52 <HAL_PCD_EP_DB_Transmit+0x2be>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fa0:	d80d      	bhi.n	8004fbe <HAL_PCD_EP_DB_Transmit+0x42a>
 8004fa2:	0859      	lsrs	r1, r3, #1
 8004fa4:	f013 0f01 	tst.w	r3, #1
 8004fa8:	d000      	beq.n	8004fac <HAL_PCD_EP_DB_Transmit+0x418>
 8004faa:	3101      	adds	r1, #1
 8004fac:	f8b2 0406 	ldrh.w	r0, [r2, #1030]	@ 0x406
 8004fb0:	b280      	uxth	r0, r0
 8004fb2:	0289      	lsls	r1, r1, #10
 8004fb4:	b289      	uxth	r1, r1
 8004fb6:	4301      	orrs	r1, r0
 8004fb8:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8004fbc:	e011      	b.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004fbe:	0958      	lsrs	r0, r3, #5
 8004fc0:	f013 0f1f 	tst.w	r3, #31
 8004fc4:	d100      	bne.n	8004fc8 <HAL_PCD_EP_DB_Transmit+0x434>
 8004fc6:	3801      	subs	r0, #1
 8004fc8:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8004fcc:	b289      	uxth	r1, r1
 8004fce:	0280      	lsls	r0, r0, #10
 8004fd0:	b280      	uxth	r0, r0
 8004fd2:	4301      	orrs	r1, r0
 8004fd4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004fd8:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8004fdc:	e001      	b.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004fde:	2a01      	cmp	r2, #1
 8004fe0:	d006      	beq.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x45c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	8962      	ldrh	r2, [r4, #10]
 8004fe6:	6961      	ldr	r1, [r4, #20]
 8004fe8:	6828      	ldr	r0, [r5, #0]
 8004fea:	f003 f80c 	bl	8008006 <USB_WritePMA>
 8004fee:	e603      	b.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ff0:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004ff4:	fa11 f282 	uxtah	r2, r1, r2
 8004ff8:	7821      	ldrb	r1, [r4, #0]
 8004ffa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004ffe:	b299      	uxth	r1, r3
 8005000:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8005004:	e7ed      	b.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x44e>

08005006 <PCD_EP_ISR_Handler>:
{
 8005006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800500a:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800500c:	6828      	ldr	r0, [r5, #0]
 800500e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8005012:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005016:	f000 8255 	beq.w	80054c4 <PCD_EP_ISR_Handler+0x4be>
    wIstr = hpcd->Instance->ISTR;
 800501a:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 800501e:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8005020:	f014 040f 	ands.w	r4, r4, #15
 8005024:	f040 809f 	bne.w	8005166 <PCD_EP_ISR_Handler+0x160>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005028:	f013 0f10 	tst.w	r3, #16
 800502c:	d04a      	beq.n	80050c4 <PCD_EP_ISR_Handler+0xbe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800502e:	8803      	ldrh	r3, [r0, #0]
 8005030:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005032:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005036:	d175      	bne.n	8005124 <PCD_EP_ISR_Handler+0x11e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005038:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800503c:	d0e6      	beq.n	800500c <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800503e:	8803      	ldrh	r3, [r0, #0]
 8005040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005044:	051b      	lsls	r3, r3, #20
 8005046:	0d1b      	lsrs	r3, r3, #20
 8005048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800504c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800504e:	6828      	ldr	r0, [r5, #0]
 8005050:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8005054:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8005058:	00d2      	lsls	r2, r2, #3
 800505a:	fa12 f383 	uxtah	r3, r2, r3
 800505e:	4403      	add	r3, r0
 8005060:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8005064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005068:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800506c:	b18b      	cbz	r3, 8005092 <PCD_EP_ISR_Handler+0x8c>
 800506e:	f8d5 1164 	ldr.w	r1, [r5, #356]	@ 0x164
 8005072:	b171      	cbz	r1, 8005092 <PCD_EP_ISR_Handler+0x8c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005074:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8005078:	f003 fa9c 	bl	80085b4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800507c:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
 8005080:	f8d5 216c 	ldr.w	r2, [r5, #364]	@ 0x16c
 8005084:	4413      	add	r3, r2
 8005086:	f8c5 3164 	str.w	r3, [r5, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800508a:	2100      	movs	r1, #0
 800508c:	4628      	mov	r0, r5
 800508e:	f003 fe1b 	bl	8008cc8 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005092:	682a      	ldr	r2, [r5, #0]
 8005094:	8813      	ldrh	r3, [r2, #0]
 8005096:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005098:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800509c:	d1b6      	bne.n	800500c <PCD_EP_ISR_Handler+0x6>
 800509e:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 80050a2:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 80050a6:	d0b1      	beq.n	800500c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80050a8:	8813      	ldrh	r3, [r2, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80050b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c0:	8013      	strh	r3, [r2, #0]
 80050c2:	e7a3      	b.n	800500c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050c4:	8803      	ldrh	r3, [r0, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80050cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050dc:	6829      	ldr	r1, [r5, #0]
 80050de:	f8b1 3050 	ldrh.w	r3, [r1, #80]	@ 0x50
 80050e2:	7c2a      	ldrb	r2, [r5, #16]
 80050e4:	00d2      	lsls	r2, r2, #3
 80050e6:	fa12 f383 	uxtah	r3, r2, r3
 80050ea:	440b      	add	r3, r1
 80050ec:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80050f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 80050f6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80050f8:	441a      	add	r2, r3
 80050fa:	626a      	str	r2, [r5, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80050fc:	2100      	movs	r1, #0
 80050fe:	4628      	mov	r0, r5
 8005100:	f003 fdee 	bl	8008ce0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005104:	7b6b      	ldrb	r3, [r5, #13]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d080      	beq.n	800500c <PCD_EP_ISR_Handler+0x6>
 800510a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f af7d 	bne.w	800500c <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005112:	7b6b      	ldrb	r3, [r5, #13]
 8005114:	682a      	ldr	r2, [r5, #0]
 8005116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511a:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	736b      	strb	r3, [r5, #13]
 8005122:	e773      	b.n	800500c <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005124:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8005128:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 800512c:	00d2      	lsls	r2, r2, #3
 800512e:	fa12 f383 	uxtah	r3, r2, r3
 8005132:	4403      	add	r3, r0
 8005134:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8005138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800513c:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005140:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8005144:	f505 7126 	add.w	r1, r5, #664	@ 0x298
 8005148:	f003 fa34 	bl	80085b4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800514c:	682a      	ldr	r2, [r5, #0]
 800514e:	8813      	ldrh	r3, [r2, #0]
 8005150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005154:	051b      	lsls	r3, r3, #20
 8005156:	0d1b      	lsrs	r3, r3, #20
 8005158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800515c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800515e:	4628      	mov	r0, r5
 8005160:	f003 fdaa 	bl	8008cb8 <HAL_PCD_SetupStageCallback>
 8005164:	e752      	b.n	800500c <PCD_EP_ISR_Handler+0x6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005166:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800516a:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800516c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005170:	d14e      	bne.n	8005210 <PCD_EP_ISR_Handler+0x20a>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005172:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8005176:	f43f af49 	beq.w	800500c <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 800517a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800517e:	00c9      	lsls	r1, r1, #3
 8005180:	3110      	adds	r1, #16
 8005182:	4429      	add	r1, r5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005184:	682a      	ldr	r2, [r5, #0]
 8005186:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519c:	b29b      	uxth	r3, r3
 800519e:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80051a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80051a6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80051aa:	7cdb      	ldrb	r3, [r3, #19]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f000 80e9 	beq.w	8005384 <PCD_EP_ISR_Handler+0x37e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80051b2:	f416 7f80 	tst.w	r6, #256	@ 0x100
 80051b6:	f040 8180 	bne.w	80054ba <PCD_EP_ISR_Handler+0x4b4>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051ba:	6828      	ldr	r0, [r5, #0]
 80051bc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80051c0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80051c4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80051c8:	7c16      	ldrb	r6, [r2, #16]
 80051ca:	00f2      	lsls	r2, r6, #3
 80051cc:	fa12 f383 	uxtah	r3, r2, r3
 80051d0:	4403      	add	r3, r0
 80051d2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80051d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 80051da:	1c62      	adds	r2, r4, #1
 80051dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80051e0:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	f240 814b 	bls.w	8005480 <PCD_EP_ISR_Handler+0x47a>
              ep->xfer_len -= TxPctSize;
 80051ea:	1c67      	adds	r7, r4, #1
 80051ec:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80051f0:	1ad2      	subs	r2, r2, r3
 80051f2:	f845 2037 	str.w	r2, [r5, r7, lsl #3]
            if (ep->xfer_len == 0U)
 80051f6:	1c62      	adds	r2, r4, #1
 80051f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80051fc:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8005200:	2a00      	cmp	r2, #0
 8005202:	f040 8144 	bne.w	800548e <PCD_EP_ISR_Handler+0x488>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005206:	4631      	mov	r1, r6
 8005208:	4628      	mov	r0, r5
 800520a:	f003 fd69 	bl	8008ce0 <HAL_PCD_DataInStageCallback>
 800520e:	e6fd      	b.n	800500c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005210:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	0d1b      	lsrs	r3, r3, #20
 800521c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005220:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8005224:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005228:	00c9      	lsls	r1, r1, #3
 800522a:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800522e:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8005232:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005236:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800523a:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d140      	bne.n	80052c4 <PCD_EP_ISR_Handler+0x2be>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005242:	6828      	ldr	r0, [r5, #0]
 8005244:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8005248:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800524c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005250:	f892 2150 	ldrb.w	r2, [r2, #336]	@ 0x150
 8005254:	00d2      	lsls	r2, r2, #3
 8005256:	fa12 f383 	uxtah	r3, r2, r3
 800525a:	4403      	add	r3, r0
 800525c:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	@ 0x406
 8005260:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8005264:	bb17      	cbnz	r7, 80052ac <PCD_EP_ISR_Handler+0x2a6>
        ep->xfer_count += count;
 8005266:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800526a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800526e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8005272:	443a      	add	r2, r7
 8005274:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8005278:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800527c:	443a      	add	r2, r7
 800527e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005282:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8005286:	b13b      	cbz	r3, 8005298 <PCD_EP_ISR_Handler+0x292>
 8005288:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800528c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005290:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8005294:	429f      	cmp	r7, r3
 8005296:	d270      	bcs.n	800537a <PCD_EP_ISR_Handler+0x374>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005298:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800529c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80052a0:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 80052a4:	4628      	mov	r0, r5
 80052a6:	f003 fd0f 	bl	8008cc8 <HAL_PCD_DataOutStageCallback>
 80052aa:	e762      	b.n	8005172 <PCD_EP_ISR_Handler+0x16c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80052ac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80052b0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80052b4:	463b      	mov	r3, r7
 80052b6:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
 80052ba:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 80052be:	f003 f979 	bl	80085b4 <USB_ReadPMA>
 80052c2:	e7d0      	b.n	8005266 <PCD_EP_ISR_Handler+0x260>
          if (ep->type == EP_TYPE_BULK)
 80052c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80052c8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80052cc:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d033      	beq.n	800533c <PCD_EP_ISR_Handler+0x336>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052d4:	6829      	ldr	r1, [r5, #0]
 80052d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80052da:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80052de:	f892 0150 	ldrb.w	r0, [r2, #336]	@ 0x150
 80052e2:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052f8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052fc:	6828      	ldr	r0, [r5, #0]
 80052fe:	f892 3150 	ldrb.w	r3, [r2, #336]	@ 0x150
 8005302:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005306:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800530a:	d01e      	beq.n	800534a <PCD_EP_ISR_Handler+0x344>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800530c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	fa13 f382 	uxtah	r3, r3, r2
 8005316:	4403      	add	r3, r0
 8005318:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	@ 0x402
 800531c:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005320:	2f00      	cmp	r7, #0
 8005322:	d0a0      	beq.n	8005266 <PCD_EP_ISR_Handler+0x260>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005324:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005328:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800532c:	463b      	mov	r3, r7
 800532e:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8005332:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8005336:	f003 f93d 	bl	80085b4 <USB_ReadPMA>
 800533a:	e794      	b.n	8005266 <PCD_EP_ISR_Handler+0x260>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800533c:	4632      	mov	r2, r6
 800533e:	4641      	mov	r1, r8
 8005340:	4628      	mov	r0, r5
 8005342:	f7ff fb0b 	bl	800495c <HAL_PCD_EP_DB_Receive>
 8005346:	4607      	mov	r7, r0
 8005348:	e78d      	b.n	8005266 <PCD_EP_ISR_Handler+0x260>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800534a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	fa13 f382 	uxtah	r3, r3, r2
 8005354:	4403      	add	r3, r0
 8005356:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	@ 0x406
 800535a:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800535e:	2f00      	cmp	r7, #0
 8005360:	d081      	beq.n	8005266 <PCD_EP_ISR_Handler+0x260>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005362:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005366:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800536a:	463b      	mov	r3, r7
 800536c:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8005370:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8005374:	f003 f91e 	bl	80085b4 <USB_ReadPMA>
 8005378:	e775      	b.n	8005266 <PCD_EP_ISR_Handler+0x260>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800537a:	4641      	mov	r1, r8
 800537c:	6828      	ldr	r0, [r5, #0]
 800537e:	f002 fe54 	bl	800802a <USB_EPStartXfer>
 8005382:	e6f6      	b.n	8005172 <PCD_EP_ISR_Handler+0x16c>
          ep->xfer_len = 0U;
 8005384:	1c63      	adds	r3, r4, #1
 8005386:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	2200      	movs	r2, #0
 800538e:	50ea      	str	r2, [r5, r3]
          if (ep->doublebuffer != 0U)
 8005390:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005394:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005398:	7f1b      	ldrb	r3, [r3, #28]
 800539a:	b31b      	cbz	r3, 80053e4 <PCD_EP_ISR_Handler+0x3de>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800539c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80053a0:	d03b      	beq.n	800541a <PCD_EP_ISR_Handler+0x414>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80053a6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80053aa:	7c5b      	ldrb	r3, [r3, #17]
 80053ac:	bb1b      	cbnz	r3, 80053f6 <PCD_EP_ISR_Handler+0x3f0>
 80053ae:	682a      	ldr	r2, [r5, #0]
 80053b0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80053b4:	fa12 f383 	uxtah	r3, r2, r3
 80053b8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80053bc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80053c0:	7c12      	ldrb	r2, [r2, #16]
 80053c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80053ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80053ce:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80053d2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80053d6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80053da:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80053de:	b292      	uxth	r2, r2
 80053e0:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80053e8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80053ec:	7c21      	ldrb	r1, [r4, #16]
 80053ee:	4628      	mov	r0, r5
 80053f0:	f003 fc76 	bl	8008ce0 <HAL_PCD_DataInStageCallback>
 80053f4:	e60a      	b.n	800500c <PCD_EP_ISR_Handler+0x6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d1f4      	bne.n	80053e4 <PCD_EP_ISR_Handler+0x3de>
 80053fa:	682a      	ldr	r2, [r5, #0]
 80053fc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8005400:	fa12 f383 	uxtah	r3, r2, r3
 8005404:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005408:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800540c:	7c12      	ldrb	r2, [r2, #16]
 800540e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005412:	2200      	movs	r2, #0
 8005414:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8005418:	e7e4      	b.n	80053e4 <PCD_EP_ISR_Handler+0x3de>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800541a:	682a      	ldr	r2, [r5, #0]
 800541c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005420:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005424:	7c5b      	ldrb	r3, [r3, #17]
 8005426:	b9d3      	cbnz	r3, 800545e <PCD_EP_ISR_Handler+0x458>
 8005428:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 800542c:	fa12 f383 	uxtah	r3, r2, r3
 8005430:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005434:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005438:	7c12      	ldrb	r2, [r2, #16]
 800543a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800543e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8005442:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005446:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800544a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800544e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005452:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005456:	b292      	uxth	r2, r2
 8005458:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800545c:	e7c2      	b.n	80053e4 <PCD_EP_ISR_Handler+0x3de>
 800545e:	2b01      	cmp	r3, #1
 8005460:	d1c0      	bne.n	80053e4 <PCD_EP_ISR_Handler+0x3de>
 8005462:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8005466:	fa12 f383 	uxtah	r3, r2, r3
 800546a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800546e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005472:	7c12      	ldrb	r2, [r2, #16]
 8005474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005478:	2200      	movs	r2, #0
 800547a:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800547e:	e7b1      	b.n	80053e4 <PCD_EP_ISR_Handler+0x3de>
              ep->xfer_len = 0U;
 8005480:	1c62      	adds	r2, r4, #1
 8005482:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005486:	00d2      	lsls	r2, r2, #3
 8005488:	2700      	movs	r7, #0
 800548a:	50af      	str	r7, [r5, r2]
 800548c:	e6b3      	b.n	80051f6 <PCD_EP_ISR_Handler+0x1f0>
              ep->xfer_buff += TxPctSize;
 800548e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005492:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005496:	6a56      	ldr	r6, [r2, #36]	@ 0x24
 8005498:	441e      	add	r6, r3
 800549a:	6256      	str	r6, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800549c:	3401      	adds	r4, #1
 800549e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80054a2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80054a6:	6852      	ldr	r2, [r2, #4]
 80054a8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80054ac:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80054b0:	4413      	add	r3, r2
 80054b2:	6063      	str	r3, [r4, #4]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054b4:	f002 fdb9 	bl	800802a <USB_EPStartXfer>
 80054b8:	e5a8      	b.n	800500c <PCD_EP_ISR_Handler+0x6>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80054ba:	4632      	mov	r2, r6
 80054bc:	4628      	mov	r0, r5
 80054be:	f7ff fb69 	bl	8004b94 <HAL_PCD_EP_DB_Transmit>
 80054c2:	e5a3      	b.n	800500c <PCD_EP_ISR_Handler+0x6>
}
 80054c4:	2000      	movs	r0, #0
 80054c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054ca <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80054ca:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d00c      	beq.n	80054ec <HAL_PCD_SetAddress+0x22>
{
 80054d2:	b510      	push	{r4, lr}
 80054d4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80054d6:	2301      	movs	r3, #1
 80054d8:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  hpcd->USB_Address = address;
 80054dc:	7341      	strb	r1, [r0, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054de:	6800      	ldr	r0, [r0, #0]
 80054e0:	f002 fd72 	bl	8007fc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054e4:	2000      	movs	r0, #0
 80054e6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80054ea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80054ec:	2002      	movs	r0, #2
}
 80054ee:	4770      	bx	lr

080054f0 <HAL_PCD_IRQHandler>:
{
 80054f0:	b510      	push	{r4, lr}
 80054f2:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80054f4:	6800      	ldr	r0, [r0, #0]
 80054f6:	f002 fd80 	bl	8007ffa <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80054fa:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80054fe:	d123      	bne.n	8005548 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005500:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8005504:	d124      	bne.n	8005550 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005506:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 800550a:	d132      	bne.n	8005572 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800550c:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8005510:	d139      	bne.n	8005586 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005512:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8005516:	d140      	bne.n	800559a <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005518:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800551c:	d167      	bne.n	80055ee <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800551e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005522:	f040 8081 	bne.w	8005628 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005526:	f410 7f00 	tst.w	r0, #512	@ 0x200
 800552a:	f040 80ad 	bne.w	8005688 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800552e:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8005532:	d027      	beq.n	8005584 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005540:	b29b      	uxth	r3, r3
 8005542:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8005546:	e01d      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8005548:	4620      	mov	r0, r4
 800554a:	f7ff fd5c 	bl	8005006 <PCD_EP_ISR_Handler>
    return;
 800554e:	e019      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800555c:	b29b      	uxth	r3, r3
 800555e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005562:	4620      	mov	r0, r4
 8005564:	f003 fbcd 	bl	8008d02 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005568:	2100      	movs	r1, #0
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff ffad 	bl	80054ca <HAL_PCD_SetAddress>
    return;
 8005570:	e008      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005578:	b29b      	uxth	r3, r3
 800557a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557e:	b29b      	uxth	r3, r3
 8005580:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8005584:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005592:	b29b      	uxth	r3, r3
 8005594:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8005598:	e7f4      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f023 0304 	bic.w	r3, r3, #4
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80055ac:	6822      	ldr	r2, [r4, #0]
 80055ae:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f023 0308 	bic.w	r3, r3, #8
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    if (hpcd->LPM_State == LPM_L1)
 80055be:	f894 32c8 	ldrb.w	r3, [r4, #712]	@ 0x2c8
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d00c      	beq.n	80055e0 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 80055c6:	4620      	mov	r0, r4
 80055c8:	f003 fbbe 	bl	8008d48 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80055de:	e7d1      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 80055e0:	2100      	movs	r1, #0
 80055e2:	f884 12c8 	strb.w	r1, [r4, #712]	@ 0x2c8
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055e6:	4620      	mov	r0, r4
 80055e8:	f003 fca0 	bl	8008f2c <HAL_PCDEx_LPM_Callback>
 80055ec:	e7eb      	b.n	80055c6 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80055ee:	6822      	ldr	r2, [r4, #0]
 80055f0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f043 0308 	orr.w	r3, r3, #8
 80055fa:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800560a:	b29b      	uxth	r3, r3
 800560c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005616:	b29b      	uxth	r3, r3
 8005618:	f043 0304 	orr.w	r3, r3, #4
 800561c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005620:	4620      	mov	r0, r4
 8005622:	f003 fb81 	bl	8008d28 <HAL_PCD_SuspendCallback>
    return;
 8005626:	e7ad      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005628:	6822      	ldr	r2, [r4, #0]
 800562a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800562e:	b29b      	uxth	r3, r3
 8005630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005634:	b29b      	uxth	r3, r3
 8005636:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800563a:	f894 32c8 	ldrb.w	r3, [r4, #712]	@ 0x2c8
 800563e:	b9fb      	cbnz	r3, 8005680 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005640:	6822      	ldr	r2, [r4, #0]
 8005642:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005646:	b29b      	uxth	r3, r3
 8005648:	f043 0304 	orr.w	r3, r3, #4
 800564c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005656:	b29b      	uxth	r3, r3
 8005658:	f043 0308 	orr.w	r3, r3, #8
 800565c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      hpcd->LPM_State = LPM_L1;
 8005660:	2101      	movs	r1, #1
 8005662:	f884 12c8 	strb.w	r1, [r4, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800566c:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8005670:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8005674:	f8c4 32cc 	str.w	r3, [r4, #716]	@ 0x2cc
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005678:	4620      	mov	r0, r4
 800567a:	f003 fc57 	bl	8008f2c <HAL_PCDEx_LPM_Callback>
 800567e:	e781      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8005680:	4620      	mov	r0, r4
 8005682:	f003 fb51 	bl	8008d28 <HAL_PCD_SuspendCallback>
    return;
 8005686:	e77d      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005688:	6822      	ldr	r2, [r4, #0]
 800568a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005694:	b29b      	uxth	r3, r3
 8005696:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 800569a:	4620      	mov	r0, r4
 800569c:	f003 fb2b 	bl	8008cf6 <HAL_PCD_SOFCallback>
    return;
 80056a0:	e770      	b.n	8005584 <HAL_PCD_IRQHandler+0x94>

080056a2 <HAL_PCD_EP_Open>:
{
 80056a2:	b510      	push	{r4, lr}
 80056a4:	4604      	mov	r4, r0
 80056a6:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80056a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80056ac:	d127      	bne.n	80056fe <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ae:	f001 0c07 	and.w	ip, r1, #7
 80056b2:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80056b6:	00c9      	lsls	r1, r1, #3
 80056b8:	f501 7ea8 	add.w	lr, r1, #336	@ 0x150
 80056bc:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 80056c0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80056c4:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80056c8:	f04f 0e00 	mov.w	lr, #0
 80056cc:	f88c e151 	strb.w	lr, [ip, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80056d0:	f000 0007 	and.w	r0, r0, #7
 80056d4:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80056d6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80056da:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80056dc:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d01d      	beq.n	800571e <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 80056e2:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d01c      	beq.n	8005724 <HAL_PCD_EP_Open+0x82>
 80056ea:	2301      	movs	r3, #1
 80056ec:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	f002 f87e 	bl	80077f2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056f6:	2000      	movs	r0, #0
 80056f8:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80056fc:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056fe:	f001 0c07 	and.w	ip, r1, #7
 8005702:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8005706:	00c9      	lsls	r1, r1, #3
 8005708:	3110      	adds	r1, #16
 800570a:	4421      	add	r1, r4
    ep->is_in = 1U;
 800570c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005710:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8005714:	f04f 0e01 	mov.w	lr, #1
 8005718:	f88c e011 	strb.w	lr, [ip, #17]
 800571c:	e7d8      	b.n	80056d0 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	710b      	strb	r3, [r1, #4]
 8005722:	e7de      	b.n	80056e2 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8005724:	2002      	movs	r0, #2
 8005726:	e7e9      	b.n	80056fc <HAL_PCD_EP_Open+0x5a>

08005728 <HAL_PCD_EP_Close>:
{
 8005728:	b510      	push	{r4, lr}
 800572a:	4604      	mov	r4, r0
 800572c:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800572e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005732:	d11f      	bne.n	8005774 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005734:	f001 0007 	and.w	r0, r1, #7
 8005738:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005742:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8005744:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005748:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800574c:	2300      	movs	r3, #0
 800574e:	f880 3151 	strb.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8005752:	f002 0207 	and.w	r2, r2, #7
 8005756:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005758:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800575c:	2b01      	cmp	r3, #1
 800575e:	d017      	beq.n	8005790 <HAL_PCD_EP_Close+0x68>
 8005760:	2301      	movs	r3, #1
 8005762:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	f002 fad0 	bl	8007d0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800576c:	2000      	movs	r0, #0
 800576e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8005772:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005774:	f001 0007 	and.w	r0, r1, #7
 8005778:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	3310      	adds	r3, #16
 8005780:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8005782:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005786:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800578a:	2301      	movs	r3, #1
 800578c:	7443      	strb	r3, [r0, #17]
 800578e:	e7e0      	b.n	8005752 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8005790:	2002      	movs	r0, #2
 8005792:	e7ee      	b.n	8005772 <HAL_PCD_EP_Close+0x4a>

08005794 <HAL_PCD_EP_Receive>:
{
 8005794:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005796:	f001 0c07 	and.w	ip, r1, #7
 800579a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800579e:	00c9      	lsls	r1, r1, #3
 80057a0:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
  ep->xfer_buff = pBuf;
 80057a4:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80057a8:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80057ac:	f8ce 2164 	str.w	r2, [lr, #356]	@ 0x164
  ep->xfer_len = len;
 80057b0:	f8ce 3168 	str.w	r3, [lr, #360]	@ 0x168
  ep->xfer_count = 0U;
 80057b4:	2400      	movs	r4, #0
 80057b6:	f8ce 416c 	str.w	r4, [lr, #364]	@ 0x16c
  ep->is_in = 0U;
 80057ba:	f88e 4151 	strb.w	r4, [lr, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80057be:	f88e c150 	strb.w	ip, [lr, #336]	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057c2:	4401      	add	r1, r0
 80057c4:	6800      	ldr	r0, [r0, #0]
 80057c6:	f002 fc30 	bl	800802a <USB_EPStartXfer>
}
 80057ca:	4620      	mov	r0, r4
 80057cc:	bd10      	pop	{r4, pc}

080057ce <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057ce:	f001 0107 	and.w	r1, r1, #7
 80057d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80057d6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 80057da:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 80057de:	4770      	bx	lr

080057e0 <HAL_PCD_EP_Transmit>:
{
 80057e0:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057e2:	f001 0c07 	and.w	ip, r1, #7
 80057e6:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80057ea:	00c9      	lsls	r1, r1, #3
 80057ec:	3110      	adds	r1, #16
  ep->xfer_buff = pBuf;
 80057ee:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80057f2:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80057f6:	f8ce 2024 	str.w	r2, [lr, #36]	@ 0x24
  ep->xfer_len = len;
 80057fa:	f10c 0201 	add.w	r2, ip, #1
 80057fe:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8005802:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
  ep->xfer_fill_db = 1U;
 8005806:	2501      	movs	r5, #1
 8005808:	f88e 5034 	strb.w	r5, [lr, #52]	@ 0x34
  ep->xfer_len_db = len;
 800580c:	f8ce 3030 	str.w	r3, [lr, #48]	@ 0x30
  ep->xfer_count = 0U;
 8005810:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 8005814:	2400      	movs	r4, #0
 8005816:	6054      	str	r4, [r2, #4]
  ep->is_in = 1U;
 8005818:	f88e 5011 	strb.w	r5, [lr, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 800581c:	f88e c010 	strb.w	ip, [lr, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005820:	4401      	add	r1, r0
 8005822:	6800      	ldr	r0, [r0, #0]
 8005824:	f002 fc01 	bl	800802a <USB_EPStartXfer>
}
 8005828:	4620      	mov	r0, r4
 800582a:	bd38      	pop	{r3, r4, r5, pc}

0800582c <HAL_PCD_EP_SetStall>:
{
 800582c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800582e:	f001 0507 	and.w	r5, r1, #7
 8005832:	7902      	ldrb	r2, [r0, #4]
 8005834:	42aa      	cmp	r2, r5
 8005836:	d335      	bcc.n	80058a4 <HAL_PCD_EP_SetStall+0x78>
 8005838:	4604      	mov	r4, r0
 800583a:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800583c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005840:	d11e      	bne.n	8005880 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8005842:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005846:	00c9      	lsls	r1, r1, #3
 8005848:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800584c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800584e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005852:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
  ep->is_stall = 1U;
 800585c:	2301      	movs	r3, #1
 800585e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005860:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8005862:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8005866:	2b01      	cmp	r3, #1
 8005868:	d01e      	beq.n	80058a8 <HAL_PCD_EP_SetStall+0x7c>
 800586a:	2301      	movs	r3, #1
 800586c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	f002 fb36 	bl	8007ee2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005876:	b17d      	cbz	r5, 8005898 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8005878:	2000      	movs	r0, #0
 800587a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800587e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005880:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8005884:	00c9      	lsls	r1, r1, #3
 8005886:	3110      	adds	r1, #16
 8005888:	4401      	add	r1, r0
    ep->is_in = 1U;
 800588a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800588e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005892:	2201      	movs	r2, #1
 8005894:	745a      	strb	r2, [r3, #17]
 8005896:	e7e1      	b.n	800585c <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005898:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	f002 fbb0 	bl	8008002 <USB_EP0_OutStart>
 80058a2:	e7e9      	b.n	8005878 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80058a4:	2001      	movs	r0, #1
 80058a6:	e7ea      	b.n	800587e <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80058a8:	2002      	movs	r0, #2
 80058aa:	e7e8      	b.n	800587e <HAL_PCD_EP_SetStall+0x52>

080058ac <HAL_PCD_EP_ClrStall>:
{
 80058ac:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058ae:	7901      	ldrb	r1, [r0, #4]
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	4291      	cmp	r1, r2
 80058b6:	d334      	bcc.n	8005922 <HAL_PCD_EP_ClrStall+0x76>
{
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80058bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058c0:	d121      	bne.n	8005906 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058c2:	f003 0207 	and.w	r2, r3, #7
 80058c6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80058ca:	00c9      	lsls	r1, r1, #3
 80058cc:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 80058d0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80058d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80058d6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80058da:	2000      	movs	r0, #0
 80058dc:	f882 0151 	strb.w	r0, [r2, #337]	@ 0x151
  ep->is_stall = 0U;
 80058e0:	2200      	movs	r2, #0
 80058e2:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80058ea:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d019      	beq.n	8005926 <HAL_PCD_EP_ClrStall+0x7a>
 80058f2:	2301      	movs	r3, #1
 80058f4:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058f8:	6820      	ldr	r0, [r4, #0]
 80058fa:	f002 fb17 	bl	8007f2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058fe:	2000      	movs	r0, #0
 8005900:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8005904:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005906:	f003 0207 	and.w	r2, r3, #7
 800590a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800590e:	00c9      	lsls	r1, r1, #3
 8005910:	3110      	adds	r1, #16
 8005912:	4401      	add	r1, r0
    ep->is_in = 1U;
 8005914:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005918:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800591c:	2001      	movs	r0, #1
 800591e:	7450      	strb	r0, [r2, #17]
 8005920:	e7de      	b.n	80058e0 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8005922:	2001      	movs	r0, #1
}
 8005924:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005926:	2002      	movs	r0, #2
 8005928:	e7ec      	b.n	8005904 <HAL_PCD_EP_ClrStall+0x58>

0800592a <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800592a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800592e:	d00b      	beq.n	8005948 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005930:	f001 0107 	and.w	r1, r1, #7
 8005934:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005938:	00c9      	lsls	r1, r1, #3
 800593a:	3110      	adds	r1, #16
 800593c:	4408      	add	r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800593e:	b952      	cbnz	r2, 8005956 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005940:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005942:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005944:	2000      	movs	r0, #0
 8005946:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8005948:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800594c:	00c9      	lsls	r1, r1, #3
 800594e:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8005952:	4408      	add	r0, r1
 8005954:	e7f3      	b.n	800593e <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8005956:	2201      	movs	r2, #1
 8005958:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800595a:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800595c:	0c1b      	lsrs	r3, r3, #16
 800595e:	8143      	strh	r3, [r0, #10]
 8005960:	e7f0      	b.n	8005944 <HAL_PCDEx_PMAConfig+0x1a>

08005962 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005962:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 8005964:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8005966:	2101      	movs	r1, #1
 8005968:	f8c0 12d4 	str.w	r1, [r0, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 800596c:	2000      	movs	r0, #0
 800596e:	f883 02c8 	strb.w	r0, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005972:	f8b2 3054 	ldrh.w	r3, [r2, #84]	@ 0x54
 8005976:	b29b      	uxth	r3, r3
 8005978:	430b      	orrs	r3, r1
 800597a:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800597e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	@ 0x54
 8005982:	b29b      	uxth	r3, r3
 8005984:	f043 0302 	orr.w	r3, r3, #2
 8005988:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 800598c:	4770      	bx	lr
	...

08005990 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005990:	4a02      	ldr	r2, [pc, #8]	@ (800599c <HAL_PWR_EnableBkUpAccess+0xc>)
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005998:	6013      	str	r3, [r2, #0]
}
 800599a:	4770      	bx	lr
 800599c:	40007000 	.word	0x40007000

080059a0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80059a0:	4b02      	ldr	r3, [pc, #8]	@ (80059ac <HAL_PWREx_GetVoltageRange+0xc>)
 80059a2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80059a4:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40007000 	.word	0x40007000

080059b0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059b0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80059b4:	d00f      	beq.n	80059d6 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80059b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a34 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c2:	d034      	beq.n	8005a2e <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a34 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059d2:	2000      	movs	r0, #0
 80059d4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80059d6:	4b17      	ldr	r3, [pc, #92]	@ (8005a34 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e2:	d020      	beq.n	8005a26 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059e4:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059f0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059f2:	4b11      	ldr	r3, [pc, #68]	@ (8005a38 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2232      	movs	r2, #50	@ 0x32
 80059f8:	fb02 f303 	mul.w	r3, r2, r3
 80059fc:	4a0f      	ldr	r2, [pc, #60]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	0c9b      	lsrs	r3, r3, #18
 8005a04:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a06:	e000      	b.n	8005a0a <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8005a08:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a34 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8005a0c:	6952      	ldr	r2, [r2, #20]
 8005a0e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8005a12:	d001      	beq.n	8005a18 <HAL_PWREx_ControlVoltageScaling+0x68>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f7      	bne.n	8005a08 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a18:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005a20:	d103      	bne.n	8005a2a <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8005a22:	2000      	movs	r0, #0
 8005a24:	4770      	bx	lr
 8005a26:	2000      	movs	r0, #0
 8005a28:	4770      	bx	lr
        return HAL_TIMEOUT;
 8005a2a:	2003      	movs	r0, #3
 8005a2c:	4770      	bx	lr
  return HAL_OK;
 8005a2e:	2000      	movs	r0, #0
}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40007000 	.word	0x40007000
 8005a38:	200000c4 	.word	0x200000c4
 8005a3c:	431bde83 	.word	0x431bde83

08005a40 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005a40:	4a02      	ldr	r2, [pc, #8]	@ (8005a4c <HAL_PWREx_EnableVddUSB+0xc>)
 8005a42:	6853      	ldr	r3, [r2, #4]
 8005a44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a48:	6053      	str	r3, [r2, #4]
}
 8005a4a:	4770      	bx	lr
 8005a4c:	40007000 	.word	0x40007000

08005a50 <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8005a50:	4a0c      	ldr	r2, [pc, #48]	@ (8005a84 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	f023 0307 	bic.w	r3, r3, #7
 8005a58:	f043 0302 	orr.w	r3, r3, #2
 8005a5c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a88 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005a60:	6913      	ldr	r3, [r2, #16]
 8005a62:	f043 0304 	orr.w	r3, r3, #4
 8005a66:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005a68:	2801      	cmp	r0, #1
 8005a6a:	d008      	beq.n	8005a7e <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a6c:	bf40      	sev
    __WFE();
 8005a6e:	bf20      	wfe
    __WFE();
 8005a70:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a72:	4a05      	ldr	r2, [pc, #20]	@ (8005a88 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005a74:	6913      	ldr	r3, [r2, #16]
 8005a76:	f023 0304 	bic.w	r3, r3, #4
 8005a7a:	6113      	str	r3, [r2, #16]
}
 8005a7c:	4770      	bx	lr
    __WFI();
 8005a7e:	bf30      	wfi
 8005a80:	e7f7      	b.n	8005a72 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005a82:	bf00      	nop
 8005a84:	40007000 	.word	0x40007000
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a8c:	b530      	push	{r4, r5, lr}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a92:	4b20      	ldr	r3, [pc, #128]	@ (8005b14 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005a9a:	d00b      	beq.n	8005ab4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a9c:	f7ff ff80 	bl	80059a0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aa0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005aa4:	d017      	beq.n	8005ad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005aa6:	2c80      	cmp	r4, #128	@ 0x80
 8005aa8:	d81f      	bhi.n	8005aea <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005aaa:	d02d      	beq.n	8005b08 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005aac:	2c70      	cmp	r4, #112	@ 0x70
 8005aae:	d02d      	beq.n	8005b0c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	e01b      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ab4:	4d17      	ldr	r5, [pc, #92]	@ (8005b14 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8005ab6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8005ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005abc:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005abe:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8005ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005ac8:	f7ff ff6a 	bl	80059a0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005acc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8005ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ad2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005ad4:	e7e4      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8005ad6:	2c80      	cmp	r4, #128	@ 0x80
 8005ad8:	d903      	bls.n	8005ae2 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8005ada:	2ca0      	cmp	r4, #160	@ 0xa0
 8005adc:	d903      	bls.n	8005ae6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ade:	2102      	movs	r1, #2
 8005ae0:	e004      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	e002      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	e000      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8005aea:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005aec:	4a0a      	ldr	r2, [pc, #40]	@ (8005b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	f023 0307 	bic.w	r3, r3, #7
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	428b      	cmp	r3, r1
 8005b00:	d106      	bne.n	8005b10 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005b02:	2000      	movs	r0, #0
}
 8005b04:	b003      	add	sp, #12
 8005b06:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b08:	2102      	movs	r1, #2
 8005b0a:	e7ef      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	e7ed      	b.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8005b10:	2001      	movs	r0, #1
 8005b12:	e7f7      	b.n	8005b04 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8005b14:	40021000 	.word	0x40021000
 8005b18:	40022000 	.word	0x40022000

08005b1c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b1c:	4a25      	ldr	r2, [pc, #148]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b1e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b20:	68d2      	ldr	r2, [r2, #12]
 8005b22:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b26:	f013 030c 	ands.w	r3, r3, #12
 8005b2a:	d009      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0x24>
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d005      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d03b      	beq.n	8005bac <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d03b      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b38:	2000      	movs	r0, #0
 8005b3a:	e00f      	b.n	8005b5c <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b3c:	2a01      	cmp	r2, #1
 8005b3e:	d1f7      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b40:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	f012 0f08 	tst.w	r2, #8
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b4c:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8005b50:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8005b54:	4918      	ldr	r1, [pc, #96]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b56:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b5a:	b113      	cbz	r3, 8005b62 <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	d006      	beq.n	8005b6e <HAL_RCC_GetSysClockFreq+0x52>
 8005b60:	2000      	movs	r0, #0
}
 8005b62:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b64:	4a13      	ldr	r2, [pc, #76]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005b6c:	e7f2      	b.n	8005b54 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b6e:	4b11      	ldr	r3, [pc, #68]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d016      	beq.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x8c>
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d100      	bne.n	8005b80 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 8005b7e:	480f      	ldr	r0, [pc, #60]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b80:	490c      	ldr	r1, [pc, #48]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b82:	68ca      	ldr	r2, [r1, #12]
 8005b84:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005b88:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b8a:	68cb      	ldr	r3, [r1, #12]
 8005b8c:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8005b90:	fb00 f303 	mul.w	r3, r0, r3
 8005b94:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b98:	68c8      	ldr	r0, [r1, #12]
 8005b9a:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8005ba2:	fbb3 f0f0 	udiv	r0, r3, r0
 8005ba6:	4770      	bx	lr
    switch (pllsource)
 8005ba8:	4805      	ldr	r0, [pc, #20]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005baa:	e7e9      	b.n	8005b80 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 8005bac:	4804      	ldr	r0, [pc, #16]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bae:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005bb0:	4802      	ldr	r0, [pc, #8]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005bb2:	4770      	bx	lr
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	0800d408 	.word	0x0800d408
 8005bbc:	007a1200 	.word	0x007a1200
 8005bc0:	00f42400 	.word	0x00f42400

08005bc4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	f000 8353 	beq.w	8006270 <HAL_RCC_OscConfig+0x6ac>
{
 8005bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd0:	4b96      	ldr	r3, [pc, #600]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005bd2:	689d      	ldr	r5, [r3, #8]
 8005bd4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bd8:	68de      	ldr	r6, [r3, #12]
 8005bda:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005bde:	6803      	ldr	r3, [r0, #0]
 8005be0:	f013 0f10 	tst.w	r3, #16
 8005be4:	d05a      	beq.n	8005c9c <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005be6:	b1e5      	cbz	r5, 8005c22 <HAL_RCC_OscConfig+0x5e>
 8005be8:	2d0c      	cmp	r5, #12
 8005bea:	d018      	beq.n	8005c1e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005bec:	69e3      	ldr	r3, [r4, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 80bb 	beq.w	8005d6a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8005bf4:	4a8d      	ldr	r2, [pc, #564]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005bfe:	f7fd f955 	bl	8002eac <HAL_GetTick>
 8005c02:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c04:	4b89      	ldr	r3, [pc, #548]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f013 0f02 	tst.w	r3, #2
 8005c0c:	f040 809a 	bne.w	8005d44 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c10:	f7fd f94c 	bl	8002eac <HAL_GetTick>
 8005c14:	1bc0      	subs	r0, r0, r7
 8005c16:	2802      	cmp	r0, #2
 8005c18:	d9f4      	bls.n	8005c04 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8005c1a:	2003      	movs	r0, #3
 8005c1c:	e335      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c1e:	2e01      	cmp	r6, #1
 8005c20:	d1e4      	bne.n	8005bec <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c22:	4b82      	ldr	r3, [pc, #520]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f013 0f02 	tst.w	r3, #2
 8005c2a:	d003      	beq.n	8005c34 <HAL_RCC_OscConfig+0x70>
 8005c2c:	69e3      	ldr	r3, [r4, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8320 	beq.w	8006274 <HAL_RCC_OscConfig+0x6b0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c34:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005c36:	4b7d      	ldr	r3, [pc, #500]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f013 0f08 	tst.w	r3, #8
 8005c3e:	d05b      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x134>
 8005c40:	4b7a      	ldr	r3, [pc, #488]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c48:	4298      	cmp	r0, r3
 8005c4a:	d85c      	bhi.n	8005d06 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c4c:	4b77      	ldr	r3, [pc, #476]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	f042 0208 	orr.w	r2, r2, #8
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005c5c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005c68:	6a21      	ldr	r1, [r4, #32]
 8005c6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c6e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	d060      	beq.n	8005d36 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c74:	f7ff ff52 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8005c78:	4b6c      	ldr	r3, [pc, #432]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c80:	4a6b      	ldr	r2, [pc, #428]	@ (8005e30 <HAL_RCC_OscConfig+0x26c>)
 8005c82:	5cd3      	ldrb	r3, [r2, r3]
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	40d8      	lsrs	r0, r3
 8005c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005e34 <HAL_RCC_OscConfig+0x270>)
 8005c8c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005e38 <HAL_RCC_OscConfig+0x274>)
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	f7fd f8c1 	bl	8002e18 <HAL_InitTick>
        if(status != HAL_OK)
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f040 82f7 	bne.w	800628a <HAL_RCC_OscConfig+0x6c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	f013 0f01 	tst.w	r3, #1
 8005ca2:	f000 8081 	beq.w	8005da8 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ca6:	2d08      	cmp	r5, #8
 8005ca8:	d075      	beq.n	8005d96 <HAL_RCC_OscConfig+0x1d2>
 8005caa:	2d0c      	cmp	r5, #12
 8005cac:	d071      	beq.n	8005d92 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb4:	f000 8098 	beq.w	8005de8 <HAL_RCC_OscConfig+0x224>
 8005cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cbc:	f000 809a 	beq.w	8005df4 <HAL_RCC_OscConfig+0x230>
 8005cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005cd0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cd2:	6863      	ldr	r3, [r4, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 809a 	beq.w	8005e0e <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8005cda:	f7fd f8e7 	bl	8002eac <HAL_GetTick>
 8005cde:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ce0:	4b52      	ldr	r3, [pc, #328]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005ce8:	d15e      	bne.n	8005da8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cea:	f7fd f8df 	bl	8002eac <HAL_GetTick>
 8005cee:	1bc0      	subs	r0, r0, r7
 8005cf0:	2864      	cmp	r0, #100	@ 0x64
 8005cf2:	d9f5      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8005cf4:	2003      	movs	r0, #3
 8005cf6:	e2c8      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d04:	e7a0      	b.n	8005c48 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d06:	f7ff fec1 	bl	8005a8c <RCC_SetFlashLatencyFromMSIRange>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f040 82b4 	bne.w	8006278 <HAL_RCC_OscConfig+0x6b4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d10:	4b46      	ldr	r3, [pc, #280]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	f042 0208 	orr.w	r2, r2, #8
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005d20:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005d22:	430a      	orrs	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005d2c:	6a21      	ldr	r1, [r4, #32]
 8005d2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	e79e      	b.n	8005c74 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d36:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005d38:	f7ff fea8 	bl	8005a8c <RCC_SetFlashLatencyFromMSIRange>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d099      	beq.n	8005c74 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8005d40:	2001      	movs	r0, #1
 8005d42:	e2a2      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d44:	4b39      	ldr	r3, [pc, #228]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	f042 0208 	orr.w	r2, r2, #8
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005d54:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005d56:	430a      	orrs	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005d60:	6a21      	ldr	r1, [r4, #32]
 8005d62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d66:	605a      	str	r2, [r3, #4]
 8005d68:	e798      	b.n	8005c9c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8005d6a:	4a30      	ldr	r2, [pc, #192]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005d6c:	6813      	ldr	r3, [r2, #0]
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005d74:	f7fd f89a 	bl	8002eac <HAL_GetTick>
 8005d78:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f013 0f02 	tst.w	r3, #2
 8005d82:	d08b      	beq.n	8005c9c <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d84:	f7fd f892 	bl	8002eac <HAL_GetTick>
 8005d88:	1bc0      	subs	r0, r0, r7
 8005d8a:	2802      	cmp	r0, #2
 8005d8c:	d9f5      	bls.n	8005d7a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8005d8e:	2003      	movs	r0, #3
 8005d90:	e27b      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d92:	2e03      	cmp	r6, #3
 8005d94:	d18b      	bne.n	8005cae <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d96:	4b25      	ldr	r3, [pc, #148]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCC_OscConfig+0x1e4>
 8005da0:	6863      	ldr	r3, [r4, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 826a 	beq.w	800627c <HAL_RCC_OscConfig+0x6b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	f013 0f02 	tst.w	r3, #2
 8005dae:	d058      	beq.n	8005e62 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005db0:	2d04      	cmp	r5, #4
 8005db2:	d045      	beq.n	8005e40 <HAL_RCC_OscConfig+0x27c>
 8005db4:	2d0c      	cmp	r5, #12
 8005db6:	d041      	beq.n	8005e3c <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005db8:	68e3      	ldr	r3, [r4, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8091 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_HSI_ENABLE();
 8005dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dc8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005dca:	f7fd f86f 	bl	8002eac <HAL_GetTick>
 8005dce:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dd0:	4b16      	ldr	r3, [pc, #88]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005dd8:	d17a      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x30c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dda:	f7fd f867 	bl	8002eac <HAL_GetTick>
 8005dde:	1b80      	subs	r0, r0, r6
 8005de0:	2802      	cmp	r0, #2
 8005de2:	d9f5      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8005de4:	2003      	movs	r0, #3
 8005de6:	e250      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de8:	4a10      	ldr	r2, [pc, #64]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005dea:	6813      	ldr	r3, [r2, #0]
 8005dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e76e      	b.n	8005cd2 <HAL_RCC_OscConfig+0x10e>
 8005df4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005df8:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e761      	b.n	8005cd2 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8005e0e:	f7fd f84d 	bl	8002eac <HAL_GetTick>
 8005e12:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e14:	4b05      	ldr	r3, [pc, #20]	@ (8005e2c <HAL_RCC_OscConfig+0x268>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005e1c:	d0c4      	beq.n	8005da8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e1e:	f7fd f845 	bl	8002eac <HAL_GetTick>
 8005e22:	1bc0      	subs	r0, r0, r7
 8005e24:	2864      	cmp	r0, #100	@ 0x64
 8005e26:	d9f5      	bls.n	8005e14 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8005e28:	2003      	movs	r0, #3
 8005e2a:	e22e      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	0800d440 	.word	0x0800d440
 8005e34:	200000c4 	.word	0x200000c4
 8005e38:	200000bc 	.word	0x200000bc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e3c:	2e02      	cmp	r6, #2
 8005e3e:	d1bb      	bne.n	8005db8 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e40:	4baf      	ldr	r3, [pc, #700]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005e48:	d003      	beq.n	8005e52 <HAL_RCC_OscConfig+0x28e>
 8005e4a:	68e3      	ldr	r3, [r4, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8217 	beq.w	8006280 <HAL_RCC_OscConfig+0x6bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e52:	4aab      	ldr	r2, [pc, #684]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005e54:	6853      	ldr	r3, [r2, #4]
 8005e56:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005e5a:	6921      	ldr	r1, [r4, #16]
 8005e5c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005e60:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f013 0f08 	tst.w	r3, #8
 8005e68:	d07d      	beq.n	8005f66 <HAL_RCC_OscConfig+0x3a2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e6a:	6963      	ldr	r3, [r4, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d063      	beq.n	8005f38 <HAL_RCC_OscConfig+0x374>
      uint32_t csr_temp = RCC->CSR;
 8005e70:	4ba3      	ldr	r3, [pc, #652]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005e76:	69a1      	ldr	r1, [r4, #24]
 8005e78:	f003 0210 	and.w	r2, r3, #16
 8005e7c:	4291      	cmp	r1, r2
 8005e7e:	d010      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x2de>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005e80:	f003 0203 	and.w	r2, r3, #3
 8005e84:	2a02      	cmp	r2, #2
 8005e86:	f000 81fd 	beq.w	8006284 <HAL_RCC_OscConfig+0x6c0>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005e8a:	f013 0f01 	tst.w	r3, #1
 8005e8e:	d13c      	bne.n	8005f0a <HAL_RCC_OscConfig+0x346>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005e90:	4a9b      	ldr	r2, [pc, #620]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005e92:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005e96:	f023 0310 	bic.w	r3, r3, #16
 8005e9a:	69a1      	ldr	r1, [r4, #24]
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      __HAL_RCC_LSI_ENABLE();
 8005ea2:	4a97      	ldr	r2, [pc, #604]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005ea4:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005eb0:	f7fc fffc 	bl	8002eac <HAL_GetTick>
 8005eb4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eb6:	4b92      	ldr	r3, [pc, #584]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ebc:	f013 0f02 	tst.w	r3, #2
 8005ec0:	d151      	bne.n	8005f66 <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ec2:	f7fc fff3 	bl	8002eac <HAL_GetTick>
 8005ec6:	1b80      	subs	r0, r0, r6
 8005ec8:	2811      	cmp	r0, #17
 8005eca:	d9f4      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x2f2>
          return HAL_TIMEOUT;
 8005ecc:	2003      	movs	r0, #3
 8005ece:	e1dc      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed0:	4a8b      	ldr	r2, [pc, #556]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005ed2:	6853      	ldr	r3, [r2, #4]
 8005ed4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005ed8:	6921      	ldr	r1, [r4, #16]
 8005eda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005ede:	6053      	str	r3, [r2, #4]
 8005ee0:	e7bf      	b.n	8005e62 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8005ee2:	4a87      	ldr	r2, [pc, #540]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005ee4:	6813      	ldr	r3, [r2, #0]
 8005ee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005eec:	f7fc ffde 	bl	8002eac <HAL_GetTick>
 8005ef0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ef2:	4b83      	ldr	r3, [pc, #524]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005efa:	d0b2      	beq.n	8005e62 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005efc:	f7fc ffd6 	bl	8002eac <HAL_GetTick>
 8005f00:	1b80      	subs	r0, r0, r6
 8005f02:	2802      	cmp	r0, #2
 8005f04:	d9f5      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8005f06:	2003      	movs	r0, #3
 8005f08:	e1bf      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
          __HAL_RCC_LSI_DISABLE();
 8005f0a:	4a7d      	ldr	r2, [pc, #500]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005f0c:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8005f18:	f7fc ffc8 	bl	8002eac <HAL_GetTick>
 8005f1c:	4606      	mov	r6, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f1e:	4b78      	ldr	r3, [pc, #480]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f24:	f013 0f02 	tst.w	r3, #2
 8005f28:	d0b2      	beq.n	8005e90 <HAL_RCC_OscConfig+0x2cc>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2a:	f7fc ffbf 	bl	8002eac <HAL_GetTick>
 8005f2e:	1b80      	subs	r0, r0, r6
 8005f30:	2811      	cmp	r0, #17
 8005f32:	d9f4      	bls.n	8005f1e <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8005f34:	2003      	movs	r0, #3
 8005f36:	e1a8      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_LSI_DISABLE();
 8005f38:	4a71      	ldr	r2, [pc, #452]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005f3a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005f46:	f7fc ffb1 	bl	8002eac <HAL_GetTick>
 8005f4a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f52:	f013 0f02 	tst.w	r3, #2
 8005f56:	d006      	beq.n	8005f66 <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f58:	f7fc ffa8 	bl	8002eac <HAL_GetTick>
 8005f5c:	1b80      	subs	r0, r0, r6
 8005f5e:	2811      	cmp	r0, #17
 8005f60:	d9f4      	bls.n	8005f4c <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 8005f62:	2003      	movs	r0, #3
 8005f64:	e191      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	f013 0f04 	tst.w	r3, #4
 8005f6c:	f000 808d 	beq.w	800608a <HAL_RCC_OscConfig+0x4c6>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f70:	4b63      	ldr	r3, [pc, #396]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f74:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005f78:	d12e      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x414>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7a:	4b61      	ldr	r3, [pc, #388]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005f7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f7e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005f82:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005f8e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f90:	4b5c      	ldr	r3, [pc, #368]	@ (8006104 <HAL_RCC_OscConfig+0x540>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005f98:	d020      	beq.n	8005fdc <HAL_RCC_OscConfig+0x418>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	f013 0f01 	tst.w	r3, #1
 8005fa0:	d038      	beq.n	8006014 <HAL_RCC_OscConfig+0x450>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005fa2:	4957      	ldr	r1, [pc, #348]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8005fa4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005fb6:	68a3      	ldr	r3, [r4, #8]
 8005fb8:	f013 0f04 	tst.w	r3, #4
 8005fbc:	d022      	beq.n	8006004 <HAL_RCC_OscConfig+0x440>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005fbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005fc2:	f042 0204 	orr.w	r2, r2, #4
 8005fc6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fca:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
 8005fd6:	e02a      	b.n	800602e <HAL_RCC_OscConfig+0x46a>
    FlagStatus       pwrclkchanged = RESET;
 8005fd8:	2600      	movs	r6, #0
 8005fda:	e7d9      	b.n	8005f90 <HAL_RCC_OscConfig+0x3cc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fdc:	4a49      	ldr	r2, [pc, #292]	@ (8006104 <HAL_RCC_OscConfig+0x540>)
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005fe6:	f7fc ff61 	bl	8002eac <HAL_GetTick>
 8005fea:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fec:	4b45      	ldr	r3, [pc, #276]	@ (8006104 <HAL_RCC_OscConfig+0x540>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005ff4:	d1d1      	bne.n	8005f9a <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff6:	f7fc ff59 	bl	8002eac <HAL_GetTick>
 8005ffa:	1bc0      	subs	r0, r0, r7
 8005ffc:	2802      	cmp	r0, #2
 8005ffe:	d9f5      	bls.n	8005fec <HAL_RCC_OscConfig+0x428>
          return HAL_TIMEOUT;
 8006000:	2003      	movs	r0, #3
 8006002:	e142      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006004:	4a3e      	ldr	r2, [pc, #248]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8006006:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006012:	e00c      	b.n	800602e <HAL_RCC_OscConfig+0x46a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006014:	4b3a      	ldr	r3, [pc, #232]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8006016:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006022:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006026:	f022 0204 	bic.w	r2, r2, #4
 800602a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	b18b      	cbz	r3, 8006056 <HAL_RCC_OscConfig+0x492>
      tickstart = HAL_GetTick();
 8006032:	f7fc ff3b 	bl	8002eac <HAL_GetTick>
 8006036:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006038:	4b31      	ldr	r3, [pc, #196]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603e:	f013 0f02 	tst.w	r3, #2
 8006042:	d121      	bne.n	8006088 <HAL_RCC_OscConfig+0x4c4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006044:	f7fc ff32 	bl	8002eac <HAL_GetTick>
 8006048:	1bc0      	subs	r0, r0, r7
 800604a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800604e:	4298      	cmp	r0, r3
 8006050:	d9f2      	bls.n	8006038 <HAL_RCC_OscConfig+0x474>
          return HAL_TIMEOUT;
 8006052:	2003      	movs	r0, #3
 8006054:	e119      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
      tickstart = HAL_GetTick();
 8006056:	f7fc ff29 	bl	8002eac <HAL_GetTick>
 800605a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800605c:	4b28      	ldr	r3, [pc, #160]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006062:	f013 0f02 	tst.w	r3, #2
 8006066:	d008      	beq.n	800607a <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fc ff20 	bl	8002eac <HAL_GetTick>
 800606c:	1bc0      	subs	r0, r0, r7
 800606e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006072:	4298      	cmp	r0, r3
 8006074:	d9f2      	bls.n	800605c <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8006076:	2003      	movs	r0, #3
 8006078:	e107      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800607a:	4a21      	ldr	r2, [pc, #132]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 800607c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006080:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if(pwrclkchanged == SET)
 8006088:	b9e6      	cbnz	r6, 80060c4 <HAL_RCC_OscConfig+0x500>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f013 0f20 	tst.w	r3, #32
 8006090:	d03a      	beq.n	8006108 <HAL_RCC_OscConfig+0x544>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006092:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006094:	b1e3      	cbz	r3, 80060d0 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI48_ENABLE();
 8006096:	4a1a      	ldr	r2, [pc, #104]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 8006098:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80060a4:	f7fc ff02 	bl	8002eac <HAL_GetTick>
 80060a8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060aa:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 80060ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060b0:	f013 0f02 	tst.w	r3, #2
 80060b4:	d128      	bne.n	8006108 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060b6:	f7fc fef9 	bl	8002eac <HAL_GetTick>
 80060ba:	1b80      	subs	r0, r0, r6
 80060bc:	2802      	cmp	r0, #2
 80060be:	d9f4      	bls.n	80060aa <HAL_RCC_OscConfig+0x4e6>
          return HAL_TIMEOUT;
 80060c0:	2003      	movs	r0, #3
 80060c2:	e0e2      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c4:	4a0e      	ldr	r2, [pc, #56]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 80060c6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80060c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ce:	e7dc      	b.n	800608a <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSI48_DISABLE();
 80060d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 80060d2:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 80060d6:	f023 0301 	bic.w	r3, r3, #1
 80060da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80060de:	f7fc fee5 	bl	8002eac <HAL_GetTick>
 80060e2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060e4:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <HAL_RCC_OscConfig+0x53c>)
 80060e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ea:	f013 0f02 	tst.w	r3, #2
 80060ee:	d00b      	beq.n	8006108 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060f0:	f7fc fedc 	bl	8002eac <HAL_GetTick>
 80060f4:	1b80      	subs	r0, r0, r6
 80060f6:	2802      	cmp	r0, #2
 80060f8:	d9f4      	bls.n	80060e4 <HAL_RCC_OscConfig+0x520>
          return HAL_TIMEOUT;
 80060fa:	2003      	movs	r0, #3
 80060fc:	e0c5      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000
 8006104:	40007000 	.word	0x40007000
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006108:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 80bc 	beq.w	8006288 <HAL_RCC_OscConfig+0x6c4>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006110:	2b02      	cmp	r3, #2
 8006112:	d017      	beq.n	8006144 <HAL_RCC_OscConfig+0x580>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006114:	2d0c      	cmp	r5, #12
 8006116:	f000 80bc 	beq.w	8006292 <HAL_RCC_OscConfig+0x6ce>
        __HAL_RCC_PLL_DISABLE();
 800611a:	4a5f      	ldr	r2, [pc, #380]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 800611c:	6813      	ldr	r3, [r2, #0]
 800611e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006122:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006124:	f7fc fec2 	bl	8002eac <HAL_GetTick>
 8006128:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800612a:	4b5b      	ldr	r3, [pc, #364]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006132:	f000 8094 	beq.w	800625e <HAL_RCC_OscConfig+0x69a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006136:	f7fc feb9 	bl	8002eac <HAL_GetTick>
 800613a:	1b00      	subs	r0, r0, r4
 800613c:	2802      	cmp	r0, #2
 800613e:	d9f4      	bls.n	800612a <HAL_RCC_OscConfig+0x566>
            return HAL_TIMEOUT;
 8006140:	2003      	movs	r0, #3
 8006142:	e0a2      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
      pll_config = RCC->PLLCFGR;
 8006144:	4b54      	ldr	r3, [pc, #336]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 8006146:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006148:	f003 0103 	and.w	r1, r3, #3
 800614c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800614e:	4291      	cmp	r1, r2
 8006150:	d016      	beq.n	8006180 <HAL_RCC_OscConfig+0x5bc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006152:	2d0c      	cmp	r5, #12
 8006154:	f000 809b 	beq.w	800628e <HAL_RCC_OscConfig+0x6ca>
            __HAL_RCC_PLL_DISABLE();
 8006158:	4a4f      	ldr	r2, [pc, #316]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 800615a:	6813      	ldr	r3, [r2, #0]
 800615c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006160:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8006162:	f7fc fea3 	bl	8002eac <HAL_GetTick>
 8006166:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006168:	4b4b      	ldr	r3, [pc, #300]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006170:	d02a      	beq.n	80061c8 <HAL_RCC_OscConfig+0x604>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006172:	f7fc fe9b 	bl	8002eac <HAL_GetTick>
 8006176:	1b40      	subs	r0, r0, r5
 8006178:	2802      	cmp	r0, #2
 800617a:	d9f5      	bls.n	8006168 <HAL_RCC_OscConfig+0x5a4>
                return HAL_TIMEOUT;
 800617c:	2003      	movs	r0, #3
 800617e:	e084      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006180:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006186:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006188:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800618c:	d1e1      	bne.n	8006152 <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800618e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006192:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006194:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006198:	d1db      	bne.n	8006152 <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800619a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800619e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80061a0:	0852      	lsrs	r2, r2, #1
 80061a2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061a4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80061a8:	d1d3      	bne.n	8006152 <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061aa:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80061ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80061b0:	0852      	lsrs	r2, r2, #1
 80061b2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061b4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80061b8:	d1cb      	bne.n	8006152 <HAL_RCC_OscConfig+0x58e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ba:	4b37      	ldr	r3, [pc, #220]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80061c2:	d032      	beq.n	800622a <HAL_RCC_OscConfig+0x666>
  return HAL_OK;
 80061c4:	2000      	movs	r0, #0
 80061c6:	e060      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061c8:	4a33      	ldr	r2, [pc, #204]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 80061ca:	68d3      	ldr	r3, [r2, #12]
 80061cc:	4933      	ldr	r1, [pc, #204]	@ (800629c <HAL_RCC_OscConfig+0x6d8>)
 80061ce:	4019      	ands	r1, r3
 80061d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80061d2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80061d4:	3801      	subs	r0, #1
 80061d6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80061da:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80061dc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80061e0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80061e2:	0840      	lsrs	r0, r0, #1
 80061e4:	3801      	subs	r0, #1
 80061e6:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80061ea:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80061ec:	0840      	lsrs	r0, r0, #1
 80061ee:	3801      	subs	r0, #1
 80061f0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80061f4:	4319      	orrs	r1, r3
 80061f6:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80061f8:	6813      	ldr	r3, [r2, #0]
 80061fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061fe:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006200:	68d3      	ldr	r3, [r2, #12]
 8006202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006206:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8006208:	f7fc fe50 	bl	8002eac <HAL_GetTick>
 800620c:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800620e:	4b22      	ldr	r3, [pc, #136]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006216:	d106      	bne.n	8006226 <HAL_RCC_OscConfig+0x662>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006218:	f7fc fe48 	bl	8002eac <HAL_GetTick>
 800621c:	1b00      	subs	r0, r0, r4
 800621e:	2802      	cmp	r0, #2
 8006220:	d9f5      	bls.n	800620e <HAL_RCC_OscConfig+0x64a>
                return HAL_TIMEOUT;
 8006222:	2003      	movs	r0, #3
 8006224:	e031      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8006226:	2000      	movs	r0, #0
 8006228:	e02f      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
          __HAL_RCC_PLL_ENABLE();
 800622a:	4b1b      	ldr	r3, [pc, #108]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006232:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800623a:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800623c:	f7fc fe36 	bl	8002eac <HAL_GetTick>
 8006240:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006242:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800624a:	d106      	bne.n	800625a <HAL_RCC_OscConfig+0x696>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624c:	f7fc fe2e 	bl	8002eac <HAL_GetTick>
 8006250:	1b03      	subs	r3, r0, r4
 8006252:	2b02      	cmp	r3, #2
 8006254:	d9f5      	bls.n	8006242 <HAL_RCC_OscConfig+0x67e>
              return HAL_TIMEOUT;
 8006256:	2003      	movs	r0, #3
 8006258:	e017      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 800625a:	2000      	movs	r0, #0
 800625c:	e015      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800625e:	4a0e      	ldr	r2, [pc, #56]	@ (8006298 <HAL_RCC_OscConfig+0x6d4>)
 8006260:	68d3      	ldr	r3, [r2, #12]
 8006262:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800626c:	2000      	movs	r0, #0
 800626e:	e00c      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
    return HAL_ERROR;
 8006270:	2001      	movs	r0, #1
}
 8006272:	4770      	bx	lr
        return HAL_ERROR;
 8006274:	2001      	movs	r0, #1
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
            return HAL_ERROR;
 8006278:	2001      	movs	r0, #1
 800627a:	e006      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 800627c:	2001      	movs	r0, #1
 800627e:	e004      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8006280:	2001      	movs	r0, #1
 8006282:	e002      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
          return HAL_ERROR;
 8006284:	2001      	movs	r0, #1
 8006286:	e000      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8006288:	2000      	movs	r0, #0
}
 800628a:	b003      	add	sp, #12
 800628c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800628e:	2001      	movs	r0, #1
 8006290:	e7fb      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8006292:	2001      	movs	r0, #1
 8006294:	e7f9      	b.n	800628a <HAL_RCC_OscConfig+0x6c6>
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000
 800629c:	f99f808c 	.word	0xf99f808c

080062a0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f000 80af 	beq.w	8006404 <HAL_RCC_ClockConfig+0x164>
{
 80062a6:	b570      	push	{r4, r5, r6, lr}
 80062a8:	460d      	mov	r5, r1
 80062aa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062ac:	4b59      	ldr	r3, [pc, #356]	@ (8006414 <HAL_RCC_ClockConfig+0x174>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	428b      	cmp	r3, r1
 80062b6:	d20b      	bcs.n	80062d0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b8:	4a56      	ldr	r2, [pc, #344]	@ (8006414 <HAL_RCC_ClockConfig+0x174>)
 80062ba:	6813      	ldr	r3, [r2, #0]
 80062bc:	f023 0307 	bic.w	r3, r3, #7
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c4:	6813      	ldr	r3, [r2, #0]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	428b      	cmp	r3, r1
 80062cc:	f040 809c 	bne.w	8006408 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	f013 0f02 	tst.w	r3, #2
 80062d6:	d00c      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062d8:	68a2      	ldr	r2, [r4, #8]
 80062da:	4b4f      	ldr	r3, [pc, #316]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d905      	bls.n	80062f2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e6:	494c      	ldr	r1, [pc, #304]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 80062e8:	688b      	ldr	r3, [r1, #8]
 80062ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ee:	431a      	orrs	r2, r3
 80062f0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	f013 0f01 	tst.w	r3, #1
 80062f8:	d039      	beq.n	800636e <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d009      	beq.n	8006314 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006300:	2b02      	cmp	r3, #2
 8006302:	d026      	beq.n	8006352 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006304:	bb63      	cbnz	r3, 8006360 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006306:	4a44      	ldr	r2, [pc, #272]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 8006308:	6812      	ldr	r2, [r2, #0]
 800630a:	f012 0f02 	tst.w	r2, #2
 800630e:	d106      	bne.n	800631e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8006310:	2001      	movs	r0, #1
 8006312:	e076      	b.n	8006402 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006314:	4a40      	ldr	r2, [pc, #256]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800631c:	d076      	beq.n	800640c <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800631e:	493e      	ldr	r1, [pc, #248]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 8006320:	688a      	ldr	r2, [r1, #8]
 8006322:	f022 0203 	bic.w	r2, r2, #3
 8006326:	4313      	orrs	r3, r2
 8006328:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800632a:	f7fc fdbf 	bl	8002eac <HAL_GetTick>
 800632e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006330:	4b39      	ldr	r3, [pc, #228]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 030c 	and.w	r3, r3, #12
 8006338:	6862      	ldr	r2, [r4, #4]
 800633a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800633e:	d016      	beq.n	800636e <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006340:	f7fc fdb4 	bl	8002eac <HAL_GetTick>
 8006344:	1b80      	subs	r0, r0, r6
 8006346:	f241 3388 	movw	r3, #5000	@ 0x1388
 800634a:	4298      	cmp	r0, r3
 800634c:	d9f0      	bls.n	8006330 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800634e:	2003      	movs	r0, #3
 8006350:	e057      	b.n	8006402 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006352:	4a31      	ldr	r2, [pc, #196]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800635a:	d1e0      	bne.n	800631e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800635c:	2001      	movs	r0, #1
 800635e:	e050      	b.n	8006402 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006360:	4a2d      	ldr	r2, [pc, #180]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8006368:	d1d9      	bne.n	800631e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800636a:	2001      	movs	r0, #1
 800636c:	e049      	b.n	8006402 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f013 0f02 	tst.w	r3, #2
 8006374:	d00c      	beq.n	8006390 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006376:	68a2      	ldr	r2, [r4, #8]
 8006378:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006380:	429a      	cmp	r2, r3
 8006382:	d205      	bcs.n	8006390 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006384:	4924      	ldr	r1, [pc, #144]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 8006386:	688b      	ldr	r3, [r1, #8]
 8006388:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800638c:	431a      	orrs	r2, r3
 800638e:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006390:	4b20      	ldr	r3, [pc, #128]	@ (8006414 <HAL_RCC_ClockConfig+0x174>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	42ab      	cmp	r3, r5
 800639a:	d90a      	bls.n	80063b2 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639c:	4a1d      	ldr	r2, [pc, #116]	@ (8006414 <HAL_RCC_ClockConfig+0x174>)
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	f023 0307 	bic.w	r3, r3, #7
 80063a4:	432b      	orrs	r3, r5
 80063a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a8:	6813      	ldr	r3, [r2, #0]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	42ab      	cmp	r3, r5
 80063b0:	d12e      	bne.n	8006410 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	f013 0f04 	tst.w	r3, #4
 80063b8:	d006      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063ba:	4a17      	ldr	r2, [pc, #92]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 80063bc:	6893      	ldr	r3, [r2, #8]
 80063be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80063c2:	68e1      	ldr	r1, [r4, #12]
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	f013 0f08 	tst.w	r3, #8
 80063ce:	d007      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063d0:	4a11      	ldr	r2, [pc, #68]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 80063d2:	6893      	ldr	r3, [r2, #8]
 80063d4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80063d8:	6921      	ldr	r1, [r4, #16]
 80063da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80063de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063e0:	f7ff fb9c 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 80063e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006418 <HAL_RCC_ClockConfig+0x178>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80063ec:	4a0b      	ldr	r2, [pc, #44]	@ (800641c <HAL_RCC_ClockConfig+0x17c>)
 80063ee:	5cd3      	ldrb	r3, [r2, r3]
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	40d8      	lsrs	r0, r3
 80063f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006420 <HAL_RCC_ClockConfig+0x180>)
 80063f8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80063fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006424 <HAL_RCC_ClockConfig+0x184>)
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	f7fc fd0b 	bl	8002e18 <HAL_InitTick>
}
 8006402:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006404:	2001      	movs	r0, #1
}
 8006406:	4770      	bx	lr
      return HAL_ERROR;
 8006408:	2001      	movs	r0, #1
 800640a:	e7fa      	b.n	8006402 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 800640c:	2001      	movs	r0, #1
 800640e:	e7f8      	b.n	8006402 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8006410:	2001      	movs	r0, #1
 8006412:	e7f6      	b.n	8006402 <HAL_RCC_ClockConfig+0x162>
 8006414:	40022000 	.word	0x40022000
 8006418:	40021000 	.word	0x40021000
 800641c:	0800d440 	.word	0x0800d440
 8006420:	200000c4 	.word	0x200000c4
 8006424:	200000bc 	.word	0x200000bc

08006428 <HAL_RCC_GetHCLKFreq>:
}
 8006428:	4b01      	ldr	r3, [pc, #4]	@ (8006430 <HAL_RCC_GetHCLKFreq+0x8>)
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	200000c4 	.word	0x200000c4

08006434 <HAL_RCC_GetPCLK1Freq>:
{
 8006434:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006436:	f7ff fff7 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 800643a:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006442:	4a04      	ldr	r2, [pc, #16]	@ (8006454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006444:	5cd3      	ldrb	r3, [r2, r3]
 8006446:	f003 031f 	and.w	r3, r3, #31
}
 800644a:	40d8      	lsrs	r0, r3
 800644c:	bd08      	pop	{r3, pc}
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000
 8006454:	0800d438 	.word	0x0800d438

08006458 <HAL_RCC_GetPCLK2Freq>:
{
 8006458:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800645a:	f7ff ffe5 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 800645e:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006466:	4a04      	ldr	r2, [pc, #16]	@ (8006478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006468:	5cd3      	ldrb	r3, [r2, r3]
 800646a:	f003 031f 	and.w	r3, r3, #31
}
 800646e:	40d8      	lsrs	r0, r3
 8006470:	bd08      	pop	{r3, pc}
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000
 8006478:	0800d438 	.word	0x0800d438

0800647c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	b083      	sub	sp, #12
 8006480:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006482:	6803      	ldr	r3, [r0, #0]
 8006484:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006488:	d069      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xe2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800648a:	4b87      	ldr	r3, [pc, #540]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800648c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006492:	d11e      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006494:	4b84      	ldr	r3, [pc, #528]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006496:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006498:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800649c:	659a      	str	r2, [r3, #88]	@ 0x58
 800649e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80064a8:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064aa:	4a80      	ldr	r2, [pc, #512]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064b4:	f7fc fcfa 	bl	8002eac <HAL_GetTick>
 80064b8:	4605      	mov	r5, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064ba:	4b7c      	ldr	r3, [pc, #496]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80064c2:	d108      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c4:	f7fc fcf2 	bl	8002eac <HAL_GetTick>
 80064c8:	1b40      	subs	r0, r0, r5
 80064ca:	2802      	cmp	r0, #2
 80064cc:	d9f5      	bls.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 80064ce:	2503      	movs	r5, #3
 80064d0:	e002      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 80064d2:	2600      	movs	r6, #0
 80064d4:	e7e9      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064d6:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80064d8:	bb45      	cbnz	r5, 800652c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064da:	4b73      	ldr	r3, [pc, #460]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064e0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80064e4:	d018      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80064e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d012      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064ec:	4a6e      	ldr	r2, [pc, #440]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80064f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064f6:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80064fa:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80064fe:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006502:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8006506:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800650a:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800650e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006512:	f013 0f01 	tst.w	r3, #1
 8006516:	d110      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }

      if(ret == HAL_OK)
 8006518:	b945      	cbnz	r5, 800652c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800651a:	4a63      	ldr	r2, [pc, #396]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800651c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006524:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006526:	430b      	orrs	r3, r1
 8006528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800652c:	b1c6      	cbz	r6, 8006560 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800652e:	4a5e      	ldr	r2, [pc, #376]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006530:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006536:	6593      	str	r3, [r2, #88]	@ 0x58
 8006538:	e012      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 800653a:	f7fc fcb7 	bl	8002eac <HAL_GetTick>
 800653e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006540:	4b59      	ldr	r3, [pc, #356]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006546:	f013 0f02 	tst.w	r3, #2
 800654a:	d1e5      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654c:	f7fc fcae 	bl	8002eac <HAL_GetTick>
 8006550:	1bc0      	subs	r0, r0, r7
 8006552:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006556:	4298      	cmp	r0, r3
 8006558:	d9f2      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 800655a:	2503      	movs	r5, #3
 800655c:	e7dc      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800655e:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	f013 0f01 	tst.w	r3, #1
 8006566:	d008      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006568:	4a4f      	ldr	r2, [pc, #316]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800656a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	6861      	ldr	r1, [r4, #4]
 8006574:	430b      	orrs	r3, r1
 8006576:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	f013 0f02 	tst.w	r3, #2
 8006580:	d008      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006582:	4a49      	ldr	r2, [pc, #292]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006584:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006588:	f023 030c 	bic.w	r3, r3, #12
 800658c:	68a1      	ldr	r1, [r4, #8]
 800658e:	430b      	orrs	r3, r1
 8006590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	f013 0f04 	tst.w	r3, #4
 800659a:	d008      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800659c:	4a42      	ldr	r2, [pc, #264]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800659e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80065a2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80065a6:	68e1      	ldr	r1, [r4, #12]
 80065a8:	430b      	orrs	r3, r1
 80065aa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f013 0f20 	tst.w	r3, #32
 80065b4:	d008      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065b6:	4a3c      	ldr	r2, [pc, #240]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80065bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80065c0:	6921      	ldr	r1, [r4, #16]
 80065c2:	430b      	orrs	r3, r1
 80065c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80065ce:	d008      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065d0:	4a35      	ldr	r2, [pc, #212]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80065d6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80065da:	6a21      	ldr	r1, [r4, #32]
 80065dc:	430b      	orrs	r3, r1
 80065de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80065e8:	d008      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065ea:	4a2f      	ldr	r2, [pc, #188]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80065f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80065f6:	430b      	orrs	r3, r1
 80065f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006602:	d008      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006604:	4a28      	ldr	r2, [pc, #160]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006606:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800660a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800660e:	6961      	ldr	r1, [r4, #20]
 8006610:	430b      	orrs	r3, r1
 8006612:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800661c:	d008      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800661e:	4a22      	ldr	r2, [pc, #136]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006620:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006624:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006628:	69a1      	ldr	r1, [r4, #24]
 800662a:	430b      	orrs	r3, r1
 800662c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006636:	d008      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006638:	4a1b      	ldr	r2, [pc, #108]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800663a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800663e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006642:	69e1      	ldr	r1, [r4, #28]
 8006644:	430b      	orrs	r3, r1
 8006646:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006650:	d00c      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006652:	4a15      	ldr	r2, [pc, #84]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006654:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006658:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800665c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800665e:	430b      	orrs	r3, r1
 8006660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006664:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800666a:	d013      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006672:	d00c      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006674:	4a0c      	ldr	r2, [pc, #48]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006676:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800667a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800667e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006680:	430b      	orrs	r3, r1
 8006682:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006686:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800668c:	d007      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x222>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 800668e:	4628      	mov	r0, r5
 8006690:	b003      	add	sp, #12
 8006692:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006694:	68d3      	ldr	r3, [r2, #12]
 8006696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800669a:	60d3      	str	r3, [r2, #12]
 800669c:	e7e6      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800669e:	68d3      	ldr	r3, [r2, #12]
 80066a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066a4:	60d3      	str	r3, [r2, #12]
 80066a6:	e7f2      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80066a8:	40021000 	.word	0x40021000
 80066ac:	40007000 	.word	0x40007000

080066b0 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80066b0:	4a02      	ldr	r2, [pc, #8]	@ (80066bc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	f043 0304 	orr.w	r3, r3, #4
 80066b8:	6013      	str	r3, [r2, #0]
}
 80066ba:	4770      	bx	lr
 80066bc:	40021000 	.word	0x40021000

080066c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4604      	mov	r4, r0
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80066c4:	6803      	ldr	r3, [r0, #0]
 80066c6:	4a0a      	ldr	r2, [pc, #40]	@ (80066f0 <HAL_RTC_WaitForSynchro+0x30>)
 80066c8:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 80066ca:	f7fc fbef 	bl	8002eac <HAL_GetTick>
 80066ce:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f013 0f20 	tst.w	r3, #32
 80066d8:	d107      	bne.n	80066ea <HAL_RTC_WaitForSynchro+0x2a>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066da:	f7fc fbe7 	bl	8002eac <HAL_GetTick>
 80066de:	1b40      	subs	r0, r0, r5
 80066e0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80066e4:	d9f4      	bls.n	80066d0 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 80066e6:	2003      	movs	r0, #3
 80066e8:	e000      	b.n	80066ec <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 80066ea:	2000      	movs	r0, #0
}
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	bf00      	nop
 80066f0:	0001005c 	.word	0x0001005c

080066f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80066f6:	6803      	ldr	r3, [r0, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80066fe:	d002      	beq.n	8006706 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006700:	2500      	movs	r5, #0
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 8006702:	4628      	mov	r0, r5
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800670e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006710:	f7fc fbcc 	bl	8002eac <HAL_GetTick>
 8006714:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006716:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006720:	d1ef      	bne.n	8006702 <RTC_EnterInitMode+0xe>
 8006722:	2d03      	cmp	r5, #3
 8006724:	d0ed      	beq.n	8006702 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006726:	f7fc fbc1 	bl	8002eac <HAL_GetTick>
 800672a:	1b83      	subs	r3, r0, r6
 800672c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006730:	d9f2      	bls.n	8006718 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006732:	2503      	movs	r5, #3
 8006734:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8006738:	e7ee      	b.n	8006718 <RTC_EnterInitMode+0x24>
	...

0800673c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800673c:	b510      	push	{r4, lr}
 800673e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006740:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <RTC_ExitInitMode+0x48>)
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006748:	60da      	str	r2, [r3, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f013 0f20 	tst.w	r3, #32
 8006750:	d106      	bne.n	8006760 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006752:	f7ff ffb5 	bl	80066c0 <HAL_RTC_WaitForSynchro>
 8006756:	b198      	cbz	r0, 8006780 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006758:	2003      	movs	r0, #3
 800675a:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
      status = HAL_TIMEOUT;
 800675e:	e00f      	b.n	8006780 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006760:	4a08      	ldr	r2, [pc, #32]	@ (8006784 <RTC_ExitInitMode+0x48>)
 8006762:	6993      	ldr	r3, [r2, #24]
 8006764:	f023 0320 	bic.w	r3, r3, #32
 8006768:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800676a:	f7ff ffa9 	bl	80066c0 <HAL_RTC_WaitForSynchro>
 800676e:	b110      	cbz	r0, 8006776 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006770:	2003      	movs	r0, #3
 8006772:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006776:	4a03      	ldr	r2, [pc, #12]	@ (8006784 <RTC_ExitInitMode+0x48>)
 8006778:	6993      	ldr	r3, [r2, #24]
 800677a:	f043 0320 	orr.w	r3, r3, #32
 800677e:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006780:	bd10      	pop	{r4, pc}
 8006782:	bf00      	nop
 8006784:	40002800 	.word	0x40002800

08006788 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006788:	2800      	cmp	r0, #0
 800678a:	d054      	beq.n	8006836 <HAL_RTC_Init+0xae>
{
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006790:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8006794:	b17b      	cbz	r3, 80067b6 <HAL_RTC_Init+0x2e>
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006796:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800679a:	6063      	str	r3, [r4, #4]
    hrtc->State = HAL_RTC_STATE_BUSY;
 800679c:	2302      	movs	r3, #2
 800679e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80067a2:	4b26      	ldr	r3, [pc, #152]	@ (800683c <HAL_RTC_Init+0xb4>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f013 0f10 	tst.w	r3, #16
 80067aa:	d009      	beq.n	80067c0 <HAL_RTC_Init+0x38>
      status = HAL_OK;
 80067ac:	2000      	movs	r0, #0
        hrtc->State = HAL_RTC_STATE_READY;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
}
 80067b4:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80067b6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
      HAL_RTC_MspInit(hrtc);
 80067ba:	f7fe f81b 	bl	80047f4 <HAL_RTC_MspInit>
 80067be:	e7ea      	b.n	8006796 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	22ca      	movs	r2, #202	@ 0xca
 80067c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	2253      	movs	r2, #83	@ 0x53
 80067ca:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7ff ff91 	bl	80066f4 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80067d2:	b9c0      	cbnz	r0, 8006806 <HAL_RTC_Init+0x7e>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	6993      	ldr	r3, [r2, #24]
 80067d8:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80067dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e0:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80067e2:	6821      	ldr	r1, [r4, #0]
 80067e4:	698a      	ldr	r2, [r1, #24]
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	6960      	ldr	r0, [r4, #20]
 80067ea:	4303      	orrs	r3, r0
 80067ec:	69e0      	ldr	r0, [r4, #28]
 80067ee:	4303      	orrs	r3, r0
 80067f0:	4313      	orrs	r3, r2
 80067f2:	618b      	str	r3, [r1, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	6922      	ldr	r2, [r4, #16]
 80067f8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	6913      	ldr	r3, [r2, #16]
 80067fe:	68e1      	ldr	r1, [r4, #12]
 8006800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006804:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8006806:	4620      	mov	r0, r4
 8006808:	f7ff ff98 	bl	800673c <RTC_ExitInitMode>
      if (status == HAL_OK)
 800680c:	b968      	cbnz	r0, 800682a <HAL_RTC_Init+0xa2>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	6993      	ldr	r3, [r2, #24]
 8006812:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8006816:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006818:	6821      	ldr	r1, [r4, #0]
 800681a:	698a      	ldr	r2, [r1, #24]
 800681c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800681e:	6a25      	ldr	r5, [r4, #32]
 8006820:	432b      	orrs	r3, r5
 8006822:	69a5      	ldr	r5, [r4, #24]
 8006824:	432b      	orrs	r3, r5
 8006826:	4313      	orrs	r3, r2
 8006828:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	22ff      	movs	r2, #255	@ 0xff
 800682e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006830:	2800      	cmp	r0, #0
 8006832:	d1bf      	bne.n	80067b4 <HAL_RTC_Init+0x2c>
 8006834:	e7bb      	b.n	80067ae <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006836:	2001      	movs	r0, #1
}
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40002800 	.word	0x40002800

08006840 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006840:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 8006842:	e002      	b.n	800684a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006844:	3301      	adds	r3, #1
    temp -= 10U;
 8006846:	380a      	subs	r0, #10
 8006848:	b2c0      	uxtb	r0, r0
  while (temp >= 10U)
 800684a:	2809      	cmp	r0, #9
 800684c:	d8fa      	bhi.n	8006844 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	b2db      	uxtb	r3, r3
}
 8006852:	4318      	orrs	r0, r3
 8006854:	4770      	bx	lr

08006856 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8006856:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 800685a:	2b01      	cmp	r3, #1
 800685c:	d05f      	beq.n	800691e <HAL_RTC_SetTime+0xc8>
{
 800685e:	b570      	push	{r4, r5, r6, lr}
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 8006866:	2301      	movs	r3, #1
 8006868:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
  hrtc->State = HAL_RTC_STATE_BUSY;
 800686c:	2302      	movs	r3, #2
 800686e:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006872:	6803      	ldr	r3, [r0, #0]
 8006874:	22ca      	movs	r2, #202	@ 0xca
 8006876:	625a      	str	r2, [r3, #36]	@ 0x24
 8006878:	6803      	ldr	r3, [r0, #0]
 800687a:	2253      	movs	r2, #83	@ 0x53
 800687c:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800687e:	f7ff ff39 	bl	80066f4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006882:	2800      	cmp	r0, #0
 8006884:	d12e      	bne.n	80068e4 <HAL_RTC_SetTime+0x8e>
    if (Format == RTC_FORMAT_BIN)
 8006886:	2e00      	cmp	r6, #0
 8006888:	d137      	bne.n	80068fa <HAL_RTC_SetTime+0xa4>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006892:	d101      	bne.n	8006898 <HAL_RTC_SetTime+0x42>
        sTime->TimeFormat = 0x00U;
 8006894:	2300      	movs	r3, #0
 8006896:	70eb      	strb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006898:	7828      	ldrb	r0, [r5, #0]
 800689a:	f7ff ffd1 	bl	8006840 <RTC_ByteToBcd2>
 800689e:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068a0:	7868      	ldrb	r0, [r5, #1]
 80068a2:	f7ff ffcd 	bl	8006840 <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068a6:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80068aa:	78a8      	ldrb	r0, [r5, #2]
 80068ac:	f7ff ffc8 	bl	8006840 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068b0:	ea46 0300 	orr.w	r3, r6, r0
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068b4:	78ea      	ldrb	r2, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068b6:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80068c0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80068c4:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	6993      	ldr	r3, [r2, #24]
 80068ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068ce:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80068d0:	6821      	ldr	r1, [r4, #0]
 80068d2:	698b      	ldr	r3, [r1, #24]
 80068d4:	68ea      	ldr	r2, [r5, #12]
 80068d6:	6928      	ldr	r0, [r5, #16]
 80068d8:	4302      	orrs	r2, r0
 80068da:	4313      	orrs	r3, r2
 80068dc:	618b      	str	r3, [r1, #24]
    status = RTC_ExitInitMode(hrtc);
 80068de:	4620      	mov	r0, r4
 80068e0:	f7ff ff2c 	bl	800673c <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	22ff      	movs	r2, #255	@ 0xff
 80068e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80068ea:	b910      	cbnz	r0, 80068f2 <HAL_RTC_SetTime+0x9c>
    hrtc->State = HAL_RTC_STATE_READY;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
  __HAL_UNLOCK(hrtc);
 80068f2:	2300      	movs	r3, #0
 80068f4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 80068f8:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006902:	d101      	bne.n	8006908 <HAL_RTC_SetTime+0xb2>
        sTime->TimeFormat = 0x00U;
 8006904:	2300      	movs	r3, #0
 8006906:	70eb      	strb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006908:	782a      	ldrb	r2, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800690a:	786b      	ldrb	r3, [r5, #1]
 800690c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800690e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006912:	78aa      	ldrb	r2, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006914:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006916:	78ea      	ldrb	r2, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006918:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800691c:	e7cd      	b.n	80068ba <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 800691e:	2002      	movs	r0, #2
}
 8006920:	4770      	bx	lr

08006922 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8006922:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8006926:	2b01      	cmp	r3, #1
 8006928:	d04b      	beq.n	80069c2 <HAL_RTC_SetDate+0xa0>
{
 800692a:	b570      	push	{r4, r5, r6, lr}
 800692c:	4604      	mov	r4, r0
 800692e:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8006930:	2301      	movs	r3, #1
 8006932:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006936:	2302      	movs	r3, #2
 8006938:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800693c:	b1f2      	cbz	r2, 800697c <HAL_RTC_SetDate+0x5a>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800693e:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006940:	784d      	ldrb	r5, [r1, #1]
 8006942:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006944:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006948:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800694a:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800694c:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800694e:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	22ca      	movs	r2, #202	@ 0xca
 8006956:	625a      	str	r2, [r3, #36]	@ 0x24
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	2253      	movs	r2, #83	@ 0x53
 800695c:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800695e:	4620      	mov	r0, r4
 8006960:	f7ff fec8 	bl	80066f4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006964:	b318      	cbz	r0, 80069ae <HAL_RTC_SetDate+0x8c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	22ff      	movs	r2, #255	@ 0xff
 800696a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800696c:	b910      	cbnz	r0, 8006974 <HAL_RTC_SetDate+0x52>
    hrtc->State = HAL_RTC_STATE_READY ;
 800696e:	2301      	movs	r3, #1
 8006970:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
  __HAL_UNLOCK(hrtc);
 8006974:	2300      	movs	r3, #0
 8006976:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 800697a:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800697c:	784b      	ldrb	r3, [r1, #1]
 800697e:	f013 0f10 	tst.w	r3, #16
 8006982:	d003      	beq.n	800698c <HAL_RTC_SetDate+0x6a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006984:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8006988:	330a      	adds	r3, #10
 800698a:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800698c:	78f0      	ldrb	r0, [r6, #3]
 800698e:	f7ff ff57 	bl	8006840 <RTC_ByteToBcd2>
 8006992:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006994:	7870      	ldrb	r0, [r6, #1]
 8006996:	f7ff ff53 	bl	8006840 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800699a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800699e:	78b0      	ldrb	r0, [r6, #2]
 80069a0:	f7ff ff4e 	bl	8006840 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069a4:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80069a6:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80069a8:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 80069ac:	e7d1      	b.n	8006952 <HAL_RTC_SetDate+0x30>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 80069b4:	f025 05c0 	bic.w	r5, r5, #192	@ 0xc0
 80069b8:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80069ba:	4620      	mov	r0, r4
 80069bc:	f7ff febe 	bl	800673c <RTC_ExitInitMode>
 80069c0:	e7d1      	b.n	8006966 <HAL_RTC_SetDate+0x44>
  __HAL_LOCK(hrtc);
 80069c2:	2002      	movs	r0, #2
}
 80069c4:	4770      	bx	lr

080069c6 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80069c6:	0903      	lsrs	r3, r0, #4
 80069c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 80069cc:	f000 000f 	and.w	r0, r0, #15
 80069d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80069d4:	b2c0      	uxtb	r0, r0
 80069d6:	4770      	bx	lr

080069d8 <HAL_RTC_GetTime>:
{
 80069d8:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80069da:	6803      	ldr	r3, [r0, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80069e0:	6803      	ldr	r3, [r0, #0]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80069e8:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80069ea:	6803      	ldr	r3, [r0, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80069ee:	f3c3 4005 	ubfx	r0, r3, #16, #6
 80069f2:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80069f4:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80069f8:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80069fa:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 80069fe:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006a00:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8006a04:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8006a06:	b95a      	cbnz	r2, 8006a20 <HAL_RTC_GetTime+0x48>
 8006a08:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006a0a:	f7ff ffdc 	bl	80069c6 <RTC_Bcd2ToByte>
 8006a0e:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7ff ffd8 	bl	80069c6 <RTC_Bcd2ToByte>
 8006a16:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f7ff ffd4 	bl	80069c6 <RTC_Bcd2ToByte>
 8006a1e:	70a0      	strb	r0, [r4, #2]
}
 8006a20:	2000      	movs	r0, #0
 8006a22:	bd70      	pop	{r4, r5, r6, pc}

08006a24 <HAL_RTC_GetDate>:
{
 8006a24:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a26:	6803      	ldr	r3, [r0, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a2a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006a2e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a30:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8006a34:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006a36:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8006a3a:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006a3c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006a40:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006a42:	b95a      	cbnz	r2, 8006a5c <HAL_RTC_GetDate+0x38>
 8006a44:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a46:	f7ff ffbe 	bl	80069c6 <RTC_Bcd2ToByte>
 8006a4a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7ff ffba 	bl	80069c6 <RTC_Bcd2ToByte>
 8006a52:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a54:	4628      	mov	r0, r5
 8006a56:	f7ff ffb6 	bl	80069c6 <RTC_Bcd2ToByte>
 8006a5a:	70a0      	strb	r0, [r4, #2]
}
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}

08006a60 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006a60:	b082      	sub	sp, #8
  uint32_t __IO tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006a62:	6803      	ldr	r3, [r0, #0]
 8006a64:	6840      	ldr	r0, [r0, #4]
 8006a66:	4403      	add	r3, r0

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 8006a68:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006a6c:	9301      	str	r3, [sp, #4]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8006a6e:	9b01      	ldr	r3, [sp, #4]
 8006a70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006a74:	9301      	str	r3, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006a76:	9b01      	ldr	r3, [sp, #4]
 8006a78:	601a      	str	r2, [r3, #0]
}
 8006a7a:	b002      	add	sp, #8
 8006a7c:	4770      	bx	lr

08006a7e <HAL_RTCEx_BKUPRead>:
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
  uint32_t tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006a7e:	6803      	ldr	r3, [r0, #0]
 8006a80:	6842      	ldr	r2, [r0, #4]
 8006a82:	4413      	add	r3, r2

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 8006a84:	f503 7380 	add.w	r3, r3, #256	@ 0x100
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006a88:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8006a8c:	4770      	bx	lr
	...

08006a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	4605      	mov	r5, r0
 8006a98:	4688      	mov	r8, r1
 8006a9a:	4617      	mov	r7, r2
 8006a9c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a9e:	f7fc fa05 	bl	8002eac <HAL_GetTick>
 8006aa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa4:	1a1b      	subs	r3, r3, r0
 8006aa6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8006aaa:	f7fc f9ff 	bl	8002eac <HAL_GetTick>
 8006aae:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ab0:	4b28      	ldr	r3, [pc, #160]	@ (8006b54 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006ab8:	fb09 f303 	mul.w	r3, r9, r3
 8006abc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006abe:	682b      	ldr	r3, [r5, #0]
 8006ac0:	689c      	ldr	r4, [r3, #8]
 8006ac2:	ea38 0404 	bics.w	r4, r8, r4
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	42bb      	cmp	r3, r7
 8006ace:	d03d      	beq.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ad0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006ad4:	d0f3      	beq.n	8006abe <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ad6:	f7fc f9e9 	bl	8002eac <HAL_GetTick>
 8006ada:	eba0 000a 	sub.w	r0, r0, sl
 8006ade:	4548      	cmp	r0, r9
 8006ae0:	d207      	bcs.n	8006af2 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ae2:	9a01      	ldr	r2, [sp, #4]
 8006ae4:	b102      	cbz	r2, 8006ae8 <SPI_WaitFlagStateUntilTimeout+0x58>
 8006ae6:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	4691      	mov	r9, r2
 8006af0:	e7e5      	b.n	8006abe <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006af2:	682a      	ldr	r2, [r5, #0]
 8006af4:	6853      	ldr	r3, [r2, #4]
 8006af6:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8006afa:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006afc:	686b      	ldr	r3, [r5, #4]
 8006afe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b02:	d00b      	beq.n	8006b1c <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b04:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b0a:	d014      	beq.n	8006b36 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006b12:	2300      	movs	r3, #0
 8006b14:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006b18:	2003      	movs	r0, #3
 8006b1a:	e018      	b.n	8006b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b1c:	68ab      	ldr	r3, [r5, #8]
 8006b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b22:	d002      	beq.n	8006b2a <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b28:	d1ec      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8006b2a:	682a      	ldr	r2, [r5, #0]
 8006b2c:	6813      	ldr	r3, [r2, #0]
 8006b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	e7e6      	b.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8006b36:	682a      	ldr	r2, [r5, #0]
 8006b38:	6813      	ldr	r3, [r2, #0]
 8006b3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	682a      	ldr	r2, [r5, #0]
 8006b42:	6813      	ldr	r3, [r2, #0]
 8006b44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	e7df      	b.n	8006b0c <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8006b4c:	2000      	movs	r0, #0
}
 8006b4e:	b002      	add	sp, #8
 8006b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b54:	200000c4 	.word	0x200000c4

08006b58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460c      	mov	r4, r1
 8006b62:	4615      	mov	r5, r2
 8006b64:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b6c:	f7fc f99e 	bl	8002eac <HAL_GetTick>
 8006b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b72:	1a1b      	subs	r3, r3, r0
 8006b74:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8006b78:	f7fc f998 	bl	8002eac <HAL_GetTick>
 8006b7c:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b7e:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b82:	4b30      	ldr	r3, [pc, #192]	@ (8006c44 <SPI_WaitFifoStateUntilTimeout+0xec>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b8e:	0d1b      	lsrs	r3, r3, #20
 8006b90:	fb08 f303 	mul.w	r3, r8, r3
 8006b94:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b96:	e002      	b.n	8006b9e <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b98:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006b9c:	d112      	bne.n	8006bc4 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8006b9e:	6833      	ldr	r3, [r6, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	ea03 0c04 	and.w	ip, r3, r4
 8006ba6:	45ac      	cmp	ip, r5
 8006ba8:	d047      	beq.n	8006c3a <SPI_WaitFifoStateUntilTimeout+0xe2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006baa:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
 8006bae:	d1f3      	bne.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x40>
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	d1f1      	bne.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8006bb4:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8006bbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006bc2:	e7e9      	b.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bc4:	f7fc f972 	bl	8002eac <HAL_GetTick>
 8006bc8:	eba0 0009 	sub.w	r0, r0, r9
 8006bcc:	4540      	cmp	r0, r8
 8006bce:	d207      	bcs.n	8006be0 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bd0:	9a01      	ldr	r2, [sp, #4]
 8006bd2:	b102      	cbz	r2, 8006bd6 <SPI_WaitFifoStateUntilTimeout+0x7e>
 8006bd4:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8006bd6:	9b01      	ldr	r3, [sp, #4]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	4690      	mov	r8, r2
 8006bde:	e7de      	b.n	8006b9e <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006be0:	6832      	ldr	r2, [r6, #0]
 8006be2:	6853      	ldr	r3, [r2, #4]
 8006be4:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8006be8:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bea:	6873      	ldr	r3, [r6, #4]
 8006bec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bf0:	d00b      	beq.n	8006c0a <SPI_WaitFifoStateUntilTimeout+0xb2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bf2:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8006bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf8:	d014      	beq.n	8006c24 <SPI_WaitFifoStateUntilTimeout+0xcc>
        hspi->State = HAL_SPI_STATE_READY;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006c00:	2300      	movs	r3, #0
 8006c02:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006c06:	2003      	movs	r0, #3
 8006c08:	e018      	b.n	8006c3c <SPI_WaitFifoStateUntilTimeout+0xe4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c0a:	68b3      	ldr	r3, [r6, #8]
 8006c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c10:	d002      	beq.n	8006c18 <SPI_WaitFifoStateUntilTimeout+0xc0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c16:	d1ec      	bne.n	8006bf2 <SPI_WaitFifoStateUntilTimeout+0x9a>
          __HAL_SPI_DISABLE(hspi);
 8006c18:	6832      	ldr	r2, [r6, #0]
 8006c1a:	6813      	ldr	r3, [r2, #0]
 8006c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e7e6      	b.n	8006bf2 <SPI_WaitFifoStateUntilTimeout+0x9a>
          SPI_RESET_CRC(hspi);
 8006c24:	6832      	ldr	r2, [r6, #0]
 8006c26:	6813      	ldr	r3, [r2, #0]
 8006c28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	6832      	ldr	r2, [r6, #0]
 8006c30:	6813      	ldr	r3, [r2, #0]
 8006c32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	e7df      	b.n	8006bfa <SPI_WaitFifoStateUntilTimeout+0xa2>
    }
  }

  return HAL_OK;
 8006c3a:	2000      	movs	r0, #0
}
 8006c3c:	b002      	add	sp, #8
 8006c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c42:	bf00      	nop
 8006c44:	200000c4 	.word	0x200000c4

08006c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c52:	9200      	str	r2, [sp, #0]
 8006c54:	460b      	mov	r3, r1
 8006c56:	2200      	movs	r2, #0
 8006c58:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006c5c:	f7ff ff7c 	bl	8006b58 <SPI_WaitFifoStateUntilTimeout>
 8006c60:	b9b0      	cbnz	r0, 8006c90 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c62:	9600      	str	r6, [sp, #0]
 8006c64:	462b      	mov	r3, r5
 8006c66:	2200      	movs	r2, #0
 8006c68:	2180      	movs	r1, #128	@ 0x80
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7ff ff10 	bl	8006a90 <SPI_WaitFlagStateUntilTimeout>
 8006c70:	b9a8      	cbnz	r0, 8006c9e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c72:	9600      	str	r6, [sp, #0]
 8006c74:	462b      	mov	r3, r5
 8006c76:	2200      	movs	r2, #0
 8006c78:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f7ff ff6b 	bl	8006b58 <SPI_WaitFifoStateUntilTimeout>
 8006c82:	b150      	cbz	r0, 8006c9a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c84:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006c86:	f043 0320 	orr.w	r3, r3, #32
 8006c8a:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c8c:	2003      	movs	r0, #3
 8006c8e:	e004      	b.n	8006c9a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c90:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006c92:	f043 0320 	orr.w	r3, r3, #32
 8006c96:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c98:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8006c9a:	b002      	add	sp, #8
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c9e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006ca0:	f043 0320 	orr.w	r3, r3, #32
 8006ca4:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ca6:	2003      	movs	r0, #3
 8006ca8:	e7f7      	b.n	8006c9a <SPI_EndRxTxTransaction+0x52>

08006caa <HAL_SPI_Init>:
  if (hspi == NULL)
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d06a      	beq.n	8006d84 <HAL_SPI_Init+0xda>
{
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cb2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006cb4:	b933      	cbnz	r3, 8006cc4 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cb6:	6843      	ldr	r3, [r0, #4]
 8006cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cbc:	d005      	beq.n	8006cca <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61c3      	str	r3, [r0, #28]
 8006cc2:	e002      	b.n	8006cca <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cc8:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cce:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d04d      	beq.n	8006d72 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	6813      	ldr	r3, [r2, #0]
 8006ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ce4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cec:	d947      	bls.n	8006d7e <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cee:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cf0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006cf4:	d004      	beq.n	8006d00 <HAL_SPI_Init+0x56>
 8006cf6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cfa:	d001      	beq.n	8006d00 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006d06:	68a1      	ldr	r1, [r4, #8]
 8006d08:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	6921      	ldr	r1, [r4, #16]
 8006d10:	f001 0102 	and.w	r1, r1, #2
 8006d14:	430b      	orrs	r3, r1
 8006d16:	6961      	ldr	r1, [r4, #20]
 8006d18:	f001 0101 	and.w	r1, r1, #1
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	69a1      	ldr	r1, [r4, #24]
 8006d20:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8006d24:	430b      	orrs	r3, r1
 8006d26:	69e1      	ldr	r1, [r4, #28]
 8006d28:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	6a21      	ldr	r1, [r4, #32]
 8006d30:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006d38:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8006d3c:	6820      	ldr	r0, [r4, #0]
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d42:	8b63      	ldrh	r3, [r4, #26]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006d4a:	f001 0110 	and.w	r1, r1, #16
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d52:	f001 0108 	and.w	r1, r1, #8
 8006d56:	430b      	orrs	r3, r1
 8006d58:	68e1      	ldr	r1, [r4, #12]
 8006d5a:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	6821      	ldr	r1, [r4, #0]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d66:	2000      	movs	r0, #0
 8006d68:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8006d70:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006d72:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7fd fd64 	bl	8004844 <HAL_SPI_MspInit>
 8006d7c:	e7ab      	b.n	8006cd6 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006d82:	e7b5      	b.n	8006cf0 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8006d84:	2001      	movs	r0, #1
}
 8006d86:	4770      	bx	lr

08006d88 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8006d88:	b190      	cbz	r0, 8006db0 <HAL_SPI_DeInit+0x28>
{
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006d94:	6802      	ldr	r2, [r0, #0]
 8006d96:	6813      	ldr	r3, [r2, #0]
 8006d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d9c:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8006d9e:	f7fd fd83 	bl	80048a8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006da2:	2000      	movs	r0, #0
 8006da4:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006da6:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8006daa:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
}
 8006dae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006db0:	2001      	movs	r0, #1
}
 8006db2:	4770      	bx	lr

08006db4 <HAL_SPI_Transmit>:
{
 8006db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006db8:	b083      	sub	sp, #12
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4689      	mov	r9, r1
 8006dbe:	4690      	mov	r8, r2
 8006dc0:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8006dc2:	f7fc f873 	bl	8002eac <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006dc6:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	f040 80f0 	bne.w	8006fb0 <HAL_SPI_Transmit+0x1fc>
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	b2df      	uxtb	r7, r3
  if ((pData == NULL) || (Size == 0U))
 8006dd4:	f1b9 0f00 	cmp.w	r9, #0
 8006dd8:	f000 80eb 	beq.w	8006fb2 <HAL_SPI_Transmit+0x1fe>
 8006ddc:	f1b8 0f00 	cmp.w	r8, #0
 8006de0:	f000 80e7 	beq.w	8006fb2 <HAL_SPI_Transmit+0x1fe>
  __HAL_LOCK(hspi);
 8006de4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	f000 80e6 	beq.w	8006fba <HAL_SPI_Transmit+0x206>
 8006dee:	2301      	movs	r3, #1
 8006df0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006df4:	2303      	movs	r3, #3
 8006df6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006dfe:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006e02:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006e06:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e0a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006e0c:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006e10:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006e14:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006e16:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e18:	68a3      	ldr	r3, [r4, #8]
 8006e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e1e:	d01e      	beq.n	8006e5e <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8006e28:	d103      	bne.n	8006e32 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e30:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e38:	d947      	bls.n	8006eca <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e3a:	6863      	ldr	r3, [r4, #4]
 8006e3c:	b113      	cbz	r3, 8006e44 <HAL_SPI_Transmit+0x90>
 8006e3e:	f1b8 0f01 	cmp.w	r8, #1
 8006e42:	d120      	bne.n	8006e86 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e44:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	8812      	ldrh	r2, [r2, #0]
 8006e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e4c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006e4e:	3302      	adds	r3, #2
 8006e50:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e52:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006e5c:	e013      	b.n	8006e86 <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	6813      	ldr	r3, [r2, #0]
 8006e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e66:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e7d5      	b.n	8006e20 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e74:	f7fc f81a 	bl	8002eac <HAL_GetTick>
 8006e78:	1b80      	subs	r0, r0, r6
 8006e7a:	42a8      	cmp	r0, r5
 8006e7c:	d302      	bcc.n	8006e84 <HAL_SPI_Transmit+0xd0>
 8006e7e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006e82:	d11a      	bne.n	8006eba <HAL_SPI_Transmit+0x106>
 8006e84:	b1cd      	cbz	r5, 8006eba <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0U)
 8006e86:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d075      	beq.n	8006f7a <HAL_SPI_Transmit+0x1c6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	f012 0f02 	tst.w	r2, #2
 8006e96:	d0ed      	beq.n	8006e74 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e98:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006e9a:	8812      	ldrh	r2, [r2, #0]
 8006e9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ea4:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8006ea8:	fa1f fc8c 	uxth.w	ip, ip
 8006eac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006eb0:	fa1f fc8c 	uxth.w	ip, ip
 8006eb4:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8006eb8:	e7e5      	b.n	8006e86 <HAL_SPI_Transmit+0xd2>
          hspi->State = HAL_SPI_STATE_READY;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006ec6:	2703      	movs	r7, #3
 8006ec8:	e073      	b.n	8006fb2 <HAL_SPI_Transmit+0x1fe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eca:	6863      	ldr	r3, [r4, #4]
 8006ecc:	b113      	cbz	r3, 8006ed4 <HAL_SPI_Transmit+0x120>
 8006ece:	f1b8 0f01 	cmp.w	r8, #1
 8006ed2:	d128      	bne.n	8006f26 <HAL_SPI_Transmit+0x172>
      if (hspi->TxXferCount > 1U)
 8006ed4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d90c      	bls.n	8006ef6 <HAL_SPI_Transmit+0x142>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006edc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	8812      	ldrh	r2, [r2, #0]
 8006ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006eea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b02      	subs	r3, #2
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006ef4:	e017      	b.n	8006f26 <HAL_SPI_Transmit+0x172>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ef6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8006efe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f00:	3301      	adds	r3, #1
 8006f02:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f04:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006f0e:	e00a      	b.n	8006f26 <HAL_SPI_Transmit+0x172>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f18:	3302      	adds	r3, #2
 8006f1a:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b02      	subs	r3, #2
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006f26:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	b333      	cbz	r3, 8006f7a <HAL_SPI_Transmit+0x1c6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	6893      	ldr	r3, [r2, #8]
 8006f30:	f013 0f02 	tst.w	r3, #2
 8006f34:	d00f      	beq.n	8006f56 <HAL_SPI_Transmit+0x1a2>
        if (hspi->TxXferCount > 1U)
 8006f36:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d8e8      	bhi.n	8006f10 <HAL_SPI_Transmit+0x15c>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006f44:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f46:	3301      	adds	r3, #1
 8006f48:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f4a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006f54:	e7e7      	b.n	8006f26 <HAL_SPI_Transmit+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f56:	f7fb ffa9 	bl	8002eac <HAL_GetTick>
 8006f5a:	1b80      	subs	r0, r0, r6
 8006f5c:	42a8      	cmp	r0, r5
 8006f5e:	d302      	bcc.n	8006f66 <HAL_SPI_Transmit+0x1b2>
 8006f60:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006f64:	d101      	bne.n	8006f6a <HAL_SPI_Transmit+0x1b6>
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	d1dd      	bne.n	8006f26 <HAL_SPI_Transmit+0x172>
          hspi->State = HAL_SPI_STATE_READY;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006f70:	2300      	movs	r3, #0
 8006f72:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006f76:	2703      	movs	r7, #3
 8006f78:	e01b      	b.n	8006fb2 <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7ff fe62 	bl	8006c48 <SPI_EndRxTxTransaction>
 8006f84:	b108      	cbz	r0, 8006f8a <HAL_SPI_Transmit+0x1d6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f86:	2320      	movs	r3, #32
 8006f88:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	b933      	cbnz	r3, 8006f9c <HAL_SPI_Transmit+0x1e8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	9201      	str	r2, [sp, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fa8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006faa:	b913      	cbnz	r3, 8006fb2 <HAL_SPI_Transmit+0x1fe>
    return HAL_OK;
 8006fac:	2700      	movs	r7, #0
 8006fae:	e000      	b.n	8006fb2 <HAL_SPI_Transmit+0x1fe>
    return HAL_BUSY;
 8006fb0:	2702      	movs	r7, #2
}
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	b003      	add	sp, #12
 8006fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006fba:	2702      	movs	r7, #2
 8006fbc:	e7f9      	b.n	8006fb2 <HAL_SPI_Transmit+0x1fe>

08006fbe <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fbe:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	e852 3f00 	ldrex	r3, [r2]
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	e842 3100 	strex	r1, r3, [r2]
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d1f6      	bne.n	8006fbe <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	f102 0308 	add.w	r3, r2, #8
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	3208      	adds	r2, #8
 8006fe0:	e842 3100 	strex	r1, r3, [r2]
 8006fe4:	2900      	cmp	r1, #0
 8006fe6:	d1f3      	bne.n	8006fd0 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe8:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d006      	beq.n	8006ffc <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fee:	2320      	movs	r3, #32
 8006ff0:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff8:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8006ffa:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	e852 3f00 	ldrex	r3, [r2]
 8007002:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	e842 3100 	strex	r1, r3, [r2]
 800700a:	2900      	cmp	r1, #0
 800700c:	d1f6      	bne.n	8006ffc <UART_EndRxTransfer+0x3e>
 800700e:	e7ee      	b.n	8006fee <UART_EndRxTransfer+0x30>

08007010 <UART_SetConfig>:
{
 8007010:	b510      	push	{r4, lr}
 8007012:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007014:	6883      	ldr	r3, [r0, #8]
 8007016:	6902      	ldr	r2, [r0, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	6942      	ldr	r2, [r0, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	69c2      	ldr	r2, [r0, #28]
 8007020:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007022:	6801      	ldr	r1, [r0, #0]
 8007024:	6808      	ldr	r0, [r1, #0]
 8007026:	4a94      	ldr	r2, [pc, #592]	@ (8007278 <UART_SetConfig+0x268>)
 8007028:	4002      	ands	r2, r0
 800702a:	431a      	orrs	r2, r3
 800702c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	6853      	ldr	r3, [r2, #4]
 8007032:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007036:	68e1      	ldr	r1, [r4, #12]
 8007038:	430b      	orrs	r3, r1
 800703a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800703c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	4b8e      	ldr	r3, [pc, #568]	@ (800727c <UART_SetConfig+0x26c>)
 8007042:	429a      	cmp	r2, r3
 8007044:	d001      	beq.n	800704a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007046:	6a23      	ldr	r3, [r4, #32]
 8007048:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800704a:	6893      	ldr	r3, [r2, #8]
 800704c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007050:	430b      	orrs	r3, r1
 8007052:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	4a8a      	ldr	r2, [pc, #552]	@ (8007280 <UART_SetConfig+0x270>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d01f      	beq.n	800709c <UART_SetConfig+0x8c>
 800705c:	4a89      	ldr	r2, [pc, #548]	@ (8007284 <UART_SetConfig+0x274>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d030      	beq.n	80070c4 <UART_SetConfig+0xb4>
 8007062:	4a89      	ldr	r2, [pc, #548]	@ (8007288 <UART_SetConfig+0x278>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d046      	beq.n	80070f6 <UART_SetConfig+0xe6>
 8007068:	4a84      	ldr	r2, [pc, #528]	@ (800727c <UART_SetConfig+0x26c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d055      	beq.n	800711a <UART_SetConfig+0x10a>
 800706e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007070:	4982      	ldr	r1, [pc, #520]	@ (800727c <UART_SetConfig+0x26c>)
 8007072:	428b      	cmp	r3, r1
 8007074:	d07a      	beq.n	800716c <UART_SetConfig+0x15c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007076:	69e0      	ldr	r0, [r4, #28]
 8007078:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800707c:	f000 80a6 	beq.w	80071cc <UART_SetConfig+0x1bc>
    switch (clocksource)
 8007080:	2a08      	cmp	r2, #8
 8007082:	f200 8109 	bhi.w	8007298 <UART_SetConfig+0x288>
 8007086:	e8df f012 	tbh	[pc, r2, lsl #1]
 800708a:	00ce      	.short	0x00ce
 800708c:	00cc00e2 	.word	0x00cc00e2
 8007090:	00e50107 	.word	0x00e50107
 8007094:	01070107 	.word	0x01070107
 8007098:	00e80107 	.word	0x00e80107
  UART_GETCLOCKSOURCE(huart, clocksource);
 800709c:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 80070a0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80070a4:	f002 0203 	and.w	r2, r2, #3
 80070a8:	2a03      	cmp	r2, #3
 80070aa:	d809      	bhi.n	80070c0 <UART_SetConfig+0xb0>
 80070ac:	e8df f002 	tbb	[pc, r2]
 80070b0:	064a0402 	.word	0x064a0402
 80070b4:	2201      	movs	r2, #1
 80070b6:	e7db      	b.n	8007070 <UART_SetConfig+0x60>
 80070b8:	2204      	movs	r2, #4
 80070ba:	e7d9      	b.n	8007070 <UART_SetConfig+0x60>
 80070bc:	2208      	movs	r2, #8
 80070be:	e7d7      	b.n	8007070 <UART_SetConfig+0x60>
 80070c0:	2210      	movs	r2, #16
 80070c2:	e7d5      	b.n	8007070 <UART_SetConfig+0x60>
 80070c4:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 80070c8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80070cc:	f002 020c 	and.w	r2, r2, #12
 80070d0:	2a0c      	cmp	r2, #12
 80070d2:	d80e      	bhi.n	80070f2 <UART_SetConfig+0xe2>
 80070d4:	e8df f002 	tbb	[pc, r2]
 80070d8:	0d0d0d07 	.word	0x0d0d0d07
 80070dc:	0d0d0d09 	.word	0x0d0d0d09
 80070e0:	0d0d0d38 	.word	0x0d0d0d38
 80070e4:	0b          	.byte	0x0b
 80070e5:	00          	.byte	0x00
 80070e6:	2200      	movs	r2, #0
 80070e8:	e7c2      	b.n	8007070 <UART_SetConfig+0x60>
 80070ea:	2204      	movs	r2, #4
 80070ec:	e7c0      	b.n	8007070 <UART_SetConfig+0x60>
 80070ee:	2208      	movs	r2, #8
 80070f0:	e7be      	b.n	8007070 <UART_SetConfig+0x60>
 80070f2:	2210      	movs	r2, #16
 80070f4:	e7bc      	b.n	8007070 <UART_SetConfig+0x60>
 80070f6:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80070fa:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80070fe:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8007102:	2a20      	cmp	r2, #32
 8007104:	d022      	beq.n	800714c <UART_SetConfig+0x13c>
 8007106:	d804      	bhi.n	8007112 <UART_SetConfig+0x102>
 8007108:	b312      	cbz	r2, 8007150 <UART_SetConfig+0x140>
 800710a:	2a10      	cmp	r2, #16
 800710c:	d122      	bne.n	8007154 <UART_SetConfig+0x144>
 800710e:	2204      	movs	r2, #4
 8007110:	e7ae      	b.n	8007070 <UART_SetConfig+0x60>
 8007112:	2a30      	cmp	r2, #48	@ 0x30
 8007114:	d120      	bne.n	8007158 <UART_SetConfig+0x148>
 8007116:	2208      	movs	r2, #8
 8007118:	e7aa      	b.n	8007070 <UART_SetConfig+0x60>
 800711a:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 800711e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8007122:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8007126:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800712a:	d017      	beq.n	800715c <UART_SetConfig+0x14c>
 800712c:	d805      	bhi.n	800713a <UART_SetConfig+0x12a>
 800712e:	b1ba      	cbz	r2, 8007160 <UART_SetConfig+0x150>
 8007130:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007134:	d116      	bne.n	8007164 <UART_SetConfig+0x154>
 8007136:	2204      	movs	r2, #4
 8007138:	e79a      	b.n	8007070 <UART_SetConfig+0x60>
 800713a:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800713e:	d113      	bne.n	8007168 <UART_SetConfig+0x158>
 8007140:	2208      	movs	r2, #8
 8007142:	e795      	b.n	8007070 <UART_SetConfig+0x60>
 8007144:	2202      	movs	r2, #2
 8007146:	e793      	b.n	8007070 <UART_SetConfig+0x60>
 8007148:	2202      	movs	r2, #2
 800714a:	e791      	b.n	8007070 <UART_SetConfig+0x60>
 800714c:	2202      	movs	r2, #2
 800714e:	e78f      	b.n	8007070 <UART_SetConfig+0x60>
 8007150:	2200      	movs	r2, #0
 8007152:	e78d      	b.n	8007070 <UART_SetConfig+0x60>
 8007154:	2210      	movs	r2, #16
 8007156:	e78b      	b.n	8007070 <UART_SetConfig+0x60>
 8007158:	2210      	movs	r2, #16
 800715a:	e789      	b.n	8007070 <UART_SetConfig+0x60>
 800715c:	2202      	movs	r2, #2
 800715e:	e787      	b.n	8007070 <UART_SetConfig+0x60>
 8007160:	2200      	movs	r2, #0
 8007162:	e785      	b.n	8007070 <UART_SetConfig+0x60>
 8007164:	2210      	movs	r2, #16
 8007166:	e783      	b.n	8007070 <UART_SetConfig+0x60>
 8007168:	2210      	movs	r2, #16
 800716a:	e781      	b.n	8007070 <UART_SetConfig+0x60>
    switch (clocksource)
 800716c:	2a08      	cmp	r2, #8
 800716e:	d877      	bhi.n	8007260 <UART_SetConfig+0x250>
 8007170:	e8df f002 	tbb	[pc, r2]
 8007174:	76107608 	.word	0x76107608
 8007178:	7676760d 	.word	0x7676760d
 800717c:	05          	.byte	0x05
 800717d:	00          	.byte	0x00
 800717e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007182:	e008      	b.n	8007196 <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007184:	f7ff f956 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007188:	b928      	cbnz	r0, 8007196 <UART_SetConfig+0x186>
 800718a:	2000      	movs	r0, #0
 800718c:	e085      	b.n	800729a <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7fe fcc5 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
        break;
 8007192:	e7f9      	b.n	8007188 <UART_SetConfig+0x178>
        pclk = (uint32_t) HSI_VALUE;
 8007194:	483d      	ldr	r0, [pc, #244]	@ (800728c <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007196:	6862      	ldr	r2, [r4, #4]
 8007198:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800719c:	4283      	cmp	r3, r0
 800719e:	d861      	bhi.n	8007264 <UART_SetConfig+0x254>
 80071a0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80071a4:	d860      	bhi.n	8007268 <UART_SetConfig+0x258>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071a6:	0e01      	lsrs	r1, r0, #24
 80071a8:	0200      	lsls	r0, r0, #8
 80071aa:	0853      	lsrs	r3, r2, #1
 80071ac:	18c0      	adds	r0, r0, r3
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	f141 0100 	adc.w	r1, r1, #0
 80071b6:	f7f9 fc71 	bl	8000a9c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071ba:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80071be:	4b34      	ldr	r3, [pc, #208]	@ (8007290 <UART_SetConfig+0x280>)
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d853      	bhi.n	800726c <UART_SetConfig+0x25c>
          huart->Instance->BRR = usartdiv;
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	60d8      	str	r0, [r3, #12]
 80071c8:	2000      	movs	r0, #0
 80071ca:	e066      	b.n	800729a <UART_SetConfig+0x28a>
    switch (clocksource)
 80071cc:	2a08      	cmp	r2, #8
 80071ce:	d84f      	bhi.n	8007270 <UART_SetConfig+0x260>
 80071d0:	e8df f002 	tbb	[pc, r2]
 80071d4:	4e052107 	.word	0x4e052107
 80071d8:	4e4e4e24 	.word	0x4e4e4e24
 80071dc:	0b          	.byte	0x0b
 80071dd:	00          	.byte	0x00
 80071de:	482b      	ldr	r0, [pc, #172]	@ (800728c <UART_SetConfig+0x27c>)
 80071e0:	e003      	b.n	80071ea <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e2:	f7ff f927 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d044      	beq.n	8007274 <UART_SetConfig+0x264>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071ea:	6862      	ldr	r2, [r4, #4]
 80071ec:	0853      	lsrs	r3, r2, #1
 80071ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80071f2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071f6:	f1a3 0110 	sub.w	r1, r3, #16
 80071fa:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80071fe:	4291      	cmp	r1, r2
 8007200:	d848      	bhi.n	8007294 <UART_SetConfig+0x284>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007202:	b29a      	uxth	r2, r3
 8007204:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007208:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800720c:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	60d3      	str	r3, [r2, #12]
 8007212:	2000      	movs	r0, #0
 8007214:	e041      	b.n	800729a <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007216:	f7ff f91f 	bl	8006458 <HAL_RCC_GetPCLK2Freq>
        break;
 800721a:	e7e4      	b.n	80071e6 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetSysClockFreq();
 800721c:	f7fe fc7e 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
        break;
 8007220:	e7e1      	b.n	80071e6 <UART_SetConfig+0x1d6>
    switch (clocksource)
 8007222:	481a      	ldr	r0, [pc, #104]	@ (800728c <UART_SetConfig+0x27c>)
 8007224:	e003      	b.n	800722e <UART_SetConfig+0x21e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007226:	f7ff f905 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800722a:	2800      	cmp	r0, #0
 800722c:	d039      	beq.n	80072a2 <UART_SetConfig+0x292>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007234:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007238:	f1a0 0210 	sub.w	r2, r0, #16
 800723c:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8007240:	429a      	cmp	r2, r3
 8007242:	d830      	bhi.n	80072a6 <UART_SetConfig+0x296>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	b280      	uxth	r0, r0
 8007248:	60d8      	str	r0, [r3, #12]
 800724a:	2000      	movs	r0, #0
 800724c:	e025      	b.n	800729a <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800724e:	f7ff f903 	bl	8006458 <HAL_RCC_GetPCLK2Freq>
        break;
 8007252:	e7ea      	b.n	800722a <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetSysClockFreq();
 8007254:	f7fe fc62 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
        break;
 8007258:	e7e7      	b.n	800722a <UART_SetConfig+0x21a>
        pclk = (uint32_t) LSE_VALUE;
 800725a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800725e:	e7e6      	b.n	800722e <UART_SetConfig+0x21e>
    switch (clocksource)
 8007260:	2001      	movs	r0, #1
 8007262:	e01a      	b.n	800729a <UART_SetConfig+0x28a>
        ret = HAL_ERROR;
 8007264:	2001      	movs	r0, #1
 8007266:	e018      	b.n	800729a <UART_SetConfig+0x28a>
 8007268:	2001      	movs	r0, #1
 800726a:	e016      	b.n	800729a <UART_SetConfig+0x28a>
          ret = HAL_ERROR;
 800726c:	2001      	movs	r0, #1
 800726e:	e014      	b.n	800729a <UART_SetConfig+0x28a>
    switch (clocksource)
 8007270:	2001      	movs	r0, #1
 8007272:	e012      	b.n	800729a <UART_SetConfig+0x28a>
 8007274:	2000      	movs	r0, #0
 8007276:	e010      	b.n	800729a <UART_SetConfig+0x28a>
 8007278:	efff69f3 	.word	0xefff69f3
 800727c:	40008000 	.word	0x40008000
 8007280:	40013800 	.word	0x40013800
 8007284:	40004400 	.word	0x40004400
 8007288:	40004800 	.word	0x40004800
 800728c:	00f42400 	.word	0x00f42400
 8007290:	000ffcff 	.word	0x000ffcff
        ret = HAL_ERROR;
 8007294:	2001      	movs	r0, #1
 8007296:	e000      	b.n	800729a <UART_SetConfig+0x28a>
    switch (clocksource)
 8007298:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800729a:	2300      	movs	r3, #0
 800729c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800729e:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	2000      	movs	r0, #0
 80072a4:	e7f9      	b.n	800729a <UART_SetConfig+0x28a>
        ret = HAL_ERROR;
 80072a6:	2001      	movs	r0, #1
 80072a8:	e7f7      	b.n	800729a <UART_SetConfig+0x28a>
 80072aa:	bf00      	nop

080072ac <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80072ae:	f013 0f08 	tst.w	r3, #8
 80072b2:	d006      	beq.n	80072c2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072b4:	6802      	ldr	r2, [r0, #0]
 80072b6:	6853      	ldr	r3, [r2, #4]
 80072b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072bc:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80072be:	430b      	orrs	r3, r1
 80072c0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072c2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80072c4:	f013 0f01 	tst.w	r3, #1
 80072c8:	d006      	beq.n	80072d8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ca:	6802      	ldr	r2, [r0, #0]
 80072cc:	6853      	ldr	r3, [r2, #4]
 80072ce:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80072d2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80072d4:	430b      	orrs	r3, r1
 80072d6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072d8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80072da:	f013 0f02 	tst.w	r3, #2
 80072de:	d006      	beq.n	80072ee <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072e0:	6802      	ldr	r2, [r0, #0]
 80072e2:	6853      	ldr	r3, [r2, #4]
 80072e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072e8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072ee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80072f0:	f013 0f04 	tst.w	r3, #4
 80072f4:	d006      	beq.n	8007304 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072f6:	6802      	ldr	r2, [r0, #0]
 80072f8:	6853      	ldr	r3, [r2, #4]
 80072fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072fe:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007300:	430b      	orrs	r3, r1
 8007302:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007304:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007306:	f013 0f10 	tst.w	r3, #16
 800730a:	d006      	beq.n	800731a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800730c:	6802      	ldr	r2, [r0, #0]
 800730e:	6893      	ldr	r3, [r2, #8]
 8007310:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007314:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8007316:	430b      	orrs	r3, r1
 8007318:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800731a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800731c:	f013 0f20 	tst.w	r3, #32
 8007320:	d006      	beq.n	8007330 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007322:	6802      	ldr	r2, [r0, #0]
 8007324:	6893      	ldr	r3, [r2, #8]
 8007326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800732a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800732c:	430b      	orrs	r3, r1
 800732e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007330:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007332:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007336:	d00a      	beq.n	800734e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007338:	6802      	ldr	r2, [r0, #0]
 800733a:	6853      	ldr	r3, [r2, #4]
 800733c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007340:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007342:	430b      	orrs	r3, r1
 8007344:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007346:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007348:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800734c:	d00b      	beq.n	8007366 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800734e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007350:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007354:	d006      	beq.n	8007364 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007356:	6802      	ldr	r2, [r0, #0]
 8007358:	6853      	ldr	r3, [r2, #4]
 800735a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800735e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007360:	430b      	orrs	r3, r1
 8007362:	6053      	str	r3, [r2, #4]
}
 8007364:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007366:	6802      	ldr	r2, [r0, #0]
 8007368:	6853      	ldr	r3, [r2, #4]
 800736a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800736e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8007370:	430b      	orrs	r3, r1
 8007372:	6053      	str	r3, [r2, #4]
 8007374:	e7eb      	b.n	800734e <UART_AdvFeatureConfig+0xa2>

08007376 <UART_WaitOnFlagUntilTimeout>:
{
 8007376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800737a:	4605      	mov	r5, r0
 800737c:	460e      	mov	r6, r1
 800737e:	4617      	mov	r7, r2
 8007380:	4699      	mov	r9, r3
 8007382:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007386:	682b      	ldr	r3, [r5, #0]
 8007388:	69dc      	ldr	r4, [r3, #28]
 800738a:	ea36 0404 	bics.w	r4, r6, r4
 800738e:	bf0c      	ite	eq
 8007390:	2401      	moveq	r4, #1
 8007392:	2400      	movne	r4, #0
 8007394:	42bc      	cmp	r4, r7
 8007396:	d136      	bne.n	8007406 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8007398:	f1b8 3fff 	cmp.w	r8, #4294967295
 800739c:	d0f3      	beq.n	8007386 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739e:	f7fb fd85 	bl	8002eac <HAL_GetTick>
 80073a2:	eba0 0009 	sub.w	r0, r0, r9
 80073a6:	4540      	cmp	r0, r8
 80073a8:	d830      	bhi.n	800740c <UART_WaitOnFlagUntilTimeout+0x96>
 80073aa:	f1b8 0f00 	cmp.w	r8, #0
 80073ae:	d02f      	beq.n	8007410 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	f012 0f04 	tst.w	r2, #4
 80073b8:	d0e5      	beq.n	8007386 <UART_WaitOnFlagUntilTimeout+0x10>
 80073ba:	2e80      	cmp	r6, #128	@ 0x80
 80073bc:	d0e3      	beq.n	8007386 <UART_WaitOnFlagUntilTimeout+0x10>
 80073be:	2e40      	cmp	r6, #64	@ 0x40
 80073c0:	d0e1      	beq.n	8007386 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	f012 0f08 	tst.w	r2, #8
 80073c8:	d111      	bne.n	80073ee <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80073d0:	d0d9      	beq.n	8007386 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073d6:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80073d8:	4628      	mov	r0, r5
 80073da:	f7ff fdf0 	bl	8006fbe <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073de:	2320      	movs	r3, #32
 80073e0:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80073e4:	2300      	movs	r3, #0
 80073e6:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 80073ea:	2003      	movs	r0, #3
 80073ec:	e00c      	b.n	8007408 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ee:	2408      	movs	r4, #8
 80073f0:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7ff fde3 	bl	8006fbe <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073f8:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80073fc:	2300      	movs	r3, #0
 80073fe:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 8007402:	2001      	movs	r0, #1
 8007404:	e000      	b.n	8007408 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 8007406:	2000      	movs	r0, #0
}
 8007408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800740c:	2003      	movs	r0, #3
 800740e:	e7fb      	b.n	8007408 <UART_WaitOnFlagUntilTimeout+0x92>
 8007410:	2003      	movs	r0, #3
 8007412:	e7f9      	b.n	8007408 <UART_WaitOnFlagUntilTimeout+0x92>

08007414 <HAL_UART_Transmit>:
{
 8007414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800741c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800741e:	2b20      	cmp	r3, #32
 8007420:	d156      	bne.n	80074d0 <HAL_UART_Transmit+0xbc>
 8007422:	4604      	mov	r4, r0
 8007424:	460d      	mov	r5, r1
 8007426:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007428:	2900      	cmp	r1, #0
 800742a:	d055      	beq.n	80074d8 <HAL_UART_Transmit+0xc4>
 800742c:	b90a      	cbnz	r2, 8007432 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 800742e:	2001      	movs	r0, #1
 8007430:	e04f      	b.n	80074d2 <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007432:	2300      	movs	r3, #0
 8007434:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007438:	2321      	movs	r3, #33	@ 0x21
 800743a:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800743c:	f7fb fd36 	bl	8002eac <HAL_GetTick>
 8007440:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8007442:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007446:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007450:	d002      	beq.n	8007458 <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 8007452:	f04f 0800 	mov.w	r8, #0
 8007456:	e015      	b.n	8007484 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007458:	6923      	ldr	r3, [r4, #16]
 800745a:	b33b      	cbz	r3, 80074ac <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800745c:	f04f 0800 	mov.w	r8, #0
 8007460:	e010      	b.n	8007484 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 8007462:	2320      	movs	r3, #32
 8007464:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8007466:	2003      	movs	r0, #3
 8007468:	e033      	b.n	80074d2 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800746a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800746e:	6822      	ldr	r2, [r4, #0]
 8007470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007474:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8007476:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800747a:	b292      	uxth	r2, r2
 800747c:	3a01      	subs	r2, #1
 800747e:	b292      	uxth	r2, r2
 8007480:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007484:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8007488:	b29b      	uxth	r3, r3
 800748a:	b193      	cbz	r3, 80074b2 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800748c:	9600      	str	r6, [sp, #0]
 800748e:	463b      	mov	r3, r7
 8007490:	2200      	movs	r2, #0
 8007492:	2180      	movs	r1, #128	@ 0x80
 8007494:	4620      	mov	r0, r4
 8007496:	f7ff ff6e 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 800749a:	2800      	cmp	r0, #0
 800749c:	d1e1      	bne.n	8007462 <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 800749e:	2d00      	cmp	r5, #0
 80074a0:	d0e3      	beq.n	800746a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80074aa:	e7e4      	b.n	8007476 <HAL_UART_Transmit+0x62>
      pdata16bits = (const uint16_t *) pData;
 80074ac:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80074ae:	2500      	movs	r5, #0
 80074b0:	e7e8      	b.n	8007484 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b2:	9600      	str	r6, [sp, #0]
 80074b4:	463b      	mov	r3, r7
 80074b6:	2200      	movs	r2, #0
 80074b8:	2140      	movs	r1, #64	@ 0x40
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff ff5b 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 80074c0:	b910      	cbnz	r0, 80074c8 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 80074c2:	2320      	movs	r3, #32
 80074c4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80074c6:	e004      	b.n	80074d2 <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 80074c8:	2320      	movs	r3, #32
 80074ca:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80074cc:	2003      	movs	r0, #3
 80074ce:	e000      	b.n	80074d2 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80074d0:	2002      	movs	r0, #2
}
 80074d2:	b002      	add	sp, #8
 80074d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80074d8:	2001      	movs	r0, #1
 80074da:	e7fa      	b.n	80074d2 <HAL_UART_Transmit+0xbe>

080074dc <HAL_UART_Receive>:
{
 80074dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074e0:	b083      	sub	sp, #12
 80074e2:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80074e4:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d17d      	bne.n	80075e8 <HAL_UART_Receive+0x10c>
 80074ec:	4604      	mov	r4, r0
 80074ee:	460d      	mov	r5, r1
 80074f0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d07c      	beq.n	80075f0 <HAL_UART_Receive+0x114>
 80074f6:	b90a      	cbnz	r2, 80074fc <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 80074f8:	2001      	movs	r0, #1
 80074fa:	e076      	b.n	80075ea <HAL_UART_Receive+0x10e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007502:	2222      	movs	r2, #34	@ 0x22
 8007504:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007508:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 800750a:	f7fb fccf 	bl	8002eac <HAL_GetTick>
 800750e:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8007510:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007514:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8007518:	68a3      	ldr	r3, [r4, #8]
 800751a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800751e:	d006      	beq.n	800752e <HAL_UART_Receive+0x52>
 8007520:	b9a3      	cbnz	r3, 800754c <HAL_UART_Receive+0x70>
 8007522:	6922      	ldr	r2, [r4, #16]
 8007524:	b972      	cbnz	r2, 8007544 <HAL_UART_Receive+0x68>
 8007526:	22ff      	movs	r2, #255	@ 0xff
 8007528:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800752c:	e014      	b.n	8007558 <HAL_UART_Receive+0x7c>
 800752e:	6922      	ldr	r2, [r4, #16]
 8007530:	b922      	cbnz	r2, 800753c <HAL_UART_Receive+0x60>
 8007532:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007536:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800753a:	e00d      	b.n	8007558 <HAL_UART_Receive+0x7c>
 800753c:	22ff      	movs	r2, #255	@ 0xff
 800753e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8007542:	e009      	b.n	8007558 <HAL_UART_Receive+0x7c>
 8007544:	227f      	movs	r2, #127	@ 0x7f
 8007546:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800754a:	e005      	b.n	8007558 <HAL_UART_Receive+0x7c>
 800754c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007550:	d00a      	beq.n	8007568 <HAL_UART_Receive+0x8c>
 8007552:	2200      	movs	r2, #0
 8007554:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007558:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800755c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007560:	d00c      	beq.n	800757c <HAL_UART_Receive+0xa0>
      pdata16bits = NULL;
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	e020      	b.n	80075aa <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 8007568:	6922      	ldr	r2, [r4, #16]
 800756a:	b91a      	cbnz	r2, 8007574 <HAL_UART_Receive+0x98>
 800756c:	227f      	movs	r2, #127	@ 0x7f
 800756e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8007572:	e7f1      	b.n	8007558 <HAL_UART_Receive+0x7c>
 8007574:	223f      	movs	r2, #63	@ 0x3f
 8007576:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800757a:	e7ed      	b.n	8007558 <HAL_UART_Receive+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	b35b      	cbz	r3, 80075d8 <HAL_UART_Receive+0xfc>
      pdata16bits = NULL;
 8007580:	f04f 0900 	mov.w	r9, #0
 8007584:	e011      	b.n	80075aa <HAL_UART_Receive+0xce>
        huart->RxState = HAL_UART_STATE_READY;
 8007586:	2320      	movs	r3, #32
 8007588:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 800758c:	2003      	movs	r0, #3
 800758e:	e02c      	b.n	80075ea <HAL_UART_Receive+0x10e>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007594:	ea08 0303 	and.w	r3, r8, r3
 8007598:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 800759c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 80075a0:	b292      	uxth	r2, r2
 80075a2:	3a01      	subs	r2, #1
 80075a4:	b292      	uxth	r2, r2
 80075a6:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80075aa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	b1ab      	cbz	r3, 80075de <HAL_UART_Receive+0x102>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075b2:	9600      	str	r6, [sp, #0]
 80075b4:	463b      	mov	r3, r7
 80075b6:	2200      	movs	r2, #0
 80075b8:	2120      	movs	r1, #32
 80075ba:	4620      	mov	r0, r4
 80075bc:	f7ff fedb 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d1e0      	bne.n	8007586 <HAL_UART_Receive+0xaa>
      if (pdata8bits == NULL)
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	d0e3      	beq.n	8007590 <HAL_UART_Receive+0xb4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80075cc:	fa5f f388 	uxtb.w	r3, r8
 80075d0:	4013      	ands	r3, r2
 80075d2:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 80075d6:	e7e1      	b.n	800759c <HAL_UART_Receive+0xc0>
      pdata16bits = (uint16_t *) pData;
 80075d8:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80075da:	2500      	movs	r5, #0
 80075dc:	e7e5      	b.n	80075aa <HAL_UART_Receive+0xce>
    huart->RxState = HAL_UART_STATE_READY;
 80075de:	2320      	movs	r3, #32
 80075e0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 80075e4:	2000      	movs	r0, #0
 80075e6:	e000      	b.n	80075ea <HAL_UART_Receive+0x10e>
    return HAL_BUSY;
 80075e8:	2002      	movs	r0, #2
}
 80075ea:	b003      	add	sp, #12
 80075ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80075f0:	2001      	movs	r0, #1
 80075f2:	e7fa      	b.n	80075ea <HAL_UART_Receive+0x10e>

080075f4 <UART_CheckIdleState>:
{
 80075f4:	b530      	push	{r4, r5, lr}
 80075f6:	b083      	sub	sp, #12
 80075f8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8007600:	f7fb fc54 	bl	8002eac <HAL_GetTick>
 8007604:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	6812      	ldr	r2, [r2, #0]
 800760a:	f012 0f08 	tst.w	r2, #8
 800760e:	d10f      	bne.n	8007630 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f013 0f04 	tst.w	r3, #4
 8007618:	d126      	bne.n	8007668 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 800761a:	2320      	movs	r3, #32
 800761c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800761e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	2000      	movs	r0, #0
 8007624:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007626:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8007628:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 800762c:	b003      	add	sp, #12
 800762e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4603      	mov	r3, r0
 8007638:	2200      	movs	r2, #0
 800763a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800763e:	4620      	mov	r0, r4
 8007640:	f7ff fe99 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 8007644:	2800      	cmp	r0, #0
 8007646:	d0e3      	beq.n	8007610 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007648:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	e852 3f00 	ldrex	r3, [r2]
 800764e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	e842 3100 	strex	r1, r3, [r2]
 8007656:	2900      	cmp	r1, #0
 8007658:	d1f6      	bne.n	8007648 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 800765a:	2320      	movs	r3, #32
 800765c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 800765e:	2300      	movs	r3, #0
 8007660:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8007664:	2003      	movs	r0, #3
 8007666:	e7e1      	b.n	800762c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	462b      	mov	r3, r5
 8007670:	2200      	movs	r2, #0
 8007672:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007676:	4620      	mov	r0, r4
 8007678:	f7ff fe7d 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 800767c:	2800      	cmp	r0, #0
 800767e:	d0cc      	beq.n	800761a <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007680:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	e852 3f00 	ldrex	r3, [r2]
 8007686:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	e842 3100 	strex	r1, r3, [r2]
 800768e:	2900      	cmp	r1, #0
 8007690:	d1f6      	bne.n	8007680 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007692:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	f102 0308 	add.w	r3, r2, #8
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	3208      	adds	r2, #8
 80076a2:	e842 3100 	strex	r1, r3, [r2]
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d1f3      	bne.n	8007692 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 80076aa:	2320      	movs	r3, #32
 80076ac:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 80076b0:	2300      	movs	r3, #0
 80076b2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 80076b6:	2003      	movs	r0, #3
 80076b8:	e7b8      	b.n	800762c <UART_CheckIdleState+0x38>

080076ba <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d032      	beq.n	8007724 <HAL_HalfDuplex_Init+0x6a>
{
 80076be:	b510      	push	{r4, lr}
 80076c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80076c2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80076c4:	b32b      	cbz	r3, 8007712 <HAL_HalfDuplex_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 80076c6:	2324      	movs	r3, #36	@ 0x24
 80076c8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	6813      	ldr	r3, [r2, #0]
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80076d6:	bb0b      	cbnz	r3, 800771c <HAL_HalfDuplex_Init+0x62>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff fc99 	bl	8007010 <UART_SetConfig>
 80076de:	2801      	cmp	r0, #1
 80076e0:	d016      	beq.n	8007710 <HAL_HalfDuplex_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	6853      	ldr	r3, [r2, #4]
 80076e6:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80076ea:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	6893      	ldr	r3, [r2, #8]
 80076f0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80076f4:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	6893      	ldr	r3, [r2, #8]
 80076fa:	f043 0308 	orr.w	r3, r3, #8
 80076fe:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	f043 0301 	orr.w	r3, r3, #1
 8007708:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800770a:	4620      	mov	r0, r4
 800770c:	f7ff ff72 	bl	80075f4 <UART_CheckIdleState>
}
 8007710:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007712:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8007716:	f7fd f8dd 	bl	80048d4 <HAL_UART_MspInit>
 800771a:	e7d4      	b.n	80076c6 <HAL_HalfDuplex_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800771c:	4620      	mov	r0, r4
 800771e:	f7ff fdc5 	bl	80072ac <UART_AdvFeatureConfig>
 8007722:	e7d9      	b.n	80076d8 <HAL_HalfDuplex_Init+0x1e>
    return HAL_ERROR;
 8007724:	2001      	movs	r0, #1
}
 8007726:	4770      	bx	lr

08007728 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007728:	e7fe      	b.n	8007728 <NMI_Handler>

0800772a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800772a:	e7fe      	b.n	800772a <HardFault_Handler>

0800772c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800772c:	e7fe      	b.n	800772c <MemManage_Handler>

0800772e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800772e:	e7fe      	b.n	800772e <BusFault_Handler>

08007730 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007730:	e7fe      	b.n	8007730 <UsageFault_Handler>

08007732 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007732:	4770      	bx	lr

08007734 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007734:	4770      	bx	lr

08007736 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007736:	4770      	bx	lr

08007738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007738:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800773a:	f7fb fbab 	bl	8002e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800773e:	bd08      	pop	{r3, pc}

08007740 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007740:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OK_Pin);
 8007742:	2001      	movs	r0, #1
 8007744:	f7fc fd60 	bl	8004208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007748:	bd08      	pop	{r3, pc}
	...

0800774c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800774c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800774e:	4802      	ldr	r0, [pc, #8]	@ (8007758 <DMA1_Channel1_IRQHandler+0xc>)
 8007750:	f7fc fb8e 	bl	8003e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007754:	bd08      	pop	{r3, pc}
 8007756:	bf00      	nop
 8007758:	200013f0 	.word	0x200013f0

0800775c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800775c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800775e:	4802      	ldr	r0, [pc, #8]	@ (8007768 <ADC1_2_IRQHandler+0xc>)
 8007760:	f7fb fcf2 	bl	8003148 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8007764:	bd08      	pop	{r3, pc}
 8007766:	bf00      	nop
 8007768:	20001438 	.word	0x20001438

0800776c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800776c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_WKUP_Pin);
 800776e:	2020      	movs	r0, #32
 8007770:	f7fc fd4a 	bl	8004208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007774:	bd08      	pop	{r3, pc}
	...

08007778 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8007778:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800777a:	4802      	ldr	r0, [pc, #8]	@ (8007784 <LPTIM1_IRQHandler+0xc>)
 800777c:	f7fc fd78 	bl	8004270 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8007780:	bd08      	pop	{r3, pc}
 8007782:	bf00      	nop
 8007784:	200013b4 	.word	0x200013b4

08007788 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8007788:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800778a:	4802      	ldr	r0, [pc, #8]	@ (8007794 <USB_IRQHandler+0xc>)
 800778c:	f7fd feb0 	bl	80054f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8007790:	bd08      	pop	{r3, pc}
 8007792:	bf00      	nop
 8007794:	2000220c 	.word	0x2000220c

08007798 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007798:	b084      	sub	sp, #16
 800779a:	a804      	add	r0, sp, #16
 800779c:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80077a0:	2000      	movs	r0, #0
 80077a2:	b004      	add	sp, #16
 80077a4:	4770      	bx	lr

080077a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80077a6:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077a8:	2000      	movs	r0, #0
 80077aa:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80077ae:	f64b 7280 	movw	r2, #49024	@ 0xbf80
 80077b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80077b6:	4770      	bx	lr

080077b8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80077b8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80077bc:	f423 537e 	bic.w	r3, r3, #16256	@ 0x3f80
 80077c0:	045b      	lsls	r3, r3, #17
 80077c2:	0c5b      	lsrs	r3, r3, #17
 80077c4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80077c8:	2000      	movs	r0, #0
 80077ca:	4770      	bx	lr

080077cc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80077cc:	2000      	movs	r0, #0
 80077ce:	4770      	bx	lr

080077d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80077d0:	b084      	sub	sp, #16
 80077d2:	4684      	mov	ip, r0
 80077d4:	a804      	add	r0, sp, #16
 80077d6:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80077da:	2301      	movs	r3, #1
 80077dc:	f8ac 3040 	strh.w	r3, [ip, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80077e0:	2000      	movs	r0, #0
 80077e2:	f8ac 0040 	strh.w	r0, [ip, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077e6:	f8ac 0044 	strh.w	r0, [ip, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80077ea:	f8ac 0050 	strh.w	r0, [ip, #80]	@ 0x50

  return HAL_OK;
}
 80077ee:	b004      	add	sp, #16
 80077f0:	4770      	bx	lr

080077f2 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80077f6:	f891 c000 	ldrb.w	ip, [r1]
 80077fa:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 80077fe:	b292      	uxth	r2, r2
 8007800:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 8007804:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007808:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 800780a:	78c8      	ldrb	r0, [r1, #3]
 800780c:	2803      	cmp	r0, #3
 800780e:	d861      	bhi.n	80078d4 <USB_ActivateEndpoint+0xe2>
 8007810:	e8df f000 	tbb	[pc, r0]
 8007814:	58025c55 	.word	0x58025c55
 8007818:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800781a:	f248 0e80 	movw	lr, #32896	@ 0x8080
 800781e:	ea42 020e 	orr.w	r2, r2, lr
 8007822:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007826:	f891 c000 	ldrb.w	ip, [r1]
 800782a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800782e:	b292      	uxth	r2, r2
 8007830:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007834:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007838:	ea4c 0202 	orr.w	r2, ip, r2
 800783c:	ea42 020e 	orr.w	r2, r2, lr
 8007840:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8007844:	7b0a      	ldrb	r2, [r1, #12]
 8007846:	2a00      	cmp	r2, #0
 8007848:	f040 80dc 	bne.w	8007a04 <USB_ActivateEndpoint+0x212>
  {
    if (ep->is_in != 0U)
 800784c:	784a      	ldrb	r2, [r1, #1]
 800784e:	2a00      	cmp	r2, #0
 8007850:	d051      	beq.n	80078f6 <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007852:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007856:	fa13 f282 	uxtah	r2, r3, r2
 800785a:	780c      	ldrb	r4, [r1, #0]
 800785c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007860:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8007864:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007868:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800786c:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007870:	780c      	ldrb	r4, [r1, #0]
 8007872:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007876:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800787a:	d00c      	beq.n	8007896 <USB_ActivateEndpoint+0xa4>
 800787c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007880:	b292      	uxth	r2, r2
 8007882:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007886:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800788a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800788e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8007892:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8007896:	78ca      	ldrb	r2, [r1, #3]
 8007898:	2a01      	cmp	r2, #1
 800789a:	d01d      	beq.n	80078d8 <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800789c:	7809      	ldrb	r1, [r1, #0]
 800789e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80078a2:	b292      	uxth	r2, r2
 80078a4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80078a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ac:	f082 0220 	eor.w	r2, r2, #32
 80078b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078b8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80078bc:	e1c3      	b.n	8007c46 <USB_ActivateEndpoint+0x454>
      wEpRegVal |= USB_EP_CONTROL;
 80078be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 80078c2:	e7aa      	b.n	800781a <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 80078c4:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80078c8:	2000      	movs	r0, #0
      break;
 80078ca:	e7a6      	b.n	800781a <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80078cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80078d0:	2000      	movs	r0, #0
      break;
 80078d2:	e7a2      	b.n	800781a <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80078d4:	2001      	movs	r0, #1
 80078d6:	e7a0      	b.n	800781a <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078d8:	7809      	ldrb	r1, [r1, #0]
 80078da:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80078de:	b292      	uxth	r2, r2
 80078e0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80078e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078f0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80078f4:	e1a7      	b.n	8007c46 <USB_ActivateEndpoint+0x454>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078f6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80078fa:	fa13 f282 	uxtah	r2, r3, r2
 80078fe:	780c      	ldrb	r4, [r1, #0]
 8007900:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007904:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8007908:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800790c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007910:	f8a2 c404 	strh.w	ip, [r2, #1028]	@ 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007914:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007918:	fa13 f282 	uxtah	r2, r3, r2
 800791c:	780c      	ldrb	r4, [r1, #0]
 800791e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007922:	f8b2 c406 	ldrh.w	ip, [r2, #1030]	@ 0x406
 8007926:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800792a:	f8a2 c406 	strh.w	ip, [r2, #1030]	@ 0x406
 800792e:	690c      	ldr	r4, [r1, #16]
 8007930:	bb74      	cbnz	r4, 8007990 <USB_ActivateEndpoint+0x19e>
 8007932:	f8b2 c406 	ldrh.w	ip, [r2, #1030]	@ 0x406
 8007936:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 800793a:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 800793e:	fa1f fc8c 	uxth.w	ip, ip
 8007942:	f8a2 c406 	strh.w	ip, [r2, #1030]	@ 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007946:	780c      	ldrb	r4, [r1, #0]
 8007948:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800794c:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8007950:	d00c      	beq.n	800796c <USB_ActivateEndpoint+0x17a>
 8007952:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007956:	b292      	uxth	r2, r2
 8007958:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800795c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007960:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007964:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007968:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->num == 0U)
 800796c:	7809      	ldrb	r1, [r1, #0]
 800796e:	bbc9      	cbnz	r1, 80079e4 <USB_ActivateEndpoint+0x1f2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007970:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007974:	b292      	uxth	r2, r2
 8007976:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800797a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800797e:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8007982:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007986:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800798a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800798e:	e15a      	b.n	8007c46 <USB_ActivateEndpoint+0x454>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007990:	2c3e      	cmp	r4, #62	@ 0x3e
 8007992:	d812      	bhi.n	80079ba <USB_ActivateEndpoint+0x1c8>
 8007994:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8007998:	f014 0f01 	tst.w	r4, #1
 800799c:	d001      	beq.n	80079a2 <USB_ActivateEndpoint+0x1b0>
 800799e:	f10c 0c01 	add.w	ip, ip, #1
 80079a2:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 80079a6:	b2a4      	uxth	r4, r4
 80079a8:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80079ac:	fa1f fc8c 	uxth.w	ip, ip
 80079b0:	ea44 040c 	orr.w	r4, r4, ip
 80079b4:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 80079b8:	e7c5      	b.n	8007946 <USB_ActivateEndpoint+0x154>
 80079ba:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 80079be:	f014 0f1f 	tst.w	r4, #31
 80079c2:	d101      	bne.n	80079c8 <USB_ActivateEndpoint+0x1d6>
 80079c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079c8:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 80079cc:	b2a4      	uxth	r4, r4
 80079ce:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80079d2:	fa1f fc8c 	uxth.w	ip, ip
 80079d6:	ea44 040c 	orr.w	r4, r4, ip
 80079da:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 80079de:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 80079e2:	e7b0      	b.n	8007946 <USB_ActivateEndpoint+0x154>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80079e4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80079e8:	b292      	uxth	r2, r2
 80079ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80079ee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80079f2:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 80079f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079fe:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007a02:	e120      	b.n	8007c46 <USB_ActivateEndpoint+0x454>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007a04:	78ca      	ldrb	r2, [r1, #3]
 8007a06:	2a02      	cmp	r2, #2
 8007a08:	d074      	beq.n	8007af4 <USB_ActivateEndpoint+0x302>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a0a:	f891 c000 	ldrb.w	ip, [r1]
 8007a0e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8007a12:	b292      	uxth	r2, r2
 8007a14:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8007a18:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007a1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a24:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a28:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007a2c:	fa13 f282 	uxtah	r2, r3, r2
 8007a30:	f891 c000 	ldrb.w	ip, [r1]
 8007a34:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8007a38:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8007a3c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007a40:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007a44:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
 8007a48:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007a4c:	fa13 f282 	uxtah	r2, r3, r2
 8007a50:	f891 c000 	ldrb.w	ip, [r1]
 8007a54:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8007a58:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8007a5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007a60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007a64:	f8a2 c404 	strh.w	ip, [r2, #1028]	@ 0x404

    if (ep->is_in == 0U)
 8007a68:	784a      	ldrb	r2, [r1, #1]
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	f040 80f7 	bne.w	8007c5e <USB_ActivateEndpoint+0x46c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a70:	780c      	ldrb	r4, [r1, #0]
 8007a72:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007a76:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8007a7a:	d00c      	beq.n	8007a96 <USB_ActivateEndpoint+0x2a4>
 8007a7c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007a80:	b292      	uxth	r2, r2
 8007a82:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007a86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007a8a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007a8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a92:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a96:	780c      	ldrb	r4, [r1, #0]
 8007a98:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007a9c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8007aa0:	d00c      	beq.n	8007abc <USB_ActivateEndpoint+0x2ca>
 8007aa2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007aa6:	b292      	uxth	r2, r2
 8007aa8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007aac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007ab0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ab4:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8007ab8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007abc:	784a      	ldrb	r2, [r1, #1]
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d151      	bne.n	8007b66 <USB_ActivateEndpoint+0x374>
 8007ac2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007ac6:	fa13 f282 	uxtah	r2, r3, r2
 8007aca:	780c      	ldrb	r4, [r1, #0]
 8007acc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007ad0:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	@ 0x402
 8007ad4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007ad8:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 8007adc:	690c      	ldr	r4, [r1, #16]
 8007ade:	b9c4      	cbnz	r4, 8007b12 <USB_ActivateEndpoint+0x320>
 8007ae0:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	@ 0x402
 8007ae4:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007ae8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007aec:	b2a4      	uxth	r4, r4
 8007aee:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 8007af2:	e03a      	b.n	8007b6a <USB_ActivateEndpoint+0x378>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007af4:	780c      	ldrb	r4, [r1, #0]
 8007af6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007afa:	b292      	uxth	r2, r2
 8007afc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007b00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007b04:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8007b08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007b0c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007b10:	e78a      	b.n	8007a28 <USB_ActivateEndpoint+0x236>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b12:	2c3e      	cmp	r4, #62	@ 0x3e
 8007b14:	d812      	bhi.n	8007b3c <USB_ActivateEndpoint+0x34a>
 8007b16:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8007b1a:	f014 0f01 	tst.w	r4, #1
 8007b1e:	d001      	beq.n	8007b24 <USB_ActivateEndpoint+0x332>
 8007b20:	f10c 0c01 	add.w	ip, ip, #1
 8007b24:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	@ 0x402
 8007b28:	b2a4      	uxth	r4, r4
 8007b2a:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8007b2e:	fa1f fc8c 	uxth.w	ip, ip
 8007b32:	ea44 040c 	orr.w	r4, r4, ip
 8007b36:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 8007b3a:	e016      	b.n	8007b6a <USB_ActivateEndpoint+0x378>
 8007b3c:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8007b40:	f014 0f1f 	tst.w	r4, #31
 8007b44:	d101      	bne.n	8007b4a <USB_ActivateEndpoint+0x358>
 8007b46:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b4a:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	@ 0x402
 8007b4e:	b2a4      	uxth	r4, r4
 8007b50:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8007b54:	fa1f fc8c 	uxth.w	ip, ip
 8007b58:	ea44 040c 	orr.w	r4, r4, ip
 8007b5c:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8007b60:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 8007b64:	e001      	b.n	8007b6a <USB_ActivateEndpoint+0x378>
 8007b66:	2a01      	cmp	r2, #1
 8007b68:	d01b      	beq.n	8007ba2 <USB_ActivateEndpoint+0x3b0>
 8007b6a:	784a      	ldrb	r2, [r1, #1]
 8007b6c:	2a00      	cmp	r2, #0
 8007b6e:	d14d      	bne.n	8007c0c <USB_ActivateEndpoint+0x41a>
 8007b70:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007b74:	fa13 f282 	uxtah	r2, r3, r2
 8007b78:	780c      	ldrb	r4, [r1, #0]
 8007b7a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007b7e:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 8007b82:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007b86:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 8007b8a:	690c      	ldr	r4, [r1, #16]
 8007b8c:	b9a4      	cbnz	r4, 8007bb8 <USB_ActivateEndpoint+0x3c6>
 8007b8e:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 8007b92:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007b96:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007b9a:	b2a4      	uxth	r4, r4
 8007b9c:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 8007ba0:	e036      	b.n	8007c10 <USB_ActivateEndpoint+0x41e>
 8007ba2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007ba6:	fa13 f282 	uxtah	r2, r3, r2
 8007baa:	780c      	ldrb	r4, [r1, #0]
 8007bac:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007bb0:	8a0c      	ldrh	r4, [r1, #16]
 8007bb2:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 8007bb6:	e7d8      	b.n	8007b6a <USB_ActivateEndpoint+0x378>
 8007bb8:	2c3e      	cmp	r4, #62	@ 0x3e
 8007bba:	d812      	bhi.n	8007be2 <USB_ActivateEndpoint+0x3f0>
 8007bbc:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8007bc0:	f014 0f01 	tst.w	r4, #1
 8007bc4:	d001      	beq.n	8007bca <USB_ActivateEndpoint+0x3d8>
 8007bc6:	f10c 0c01 	add.w	ip, ip, #1
 8007bca:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 8007bce:	b2a4      	uxth	r4, r4
 8007bd0:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8007bd4:	fa1f fc8c 	uxth.w	ip, ip
 8007bd8:	ea44 040c 	orr.w	r4, r4, ip
 8007bdc:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 8007be0:	e016      	b.n	8007c10 <USB_ActivateEndpoint+0x41e>
 8007be2:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8007be6:	f014 0f1f 	tst.w	r4, #31
 8007bea:	d101      	bne.n	8007bf0 <USB_ActivateEndpoint+0x3fe>
 8007bec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007bf0:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 8007bf4:	b2a4      	uxth	r4, r4
 8007bf6:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8007bfa:	fa1f fc8c 	uxth.w	ip, ip
 8007bfe:	ea44 040c 	orr.w	r4, r4, ip
 8007c02:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8007c06:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 8007c0a:	e001      	b.n	8007c10 <USB_ActivateEndpoint+0x41e>
 8007c0c:	2a01      	cmp	r2, #1
 8007c0e:	d01b      	beq.n	8007c48 <USB_ActivateEndpoint+0x456>

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c10:	f891 c000 	ldrb.w	ip, [r1]
 8007c14:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8007c18:	b292      	uxth	r2, r2
 8007c1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007c22:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8007c26:	f248 0480 	movw	r4, #32896	@ 0x8080
 8007c2a:	4322      	orrs	r2, r4
 8007c2c:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c30:	7809      	ldrb	r1, [r1, #0]
 8007c32:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007c36:	b292      	uxth	r2, r2
 8007c38:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c40:	4322      	orrs	r2, r4
 8007c42:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8007c46:	bd10      	pop	{r4, pc}
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c48:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007c4c:	fa13 f282 	uxtah	r2, r3, r2
 8007c50:	780c      	ldrb	r4, [r1, #0]
 8007c52:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007c56:	8a0c      	ldrh	r4, [r1, #16]
 8007c58:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 8007c5c:	e7d8      	b.n	8007c10 <USB_ActivateEndpoint+0x41e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c5e:	780c      	ldrb	r4, [r1, #0]
 8007c60:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007c64:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8007c68:	d00c      	beq.n	8007c84 <USB_ActivateEndpoint+0x492>
 8007c6a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007c6e:	b292      	uxth	r2, r2
 8007c70:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007c74:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007c78:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007c7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007c80:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c84:	780c      	ldrb	r4, [r1, #0]
 8007c86:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007c8a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8007c8e:	d00c      	beq.n	8007caa <USB_ActivateEndpoint+0x4b8>
 8007c90:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007c94:	b292      	uxth	r2, r2
 8007c96:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007c9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007c9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ca2:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8007ca6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8007caa:	78ca      	ldrb	r2, [r1, #3]
 8007cac:	2a01      	cmp	r2, #1
 8007cae:	d01e      	beq.n	8007cee <USB_ActivateEndpoint+0x4fc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cb0:	780c      	ldrb	r4, [r1, #0]
 8007cb2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cc0:	f082 0220 	eor.w	r2, r2, #32
 8007cc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ccc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cd0:	7809      	ldrb	r1, [r1, #0]
 8007cd2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007cdc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007ce0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ce4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ce8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007cec:	e7ab      	b.n	8007c46 <USB_ActivateEndpoint+0x454>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cee:	780c      	ldrb	r4, [r1, #0]
 8007cf0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007cf4:	b292      	uxth	r2, r2
 8007cf6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d06:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007d0a:	e7e1      	b.n	8007cd0 <USB_ActivateEndpoint+0x4de>

08007d0c <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007d0c:	7b0b      	ldrb	r3, [r1, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d146      	bne.n	8007da0 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8007d12:	784b      	ldrb	r3, [r1, #1]
 8007d14:	b313      	cbz	r3, 8007d5c <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d16:	780a      	ldrb	r2, [r1, #0]
 8007d18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007d1c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007d20:	d00c      	beq.n	8007d3c <USB_DeactivateEndpoint+0x30>
 8007d22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d3c:	780a      	ldrb	r2, [r1, #0]
 8007d3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d54:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8007d58:	2000      	movs	r0, #0
 8007d5a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d5c:	780a      	ldrb	r2, [r1, #0]
 8007d5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007d62:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007d66:	d00c      	beq.n	8007d82 <USB_DeactivateEndpoint+0x76>
 8007d68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d7e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d82:	780a      	ldrb	r2, [r1, #0]
 8007d84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007d9e:	e7db      	b.n	8007d58 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8007da0:	784b      	ldrb	r3, [r1, #1]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d14e      	bne.n	8007e44 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007da6:	780a      	ldrb	r2, [r1, #0]
 8007da8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007dac:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007db0:	d00c      	beq.n	8007dcc <USB_DeactivateEndpoint+0xc0>
 8007db2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dcc:	780a      	ldrb	r2, [r1, #0]
 8007dce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007dd2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007dd6:	d00c      	beq.n	8007df2 <USB_DeactivateEndpoint+0xe6>
 8007dd8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8007df2:	780a      	ldrb	r2, [r1, #0]
 8007df4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e0e:	780a      	ldrb	r2, [r1, #0]
 8007e10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1e:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8007e22:	ea43 030c 	orr.w	r3, r3, ip
 8007e26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e2a:	780a      	ldrb	r2, [r1, #0]
 8007e2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e3a:	ea43 030c 	orr.w	r3, r3, ip
 8007e3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007e42:	e789      	b.n	8007d58 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e44:	780a      	ldrb	r2, [r1, #0]
 8007e46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007e4a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007e4e:	d00c      	beq.n	8007e6a <USB_DeactivateEndpoint+0x15e>
 8007e50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e6a:	780a      	ldrb	r2, [r1, #0]
 8007e6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007e70:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007e74:	d00c      	beq.n	8007e90 <USB_DeactivateEndpoint+0x184>
 8007e76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8007e90:	780a      	ldrb	r2, [r1, #0]
 8007e92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ea8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eac:	780a      	ldrb	r2, [r1, #0]
 8007eae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ebc:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8007ec0:	ea43 030c 	orr.w	r3, r3, ip
 8007ec4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ec8:	780a      	ldrb	r2, [r1, #0]
 8007eca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed8:	ea43 030c 	orr.w	r3, r3, ip
 8007edc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007ee0:	e73a      	b.n	8007d58 <USB_DeactivateEndpoint+0x4c>

08007ee2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8007ee2:	784b      	ldrb	r3, [r1, #1]
 8007ee4:	b18b      	cbz	r3, 8007f0a <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ee6:	780a      	ldrb	r2, [r1, #0]
 8007ee8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ef6:	f083 0310 	eor.w	r3, r3, #16
 8007efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8007f06:	2000      	movs	r0, #0
 8007f08:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f0a:	780a      	ldrb	r2, [r1, #0]
 8007f0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007f2a:	e7ec      	b.n	8007f06 <USB_EPSetStall+0x24>

08007f2c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8007f2c:	784b      	ldrb	r3, [r1, #1]
 8007f2e:	b333      	cbz	r3, 8007f7e <USB_EPClearStall+0x52>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f30:	780a      	ldrb	r2, [r1, #0]
 8007f32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f36:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007f3a:	d00c      	beq.n	8007f56 <USB_EPClearStall+0x2a>
 8007f3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

    if (ep->type != EP_TYPE_ISOC)
 8007f56:	78cb      	ldrb	r3, [r1, #3]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d033      	beq.n	8007fc4 <USB_EPClearStall+0x98>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f5c:	780a      	ldrb	r2, [r1, #0]
 8007f5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f6c:	f083 0320 	eor.w	r3, r3, #32
 8007f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007f7c:	e022      	b.n	8007fc4 <USB_EPClearStall+0x98>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f7e:	780a      	ldrb	r2, [r1, #0]
 8007f80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f84:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007f88:	d00c      	beq.n	8007fa4 <USB_EPClearStall+0x78>
 8007f8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fa4:	780a      	ldrb	r2, [r1, #0]
 8007fa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8007fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	4770      	bx	lr

08007fc8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8007fc8:	b911      	cbnz	r1, 8007fd0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007fca:	2380      	movs	r3, #128	@ 0x80
 8007fcc:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4770      	bx	lr

08007fd4 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007fd4:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8007fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	4770      	bx	lr

08007fea <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007fea:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8007fee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007ff2:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	4770      	bx	lr

08007ffa <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ffa:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8007ffe:	b280      	uxth	r0, r0
 8008000:	4770      	bx	lr

08008002 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8008002:	2000      	movs	r0, #0
 8008004:	4770      	bx	lr

08008006 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008006:	3301      	adds	r3, #1
 8008008:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800800a:	4402      	add	r2, r0
 800800c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 8008010:	e008      	b.n	8008024 <USB_WritePMA+0x1e>
  {
    WrVal = pBuf[0];
 8008012:	7808      	ldrb	r0, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008014:	f891 c001 	ldrb.w	ip, [r1, #1]
 8008018:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 800801c:	f822 0b02 	strh.w	r0, [r2], #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8008020:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8008022:	3b01      	subs	r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f4      	bne.n	8008012 <USB_WritePMA+0xc>
  }
}
 8008028:	4770      	bx	lr

0800802a <USB_EPStartXfer>:
{
 800802a:	b570      	push	{r4, r5, r6, lr}
 800802c:	4605      	mov	r5, r0
 800802e:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8008030:	784b      	ldrb	r3, [r1, #1]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d01a      	beq.n	800806c <USB_EPStartXfer+0x42>
    if (ep->doublebuffer == 0U)
 8008036:	7b0b      	ldrb	r3, [r1, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 8292 	bne.w	8008562 <USB_EPStartXfer+0x538>
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800803e:	698b      	ldr	r3, [r1, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f040 8265 	bne.w	8008510 <USB_EPStartXfer+0x4e6>
 8008046:	78cb      	ldrb	r3, [r1, #3]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f040 8261 	bne.w	8008510 <USB_EPStartXfer+0x4e6>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800804e:	780a      	ldrb	r2, [r1, #0]
 8008050:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800805a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800805e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008066:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800806a:	e25f      	b.n	800852c <USB_EPStartXfer+0x502>
    if (ep->xfer_len > ep->maxpacket)
 800806c:	698e      	ldr	r6, [r1, #24]
 800806e:	690a      	ldr	r2, [r1, #16]
 8008070:	4296      	cmp	r6, r2
 8008072:	d900      	bls.n	8008076 <USB_EPStartXfer+0x4c>
      len = ep->maxpacket;
 8008074:	4616      	mov	r6, r2
    if (ep->doublebuffer == 0U)
 8008076:	7b21      	ldrb	r1, [r4, #12]
 8008078:	b341      	cbz	r1, 80080cc <USB_EPStartXfer+0xa2>
      if (ep->type == EP_TYPE_BULK)
 800807a:	78e1      	ldrb	r1, [r4, #3]
 800807c:	2902      	cmp	r1, #2
 800807e:	d047      	beq.n	8008110 <USB_EPStartXfer+0xe6>
        ep->xfer_len_db -= len;
 8008080:	6a22      	ldr	r2, [r4, #32]
 8008082:	1b92      	subs	r2, r2, r6
 8008084:	6222      	str	r2, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008086:	7822      	ldrb	r2, [r4, #0]
 8008088:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 800808c:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8008090:	f000 81f6 	beq.w	8008480 <USB_EPStartXfer+0x456>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008094:	2b00      	cmp	r3, #0
 8008096:	f040 81e3 	bne.w	8008460 <USB_EPStartXfer+0x436>
 800809a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800809e:	fa15 f383 	uxtah	r3, r5, r3
 80080a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80080a6:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 80080aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ae:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 80080b2:	2e00      	cmp	r6, #0
 80080b4:	f040 81b4 	bne.w	8008420 <USB_EPStartXfer+0x3f6>
 80080b8:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 80080bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 80080ca:	e1d2      	b.n	8008472 <USB_EPStartXfer+0x448>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080cc:	b2b6      	uxth	r6, r6
 80080ce:	4633      	mov	r3, r6
 80080d0:	88e2      	ldrh	r2, [r4, #6]
 80080d2:	6961      	ldr	r1, [r4, #20]
 80080d4:	4628      	mov	r0, r5
 80080d6:	f7ff ff96 	bl	8008006 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80080da:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80080de:	fa15 f383 	uxtah	r3, r5, r3
 80080e2:	7822      	ldrb	r2, [r4, #0]
 80080e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080e8:	f8a3 6402 	strh.w	r6, [r3, #1026]	@ 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080ec:	7822      	ldrb	r2, [r4, #0]
 80080ee:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080fc:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8008100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008108:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800810c:	2000      	movs	r0, #0
 800810e:	e224      	b.n	800855a <USB_EPStartXfer+0x530>
        if (ep->xfer_len_db > ep->maxpacket)
 8008110:	6a23      	ldr	r3, [r4, #32]
 8008112:	429a      	cmp	r2, r3
 8008114:	f080 8166 	bcs.w	80083e4 <USB_EPStartXfer+0x3ba>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008118:	7822      	ldrb	r2, [r4, #0]
 800811a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008128:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800812c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008130:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8008134:	6a23      	ldr	r3, [r4, #32]
 8008136:	1b9b      	subs	r3, r3, r6
 8008138:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800813a:	7823      	ldrb	r3, [r4, #0]
 800813c:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8008140:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008144:	f000 80a7 	beq.w	8008296 <USB_EPStartXfer+0x26c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008148:	7862      	ldrb	r2, [r4, #1]
 800814a:	bbb2      	cbnz	r2, 80081ba <USB_EPStartXfer+0x190>
 800814c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8008150:	fa15 f282 	uxtah	r2, r5, r2
 8008154:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008158:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800815c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008160:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8008164:	b94e      	cbnz	r6, 800817a <USB_EPStartXfer+0x150>
 8008166:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800816a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800816e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008172:	b292      	uxth	r2, r2
 8008174:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8008178:	e021      	b.n	80081be <USB_EPStartXfer+0x194>
 800817a:	2e3e      	cmp	r6, #62	@ 0x3e
 800817c:	d80d      	bhi.n	800819a <USB_EPStartXfer+0x170>
 800817e:	0872      	lsrs	r2, r6, #1
 8008180:	f016 0f01 	tst.w	r6, #1
 8008184:	d000      	beq.n	8008188 <USB_EPStartXfer+0x15e>
 8008186:	3201      	adds	r2, #1
 8008188:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	@ 0x406
 800818c:	b289      	uxth	r1, r1
 800818e:	0292      	lsls	r2, r2, #10
 8008190:	b292      	uxth	r2, r2
 8008192:	430a      	orrs	r2, r1
 8008194:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8008198:	e011      	b.n	80081be <USB_EPStartXfer+0x194>
 800819a:	0971      	lsrs	r1, r6, #5
 800819c:	f016 0f1f 	tst.w	r6, #31
 80081a0:	d100      	bne.n	80081a4 <USB_EPStartXfer+0x17a>
 80081a2:	3901      	subs	r1, #1
 80081a4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80081a8:	b292      	uxth	r2, r2
 80081aa:	0289      	lsls	r1, r1, #10
 80081ac:	b289      	uxth	r1, r1
 80081ae:	430a      	orrs	r2, r1
 80081b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081b4:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80081b8:	e001      	b.n	80081be <USB_EPStartXfer+0x194>
 80081ba:	2a01      	cmp	r2, #1
 80081bc:	d029      	beq.n	8008212 <USB_EPStartXfer+0x1e8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081be:	b2b3      	uxth	r3, r6
 80081c0:	8962      	ldrh	r2, [r4, #10]
 80081c2:	6961      	ldr	r1, [r4, #20]
 80081c4:	4628      	mov	r0, r5
 80081c6:	f7ff ff1e 	bl	8008006 <USB_WritePMA>
            ep->xfer_buff += len;
 80081ca:	6963      	ldr	r3, [r4, #20]
 80081cc:	4433      	add	r3, r6
 80081ce:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80081d0:	6a23      	ldr	r3, [r4, #32]
 80081d2:	6922      	ldr	r2, [r4, #16]
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d926      	bls.n	8008226 <USB_EPStartXfer+0x1fc>
              ep->xfer_len_db -= len;
 80081d8:	1b9b      	subs	r3, r3, r6
 80081da:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80081dc:	7863      	ldrb	r3, [r4, #1]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d145      	bne.n	800826e <USB_EPStartXfer+0x244>
 80081e2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80081e6:	fa15 f383 	uxtah	r3, r5, r3
 80081ea:	7822      	ldrb	r2, [r4, #0]
 80081ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80081f4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80081f8:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80081fc:	b9be      	cbnz	r6, 800822e <USB_EPStartXfer+0x204>
 80081fe:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8008202:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008206:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800820a:	b292      	uxth	r2, r2
 800820c:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8008210:	e02f      	b.n	8008272 <USB_EPStartXfer+0x248>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008212:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8008216:	fa15 f282 	uxtah	r2, r5, r2
 800821a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800821e:	b2b2      	uxth	r2, r6
 8008220:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8008224:	e7cb      	b.n	80081be <USB_EPStartXfer+0x194>
              ep->xfer_len_db = 0U;
 8008226:	2200      	movs	r2, #0
 8008228:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800822a:	461e      	mov	r6, r3
 800822c:	e7d6      	b.n	80081dc <USB_EPStartXfer+0x1b2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800822e:	2e3e      	cmp	r6, #62	@ 0x3e
 8008230:	d80d      	bhi.n	800824e <USB_EPStartXfer+0x224>
 8008232:	0872      	lsrs	r2, r6, #1
 8008234:	f016 0f01 	tst.w	r6, #1
 8008238:	d000      	beq.n	800823c <USB_EPStartXfer+0x212>
 800823a:	3201      	adds	r2, #1
 800823c:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	@ 0x402
 8008240:	b289      	uxth	r1, r1
 8008242:	0292      	lsls	r2, r2, #10
 8008244:	b292      	uxth	r2, r2
 8008246:	430a      	orrs	r2, r1
 8008248:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 800824c:	e011      	b.n	8008272 <USB_EPStartXfer+0x248>
 800824e:	0971      	lsrs	r1, r6, #5
 8008250:	f016 0f1f 	tst.w	r6, #31
 8008254:	d100      	bne.n	8008258 <USB_EPStartXfer+0x22e>
 8008256:	3901      	subs	r1, #1
 8008258:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800825c:	b292      	uxth	r2, r2
 800825e:	0289      	lsls	r1, r1, #10
 8008260:	b289      	uxth	r1, r1
 8008262:	430a      	orrs	r2, r1
 8008264:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008268:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 800826c:	e001      	b.n	8008272 <USB_EPStartXfer+0x248>
 800826e:	2b01      	cmp	r3, #1
 8008270:	d006      	beq.n	8008280 <USB_EPStartXfer+0x256>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008272:	b2b3      	uxth	r3, r6
 8008274:	8922      	ldrh	r2, [r4, #8]
 8008276:	6961      	ldr	r1, [r4, #20]
 8008278:	4628      	mov	r0, r5
 800827a:	f7ff fec4 	bl	8008006 <USB_WritePMA>
 800827e:	e735      	b.n	80080ec <USB_EPStartXfer+0xc2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008280:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8008284:	fa15 f383 	uxtah	r3, r5, r3
 8008288:	7822      	ldrb	r2, [r4, #0]
 800828a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828e:	b2b2      	uxth	r2, r6
 8008290:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8008294:	e7ed      	b.n	8008272 <USB_EPStartXfer+0x248>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008296:	7862      	ldrb	r2, [r4, #1]
 8008298:	bbb2      	cbnz	r2, 8008308 <USB_EPStartXfer+0x2de>
 800829a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 800829e:	fa15 f282 	uxtah	r2, r5, r2
 80082a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082a6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80082aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80082ae:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80082b2:	b94e      	cbnz	r6, 80082c8 <USB_EPStartXfer+0x29e>
 80082b4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80082b8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80082bc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80082c0:	b292      	uxth	r2, r2
 80082c2:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80082c6:	e021      	b.n	800830c <USB_EPStartXfer+0x2e2>
 80082c8:	2e3e      	cmp	r6, #62	@ 0x3e
 80082ca:	d80d      	bhi.n	80082e8 <USB_EPStartXfer+0x2be>
 80082cc:	0872      	lsrs	r2, r6, #1
 80082ce:	f016 0f01 	tst.w	r6, #1
 80082d2:	d000      	beq.n	80082d6 <USB_EPStartXfer+0x2ac>
 80082d4:	3201      	adds	r2, #1
 80082d6:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	@ 0x402
 80082da:	b289      	uxth	r1, r1
 80082dc:	0292      	lsls	r2, r2, #10
 80082de:	b292      	uxth	r2, r2
 80082e0:	430a      	orrs	r2, r1
 80082e2:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80082e6:	e011      	b.n	800830c <USB_EPStartXfer+0x2e2>
 80082e8:	0971      	lsrs	r1, r6, #5
 80082ea:	f016 0f1f 	tst.w	r6, #31
 80082ee:	d100      	bne.n	80082f2 <USB_EPStartXfer+0x2c8>
 80082f0:	3901      	subs	r1, #1
 80082f2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80082f6:	b292      	uxth	r2, r2
 80082f8:	0289      	lsls	r1, r1, #10
 80082fa:	b289      	uxth	r1, r1
 80082fc:	430a      	orrs	r2, r1
 80082fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008302:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8008306:	e001      	b.n	800830c <USB_EPStartXfer+0x2e2>
 8008308:	2a01      	cmp	r2, #1
 800830a:	d029      	beq.n	8008360 <USB_EPStartXfer+0x336>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800830c:	b2b3      	uxth	r3, r6
 800830e:	8922      	ldrh	r2, [r4, #8]
 8008310:	6961      	ldr	r1, [r4, #20]
 8008312:	4628      	mov	r0, r5
 8008314:	f7ff fe77 	bl	8008006 <USB_WritePMA>
            ep->xfer_buff += len;
 8008318:	6963      	ldr	r3, [r4, #20]
 800831a:	4433      	add	r3, r6
 800831c:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800831e:	6a23      	ldr	r3, [r4, #32]
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	4293      	cmp	r3, r2
 8008324:	d926      	bls.n	8008374 <USB_EPStartXfer+0x34a>
              ep->xfer_len_db -= len;
 8008326:	1b9b      	subs	r3, r3, r6
 8008328:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800832a:	7863      	ldrb	r3, [r4, #1]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d145      	bne.n	80083bc <USB_EPStartXfer+0x392>
 8008330:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8008334:	fa15 f383 	uxtah	r3, r5, r3
 8008338:	7822      	ldrb	r2, [r4, #0]
 800833a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800833e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8008342:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008346:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800834a:	b9be      	cbnz	r6, 800837c <USB_EPStartXfer+0x352>
 800834c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8008350:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008354:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008358:	b292      	uxth	r2, r2
 800835a:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800835e:	e02f      	b.n	80083c0 <USB_EPStartXfer+0x396>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008360:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8008364:	fa15 f282 	uxtah	r2, r5, r2
 8008368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800836c:	b2b2      	uxth	r2, r6
 800836e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8008372:	e7cb      	b.n	800830c <USB_EPStartXfer+0x2e2>
              ep->xfer_len_db = 0U;
 8008374:	2200      	movs	r2, #0
 8008376:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8008378:	461e      	mov	r6, r3
 800837a:	e7d6      	b.n	800832a <USB_EPStartXfer+0x300>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800837c:	2e3e      	cmp	r6, #62	@ 0x3e
 800837e:	d80d      	bhi.n	800839c <USB_EPStartXfer+0x372>
 8008380:	0872      	lsrs	r2, r6, #1
 8008382:	f016 0f01 	tst.w	r6, #1
 8008386:	d000      	beq.n	800838a <USB_EPStartXfer+0x360>
 8008388:	3201      	adds	r2, #1
 800838a:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	@ 0x406
 800838e:	b289      	uxth	r1, r1
 8008390:	0292      	lsls	r2, r2, #10
 8008392:	b292      	uxth	r2, r2
 8008394:	430a      	orrs	r2, r1
 8008396:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 800839a:	e011      	b.n	80083c0 <USB_EPStartXfer+0x396>
 800839c:	0971      	lsrs	r1, r6, #5
 800839e:	f016 0f1f 	tst.w	r6, #31
 80083a2:	d100      	bne.n	80083a6 <USB_EPStartXfer+0x37c>
 80083a4:	3901      	subs	r1, #1
 80083a6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80083aa:	b292      	uxth	r2, r2
 80083ac:	0289      	lsls	r1, r1, #10
 80083ae:	b289      	uxth	r1, r1
 80083b0:	430a      	orrs	r2, r1
 80083b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083b6:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80083ba:	e001      	b.n	80083c0 <USB_EPStartXfer+0x396>
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d006      	beq.n	80083ce <USB_EPStartXfer+0x3a4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083c0:	b2b3      	uxth	r3, r6
 80083c2:	8962      	ldrh	r2, [r4, #10]
 80083c4:	6961      	ldr	r1, [r4, #20]
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7ff fe1d 	bl	8008006 <USB_WritePMA>
 80083cc:	e68e      	b.n	80080ec <USB_EPStartXfer+0xc2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083ce:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80083d2:	fa15 f383 	uxtah	r3, r5, r3
 80083d6:	7822      	ldrb	r2, [r4, #0]
 80083d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083dc:	b2b2      	uxth	r2, r6
 80083de:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80083e2:	e7ed      	b.n	80083c0 <USB_EPStartXfer+0x396>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80083e4:	7821      	ldrb	r1, [r4, #0]
 80083e6:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80083ea:	b292      	uxth	r2, r2
 80083ec:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80083f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80083f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80083fc:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008400:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8008404:	fa15 f282 	uxtah	r2, r5, r2
 8008408:	7821      	ldrb	r1, [r4, #0]
 800840a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800840e:	b29b      	uxth	r3, r3
 8008410:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008414:	8922      	ldrh	r2, [r4, #8]
 8008416:	6961      	ldr	r1, [r4, #20]
 8008418:	4628      	mov	r0, r5
 800841a:	f7ff fdf4 	bl	8008006 <USB_WritePMA>
 800841e:	e665      	b.n	80080ec <USB_EPStartXfer+0xc2>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008420:	2e3e      	cmp	r6, #62	@ 0x3e
 8008422:	d80d      	bhi.n	8008440 <USB_EPStartXfer+0x416>
 8008424:	0873      	lsrs	r3, r6, #1
 8008426:	f016 0f01 	tst.w	r6, #1
 800842a:	d000      	beq.n	800842e <USB_EPStartXfer+0x404>
 800842c:	3301      	adds	r3, #1
 800842e:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8008432:	b289      	uxth	r1, r1
 8008434:	029b      	lsls	r3, r3, #10
 8008436:	b29b      	uxth	r3, r3
 8008438:	430b      	orrs	r3, r1
 800843a:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 800843e:	e018      	b.n	8008472 <USB_EPStartXfer+0x448>
 8008440:	0971      	lsrs	r1, r6, #5
 8008442:	f016 0f1f 	tst.w	r6, #31
 8008446:	d100      	bne.n	800844a <USB_EPStartXfer+0x420>
 8008448:	3901      	subs	r1, #1
 800844a:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 800844e:	b29b      	uxth	r3, r3
 8008450:	0289      	lsls	r1, r1, #10
 8008452:	b289      	uxth	r1, r1
 8008454:	430b      	orrs	r3, r1
 8008456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800845a:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 800845e:	e008      	b.n	8008472 <USB_EPStartXfer+0x448>
 8008460:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8008464:	fa15 f383 	uxtah	r3, r5, r3
 8008468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800846c:	b2b2      	uxth	r2, r6
 800846e:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008472:	b2b3      	uxth	r3, r6
 8008474:	8962      	ldrh	r2, [r4, #10]
 8008476:	6961      	ldr	r1, [r4, #20]
 8008478:	4628      	mov	r0, r5
 800847a:	f7ff fdc4 	bl	8008006 <USB_WritePMA>
 800847e:	e635      	b.n	80080ec <USB_EPStartXfer+0xc2>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008480:	bbb3      	cbnz	r3, 80084f0 <USB_EPStartXfer+0x4c6>
 8008482:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8008486:	fa15 f383 	uxtah	r3, r5, r3
 800848a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800848e:	f8b2 3402 	ldrh.w	r3, [r2, #1026]	@ 0x402
 8008492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008496:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
 800849a:	b94e      	cbnz	r6, 80084b0 <USB_EPStartXfer+0x486>
 800849c:	f8b2 3402 	ldrh.w	r3, [r2, #1026]	@ 0x402
 80084a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
 80084ae:	e028      	b.n	8008502 <USB_EPStartXfer+0x4d8>
 80084b0:	2e3e      	cmp	r6, #62	@ 0x3e
 80084b2:	d80d      	bhi.n	80084d0 <USB_EPStartXfer+0x4a6>
 80084b4:	0873      	lsrs	r3, r6, #1
 80084b6:	f016 0f01 	tst.w	r6, #1
 80084ba:	d000      	beq.n	80084be <USB_EPStartXfer+0x494>
 80084bc:	3301      	adds	r3, #1
 80084be:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 80084c2:	b289      	uxth	r1, r1
 80084c4:	029b      	lsls	r3, r3, #10
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	430b      	orrs	r3, r1
 80084ca:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
 80084ce:	e018      	b.n	8008502 <USB_EPStartXfer+0x4d8>
 80084d0:	0971      	lsrs	r1, r6, #5
 80084d2:	f016 0f1f 	tst.w	r6, #31
 80084d6:	d100      	bne.n	80084da <USB_EPStartXfer+0x4b0>
 80084d8:	3901      	subs	r1, #1
 80084da:	f8b2 3402 	ldrh.w	r3, [r2, #1026]	@ 0x402
 80084de:	b29b      	uxth	r3, r3
 80084e0:	0289      	lsls	r1, r1, #10
 80084e2:	b289      	uxth	r1, r1
 80084e4:	430b      	orrs	r3, r1
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ea:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
 80084ee:	e008      	b.n	8008502 <USB_EPStartXfer+0x4d8>
 80084f0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80084f4:	fa15 f383 	uxtah	r3, r5, r3
 80084f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084fc:	b2b2      	uxth	r2, r6
 80084fe:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008502:	b2b3      	uxth	r3, r6
 8008504:	8922      	ldrh	r2, [r4, #8]
 8008506:	6961      	ldr	r1, [r4, #20]
 8008508:	4628      	mov	r0, r5
 800850a:	f7ff fd7c 	bl	8008006 <USB_WritePMA>
 800850e:	e5ed      	b.n	80080ec <USB_EPStartXfer+0xc2>
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008510:	7822      	ldrb	r2, [r4, #0]
 8008512:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800851c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008528:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
      if (ep->xfer_len > ep->maxpacket)
 800852c:	69a3      	ldr	r3, [r4, #24]
 800852e:	6922      	ldr	r2, [r4, #16]
 8008530:	4293      	cmp	r3, r2
 8008532:	d913      	bls.n	800855c <USB_EPStartXfer+0x532>
        ep->xfer_len -= ep->maxpacket;
 8008534:	1a9b      	subs	r3, r3, r2
 8008536:	61a3      	str	r3, [r4, #24]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008538:	7822      	ldrb	r2, [r4, #0]
 800853a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800853e:	b29b      	uxth	r3, r3
 8008540:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008548:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800854c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008554:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8008558:	2000      	movs	r0, #0
}
 800855a:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_len = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	61a3      	str	r3, [r4, #24]
 8008560:	e7ea      	b.n	8008538 <USB_EPStartXfer+0x50e>
      if (ep->type == EP_TYPE_BULK)
 8008562:	78cb      	ldrb	r3, [r1, #3]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d004      	beq.n	8008572 <USB_EPStartXfer+0x548>
      else if (ep->type == EP_TYPE_ISOC)
 8008568:	2b01      	cmp	r3, #1
 800856a:	d121      	bne.n	80085b0 <USB_EPStartXfer+0x586>
        ep->xfer_len = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	618b      	str	r3, [r1, #24]
 8008570:	e7e2      	b.n	8008538 <USB_EPStartXfer+0x50e>
        if (ep->xfer_count != 0U)
 8008572:	69cb      	ldr	r3, [r1, #28]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0df      	beq.n	8008538 <USB_EPStartXfer+0x50e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008578:	780a      	ldrb	r2, [r1, #0]
 800857a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800857e:	b299      	uxth	r1, r3
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008580:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8008584:	d010      	beq.n	80085a8 <USB_EPStartXfer+0x57e>
 8008586:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800858a:	d0d5      	beq.n	8008538 <USB_EPStartXfer+0x50e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800858c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008590:	b29b      	uxth	r3, r3
 8008592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800859a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800859e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085a2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80085a6:	e7c7      	b.n	8008538 <USB_EPStartXfer+0x50e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085a8:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80085ac:	d1c4      	bne.n	8008538 <USB_EPStartXfer+0x50e>
 80085ae:	e7ed      	b.n	800858c <USB_EPStartXfer+0x562>
        return HAL_ERROR;
 80085b0:	2001      	movs	r0, #1
 80085b2:	e7d2      	b.n	800855a <USB_EPStartXfer+0x530>

080085b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085b4:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80085b6:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085b8:	4402      	add	r2, r0
 80085ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 80085be:	e007      	b.n	80085d0 <USB_ReadPMA+0x1c>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80085c0:	f832 0b02 	ldrh.w	r0, [r2], #2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80085c4:	7008      	strb	r0, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80085c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80085ca:	7048      	strb	r0, [r1, #1]
    pBuf++;
 80085cc:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 80085ce:	3c01      	subs	r4, #1
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	d1f5      	bne.n	80085c0 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80085d4:	f013 0f01 	tst.w	r3, #1
 80085d8:	d001      	beq.n	80085de <USB_ReadPMA+0x2a>
  {
    RdVal = *pdwVal;
 80085da:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80085dc:	700b      	strb	r3, [r1, #0]
  }
}
 80085de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085e4:	b510      	push	{r4, lr}
 80085e6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085e8:	4a0c      	ldr	r2, [pc, #48]	@ (800861c <_sbrk+0x38>)
 80085ea:	490d      	ldr	r1, [pc, #52]	@ (8008620 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085ec:	480d      	ldr	r0, [pc, #52]	@ (8008624 <_sbrk+0x40>)
 80085ee:	6800      	ldr	r0, [r0, #0]
 80085f0:	b140      	cbz	r0, 8008604 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085f2:	480c      	ldr	r0, [pc, #48]	@ (8008624 <_sbrk+0x40>)
 80085f4:	6800      	ldr	r0, [r0, #0]
 80085f6:	4403      	add	r3, r0
 80085f8:	1a52      	subs	r2, r2, r1
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d806      	bhi.n	800860c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80085fe:	4a09      	ldr	r2, [pc, #36]	@ (8008624 <_sbrk+0x40>)
 8008600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8008602:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8008604:	4807      	ldr	r0, [pc, #28]	@ (8008624 <_sbrk+0x40>)
 8008606:	4c08      	ldr	r4, [pc, #32]	@ (8008628 <_sbrk+0x44>)
 8008608:	6004      	str	r4, [r0, #0]
 800860a:	e7f2      	b.n	80085f2 <_sbrk+0xe>
    errno = ENOMEM;
 800860c:	f002 f964 	bl	800a8d8 <__errno>
 8008610:	230c      	movs	r3, #12
 8008612:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008614:	f04f 30ff 	mov.w	r0, #4294967295
 8008618:	e7f3      	b.n	8008602 <_sbrk+0x1e>
 800861a:	bf00      	nop
 800861c:	20008000 	.word	0x20008000
 8008620:	00000600 	.word	0x00000600
 8008624:	2000150c 	.word	0x2000150c
 8008628:	20002860 	.word	0x20002860

0800862c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800862c:	4a03      	ldr	r2, [pc, #12]	@ (800863c <SystemInit+0x10>)
 800862e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8008632:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008636:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800863a:	4770      	bx	lr
 800863c:	e000ed00 	.word	0xe000ed00

08008640 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008642:	2200      	movs	r2, #0
 8008644:	490f      	ldr	r1, [pc, #60]	@ (8008684 <MX_USB_DEVICE_Init+0x44>)
 8008646:	4810      	ldr	r0, [pc, #64]	@ (8008688 <MX_USB_DEVICE_Init+0x48>)
 8008648:	f000 fc97 	bl	8008f7a <USBD_Init>
 800864c:	b970      	cbnz	r0, 800866c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800864e:	490f      	ldr	r1, [pc, #60]	@ (800868c <MX_USB_DEVICE_Init+0x4c>)
 8008650:	480d      	ldr	r0, [pc, #52]	@ (8008688 <MX_USB_DEVICE_Init+0x48>)
 8008652:	f000 fca9 	bl	8008fa8 <USBD_RegisterClass>
 8008656:	b960      	cbnz	r0, 8008672 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008658:	490d      	ldr	r1, [pc, #52]	@ (8008690 <MX_USB_DEVICE_Init+0x50>)
 800865a:	480b      	ldr	r0, [pc, #44]	@ (8008688 <MX_USB_DEVICE_Init+0x48>)
 800865c:	f000 fa39 	bl	8008ad2 <USBD_CDC_RegisterInterface>
 8008660:	b950      	cbnz	r0, 8008678 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008662:	4809      	ldr	r0, [pc, #36]	@ (8008688 <MX_USB_DEVICE_Init+0x48>)
 8008664:	f000 fcc0 	bl	8008fe8 <USBD_Start>
 8008668:	b948      	cbnz	r0, 800867e <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800866a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800866c:	f7f9 ffc6 	bl	80025fc <Error_Handler>
 8008670:	e7ed      	b.n	800864e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8008672:	f7f9 ffc3 	bl	80025fc <Error_Handler>
 8008676:	e7ef      	b.n	8008658 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8008678:	f7f9 ffc0 	bl	80025fc <Error_Handler>
 800867c:	e7f1      	b.n	8008662 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800867e:	f7f9 ffbd 	bl	80025fc <Error_Handler>
}
 8008682:	e7f2      	b.n	800866a <MX_USB_DEVICE_Init+0x2a>
 8008684:	200001a4 	.word	0x200001a4
 8008688:	20001510 	.word	0x20001510
 800868c:	2000010c 	.word	0x2000010c
 8008690:	20000150 	.word	0x20000150

08008694 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008694:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008696:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800869a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800869e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 80086a2:	b18c      	cbz	r4, 80086c8 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086a4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80086a8:	6843      	ldr	r3, [r0, #4]
 80086aa:	b17b      	cbz	r3, 80086cc <USBD_CDC_EP0_RxReady+0x38>
 80086ac:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80086b0:	28ff      	cmp	r0, #255	@ 0xff
 80086b2:	d00d      	beq.n	80086d0 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80086ba:	4621      	mov	r1, r4
 80086bc:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80086be:	23ff      	movs	r3, #255	@ 0xff
 80086c0:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80086c4:	2000      	movs	r0, #0
}
 80086c6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80086c8:	2003      	movs	r0, #3
 80086ca:	e7fc      	b.n	80086c6 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 80086cc:	2000      	movs	r0, #0
 80086ce:	e7fa      	b.n	80086c6 <USBD_CDC_EP0_RxReady+0x32>
 80086d0:	2000      	movs	r0, #0
 80086d2:	e7f8      	b.n	80086c6 <USBD_CDC_EP0_RxReady+0x32>

080086d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80086d4:	230a      	movs	r3, #10
 80086d6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80086d8:	4800      	ldr	r0, [pc, #0]	@ (80086dc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80086da:	4770      	bx	lr
 80086dc:	20000144 	.word	0x20000144

080086e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086e4:	4f0f      	ldr	r7, [pc, #60]	@ (8008724 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80086e6:	2182      	movs	r1, #130	@ 0x82
 80086e8:	4638      	mov	r0, r7
 80086ea:	f000 fdf2 	bl	80092d2 <USBD_GetEpDesc>
 80086ee:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086f0:	2101      	movs	r1, #1
 80086f2:	4638      	mov	r0, r7
 80086f4:	f000 fded 	bl	80092d2 <USBD_GetEpDesc>
 80086f8:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086fa:	2181      	movs	r1, #129	@ 0x81
 80086fc:	4638      	mov	r0, r7
 80086fe:	f000 fde8 	bl	80092d2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8008702:	b10d      	cbz	r5, 8008708 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008704:	2210      	movs	r2, #16
 8008706:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8008708:	b11c      	cbz	r4, 8008712 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800870a:	2240      	movs	r2, #64	@ 0x40
 800870c:	7122      	strb	r2, [r4, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8008712:	b118      	cbz	r0, 800871c <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008714:	2240      	movs	r2, #64	@ 0x40
 8008716:	7102      	strb	r2, [r0, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800871c:	2343      	movs	r3, #67	@ 0x43
 800871e:	8033      	strh	r3, [r6, #0]
}
 8008720:	4800      	ldr	r0, [pc, #0]	@ (8008724 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8008722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008724:	200000c8 	.word	0x200000c8

08008728 <USBD_CDC_GetFSCfgDesc>:
{
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800872c:	4f0f      	ldr	r7, [pc, #60]	@ (800876c <USBD_CDC_GetFSCfgDesc+0x44>)
 800872e:	2182      	movs	r1, #130	@ 0x82
 8008730:	4638      	mov	r0, r7
 8008732:	f000 fdce 	bl	80092d2 <USBD_GetEpDesc>
 8008736:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008738:	2101      	movs	r1, #1
 800873a:	4638      	mov	r0, r7
 800873c:	f000 fdc9 	bl	80092d2 <USBD_GetEpDesc>
 8008740:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008742:	2181      	movs	r1, #129	@ 0x81
 8008744:	4638      	mov	r0, r7
 8008746:	f000 fdc4 	bl	80092d2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800874a:	b10d      	cbz	r5, 8008750 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800874c:	2210      	movs	r2, #16
 800874e:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8008750:	b11c      	cbz	r4, 800875a <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008752:	2240      	movs	r2, #64	@ 0x40
 8008754:	7122      	strb	r2, [r4, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800875a:	b118      	cbz	r0, 8008764 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800875c:	2240      	movs	r2, #64	@ 0x40
 800875e:	7102      	strb	r2, [r0, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008764:	2343      	movs	r3, #67	@ 0x43
 8008766:	8033      	strh	r3, [r6, #0]
}
 8008768:	4800      	ldr	r0, [pc, #0]	@ (800876c <USBD_CDC_GetFSCfgDesc+0x44>)
 800876a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800876c:	200000c8 	.word	0x200000c8

08008770 <USBD_CDC_GetHSCfgDesc>:
{
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008774:	4f0f      	ldr	r7, [pc, #60]	@ (80087b4 <USBD_CDC_GetHSCfgDesc+0x44>)
 8008776:	2182      	movs	r1, #130	@ 0x82
 8008778:	4638      	mov	r0, r7
 800877a:	f000 fdaa 	bl	80092d2 <USBD_GetEpDesc>
 800877e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008780:	2101      	movs	r1, #1
 8008782:	4638      	mov	r0, r7
 8008784:	f000 fda5 	bl	80092d2 <USBD_GetEpDesc>
 8008788:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800878a:	2181      	movs	r1, #129	@ 0x81
 800878c:	4638      	mov	r0, r7
 800878e:	f000 fda0 	bl	80092d2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8008792:	b10d      	cbz	r5, 8008798 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008794:	2210      	movs	r2, #16
 8008796:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8008798:	b11c      	cbz	r4, 80087a2 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800879a:	2200      	movs	r2, #0
 800879c:	7122      	strb	r2, [r4, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80087a2:	b118      	cbz	r0, 80087ac <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087a4:	2200      	movs	r2, #0
 80087a6:	7102      	strb	r2, [r0, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087ac:	2343      	movs	r3, #67	@ 0x43
 80087ae:	8033      	strh	r3, [r6, #0]
}
 80087b0:	4800      	ldr	r0, [pc, #0]	@ (80087b4 <USBD_CDC_GetHSCfgDesc+0x44>)
 80087b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b4:	200000c8 	.word	0x200000c8

080087b8 <USBD_CDC_DataOut>:
{
 80087b8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ba:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80087be:	33b0      	adds	r3, #176	@ 0xb0
 80087c0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087c4:	b195      	cbz	r5, 80087ec <USBD_CDC_DataOut+0x34>
 80087c6:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087c8:	f000 fba9 	bl	8008f1e <USBD_LL_GetRxDataSize>
 80087cc:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087d0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80087d4:	33b0      	adds	r3, #176	@ 0xb0
 80087d6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80087da:	6863      	ldr	r3, [r4, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80087e2:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80087e6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80087e8:	2000      	movs	r0, #0
}
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80087ec:	2003      	movs	r0, #3
 80087ee:	e7fc      	b.n	80087ea <USBD_CDC_DataOut+0x32>

080087f0 <USBD_CDC_DataIn>:
{
 80087f0:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80087f2:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087f6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80087fa:	33b0      	adds	r3, #176	@ 0xb0
 80087fc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8008800:	b384      	cbz	r4, 8008864 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008802:	f001 030f 	and.w	r3, r1, #15
 8008806:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800880a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800880e:	6992      	ldr	r2, [r2, #24]
 8008810:	b14a      	cbz	r2, 8008826 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008812:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8008816:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
 800881a:	6a2d      	ldr	r5, [r5, #32]
 800881c:	fbb2 fcf5 	udiv	ip, r2, r5
 8008820:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008824:	b192      	cbz	r2, 800884c <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800882c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008830:	33b0      	adds	r3, #176	@ 0xb0
 8008832:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008836:	6843      	ldr	r3, [r0, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	b1ab      	cbz	r3, 8008868 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800883c:	460a      	mov	r2, r1
 800883e:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8008842:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8008846:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8008848:	2000      	movs	r0, #0
}
 800884a:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800884c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008850:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008854:	2400      	movs	r4, #0
 8008856:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008858:	4623      	mov	r3, r4
 800885a:	4622      	mov	r2, r4
 800885c:	f000 fb41 	bl	8008ee2 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8008860:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008862:	e7f2      	b.n	800884a <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8008864:	2003      	movs	r0, #3
 8008866:	e7f0      	b.n	800884a <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8008868:	2000      	movs	r0, #0
 800886a:	e7ee      	b.n	800884a <USBD_CDC_DataIn+0x5a>

0800886c <USBD_CDC_Setup>:
{
 800886c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800886e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008870:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008874:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8008878:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 800887c:	2200      	movs	r2, #0
 800887e:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8008882:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8008886:	2f00      	cmp	r7, #0
 8008888:	d078      	beq.n	800897c <USBD_CDC_Setup+0x110>
 800888a:	4604      	mov	r4, r0
 800888c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800888e:	7809      	ldrb	r1, [r1, #0]
 8008890:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8008894:	d034      	beq.n	8008900 <USBD_CDC_Setup+0x94>
 8008896:	2e20      	cmp	r6, #32
 8008898:	d169      	bne.n	800896e <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 800889a:	88ea      	ldrh	r2, [r5, #6]
 800889c:	b32a      	cbz	r2, 80088ea <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 800889e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80088a2:	d10e      	bne.n	80088c2 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 80088a4:	786b      	ldrb	r3, [r5, #1]
 80088a6:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80088aa:	88ea      	ldrh	r2, [r5, #6]
 80088ac:	2a3f      	cmp	r2, #63	@ 0x3f
 80088ae:	d81a      	bhi.n	80088e6 <USBD_CDC_Setup+0x7a>
 80088b0:	b2d2      	uxtb	r2, r2
 80088b2:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80088b6:	4639      	mov	r1, r7
 80088b8:	4620      	mov	r0, r4
 80088ba:	f001 f98a 	bl	8009bd2 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80088be:	2600      	movs	r6, #0
 80088c0:	e059      	b.n	8008976 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088c2:	33b0      	adds	r3, #176	@ 0xb0
 80088c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	4639      	mov	r1, r7
 80088ce:	7868      	ldrb	r0, [r5, #1]
 80088d0:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088d2:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088d4:	2a07      	cmp	r2, #7
 80088d6:	bf28      	it	cs
 80088d8:	2207      	movcs	r2, #7
 80088da:	4639      	mov	r1, r7
 80088dc:	4620      	mov	r0, r4
 80088de:	f001 f963 	bl	8009ba8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80088e2:	2600      	movs	r6, #0
 80088e4:	e047      	b.n	8008976 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80088e6:	2240      	movs	r2, #64	@ 0x40
 80088e8:	e7e3      	b.n	80088b2 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088ea:	33b0      	adds	r3, #176	@ 0xb0
 80088ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2200      	movs	r2, #0
 80088f6:	4629      	mov	r1, r5
 80088f8:	7868      	ldrb	r0, [r5, #1]
 80088fa:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80088fc:	2600      	movs	r6, #0
 80088fe:	e03a      	b.n	8008976 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8008900:	786f      	ldrb	r7, [r5, #1]
 8008902:	2f0b      	cmp	r7, #11
 8008904:	d82e      	bhi.n	8008964 <USBD_CDC_Setup+0xf8>
 8008906:	e8df f007 	tbb	[pc, r7]
 800890a:	3606      	.short	0x3606
 800890c:	2d2d2d2d 	.word	0x2d2d2d2d
 8008910:	2d2d2d2d 	.word	0x2d2d2d2d
 8008914:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800891a:	2b03      	cmp	r3, #3
 800891c:	d004      	beq.n	8008928 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 800891e:	4629      	mov	r1, r5
 8008920:	f000 fd14 	bl	800934c <USBD_CtlError>
            ret = USBD_FAIL;
 8008924:	2603      	movs	r6, #3
 8008926:	e026      	b.n	8008976 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008928:	2202      	movs	r2, #2
 800892a:	a901      	add	r1, sp, #4
 800892c:	f001 f93c 	bl	8009ba8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008930:	463e      	mov	r6, r7
 8008932:	e020      	b.n	8008976 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008934:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008938:	2b03      	cmp	r3, #3
 800893a:	d004      	beq.n	8008946 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 800893c:	4629      	mov	r1, r5
 800893e:	f000 fd05 	bl	800934c <USBD_CtlError>
            ret = USBD_FAIL;
 8008942:	2603      	movs	r6, #3
 8008944:	e017      	b.n	8008976 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008946:	2201      	movs	r2, #1
 8008948:	f10d 0107 	add.w	r1, sp, #7
 800894c:	f001 f92c 	bl	8009ba8 <USBD_CtlSendData>
 8008950:	e011      	b.n	8008976 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008952:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008956:	2b03      	cmp	r3, #3
 8008958:	d00d      	beq.n	8008976 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 800895a:	4629      	mov	r1, r5
 800895c:	f000 fcf6 	bl	800934c <USBD_CtlError>
            ret = USBD_FAIL;
 8008960:	2603      	movs	r6, #3
 8008962:	e008      	b.n	8008976 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8008964:	4629      	mov	r1, r5
 8008966:	f000 fcf1 	bl	800934c <USBD_CtlError>
          ret = USBD_FAIL;
 800896a:	2603      	movs	r6, #3
          break;
 800896c:	e003      	b.n	8008976 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 800896e:	4629      	mov	r1, r5
 8008970:	f000 fcec 	bl	800934c <USBD_CtlError>
      ret = USBD_FAIL;
 8008974:	2603      	movs	r6, #3
}
 8008976:	4630      	mov	r0, r6
 8008978:	b003      	add	sp, #12
 800897a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800897c:	2603      	movs	r6, #3
 800897e:	e7fa      	b.n	8008976 <USBD_CDC_Setup+0x10a>

08008980 <USBD_CDC_DeInit>:
{
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008984:	2181      	movs	r1, #129	@ 0x81
 8008986:	f000 fa5a 	bl	8008e3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800898a:	2500      	movs	r5, #0
 800898c:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800898e:	2101      	movs	r1, #1
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fa54 	bl	8008e3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008996:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800899a:	2182      	movs	r1, #130	@ 0x82
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fa4e 	bl	8008e3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80089a2:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80089a6:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80089aa:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80089ae:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80089b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089b6:	b19a      	cbz	r2, 80089e0 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089b8:	33b0      	adds	r3, #176	@ 0xb0
 80089ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089c4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80089c8:	33b0      	adds	r3, #176	@ 0xb0
 80089ca:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80089ce:	f000 fad3 	bl	8008f78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089d2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80089d6:	33b0      	adds	r3, #176	@ 0xb0
 80089d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80089dc:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 80089e0:	2000      	movs	r0, #0
 80089e2:	bd38      	pop	{r3, r4, r5, pc}

080089e4 <USBD_CDC_Init>:
{
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80089ec:	f000 fac0 	bl	8008f70 <USBD_static_malloc>
  if (hcdc == NULL)
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d049      	beq.n	8008a88 <USBD_CDC_Init+0xa4>
 80089f4:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80089f6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80089fa:	2100      	movs	r1, #0
 80089fc:	f001 f9ee 	bl	8009ddc <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008a00:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008a04:	33b0      	adds	r3, #176	@ 0xb0
 8008a06:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008a0a:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0e:	7c23      	ldrb	r3, [r4, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d141      	bne.n	8008a98 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a18:	2202      	movs	r2, #2
 8008a1a:	2181      	movs	r1, #129	@ 0x81
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 f9fc 	bl	8008e1a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a22:	2601      	movs	r6, #1
 8008a24:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f9f3 	bl	8008e1a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a34:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a38:	2310      	movs	r3, #16
 8008a3a:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a3e:	2308      	movs	r3, #8
 8008a40:	2203      	movs	r2, #3
 8008a42:	2182      	movs	r1, #130	@ 0x82
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 f9e8 	bl	8008e1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8008a50:	2600      	movs	r6, #0
 8008a52:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a56:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008a5a:	33b0      	adds	r3, #176	@ 0xb0
 8008a5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4798      	blx	r3
  hcdc->TxState = 0U;
 8008a66:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008a6a:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 8008a6e:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8008a72:	b362      	cbz	r2, 8008ace <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a74:	7c25      	ldrb	r5, [r4, #16]
 8008a76:	bb1d      	cbnz	r5, 8008ac0 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 fa3e 	bl	8008f00 <USBD_LL_PrepareReceive>
}
 8008a84:	4628      	mov	r0, r5
 8008a86:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a88:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008a8c:	33b0      	adds	r3, #176	@ 0xb0
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a94:	2502      	movs	r5, #2
 8008a96:	e7f5      	b.n	8008a84 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a98:	2340      	movs	r3, #64	@ 0x40
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	2181      	movs	r1, #129	@ 0x81
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f9bb 	bl	8008e1a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008aa4:	2601      	movs	r6, #1
 8008aa6:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008aa8:	2340      	movs	r3, #64	@ 0x40
 8008aaa:	2202      	movs	r2, #2
 8008aac:	4631      	mov	r1, r6
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 f9b3 	bl	8008e1a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ab4:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ab8:	2310      	movs	r3, #16
 8008aba:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8008abe:	e7be      	b.n	8008a3e <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ac0:	2340      	movs	r3, #64	@ 0x40
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 fa1b 	bl	8008f00 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8008aca:	2500      	movs	r5, #0
 8008acc:	e7da      	b.n	8008a84 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8008ace:	2502      	movs	r5, #2
 8008ad0:	e7d8      	b.n	8008a84 <USBD_CDC_Init+0xa0>

08008ad2 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8008ad2:	b139      	cbz	r1, 8008ae4 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ad4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008ad8:	33b0      	adds	r3, #176	@ 0xb0
 8008ada:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008ade:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008ae4:	2003      	movs	r0, #3
}
 8008ae6:	4770      	bx	lr

08008ae8 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ae8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008aec:	33b0      	adds	r3, #176	@ 0xb0
 8008aee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008af2:	b12b      	cbz	r3, 8008b00 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8008af4:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008af8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008afc:	2000      	movs	r0, #0
 8008afe:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008b00:	2003      	movs	r0, #3
}
 8008b02:	4770      	bx	lr

08008b04 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b04:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008b08:	33b0      	adds	r3, #176	@ 0xb0
 8008b0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8008b0e:	b11b      	cbz	r3, 8008b18 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8008b10:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008b14:	2000      	movs	r0, #0
 8008b16:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008b18:	2003      	movs	r0, #3
}
 8008b1a:	4770      	bx	lr

08008b1c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b1c:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b1e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008b22:	33b0      	adds	r3, #176	@ 0xb0
 8008b24:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b28:	b18a      	cbz	r2, 8008b4e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8008b2a:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8008b2e:	b10b      	cbz	r3, 8008b34 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b30:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8008b32:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8008b34:	2301      	movs	r3, #1
 8008b36:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008b3a:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8008b3e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008b40:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8008b44:	2181      	movs	r1, #129	@ 0x81
 8008b46:	f000 f9cc 	bl	8008ee2 <USBD_LL_Transmit>
    ret = USBD_OK;
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e7f1      	b.n	8008b32 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 8008b4e:	2003      	movs	r0, #3
 8008b50:	e7ef      	b.n	8008b32 <USBD_CDC_TransmitPacket+0x16>

08008b52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b52:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b54:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008b58:	33b0      	adds	r3, #176	@ 0xb0
 8008b5a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b5e:	b192      	cbz	r2, 8008b86 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b60:	7c04      	ldrb	r4, [r0, #16]
 8008b62:	b944      	cbnz	r4, 8008b76 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b68:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	f000 f9c7 	bl	8008f00 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8008b72:	4620      	mov	r0, r4
 8008b74:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b76:	2340      	movs	r3, #64	@ 0x40
 8008b78:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	f000 f9bf 	bl	8008f00 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8008b82:	2400      	movs	r4, #0
 8008b84:	e7f5      	b.n	8008b72 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8008b86:	2403      	movs	r4, #3
 8008b88:	e7f3      	b.n	8008b72 <USBD_CDC_ReceivePacket+0x20>

08008b8a <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	4770      	bx	lr

08008b8e <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8008b8e:	2000      	movs	r0, #0
 8008b90:	4770      	bx	lr

08008b92 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8008b92:	2000      	movs	r0, #0
 8008b94:	4770      	bx	lr
	...

08008b98 <CDC_Receive_FS>:
{
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b9e:	4e07      	ldr	r6, [pc, #28]	@ (8008bbc <CDC_Receive_FS+0x24>)
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ffae 	bl	8008b04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff ffd2 	bl	8008b52 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(Buf, *Len);
 8008bae:	6829      	ldr	r1, [r5, #0]
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7f9 fc15 	bl	80023e0 <USB_CDC_RxHandler>
}
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
 8008bba:	bf00      	nop
 8008bbc:	20001510 	.word	0x20001510

08008bc0 <CDC_Init_FS>:
{
 8008bc0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bc2:	4c06      	ldr	r4, [pc, #24]	@ (8008bdc <CDC_Init_FS+0x1c>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4906      	ldr	r1, [pc, #24]	@ (8008be0 <CDC_Init_FS+0x20>)
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f7ff ff8d 	bl	8008ae8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bce:	4905      	ldr	r1, [pc, #20]	@ (8008be4 <CDC_Init_FS+0x24>)
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7ff ff97 	bl	8008b04 <USBD_CDC_SetRxBuffer>
}
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	bd10      	pop	{r4, pc}
 8008bda:	bf00      	nop
 8008bdc:	20001510 	.word	0x20001510
 8008be0:	200017ec 	.word	0x200017ec
 8008be4:	20001bec 	.word	0x20001bec

08008be8 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008be8:	4b09      	ldr	r3, [pc, #36]	@ (8008c10 <CDC_Transmit_FS+0x28>)
 8008bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8008bee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008bf2:	b10b      	cbz	r3, 8008bf8 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8008bf4:	2001      	movs	r0, #1
}
 8008bf6:	4770      	bx	lr
{
 8008bf8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008bfa:	4c05      	ldr	r4, [pc, #20]	@ (8008c10 <CDC_Transmit_FS+0x28>)
 8008bfc:	460a      	mov	r2, r1
 8008bfe:	4601      	mov	r1, r0
 8008c00:	4620      	mov	r0, r4
 8008c02:	f7ff ff71 	bl	8008ae8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff ff88 	bl	8008b1c <USBD_CDC_TransmitPacket>
}
 8008c0c:	bd10      	pop	{r4, pc}
 8008c0e:	bf00      	nop
 8008c10:	20001510 	.word	0x20001510

08008c14 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008c14:	b508      	push	{r3, lr}
  SystemClock_Config();
 8008c16:	f7f9 fdf1 	bl	80027fc <SystemClock_Config>
}
 8008c1a:	bd08      	pop	{r3, pc}

08008c1c <HAL_PCD_MspInit>:
{
 8008c1c:	b530      	push	{r4, r5, lr}
 8008c1e:	b095      	sub	sp, #84	@ 0x54
 8008c20:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c22:	2100      	movs	r1, #0
 8008c24:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008c26:	9110      	str	r1, [sp, #64]	@ 0x40
 8008c28:	9111      	str	r1, [sp, #68]	@ 0x44
 8008c2a:	9112      	str	r1, [sp, #72]	@ 0x48
 8008c2c:	9113      	str	r1, [sp, #76]	@ 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c2e:	2234      	movs	r2, #52	@ 0x34
 8008c30:	a802      	add	r0, sp, #8
 8008c32:	f001 f8d3 	bl	8009ddc <memset>
  if(pcdHandle->Instance==USB)
 8008c36:	6822      	ldr	r2, [r4, #0]
 8008c38:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb0 <HAL_PCD_MspInit+0x94>)
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d001      	beq.n	8008c42 <HAL_PCD_MspInit+0x26>
}
 8008c3e:	b015      	add	sp, #84	@ 0x54
 8008c40:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008c46:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c48:	a802      	add	r0, sp, #8
 8008c4a:	f7fd fc17 	bl	800647c <HAL_RCCEx_PeriphCLKConfig>
 8008c4e:	bb58      	cbnz	r0, 8008ca8 <HAL_PCD_MspInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c50:	4c18      	ldr	r4, [pc, #96]	@ (8008cb4 <HAL_PCD_MspInit+0x98>)
 8008c52:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008c54:	f043 0301 	orr.w	r3, r3, #1
 8008c58:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8008c5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c64:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008c68:	930f      	str	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	9310      	str	r3, [sp, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c6e:	2500      	movs	r5, #0
 8008c70:	9511      	str	r5, [sp, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c72:	2303      	movs	r3, #3
 8008c74:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8008c76:	230a      	movs	r3, #10
 8008c78:	9313      	str	r3, [sp, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c7a:	a90f      	add	r1, sp, #60	@ 0x3c
 8008c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008c80:	f7fb f958 	bl	8003f34 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 8008c84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c8a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008c8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008c96:	462a      	mov	r2, r5
 8008c98:	4629      	mov	r1, r5
 8008c9a:	2043      	movs	r0, #67	@ 0x43
 8008c9c:	f7fa ffea 	bl	8003c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008ca0:	2043      	movs	r0, #67	@ 0x43
 8008ca2:	f7fa fff7 	bl	8003c94 <HAL_NVIC_EnableIRQ>
}
 8008ca6:	e7ca      	b.n	8008c3e <HAL_PCD_MspInit+0x22>
      Error_Handler();
 8008ca8:	f7f9 fca8 	bl	80025fc <Error_Handler>
 8008cac:	e7d0      	b.n	8008c50 <HAL_PCD_MspInit+0x34>
 8008cae:	bf00      	nop
 8008cb0:	40006800 	.word	0x40006800
 8008cb4:	40021000 	.word	0x40021000

08008cb8 <HAL_PCD_SetupStageCallback>:
{
 8008cb8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cba:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8008cbe:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008cc2:	f000 f9a7 	bl	8009014 <USBD_LL_SetupStage>
}
 8008cc6:	bd08      	pop	{r3, pc}

08008cc8 <HAL_PCD_DataOutStageCallback>:
{
 8008cc8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008cce:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8008cd2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8008cd6:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008cda:	f000 fa2a 	bl	8009132 <USBD_LL_DataOutStage>
}
 8008cde:	bd08      	pop	{r3, pc}

08008ce0 <HAL_PCD_DataInStageCallback>:
{
 8008ce0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ce2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008ce6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8008cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cec:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008cf0:	f000 fa7f 	bl	80091f2 <USBD_LL_DataInStage>
}
 8008cf4:	bd08      	pop	{r3, pc}

08008cf6 <HAL_PCD_SOFCallback>:
{
 8008cf6:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cf8:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008cfc:	f000 fa05 	bl	800910a <USBD_LL_SOF>
}
 8008d00:	bd08      	pop	{r3, pc}

08008d02 <HAL_PCD_ResetCallback>:
{
 8008d02:	b510      	push	{r4, lr}
 8008d04:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d06:	7983      	ldrb	r3, [r0, #6]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d109      	bne.n	8008d20 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	f8d4 02dc 	ldr.w	r0, [r4, #732]	@ 0x2dc
 8008d12:	f000 f9dd 	bl	80090d0 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d16:	f8d4 02dc 	ldr.w	r0, [r4, #732]	@ 0x2dc
 8008d1a:	f000 f9a7 	bl	800906c <USBD_LL_Reset>
}
 8008d1e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008d20:	f7f9 fc6c 	bl	80025fc <Error_Handler>
 8008d24:	e7f2      	b.n	8008d0c <HAL_PCD_ResetCallback+0xa>
	...

08008d28 <HAL_PCD_SuspendCallback>:
{
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d2c:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008d30:	f000 f9d1 	bl	80090d6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8008d34:	7aa3      	ldrb	r3, [r4, #10]
 8008d36:	b123      	cbz	r3, 8008d42 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d38:	4a02      	ldr	r2, [pc, #8]	@ (8008d44 <HAL_PCD_SuspendCallback+0x1c>)
 8008d3a:	6913      	ldr	r3, [r2, #16]
 8008d3c:	f043 0306 	orr.w	r3, r3, #6
 8008d40:	6113      	str	r3, [r2, #16]
}
 8008d42:	bd10      	pop	{r4, pc}
 8008d44:	e000ed00 	.word	0xe000ed00

08008d48 <HAL_PCD_ResumeCallback>:
{
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8008d4c:	7a83      	ldrb	r3, [r0, #10]
 8008d4e:	b923      	cbnz	r3, 8008d5a <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d50:	f8d4 02dc 	ldr.w	r0, [r4, #732]	@ 0x2dc
 8008d54:	f000 f9cd 	bl	80090f2 <USBD_LL_Resume>
}
 8008d58:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d5a:	4a04      	ldr	r2, [pc, #16]	@ (8008d6c <HAL_PCD_ResumeCallback+0x24>)
 8008d5c:	6913      	ldr	r3, [r2, #16]
 8008d5e:	f023 0306 	bic.w	r3, r3, #6
 8008d62:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008d64:	f7ff ff56 	bl	8008c14 <SystemClockConfig_Resume>
 8008d68:	e7f2      	b.n	8008d50 <HAL_PCD_ResumeCallback+0x8>
 8008d6a:	bf00      	nop
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <USBD_LL_Init>:
{
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8008d74:	f7fc fe64 	bl	8005a40 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 8008d78:	481e      	ldr	r0, [pc, #120]	@ (8008df4 <USBD_LL_Init+0x84>)
 8008d7a:	f8c0 42dc 	str.w	r4, [r0, #732]	@ 0x2dc
  pdev->pData = &hpcd_USB_FS;
 8008d7e:	f8c4 02c8 	str.w	r0, [r4, #712]	@ 0x2c8
  hpcd_USB_FS.Instance = USB;
 8008d82:	4b1d      	ldr	r3, [pc, #116]	@ (8008df8 <USBD_LL_Init+0x88>)
 8008d84:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008d86:	2308      	movs	r3, #8
 8008d88:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d8e:	7203      	strb	r3, [r0, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008d90:	2300      	movs	r3, #0
 8008d92:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008d94:	7283      	strb	r3, [r0, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008d96:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008d98:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008d9a:	f7fb fe6b 	bl	8004a74 <HAL_PCD_Init>
 8008d9e:	bb30      	cbnz	r0, 8008dee <USBD_LL_Init+0x7e>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008da0:	2318      	movs	r3, #24
 8008da2:	2200      	movs	r2, #0
 8008da4:	4611      	mov	r1, r2
 8008da6:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 8008daa:	f7fc fdbe 	bl	800592a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008dae:	2358      	movs	r3, #88	@ 0x58
 8008db0:	2200      	movs	r2, #0
 8008db2:	2180      	movs	r1, #128	@ 0x80
 8008db4:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 8008db8:	f7fc fdb7 	bl	800592a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008dbc:	23c0      	movs	r3, #192	@ 0xc0
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2181      	movs	r1, #129	@ 0x81
 8008dc2:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 8008dc6:	f7fc fdb0 	bl	800592a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008dca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 8008dd6:	f7fc fda8 	bl	800592a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008dde:	2200      	movs	r2, #0
 8008de0:	2182      	movs	r1, #130	@ 0x82
 8008de2:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 8008de6:	f7fc fda0 	bl	800592a <HAL_PCDEx_PMAConfig>
}
 8008dea:	2000      	movs	r0, #0
 8008dec:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008dee:	f7f9 fc05 	bl	80025fc <Error_Handler>
 8008df2:	e7d5      	b.n	8008da0 <USBD_LL_Init+0x30>
 8008df4:	2000220c 	.word	0x2000220c
 8008df8:	40006800 	.word	0x40006800

08008dfc <USBD_LL_Start>:
{
 8008dfc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008dfe:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008e02:	f7fb feb2 	bl	8004b6a <HAL_PCD_Start>
  switch (hal_status) {
 8008e06:	2803      	cmp	r0, #3
 8008e08:	d805      	bhi.n	8008e16 <USBD_LL_Start+0x1a>
 8008e0a:	e8df f000 	tbb	[pc, r0]
 8008e0e:	0403      	.short	0x0403
 8008e10:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008e12:	2001      	movs	r0, #1
}
 8008e14:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008e16:	2003      	movs	r0, #3
 8008e18:	e7fc      	b.n	8008e14 <USBD_LL_Start+0x18>

08008e1a <USBD_LL_OpenEP>:
{
 8008e1a:	b508      	push	{r3, lr}
 8008e1c:	4694      	mov	ip, r2
 8008e1e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e20:	4663      	mov	r3, ip
 8008e22:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008e26:	f7fc fc3c 	bl	80056a2 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8008e2a:	2803      	cmp	r0, #3
 8008e2c:	d805      	bhi.n	8008e3a <USBD_LL_OpenEP+0x20>
 8008e2e:	e8df f000 	tbb	[pc, r0]
 8008e32:	0403      	.short	0x0403
 8008e34:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008e36:	2001      	movs	r0, #1
}
 8008e38:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008e3a:	2003      	movs	r0, #3
 8008e3c:	e7fc      	b.n	8008e38 <USBD_LL_OpenEP+0x1e>

08008e3e <USBD_LL_CloseEP>:
{
 8008e3e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e40:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008e44:	f7fc fc70 	bl	8005728 <HAL_PCD_EP_Close>
  switch (hal_status) {
 8008e48:	2803      	cmp	r0, #3
 8008e4a:	d805      	bhi.n	8008e58 <USBD_LL_CloseEP+0x1a>
 8008e4c:	e8df f000 	tbb	[pc, r0]
 8008e50:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8008e54:	2001      	movs	r0, #1
}
 8008e56:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008e58:	2003      	movs	r0, #3
 8008e5a:	e7fc      	b.n	8008e56 <USBD_LL_CloseEP+0x18>

08008e5c <USBD_LL_StallEP>:
{
 8008e5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e5e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008e62:	f7fc fce3 	bl	800582c <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8008e66:	2803      	cmp	r0, #3
 8008e68:	d805      	bhi.n	8008e76 <USBD_LL_StallEP+0x1a>
 8008e6a:	e8df f000 	tbb	[pc, r0]
 8008e6e:	0403      	.short	0x0403
 8008e70:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008e72:	2001      	movs	r0, #1
}
 8008e74:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008e76:	2003      	movs	r0, #3
 8008e78:	e7fc      	b.n	8008e74 <USBD_LL_StallEP+0x18>

08008e7a <USBD_LL_ClearStallEP>:
{
 8008e7a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e7c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008e80:	f7fc fd14 	bl	80058ac <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8008e84:	2803      	cmp	r0, #3
 8008e86:	d805      	bhi.n	8008e94 <USBD_LL_ClearStallEP+0x1a>
 8008e88:	e8df f000 	tbb	[pc, r0]
 8008e8c:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8008e90:	2001      	movs	r0, #1
}
 8008e92:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008e94:	2003      	movs	r0, #3
 8008e96:	e7fc      	b.n	8008e92 <USBD_LL_ClearStallEP+0x18>

08008e98 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e98:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8008e9c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008ea0:	d108      	bne.n	8008eb4 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ea2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008ea6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008eaa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008eae:	f893 0152 	ldrb.w	r0, [r3, #338]	@ 0x152
}
 8008eb2:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008eb4:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008eb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008ebc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008ec0:	7c98      	ldrb	r0, [r3, #18]
 8008ec2:	4770      	bx	lr

08008ec4 <USBD_LL_SetUSBAddress>:
{
 8008ec4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ec6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008eca:	f7fc fafe 	bl	80054ca <HAL_PCD_SetAddress>
  switch (hal_status) {
 8008ece:	2803      	cmp	r0, #3
 8008ed0:	d805      	bhi.n	8008ede <USBD_LL_SetUSBAddress+0x1a>
 8008ed2:	e8df f000 	tbb	[pc, r0]
 8008ed6:	0403      	.short	0x0403
 8008ed8:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008eda:	2001      	movs	r0, #1
}
 8008edc:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008ede:	2003      	movs	r0, #3
 8008ee0:	e7fc      	b.n	8008edc <USBD_LL_SetUSBAddress+0x18>

08008ee2 <USBD_LL_Transmit>:
{
 8008ee2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ee4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008ee8:	f7fc fc7a 	bl	80057e0 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 8008eec:	2803      	cmp	r0, #3
 8008eee:	d805      	bhi.n	8008efc <USBD_LL_Transmit+0x1a>
 8008ef0:	e8df f000 	tbb	[pc, r0]
 8008ef4:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8008ef8:	2001      	movs	r0, #1
}
 8008efa:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008efc:	2003      	movs	r0, #3
 8008efe:	e7fc      	b.n	8008efa <USBD_LL_Transmit+0x18>

08008f00 <USBD_LL_PrepareReceive>:
{
 8008f00:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f02:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008f06:	f7fc fc45 	bl	8005794 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8008f0a:	2803      	cmp	r0, #3
 8008f0c:	d805      	bhi.n	8008f1a <USBD_LL_PrepareReceive+0x1a>
 8008f0e:	e8df f000 	tbb	[pc, r0]
 8008f12:	0403      	.short	0x0403
 8008f14:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008f16:	2001      	movs	r0, #1
}
 8008f18:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008f1a:	2003      	movs	r0, #3
 8008f1c:	e7fc      	b.n	8008f18 <USBD_LL_PrepareReceive+0x18>

08008f1e <USBD_LL_GetRxDataSize>:
{
 8008f1e:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f20:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008f24:	f7fc fc53 	bl	80057ce <HAL_PCD_EP_GetRxCount>
}
 8008f28:	bd08      	pop	{r3, pc}
	...

08008f2c <HAL_PCDEx_LPM_Callback>:
{
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	4604      	mov	r4, r0
  switch (msg)
 8008f30:	b169      	cbz	r1, 8008f4e <HAL_PCDEx_LPM_Callback+0x22>
 8008f32:	2901      	cmp	r1, #1
 8008f34:	d111      	bne.n	8008f5a <HAL_PCDEx_LPM_Callback+0x2e>
    USBD_LL_Suspend(hpcd->pData);
 8008f36:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008f3a:	f000 f8cc 	bl	80090d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f3e:	7aa3      	ldrb	r3, [r4, #10]
 8008f40:	b15b      	cbz	r3, 8008f5a <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f42:	4a0a      	ldr	r2, [pc, #40]	@ (8008f6c <HAL_PCDEx_LPM_Callback+0x40>)
 8008f44:	6913      	ldr	r3, [r2, #16]
 8008f46:	f043 0306 	orr.w	r3, r3, #6
 8008f4a:	6113      	str	r3, [r2, #16]
}
 8008f4c:	e005      	b.n	8008f5a <HAL_PCDEx_LPM_Callback+0x2e>
    if (hpcd->Init.low_power_enable)
 8008f4e:	7a83      	ldrb	r3, [r0, #10]
 8008f50:	b923      	cbnz	r3, 8008f5c <HAL_PCDEx_LPM_Callback+0x30>
    USBD_LL_Resume(hpcd->pData);
 8008f52:	f8d4 02dc 	ldr.w	r0, [r4, #732]	@ 0x2dc
 8008f56:	f000 f8cc 	bl	80090f2 <USBD_LL_Resume>
}
 8008f5a:	bd10      	pop	{r4, pc}
      SystemClockConfig_Resume();
 8008f5c:	f7ff fe5a 	bl	8008c14 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f60:	4a02      	ldr	r2, [pc, #8]	@ (8008f6c <HAL_PCDEx_LPM_Callback+0x40>)
 8008f62:	6913      	ldr	r3, [r2, #16]
 8008f64:	f023 0306 	bic.w	r3, r3, #6
 8008f68:	6113      	str	r3, [r2, #16]
 8008f6a:	e7f2      	b.n	8008f52 <HAL_PCDEx_LPM_Callback+0x26>
 8008f6c:	e000ed00 	.word	0xe000ed00

08008f70 <USBD_static_malloc>:
}
 8008f70:	4800      	ldr	r0, [pc, #0]	@ (8008f74 <USBD_static_malloc+0x4>)
 8008f72:	4770      	bx	lr
 8008f74:	20001fec 	.word	0x20001fec

08008f78 <USBD_static_free>:
}
 8008f78:	4770      	bx	lr

08008f7a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f7a:	b198      	cbz	r0, 8008fa4 <USBD_Init+0x2a>
{
 8008f7c:	b508      	push	{r3, lr}
 8008f7e:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f80:	2000      	movs	r0, #0
 8008f82:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f86:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f8a:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f8e:	b109      	cbz	r1, 8008f94 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8008f90:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f94:	2101      	movs	r1, #1
 8008f96:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff fee7 	bl	8008d70 <USBD_LL_Init>

  return ret;
}
 8008fa2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008fa4:	2003      	movs	r0, #3
}
 8008fa6:	4770      	bx	lr

08008fa8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8008fb2:	b1b9      	cbz	r1, 8008fe4 <USBD_RegisterClass+0x3c>
 8008fb4:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008fb6:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008fba:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8008fbe:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8008fc0:	b143      	cbz	r3, 8008fd4 <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008fc2:	32ae      	adds	r2, #174	@ 0xae
 8008fc4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fca:	f10d 0006 	add.w	r0, sp, #6
 8008fce:	4798      	blx	r3
 8008fd0:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008fd4:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8008fd8:	3301      	adds	r3, #1
 8008fda:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8008fde:	2000      	movs	r0, #0
}
 8008fe0:	b002      	add	sp, #8
 8008fe2:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008fe4:	2003      	movs	r0, #3
 8008fe6:	e7fb      	b.n	8008fe0 <USBD_RegisterClass+0x38>

08008fe8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fe8:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008fea:	f7ff ff07 	bl	8008dfc <USBD_LL_Start>
}
 8008fee:	bd08      	pop	{r3, pc}

08008ff0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ff0:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ff2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008ff6:	b113      	cbz	r3, 8008ffe <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008ffc:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8008ffe:	2000      	movs	r0, #0
 8009000:	e7fc      	b.n	8008ffc <USBD_SetClassConfig+0xc>

08009002 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009002:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009004:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	4798      	blx	r3
 800900c:	b900      	cbnz	r0, 8009010 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800900e:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8009010:	2003      	movs	r0, #3
 8009012:	e7fc      	b.n	800900e <USBD_ClrClassConfig+0xc>

08009014 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009018:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800901c:	4628      	mov	r0, r5
 800901e:	f000 f981 	bl	8009324 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009022:	2301      	movs	r3, #1
 8009024:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009028:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800902c:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009030:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8009034:	f001 031f 	and.w	r3, r1, #31
 8009038:	2b01      	cmp	r3, #1
 800903a:	d007      	beq.n	800904c <USBD_LL_SetupStage+0x38>
 800903c:	2b02      	cmp	r3, #2
 800903e:	d00a      	beq.n	8009056 <USBD_LL_SetupStage+0x42>
 8009040:	b973      	cbnz	r3, 8009060 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009042:	4629      	mov	r1, r5
 8009044:	4620      	mov	r0, r4
 8009046:	f000 fb53 	bl	80096f0 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800904a:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800904c:	4629      	mov	r1, r5
 800904e:	4620      	mov	r0, r4
 8009050:	f000 fb89 	bl	8009766 <USBD_StdItfReq>
      break;
 8009054:	e7f9      	b.n	800904a <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009056:	4629      	mov	r1, r5
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fbc6 	bl	80097ea <USBD_StdEPReq>
      break;
 800905e:	e7f4      	b.n	800904a <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009060:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8009064:	4620      	mov	r0, r4
 8009066:	f7ff fef9 	bl	8008e5c <USBD_LL_StallEP>
      break;
 800906a:	e7ee      	b.n	800904a <USBD_LL_SetupStage+0x36>

0800906c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009070:	2301      	movs	r3, #1
 8009072:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009076:	2300      	movs	r3, #0
 8009078:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800907c:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800907e:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009082:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009086:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800908a:	b1db      	cbz	r3, 80090c4 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	b1db      	cbz	r3, 80090c8 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009090:	2100      	movs	r1, #0
 8009092:	4798      	blx	r3
 8009094:	4607      	mov	r7, r0
 8009096:	b9c8      	cbnz	r0, 80090cc <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009098:	2340      	movs	r3, #64	@ 0x40
 800909a:	2200      	movs	r2, #0
 800909c:	4611      	mov	r1, r2
 800909e:	4620      	mov	r0, r4
 80090a0:	f7ff febb 	bl	8008e1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090a4:	2601      	movs	r6, #1
 80090a6:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090aa:	2540      	movs	r5, #64	@ 0x40
 80090ac:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090b0:	462b      	mov	r3, r5
 80090b2:	2200      	movs	r2, #0
 80090b4:	2180      	movs	r1, #128	@ 0x80
 80090b6:	4620      	mov	r0, r4
 80090b8:	f7ff feaf 	bl	8008e1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090bc:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090be:	6225      	str	r5, [r4, #32]

  return ret;
}
 80090c0:	4638      	mov	r0, r7
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80090c4:	2700      	movs	r7, #0
 80090c6:	e7e7      	b.n	8009098 <USBD_LL_Reset+0x2c>
 80090c8:	2700      	movs	r7, #0
 80090ca:	e7e5      	b.n	8009098 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 80090cc:	2703      	movs	r7, #3
 80090ce:	e7e3      	b.n	8009098 <USBD_LL_Reset+0x2c>

080090d0 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80090d0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80090d2:	2000      	movs	r0, #0
 80090d4:	4770      	bx	lr

080090d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80090d6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d004      	beq.n	80090e8 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 80090de:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090e8:	2304      	movs	r3, #4
 80090ea:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80090ee:	2000      	movs	r0, #0
 80090f0:	4770      	bx	lr

080090f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d001      	beq.n	80090fe <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80090fa:	2000      	movs	r0, #0
 80090fc:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80090fe:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8009102:	b2db      	uxtb	r3, r3
 8009104:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8009108:	e7f7      	b.n	80090fa <USBD_LL_Resume+0x8>

0800910a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800910a:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009110:	2b03      	cmp	r3, #3
 8009112:	d001      	beq.n	8009118 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8009114:	2000      	movs	r0, #0
 8009116:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8009118:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d0f9      	beq.n	8009114 <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0f6      	beq.n	8009114 <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8009126:	4798      	blx	r3
 8009128:	e7f4      	b.n	8009114 <USBD_LL_SOF+0xa>

0800912a <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800912a:	2000      	movs	r0, #0
 800912c:	4770      	bx	lr

0800912e <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800912e:	2000      	movs	r0, #0
 8009130:	4770      	bx	lr

08009132 <USBD_LL_DataOutStage>:
{
 8009132:	b538      	push	{r3, r4, r5, lr}
 8009134:	4604      	mov	r4, r0
  if (epnum == 0U)
 8009136:	460d      	mov	r5, r1
 8009138:	2900      	cmp	r1, #0
 800913a:	d141      	bne.n	80091c0 <USBD_LL_DataOutStage+0x8e>
 800913c:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800913e:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009142:	2a03      	cmp	r2, #3
 8009144:	d001      	beq.n	800914a <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8009146:	4608      	mov	r0, r1
}
 8009148:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800914a:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800914e:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8009152:	4291      	cmp	r1, r2
 8009154:	d809      	bhi.n	800916a <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8009156:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 800915a:	f003 031f 	and.w	r3, r3, #31
 800915e:	2b01      	cmp	r3, #1
 8009160:	d00e      	beq.n	8009180 <USBD_LL_DataOutStage+0x4e>
 8009162:	2b02      	cmp	r3, #2
 8009164:	d01a      	beq.n	800919c <USBD_LL_DataOutStage+0x6a>
 8009166:	4628      	mov	r0, r5
 8009168:	e00f      	b.n	800918a <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 800916a:	1a89      	subs	r1, r1, r2
 800916c:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009170:	428a      	cmp	r2, r1
 8009172:	bf28      	it	cs
 8009174:	460a      	movcs	r2, r1
 8009176:	4619      	mov	r1, r3
 8009178:	f000 fd3a 	bl	8009bf0 <USBD_CtlContinueRx>
  return USBD_OK;
 800917c:	4628      	mov	r0, r5
 800917e:	e7e3      	b.n	8009148 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009180:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8009184:	f7ff ffd1 	bl	800912a <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009188:	b918      	cbnz	r0, 8009192 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918a:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800918e:	2b03      	cmp	r3, #3
 8009190:	d009      	beq.n	80091a6 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fd34 	bl	8009c00 <USBD_CtlSendStatus>
  return USBD_OK;
 8009198:	4628      	mov	r0, r5
 800919a:	e7d5      	b.n	8009148 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800919c:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80091a0:	f7ff ffc5 	bl	800912e <USBD_CoreFindEP>
            break;
 80091a4:	e7f0      	b.n	8009188 <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80091a6:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80091aa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	d0ee      	beq.n	8009192 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 80091b4:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	4620      	mov	r0, r4
 80091bc:	4798      	blx	r3
 80091be:	e7e8      	b.n	8009192 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80091c0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80091c4:	f7ff ffb3 	bl	800912e <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091c8:	b988      	cbnz	r0, 80091ee <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ca:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d1ba      	bne.n	8009148 <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 80091d2:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80091d6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80091da:	699a      	ldr	r2, [r3, #24]
 80091dc:	2a00      	cmp	r2, #0
 80091de:	d0b3      	beq.n	8009148 <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 80091e0:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	4629      	mov	r1, r5
 80091e8:	4620      	mov	r0, r4
 80091ea:	4798      	blx	r3
      if (ret != USBD_OK)
 80091ec:	e7ac      	b.n	8009148 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 80091ee:	2000      	movs	r0, #0
 80091f0:	e7aa      	b.n	8009148 <USBD_LL_DataOutStage+0x16>

080091f2 <USBD_LL_DataInStage>:
{
 80091f2:	b538      	push	{r3, r4, r5, lr}
 80091f4:	4604      	mov	r4, r0
  if (epnum == 0U)
 80091f6:	460d      	mov	r5, r1
 80091f8:	2900      	cmp	r1, #0
 80091fa:	d14a      	bne.n	8009292 <USBD_LL_DataInStage+0xa0>
 80091fc:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091fe:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009202:	2a02      	cmp	r2, #2
 8009204:	d007      	beq.n	8009216 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8009206:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800920a:	b118      	cbz	r0, 8009214 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8009212:	4628      	mov	r0, r5
}
 8009214:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009216:	69c2      	ldr	r2, [r0, #28]
 8009218:	6a01      	ldr	r1, [r0, #32]
 800921a:	428a      	cmp	r2, r1
 800921c:	d80d      	bhi.n	800923a <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 800921e:	428a      	cmp	r2, r1
 8009220:	d017      	beq.n	8009252 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009222:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009226:	2b03      	cmp	r3, #3
 8009228:	d027      	beq.n	800927a <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800922a:	2180      	movs	r1, #128	@ 0x80
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff fe15 	bl	8008e5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009232:	4620      	mov	r0, r4
 8009234:	f000 fcef 	bl	8009c16 <USBD_CtlReceiveStatus>
 8009238:	e7e5      	b.n	8009206 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800923a:	1a52      	subs	r2, r2, r1
 800923c:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800923e:	4619      	mov	r1, r3
 8009240:	f000 fcbf 	bl	8009bc2 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009244:	2300      	movs	r3, #0
 8009246:	461a      	mov	r2, r3
 8009248:	4619      	mov	r1, r3
 800924a:	4620      	mov	r0, r4
 800924c:	f7ff fe58 	bl	8008f00 <USBD_LL_PrepareReceive>
 8009250:	e7d9      	b.n	8009206 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8009252:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8009254:	4299      	cmp	r1, r3
 8009256:	d8e4      	bhi.n	8009222 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8009258:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800925c:	4293      	cmp	r3, r2
 800925e:	d2e0      	bcs.n	8009222 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009260:	2200      	movs	r2, #0
 8009262:	4611      	mov	r1, r2
 8009264:	f000 fcad 	bl	8009bc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009268:	2100      	movs	r1, #0
 800926a:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800926e:	460b      	mov	r3, r1
 8009270:	460a      	mov	r2, r1
 8009272:	4620      	mov	r0, r4
 8009274:	f7ff fe44 	bl	8008f00 <USBD_LL_PrepareReceive>
 8009278:	e7c5      	b.n	8009206 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800927a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	2a00      	cmp	r2, #0
 8009282:	d0d2      	beq.n	800922a <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8009284:	2200      	movs	r2, #0
 8009286:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	4620      	mov	r0, r4
 800928e:	4798      	blx	r3
 8009290:	e7cb      	b.n	800922a <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009292:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009296:	f7ff ff4a 	bl	800912e <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800929a:	b988      	cbnz	r0, 80092c0 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d1b7      	bne.n	8009214 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 80092a4:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80092a8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80092ac:	695a      	ldr	r2, [r3, #20]
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	d0b0      	beq.n	8009214 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 80092b2:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	4629      	mov	r1, r5
 80092ba:	4620      	mov	r0, r4
 80092bc:	4798      	blx	r3
          if (ret != USBD_OK)
 80092be:	e7a9      	b.n	8009214 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 80092c0:	2000      	movs	r0, #0
 80092c2:	e7a7      	b.n	8009214 <USBD_LL_DataInStage+0x22>

080092c4 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80092c4:	880b      	ldrh	r3, [r1, #0]
 80092c6:	7802      	ldrb	r2, [r0, #0]
 80092c8:	4413      	add	r3, r2
 80092ca:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80092cc:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 80092ce:	4418      	add	r0, r3
 80092d0:	4770      	bx	lr

080092d2 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 80092d2:	8842      	ldrh	r2, [r0, #2]
 80092d4:	7803      	ldrb	r3, [r0, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d918      	bls.n	800930c <USBD_GetEpDesc+0x3a>
{
 80092da:	b530      	push	{r4, r5, lr}
 80092dc:	b083      	sub	sp, #12
 80092de:	4604      	mov	r4, r0
 80092e0:	460d      	mov	r5, r1
    ptr = desc->bLength;
 80092e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 80092e6:	8863      	ldrh	r3, [r4, #2]
 80092e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d20a      	bcs.n	8009306 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092f0:	f10d 0106 	add.w	r1, sp, #6
 80092f4:	f7ff ffe6 	bl	80092c4 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092f8:	7843      	ldrb	r3, [r0, #1]
 80092fa:	2b05      	cmp	r3, #5
 80092fc:	d1f3      	bne.n	80092e6 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 80092fe:	7883      	ldrb	r3, [r0, #2]
 8009300:	42ab      	cmp	r3, r5
 8009302:	d1f0      	bne.n	80092e6 <USBD_GetEpDesc+0x14>
 8009304:	e000      	b.n	8009308 <USBD_GetEpDesc+0x36>
 8009306:	2000      	movs	r0, #0
}
 8009308:	b003      	add	sp, #12
 800930a:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800930c:	2000      	movs	r0, #0
}
 800930e:	4770      	bx	lr

08009310 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009310:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8009312:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8009314:	e002      	b.n	800931c <USBD_GetLen+0xc>
  {
    len++;
 8009316:	3001      	adds	r0, #1
 8009318:	b2c0      	uxtb	r0, r0
    pbuff++;
 800931a:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800931c:	781a      	ldrb	r2, [r3, #0]
 800931e:	2a00      	cmp	r2, #0
 8009320:	d1f9      	bne.n	8009316 <USBD_GetLen+0x6>
  }

  return len;
}
 8009322:	4770      	bx	lr

08009324 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8009324:	780b      	ldrb	r3, [r1, #0]
 8009326:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8009328:	784b      	ldrb	r3, [r1, #1]
 800932a:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800932c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800932e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8009334:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8009336:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8009338:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800933a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800933e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8009340:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8009342:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009344:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8009348:	80c3      	strh	r3, [r0, #6]
}
 800934a:	4770      	bx	lr

0800934c <USBD_CtlError>:
{
 800934c:	b510      	push	{r4, lr}
 800934e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009350:	2180      	movs	r1, #128	@ 0x80
 8009352:	f7ff fd83 	bl	8008e5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009356:	2100      	movs	r1, #0
 8009358:	4620      	mov	r0, r4
 800935a:	f7ff fd7f 	bl	8008e5c <USBD_LL_StallEP>
}
 800935e:	bd10      	pop	{r4, pc}

08009360 <USBD_GetDescriptor>:
{
 8009360:	b530      	push	{r4, r5, lr}
 8009362:	b083      	sub	sp, #12
 8009364:	4605      	mov	r5, r0
 8009366:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800936e:	884a      	ldrh	r2, [r1, #2]
 8009370:	0a13      	lsrs	r3, r2, #8
 8009372:	3b01      	subs	r3, #1
 8009374:	2b0e      	cmp	r3, #14
 8009376:	f200 80bb 	bhi.w	80094f0 <USBD_GetDescriptor+0x190>
 800937a:	e8df f003 	tbb	[pc, r3]
 800937e:	2f15      	.short	0x2f15
 8009380:	9db9b943 	.word	0x9db9b943
 8009384:	b9b9b9aa 	.word	0xb9b9b9aa
 8009388:	b9b9b9b9 	.word	0xb9b9b9b9
 800938c:	08          	.byte	0x08
 800938d:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800938e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	b123      	cbz	r3, 80093a0 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009396:	f10d 0106 	add.w	r1, sp, #6
 800939a:	7c00      	ldrb	r0, [r0, #16]
 800939c:	4798      	blx	r3
  if (err != 0U)
 800939e:	e00a      	b.n	80093b6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80093a0:	4621      	mov	r1, r4
 80093a2:	f7ff ffd3 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 80093a6:	e0a6      	b.n	80094f6 <USBD_GetDescriptor+0x196>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f10d 0106 	add.w	r1, sp, #6
 80093b2:	7c00      	ldrb	r0, [r0, #16]
 80093b4:	4798      	blx	r3
  if (req->wLength != 0U)
 80093b6:	88e2      	ldrh	r2, [r4, #6]
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	f000 80a3 	beq.w	8009504 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 80093be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f000 8099 	beq.w	80094fa <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 80093c8:	429a      	cmp	r2, r3
 80093ca:	bf28      	it	cs
 80093cc:	461a      	movcs	r2, r3
 80093ce:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093d2:	4601      	mov	r1, r0
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 fbe7 	bl	8009ba8 <USBD_CtlSendData>
 80093da:	e08c      	b.n	80094f6 <USBD_GetDescriptor+0x196>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093dc:	7c03      	ldrb	r3, [r0, #16]
 80093de:	b943      	cbnz	r3, 80093f2 <USBD_GetDescriptor+0x92>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80093e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80093e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e6:	f10d 0006 	add.w	r0, sp, #6
 80093ea:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093ec:	2302      	movs	r3, #2
 80093ee:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80093f0:	e7e1      	b.n	80093b6 <USBD_GetDescriptor+0x56>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80093f2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	f10d 0006 	add.w	r0, sp, #6
 80093fc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093fe:	2302      	movs	r3, #2
 8009400:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8009402:	e7d8      	b.n	80093b6 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 8009404:	b2d2      	uxtb	r2, r2
 8009406:	2a05      	cmp	r2, #5
 8009408:	d852      	bhi.n	80094b0 <USBD_GetDescriptor+0x150>
 800940a:	e8df f002 	tbb	[pc, r2]
 800940e:	1003      	.short	0x1003
 8009410:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009414:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	b123      	cbz	r3, 8009426 <USBD_GetDescriptor+0xc6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800941c:	f10d 0106 	add.w	r1, sp, #6
 8009420:	7c00      	ldrb	r0, [r0, #16]
 8009422:	4798      	blx	r3
  if (err != 0U)
 8009424:	e7c7      	b.n	80093b6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8009426:	4621      	mov	r1, r4
 8009428:	f7ff ff90 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 800942c:	e063      	b.n	80094f6 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800942e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	b123      	cbz	r3, 8009440 <USBD_GetDescriptor+0xe0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009436:	f10d 0106 	add.w	r1, sp, #6
 800943a:	7c00      	ldrb	r0, [r0, #16]
 800943c:	4798      	blx	r3
  if (err != 0U)
 800943e:	e7ba      	b.n	80093b6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8009440:	4621      	mov	r1, r4
 8009442:	f7ff ff83 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 8009446:	e056      	b.n	80094f6 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009448:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	b123      	cbz	r3, 800945a <USBD_GetDescriptor+0xfa>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009450:	f10d 0106 	add.w	r1, sp, #6
 8009454:	7c00      	ldrb	r0, [r0, #16]
 8009456:	4798      	blx	r3
  if (err != 0U)
 8009458:	e7ad      	b.n	80093b6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800945a:	4621      	mov	r1, r4
 800945c:	f7ff ff76 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 8009460:	e049      	b.n	80094f6 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009462:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	b123      	cbz	r3, 8009474 <USBD_GetDescriptor+0x114>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800946a:	f10d 0106 	add.w	r1, sp, #6
 800946e:	7c00      	ldrb	r0, [r0, #16]
 8009470:	4798      	blx	r3
  if (err != 0U)
 8009472:	e7a0      	b.n	80093b6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8009474:	4621      	mov	r1, r4
 8009476:	f7ff ff69 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 800947a:	e03c      	b.n	80094f6 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800947c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	b123      	cbz	r3, 800948e <USBD_GetDescriptor+0x12e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009484:	f10d 0106 	add.w	r1, sp, #6
 8009488:	7c00      	ldrb	r0, [r0, #16]
 800948a:	4798      	blx	r3
  if (err != 0U)
 800948c:	e793      	b.n	80093b6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800948e:	4621      	mov	r1, r4
 8009490:	f7ff ff5c 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 8009494:	e02f      	b.n	80094f6 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009496:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	b123      	cbz	r3, 80094a8 <USBD_GetDescriptor+0x148>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800949e:	f10d 0106 	add.w	r1, sp, #6
 80094a2:	7c00      	ldrb	r0, [r0, #16]
 80094a4:	4798      	blx	r3
  if (err != 0U)
 80094a6:	e786      	b.n	80093b6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80094a8:	4621      	mov	r1, r4
 80094aa:	f7ff ff4f 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 80094ae:	e022      	b.n	80094f6 <USBD_GetDescriptor+0x196>
          USBD_CtlError(pdev, req);
 80094b0:	4621      	mov	r1, r4
 80094b2:	f7ff ff4b 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 80094b6:	e01e      	b.n	80094f6 <USBD_GetDescriptor+0x196>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094b8:	7c03      	ldrb	r3, [r0, #16]
 80094ba:	b933      	cbnz	r3, 80094ca <USBD_GetDescriptor+0x16a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80094bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80094c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c2:	f10d 0006 	add.w	r0, sp, #6
 80094c6:	4798      	blx	r3
  if (err != 0U)
 80094c8:	e775      	b.n	80093b6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80094ca:	4621      	mov	r1, r4
 80094cc:	f7ff ff3e 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 80094d0:	e011      	b.n	80094f6 <USBD_GetDescriptor+0x196>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d2:	7c03      	ldrb	r3, [r0, #16]
 80094d4:	b943      	cbnz	r3, 80094e8 <USBD_GetDescriptor+0x188>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094d6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80094da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094dc:	f10d 0006 	add.w	r0, sp, #6
 80094e0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094e2:	2307      	movs	r3, #7
 80094e4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80094e6:	e766      	b.n	80093b6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80094e8:	4621      	mov	r1, r4
 80094ea:	f7ff ff2f 	bl	800934c <USBD_CtlError>
  if (err != 0U)
 80094ee:	e002      	b.n	80094f6 <USBD_GetDescriptor+0x196>
      USBD_CtlError(pdev, req);
 80094f0:	4621      	mov	r1, r4
 80094f2:	f7ff ff2b 	bl	800934c <USBD_CtlError>
}
 80094f6:	b003      	add	sp, #12
 80094f8:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 80094fa:	4621      	mov	r1, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f7ff ff25 	bl	800934c <USBD_CtlError>
 8009502:	e7f8      	b.n	80094f6 <USBD_GetDescriptor+0x196>
    (void)USBD_CtlSendStatus(pdev);
 8009504:	4628      	mov	r0, r5
 8009506:	f000 fb7b 	bl	8009c00 <USBD_CtlSendStatus>
 800950a:	e7f4      	b.n	80094f6 <USBD_GetDescriptor+0x196>

0800950c <USBD_SetAddress>:
{
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009510:	888b      	ldrh	r3, [r1, #4]
 8009512:	b9f3      	cbnz	r3, 8009552 <USBD_SetAddress+0x46>
 8009514:	88cb      	ldrh	r3, [r1, #6]
 8009516:	b9e3      	cbnz	r3, 8009552 <USBD_SetAddress+0x46>
 8009518:	884b      	ldrh	r3, [r1, #2]
 800951a:	2b7f      	cmp	r3, #127	@ 0x7f
 800951c:	d819      	bhi.n	8009552 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800951e:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009522:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009526:	2b03      	cmp	r3, #3
 8009528:	d00c      	beq.n	8009544 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800952a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800952e:	4629      	mov	r1, r5
 8009530:	f7ff fcc8 	bl	8008ec4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009534:	4620      	mov	r0, r4
 8009536:	f000 fb63 	bl	8009c00 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800953a:	b135      	cbz	r5, 800954a <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800953c:	2302      	movs	r3, #2
 800953e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8009542:	e009      	b.n	8009558 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8009544:	f7ff ff02 	bl	800934c <USBD_CtlError>
 8009548:	e006      	b.n	8009558 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800954a:	2301      	movs	r3, #1
 800954c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8009550:	e002      	b.n	8009558 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8009552:	4620      	mov	r0, r4
 8009554:	f7ff fefa 	bl	800934c <USBD_CtlError>
}
 8009558:	bd38      	pop	{r3, r4, r5, pc}
	...

0800955c <USBD_SetConfig>:
{
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	4604      	mov	r4, r0
 8009560:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8009562:	788d      	ldrb	r5, [r1, #2]
 8009564:	4b2f      	ldr	r3, [pc, #188]	@ (8009624 <USBD_SetConfig+0xc8>)
 8009566:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009568:	2d01      	cmp	r5, #1
 800956a:	d810      	bhi.n	800958e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800956c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009570:	b2da      	uxtb	r2, r3
 8009572:	2b02      	cmp	r3, #2
 8009574:	d00f      	beq.n	8009596 <USBD_SetConfig+0x3a>
 8009576:	2a03      	cmp	r2, #3
 8009578:	d026      	beq.n	80095c8 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800957a:	f7ff fee7 	bl	800934c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800957e:	4b29      	ldr	r3, [pc, #164]	@ (8009624 <USBD_SetConfig+0xc8>)
 8009580:	7819      	ldrb	r1, [r3, #0]
 8009582:	4620      	mov	r0, r4
 8009584:	f7ff fd3d 	bl	8009002 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009588:	2503      	movs	r5, #3
}
 800958a:	4628      	mov	r0, r5
 800958c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800958e:	f7ff fedd 	bl	800934c <USBD_CtlError>
    return USBD_FAIL;
 8009592:	2503      	movs	r5, #3
 8009594:	e7f9      	b.n	800958a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8009596:	b1a5      	cbz	r5, 80095c2 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8009598:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800959a:	4629      	mov	r1, r5
 800959c:	f7ff fd28 	bl	8008ff0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80095a0:	4605      	mov	r5, r0
 80095a2:	b138      	cbz	r0, 80095b4 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 80095a4:	4631      	mov	r1, r6
 80095a6:	4620      	mov	r0, r4
 80095a8:	f7ff fed0 	bl	800934c <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ac:	2302      	movs	r3, #2
 80095ae:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80095b2:	e7ea      	b.n	800958a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 fb23 	bl	8009c00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095ba:	2303      	movs	r3, #3
 80095bc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80095c0:	e7e3      	b.n	800958a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80095c2:	f000 fb1d 	bl	8009c00 <USBD_CtlSendStatus>
 80095c6:	e7e0      	b.n	800958a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80095c8:	b1cd      	cbz	r5, 80095fe <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 80095ca:	6841      	ldr	r1, [r0, #4]
 80095cc:	428d      	cmp	r5, r1
 80095ce:	d025      	beq.n	800961c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095d0:	b2c9      	uxtb	r1, r1
 80095d2:	f7ff fd16 	bl	8009002 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095d6:	4b13      	ldr	r3, [pc, #76]	@ (8009624 <USBD_SetConfig+0xc8>)
 80095d8:	7819      	ldrb	r1, [r3, #0]
 80095da:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095dc:	4620      	mov	r0, r4
 80095de:	f7ff fd07 	bl	8008ff0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80095e2:	4605      	mov	r5, r0
 80095e4:	b1b0      	cbz	r0, 8009614 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 80095e6:	4631      	mov	r1, r6
 80095e8:	4620      	mov	r0, r4
 80095ea:	f7ff feaf 	bl	800934c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095ee:	7921      	ldrb	r1, [r4, #4]
 80095f0:	4620      	mov	r0, r4
 80095f2:	f7ff fd06 	bl	8009002 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f6:	2302      	movs	r3, #2
 80095f8:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80095fc:	e7c5      	b.n	800958a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095fe:	2302      	movs	r3, #2
 8009600:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009604:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009606:	4629      	mov	r1, r5
 8009608:	f7ff fcfb 	bl	8009002 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800960c:	4620      	mov	r0, r4
 800960e:	f000 faf7 	bl	8009c00 <USBD_CtlSendStatus>
 8009612:	e7ba      	b.n	800958a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8009614:	4620      	mov	r0, r4
 8009616:	f000 faf3 	bl	8009c00 <USBD_CtlSendStatus>
 800961a:	e7b6      	b.n	800958a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800961c:	f000 faf0 	bl	8009c00 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8009620:	2500      	movs	r5, #0
 8009622:	e7b2      	b.n	800958a <USBD_SetConfig+0x2e>
 8009624:	200024ec 	.word	0x200024ec

08009628 <USBD_GetConfig>:
{
 8009628:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800962a:	88cb      	ldrh	r3, [r1, #6]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d10b      	bne.n	8009648 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8009630:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009634:	b2da      	uxtb	r2, r3
 8009636:	2b02      	cmp	r3, #2
 8009638:	d909      	bls.n	800964e <USBD_GetConfig+0x26>
 800963a:	2a03      	cmp	r2, #3
 800963c:	d111      	bne.n	8009662 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800963e:	2201      	movs	r2, #1
 8009640:	1d01      	adds	r1, r0, #4
 8009642:	f000 fab1 	bl	8009ba8 <USBD_CtlSendData>
        break;
 8009646:	e001      	b.n	800964c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8009648:	f7ff fe80 	bl	800934c <USBD_CtlError>
}
 800964c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800964e:	b252      	sxtb	r2, r2
 8009650:	b13a      	cbz	r2, 8009662 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8009652:	4601      	mov	r1, r0
 8009654:	2300      	movs	r3, #0
 8009656:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800965a:	2201      	movs	r2, #1
 800965c:	f000 faa4 	bl	8009ba8 <USBD_CtlSendData>
        break;
 8009660:	e7f4      	b.n	800964c <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8009662:	f7ff fe73 	bl	800934c <USBD_CtlError>
}
 8009666:	e7f1      	b.n	800964c <USBD_GetConfig+0x24>

08009668 <USBD_GetStatus>:
{
 8009668:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800966a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800966e:	3b01      	subs	r3, #1
 8009670:	2b02      	cmp	r3, #2
 8009672:	d812      	bhi.n	800969a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8009674:	88cb      	ldrh	r3, [r1, #6]
 8009676:	2b02      	cmp	r3, #2
 8009678:	d10c      	bne.n	8009694 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800967a:	2301      	movs	r3, #1
 800967c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800967e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8009682:	b10b      	cbz	r3, 8009688 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009684:	2303      	movs	r3, #3
 8009686:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009688:	2202      	movs	r2, #2
 800968a:	f100 010c 	add.w	r1, r0, #12
 800968e:	f000 fa8b 	bl	8009ba8 <USBD_CtlSendData>
}
 8009692:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8009694:	f7ff fe5a 	bl	800934c <USBD_CtlError>
        break;
 8009698:	e7fb      	b.n	8009692 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800969a:	f7ff fe57 	bl	800934c <USBD_CtlError>
}
 800969e:	e7f8      	b.n	8009692 <USBD_GetStatus+0x2a>

080096a0 <USBD_SetFeature>:
{
 80096a0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096a2:	884b      	ldrh	r3, [r1, #2]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d004      	beq.n	80096b2 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d007      	beq.n	80096bc <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 80096ac:	f7ff fe4e 	bl	800934c <USBD_CtlError>
}
 80096b0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80096b2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80096b6:	f000 faa3 	bl	8009c00 <USBD_CtlSendStatus>
 80096ba:	e7f9      	b.n	80096b0 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80096bc:	888b      	ldrh	r3, [r1, #4]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096c4:	f000 fa9c 	bl	8009c00 <USBD_CtlSendStatus>
 80096c8:	e7f2      	b.n	80096b0 <USBD_SetFeature+0x10>

080096ca <USBD_ClrFeature>:
{
 80096ca:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80096cc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80096d0:	3b01      	subs	r3, #1
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d809      	bhi.n	80096ea <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096d6:	884b      	ldrh	r3, [r1, #2]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d000      	beq.n	80096de <USBD_ClrFeature+0x14>
}
 80096dc:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80096e4:	f000 fa8c 	bl	8009c00 <USBD_CtlSendStatus>
 80096e8:	e7f8      	b.n	80096dc <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80096ea:	f7ff fe2f 	bl	800934c <USBD_CtlError>
}
 80096ee:	e7f5      	b.n	80096dc <USBD_ClrFeature+0x12>

080096f0 <USBD_StdDevReq>:
{
 80096f0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096f2:	780c      	ldrb	r4, [r1, #0]
 80096f4:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 80096f8:	2c20      	cmp	r4, #32
 80096fa:	d006      	beq.n	800970a <USBD_StdDevReq+0x1a>
 80096fc:	2c40      	cmp	r4, #64	@ 0x40
 80096fe:	d004      	beq.n	800970a <USBD_StdDevReq+0x1a>
 8009700:	b16c      	cbz	r4, 800971e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8009702:	f7ff fe23 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009706:	2400      	movs	r4, #0
      break;
 8009708:	e007      	b.n	800971a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800970a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800970e:	33ae      	adds	r3, #174	@ 0xae
 8009710:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	4798      	blx	r3
 8009718:	4604      	mov	r4, r0
}
 800971a:	4620      	mov	r0, r4
 800971c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800971e:	784d      	ldrb	r5, [r1, #1]
 8009720:	2d09      	cmp	r5, #9
 8009722:	d81d      	bhi.n	8009760 <USBD_StdDevReq+0x70>
 8009724:	e8df f005 	tbb	[pc, r5]
 8009728:	161c1912 	.word	0x161c1912
 800972c:	1c05081c 	.word	0x1c05081c
 8009730:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8009732:	f7ff fe15 	bl	8009360 <USBD_GetDescriptor>
          break;
 8009736:	e7f0      	b.n	800971a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8009738:	f7ff fee8 	bl	800950c <USBD_SetAddress>
          break;
 800973c:	e7ed      	b.n	800971a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800973e:	f7ff ff0d 	bl	800955c <USBD_SetConfig>
 8009742:	4604      	mov	r4, r0
          break;
 8009744:	e7e9      	b.n	800971a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8009746:	f7ff ff6f 	bl	8009628 <USBD_GetConfig>
          break;
 800974a:	e7e6      	b.n	800971a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800974c:	f7ff ff8c 	bl	8009668 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8009750:	462c      	mov	r4, r5
          break;
 8009752:	e7e2      	b.n	800971a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8009754:	f7ff ffa4 	bl	80096a0 <USBD_SetFeature>
          break;
 8009758:	e7df      	b.n	800971a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800975a:	f7ff ffb6 	bl	80096ca <USBD_ClrFeature>
          break;
 800975e:	e7dc      	b.n	800971a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8009760:	f7ff fdf4 	bl	800934c <USBD_CtlError>
          break;
 8009764:	e7d9      	b.n	800971a <USBD_StdDevReq+0x2a>

08009766 <USBD_StdItfReq>:
{
 8009766:	b570      	push	{r4, r5, r6, lr}
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800976c:	780b      	ldrb	r3, [r1, #0]
 800976e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009772:	2b20      	cmp	r3, #32
 8009774:	d007      	beq.n	8009786 <USBD_StdItfReq+0x20>
 8009776:	2b40      	cmp	r3, #64	@ 0x40
 8009778:	d005      	beq.n	8009786 <USBD_StdItfReq+0x20>
 800977a:	b123      	cbz	r3, 8009786 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800977c:	f7ff fde6 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009780:	2600      	movs	r6, #0
}
 8009782:	4630      	mov	r0, r6
 8009784:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8009786:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800978a:	3b01      	subs	r3, #1
 800978c:	2b02      	cmp	r3, #2
 800978e:	d826      	bhi.n	80097de <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009790:	7921      	ldrb	r1, [r4, #4]
 8009792:	2901      	cmp	r1, #1
 8009794:	d905      	bls.n	80097a2 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8009796:	4621      	mov	r1, r4
 8009798:	4628      	mov	r0, r5
 800979a:	f7ff fdd7 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800979e:	2600      	movs	r6, #0
 80097a0:	e7ef      	b.n	8009782 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7ff fcc1 	bl	800912a <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097a8:	b968      	cbnz	r0, 80097c6 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80097aa:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80097ae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80097b2:	6891      	ldr	r1, [r2, #8]
 80097b4:	b189      	cbz	r1, 80097da <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80097b6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097ba:	6893      	ldr	r3, [r2, #8]
 80097bc:	4621      	mov	r1, r4
 80097be:	4628      	mov	r0, r5
 80097c0:	4798      	blx	r3
 80097c2:	4606      	mov	r6, r0
 80097c4:	e000      	b.n	80097c8 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 80097c6:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097c8:	88e3      	ldrh	r3, [r4, #6]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1d9      	bne.n	8009782 <USBD_StdItfReq+0x1c>
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	d1d7      	bne.n	8009782 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80097d2:	4628      	mov	r0, r5
 80097d4:	f000 fa14 	bl	8009c00 <USBD_CtlSendStatus>
 80097d8:	e7d3      	b.n	8009782 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 80097da:	2603      	movs	r6, #3
 80097dc:	e7f4      	b.n	80097c8 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 80097de:	4621      	mov	r1, r4
 80097e0:	4628      	mov	r0, r5
 80097e2:	f7ff fdb3 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80097e6:	2600      	movs	r6, #0
          break;
 80097e8:	e7cb      	b.n	8009782 <USBD_StdItfReq+0x1c>

080097ea <USBD_StdEPReq>:
{
 80097ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ee:	4606      	mov	r6, r0
 80097f0:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80097f2:	888b      	ldrh	r3, [r1, #4]
 80097f4:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097f6:	780c      	ldrb	r4, [r1, #0]
 80097f8:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 80097fc:	2c20      	cmp	r4, #32
 80097fe:	d008      	beq.n	8009812 <USBD_StdEPReq+0x28>
 8009800:	2c40      	cmp	r4, #64	@ 0x40
 8009802:	d006      	beq.n	8009812 <USBD_StdEPReq+0x28>
 8009804:	b1dc      	cbz	r4, 800983e <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8009806:	f7ff fda1 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800980a:	2400      	movs	r4, #0
}
 800980c:	4620      	mov	r0, r4
 800980e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009812:	4639      	mov	r1, r7
 8009814:	4630      	mov	r0, r6
 8009816:	f7ff fc8a 	bl	800912e <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800981a:	4604      	mov	r4, r0
 800981c:	2800      	cmp	r0, #0
 800981e:	f040 80fc 	bne.w	8009a1a <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 8009822:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8009826:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800982a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0eb      	beq.n	800980c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009834:	4629      	mov	r1, r5
 8009836:	4630      	mov	r0, r6
 8009838:	4798      	blx	r3
 800983a:	4604      	mov	r4, r0
 800983c:	e7e6      	b.n	800980c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800983e:	f891 8001 	ldrb.w	r8, [r1, #1]
 8009842:	f1b8 0f01 	cmp.w	r8, #1
 8009846:	d031      	beq.n	80098ac <USBD_StdEPReq+0xc2>
 8009848:	f1b8 0f03 	cmp.w	r8, #3
 800984c:	d005      	beq.n	800985a <USBD_StdEPReq+0x70>
 800984e:	f1b8 0f00 	cmp.w	r8, #0
 8009852:	d067      	beq.n	8009924 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8009854:	f7ff fd7a 	bl	800934c <USBD_CtlError>
          break;
 8009858:	e7d8      	b.n	800980c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800985a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800985e:	b2da      	uxtb	r2, r3
 8009860:	2b02      	cmp	r3, #2
 8009862:	d004      	beq.n	800986e <USBD_StdEPReq+0x84>
 8009864:	2a03      	cmp	r2, #3
 8009866:	d012      	beq.n	800988e <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8009868:	f7ff fd70 	bl	800934c <USBD_CtlError>
              break;
 800986c:	e7ce      	b.n	800980c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800986e:	b10f      	cbz	r7, 8009874 <USBD_StdEPReq+0x8a>
 8009870:	2f80      	cmp	r7, #128	@ 0x80
 8009872:	d104      	bne.n	800987e <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8009874:	4629      	mov	r1, r5
 8009876:	4630      	mov	r0, r6
 8009878:	f7ff fd68 	bl	800934c <USBD_CtlError>
 800987c:	e7c6      	b.n	800980c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800987e:	4639      	mov	r1, r7
 8009880:	f7ff faec 	bl	8008e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009884:	2180      	movs	r1, #128	@ 0x80
 8009886:	4630      	mov	r0, r6
 8009888:	f7ff fae8 	bl	8008e5c <USBD_LL_StallEP>
 800988c:	e7be      	b.n	800980c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800988e:	884b      	ldrh	r3, [r1, #2]
 8009890:	b923      	cbnz	r3, 800989c <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009892:	b11f      	cbz	r7, 800989c <USBD_StdEPReq+0xb2>
 8009894:	2f80      	cmp	r7, #128	@ 0x80
 8009896:	d001      	beq.n	800989c <USBD_StdEPReq+0xb2>
 8009898:	88cb      	ldrh	r3, [r1, #6]
 800989a:	b11b      	cbz	r3, 80098a4 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 800989c:	4630      	mov	r0, r6
 800989e:	f000 f9af 	bl	8009c00 <USBD_CtlSendStatus>
              break;
 80098a2:	e7b3      	b.n	800980c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80098a4:	4639      	mov	r1, r7
 80098a6:	f7ff fad9 	bl	8008e5c <USBD_LL_StallEP>
 80098aa:	e7f7      	b.n	800989c <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 80098ac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d004      	beq.n	80098c0 <USBD_StdEPReq+0xd6>
 80098b6:	2a03      	cmp	r2, #3
 80098b8:	d012      	beq.n	80098e0 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 80098ba:	f7ff fd47 	bl	800934c <USBD_CtlError>
              break;
 80098be:	e7a5      	b.n	800980c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098c0:	b10f      	cbz	r7, 80098c6 <USBD_StdEPReq+0xdc>
 80098c2:	2f80      	cmp	r7, #128	@ 0x80
 80098c4:	d104      	bne.n	80098d0 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 80098c6:	4629      	mov	r1, r5
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7ff fd3f 	bl	800934c <USBD_CtlError>
 80098ce:	e79d      	b.n	800980c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098d0:	4639      	mov	r1, r7
 80098d2:	f7ff fac3 	bl	8008e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098d6:	2180      	movs	r1, #128	@ 0x80
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff fabf 	bl	8008e5c <USBD_LL_StallEP>
 80098de:	e795      	b.n	800980c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098e0:	884b      	ldrh	r3, [r1, #2]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d192      	bne.n	800980c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 80098e6:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 80098ea:	d117      	bne.n	800991c <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 80098ec:	4630      	mov	r0, r6
 80098ee:	f000 f987 	bl	8009c00 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80098f2:	4639      	mov	r1, r7
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7ff fc1a 	bl	800912e <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d186      	bne.n	800980c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 80098fe:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8009902:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8009906:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800990a:	6892      	ldr	r2, [r2, #8]
 800990c:	2a00      	cmp	r2, #0
 800990e:	f000 8086 	beq.w	8009a1e <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009912:	4629      	mov	r1, r5
 8009914:	4630      	mov	r0, r6
 8009916:	4790      	blx	r2
 8009918:	4604      	mov	r4, r0
 800991a:	e777      	b.n	800980c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800991c:	4639      	mov	r1, r7
 800991e:	f7ff faac 	bl	8008e7a <USBD_LL_ClearStallEP>
 8009922:	e7e3      	b.n	80098ec <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8009924:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009928:	b2d1      	uxtb	r1, r2
 800992a:	2a02      	cmp	r2, #2
 800992c:	d006      	beq.n	800993c <USBD_StdEPReq+0x152>
 800992e:	2903      	cmp	r1, #3
 8009930:	d029      	beq.n	8009986 <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 8009932:	4629      	mov	r1, r5
 8009934:	f7ff fd0a 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009938:	4644      	mov	r4, r8
              break;
 800993a:	e767      	b.n	800980c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800993c:	b10f      	cbz	r7, 8009942 <USBD_StdEPReq+0x158>
 800993e:	2f80      	cmp	r7, #128	@ 0x80
 8009940:	d113      	bne.n	800996a <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009942:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009946:	d115      	bne.n	8009974 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009948:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800994c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8009950:	00b9      	lsls	r1, r7, #2
 8009952:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8009956:	4431      	add	r1, r6
 8009958:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800995a:	2300      	movs	r3, #0
 800995c:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800995e:	2202      	movs	r2, #2
 8009960:	4630      	mov	r0, r6
 8009962:	f000 f921 	bl	8009ba8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009966:	4644      	mov	r4, r8
              break;
 8009968:	e750      	b.n	800980c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800996a:	4629      	mov	r1, r5
 800996c:	f7ff fcee 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009970:	4644      	mov	r4, r8
                break;
 8009972:	e74b      	b.n	800980c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009974:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8009978:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800997c:	00b9      	lsls	r1, r7, #2
 800997e:	3110      	adds	r1, #16
 8009980:	4431      	add	r1, r6
 8009982:	3104      	adds	r1, #4
 8009984:	e7e9      	b.n	800995a <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 8009986:	b25b      	sxtb	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	db1f      	blt.n	80099cc <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800998c:	f007 020f 	and.w	r2, r7, #15
 8009990:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009994:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009998:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 800999c:	b322      	cbz	r2, 80099e8 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800999e:	2b00      	cmp	r3, #0
 80099a0:	db27      	blt.n	80099f2 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099a2:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80099aa:	009c      	lsls	r4, r3, #2
 80099ac:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 80099b0:	4434      	add	r4, r6
 80099b2:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80099b4:	b10f      	cbz	r7, 80099ba <USBD_StdEPReq+0x1d0>
 80099b6:	2f80      	cmp	r7, #128	@ 0x80
 80099b8:	d124      	bne.n	8009a04 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099be:	2202      	movs	r2, #2
 80099c0:	4621      	mov	r1, r4
 80099c2:	4630      	mov	r0, r6
 80099c4:	f000 f8f0 	bl	8009ba8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80099c8:	4644      	mov	r4, r8
              break;
 80099ca:	e71f      	b.n	800980c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099cc:	f007 020f 	and.w	r2, r7, #15
 80099d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80099d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80099d8:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d1df      	bne.n	800999e <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 80099de:	4629      	mov	r1, r5
 80099e0:	f7ff fcb4 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80099e4:	4644      	mov	r4, r8
                  break;
 80099e6:	e711      	b.n	800980c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7ff fcaf 	bl	800934c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80099ee:	4644      	mov	r4, r8
                  break;
 80099f0:	e70c      	b.n	800980c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099f2:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 80099f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80099fa:	009c      	lsls	r4, r3, #2
 80099fc:	3410      	adds	r4, #16
 80099fe:	4434      	add	r4, r6
 8009a00:	3404      	adds	r4, #4
 8009a02:	e7d7      	b.n	80099b4 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a04:	4639      	mov	r1, r7
 8009a06:	4630      	mov	r0, r6
 8009a08:	f7ff fa46 	bl	8008e98 <USBD_LL_IsStallEP>
 8009a0c:	b110      	cbz	r0, 8009a14 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	e7d4      	b.n	80099be <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	e7d1      	b.n	80099be <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	e6f6      	b.n	800980c <USBD_StdEPReq+0x22>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	e6f4      	b.n	800980c <USBD_StdEPReq+0x22>

08009a22 <USBD_GetString>:
  if (desc == NULL)
 8009a22:	b300      	cbz	r0, 8009a66 <USBD_GetString+0x44>
{
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	460d      	mov	r5, r1
 8009a28:	4616      	mov	r6, r2
 8009a2a:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009a2c:	f7ff fc70 	bl	8009310 <USBD_GetLen>
 8009a30:	3001      	adds	r0, #1
 8009a32:	0043      	lsls	r3, r0, #1
 8009a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a38:	d806      	bhi.n	8009a48 <USBD_GetString+0x26>
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8009a3e:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a40:	2303      	movs	r3, #3
 8009a42:	706b      	strb	r3, [r5, #1]
  idx++;
 8009a44:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8009a46:	e00a      	b.n	8009a5e <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a4c:	e7f6      	b.n	8009a3c <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8009a4e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8009a50:	3401      	adds	r4, #1
    idx++;
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8009a56:	2100      	movs	r1, #0
 8009a58:	54a9      	strb	r1, [r5, r2]
    idx++;
 8009a5a:	3302      	adds	r3, #2
 8009a5c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8009a5e:	7822      	ldrb	r2, [r4, #0]
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	d1f4      	bne.n	8009a4e <USBD_GetString+0x2c>
}
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
 8009a66:	4770      	bx	lr

08009a68 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a68:	2312      	movs	r3, #18
 8009a6a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8009a6c:	4800      	ldr	r0, [pc, #0]	@ (8009a70 <USBD_FS_DeviceDescriptor+0x8>)
 8009a6e:	4770      	bx	lr
 8009a70:	20000190 	.word	0x20000190

08009a74 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a74:	2304      	movs	r3, #4
 8009a76:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8009a78:	4800      	ldr	r0, [pc, #0]	@ (8009a7c <USBD_FS_LangIDStrDescriptor+0x8>)
 8009a7a:	4770      	bx	lr
 8009a7c:	20000180 	.word	0x20000180

08009a80 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009a80:	230c      	movs	r3, #12
 8009a82:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8009a84:	4800      	ldr	r0, [pc, #0]	@ (8009a88 <USBD_FS_USR_BOSDescriptor+0x8>)
 8009a86:	4770      	bx	lr
 8009a88:	20000184 	.word	0x20000184

08009a8c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d21e      	bcs.n	8009ad0 <IntToUnicode+0x44>
{
 8009a92:	b500      	push	{lr}
 8009a94:	e010      	b.n	8009ab8 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a96:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8009a9a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8009a9e:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8009aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009aa4:	f10c 0c01 	add.w	ip, ip, #1
 8009aa8:	f04f 0e00 	mov.w	lr, #0
 8009aac:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d209      	bcs.n	8009acc <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8009ab8:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8009abc:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8009ac0:	d2e9      	bcs.n	8009a96 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ac2:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8009ac6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8009aca:	e7e8      	b.n	8009a9e <IntToUnicode+0x12>
  }
}
 8009acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ad0:	4770      	bx	lr
	...

08009ad4 <Get_SerialNum>:
{
 8009ad4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b04 <Get_SerialNum+0x30>)
 8009ad8:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009adc:	f8d3 4594 	ldr.w	r4, [r3, #1428]	@ 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ae0:	f8d3 3598 	ldr.w	r3, [r3, #1432]	@ 0x598
  if (deviceserial0 != 0)
 8009ae4:	18c0      	adds	r0, r0, r3
 8009ae6:	d100      	bne.n	8009aea <Get_SerialNum+0x16>
}
 8009ae8:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009aea:	4d07      	ldr	r5, [pc, #28]	@ (8009b08 <Get_SerialNum+0x34>)
 8009aec:	2208      	movs	r2, #8
 8009aee:	4629      	mov	r1, r5
 8009af0:	f7ff ffcc 	bl	8009a8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009af4:	2204      	movs	r2, #4
 8009af6:	f105 0110 	add.w	r1, r5, #16
 8009afa:	4620      	mov	r0, r4
 8009afc:	f7ff ffc6 	bl	8009a8c <IntToUnicode>
}
 8009b00:	e7f2      	b.n	8009ae8 <Get_SerialNum+0x14>
 8009b02:	bf00      	nop
 8009b04:	1fff7000 	.word	0x1fff7000
 8009b08:	20000166 	.word	0x20000166

08009b0c <USBD_FS_SerialStrDescriptor>:
{
 8009b0c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8009b0e:	231a      	movs	r3, #26
 8009b10:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8009b12:	f7ff ffdf 	bl	8009ad4 <Get_SerialNum>
}
 8009b16:	4801      	ldr	r0, [pc, #4]	@ (8009b1c <USBD_FS_SerialStrDescriptor+0x10>)
 8009b18:	bd08      	pop	{r3, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000164 	.word	0x20000164

08009b20 <USBD_FS_ProductStrDescriptor>:
{
 8009b20:	b508      	push	{r3, lr}
 8009b22:	460a      	mov	r2, r1
  if(speed == 0)
 8009b24:	b928      	cbnz	r0, 8009b32 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b26:	4905      	ldr	r1, [pc, #20]	@ (8009b3c <USBD_FS_ProductStrDescriptor+0x1c>)
 8009b28:	4805      	ldr	r0, [pc, #20]	@ (8009b40 <USBD_FS_ProductStrDescriptor+0x20>)
 8009b2a:	f7ff ff7a 	bl	8009a22 <USBD_GetString>
}
 8009b2e:	4803      	ldr	r0, [pc, #12]	@ (8009b3c <USBD_FS_ProductStrDescriptor+0x1c>)
 8009b30:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b32:	4902      	ldr	r1, [pc, #8]	@ (8009b3c <USBD_FS_ProductStrDescriptor+0x1c>)
 8009b34:	4802      	ldr	r0, [pc, #8]	@ (8009b40 <USBD_FS_ProductStrDescriptor+0x20>)
 8009b36:	f7ff ff74 	bl	8009a22 <USBD_GetString>
 8009b3a:	e7f8      	b.n	8009b2e <USBD_FS_ProductStrDescriptor+0xe>
 8009b3c:	200024f0 	.word	0x200024f0
 8009b40:	0800bef4 	.word	0x0800bef4

08009b44 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009b44:	b510      	push	{r4, lr}
 8009b46:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b48:	4c03      	ldr	r4, [pc, #12]	@ (8009b58 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4803      	ldr	r0, [pc, #12]	@ (8009b5c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8009b4e:	f7ff ff68 	bl	8009a22 <USBD_GetString>
}
 8009b52:	4620      	mov	r0, r4
 8009b54:	bd10      	pop	{r4, pc}
 8009b56:	bf00      	nop
 8009b58:	200024f0 	.word	0x200024f0
 8009b5c:	0800bef4 	.word	0x0800bef4

08009b60 <USBD_FS_ConfigStrDescriptor>:
{
 8009b60:	b508      	push	{r3, lr}
 8009b62:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8009b64:	b928      	cbnz	r0, 8009b72 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b66:	4905      	ldr	r1, [pc, #20]	@ (8009b7c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009b68:	4805      	ldr	r0, [pc, #20]	@ (8009b80 <USBD_FS_ConfigStrDescriptor+0x20>)
 8009b6a:	f7ff ff5a 	bl	8009a22 <USBD_GetString>
}
 8009b6e:	4803      	ldr	r0, [pc, #12]	@ (8009b7c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009b70:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b72:	4902      	ldr	r1, [pc, #8]	@ (8009b7c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009b74:	4802      	ldr	r0, [pc, #8]	@ (8009b80 <USBD_FS_ConfigStrDescriptor+0x20>)
 8009b76:	f7ff ff54 	bl	8009a22 <USBD_GetString>
 8009b7a:	e7f8      	b.n	8009b6e <USBD_FS_ConfigStrDescriptor+0xe>
 8009b7c:	200024f0 	.word	0x200024f0
 8009b80:	0800bf00 	.word	0x0800bf00

08009b84 <USBD_FS_InterfaceStrDescriptor>:
{
 8009b84:	b508      	push	{r3, lr}
 8009b86:	460a      	mov	r2, r1
  if(speed == 0)
 8009b88:	b928      	cbnz	r0, 8009b96 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b8a:	4905      	ldr	r1, [pc, #20]	@ (8009ba0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009b8c:	4805      	ldr	r0, [pc, #20]	@ (8009ba4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8009b8e:	f7ff ff48 	bl	8009a22 <USBD_GetString>
}
 8009b92:	4803      	ldr	r0, [pc, #12]	@ (8009ba0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009b94:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b96:	4902      	ldr	r1, [pc, #8]	@ (8009ba0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009b98:	4802      	ldr	r0, [pc, #8]	@ (8009ba4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8009b9a:	f7ff ff42 	bl	8009a22 <USBD_GetString>
 8009b9e:	e7f8      	b.n	8009b92 <USBD_FS_InterfaceStrDescriptor+0xe>
 8009ba0:	200024f0 	.word	0x200024f0
 8009ba4:	0800bf0c 	.word	0x0800bf0c

08009ba8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ba8:	b508      	push	{r3, lr}
 8009baa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bac:	2202      	movs	r2, #2
 8009bae:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009bb2:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009bb4:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bb6:	460a      	mov	r2, r1
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f7ff f992 	bl	8008ee2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	bd08      	pop	{r3, pc}

08009bc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009bc2:	b508      	push	{r3, lr}
 8009bc4:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bc6:	460a      	mov	r2, r1
 8009bc8:	2100      	movs	r1, #0
 8009bca:	f7ff f98a 	bl	8008ee2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009bce:	2000      	movs	r0, #0
 8009bd0:	bd08      	pop	{r3, pc}

08009bd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009bd2:	b508      	push	{r3, lr}
 8009bd4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bd6:	2203      	movs	r2, #3
 8009bd8:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009bdc:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009be0:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009be4:	460a      	mov	r2, r1
 8009be6:	2100      	movs	r1, #0
 8009be8:	f7ff f98a 	bl	8008f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009bec:	2000      	movs	r0, #0
 8009bee:	bd08      	pop	{r3, pc}

08009bf0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009bf0:	b508      	push	{r3, lr}
 8009bf2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bf4:	460a      	mov	r2, r1
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	f7ff f982 	bl	8008f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	bd08      	pop	{r3, pc}

08009c00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c00:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c02:	2204      	movs	r2, #4
 8009c04:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c08:	2300      	movs	r3, #0
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	f7ff f968 	bl	8008ee2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009c12:	2000      	movs	r0, #0
 8009c14:	bd08      	pop	{r3, pc}

08009c16 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c16:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c18:	2205      	movs	r2, #5
 8009c1a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	461a      	mov	r2, r3
 8009c22:	4619      	mov	r1, r3
 8009c24:	f7ff f96c 	bl	8008f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009c28:	2000      	movs	r0, #0
 8009c2a:	bd08      	pop	{r3, pc}

08009c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009c30:	f7fe fcfc 	bl	800862c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c34:	480c      	ldr	r0, [pc, #48]	@ (8009c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8009c36:	490d      	ldr	r1, [pc, #52]	@ (8009c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8009c38:	4a0d      	ldr	r2, [pc, #52]	@ (8009c70 <LoopForever+0xe>)
  movs r3, #0
 8009c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c3c:	e002      	b.n	8009c44 <LoopCopyDataInit>

08009c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c42:	3304      	adds	r3, #4

08009c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c48:	d3f9      	bcc.n	8009c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8009c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8009c78 <LoopForever+0x16>)
  movs r3, #0
 8009c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c50:	e001      	b.n	8009c56 <LoopFillZerobss>

08009c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c54:	3204      	adds	r2, #4

08009c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c58:	d3fb      	bcc.n	8009c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009c5a:	f000 fe43 	bl	800a8e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009c5e:	f7f8 fe3f 	bl	80028e0 <main>

08009c62 <LoopForever>:

LoopForever:
    b LoopForever
 8009c62:	e7fe      	b.n	8009c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009c64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8009c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c6c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8009c70:	0800d6c8 	.word	0x0800d6c8
  ldr r2, =_sbss
 8009c74:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8009c78:	2000285c 	.word	0x2000285c

08009c7c <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009c7c:	e7fe      	b.n	8009c7c <COMP_IRQHandler>

08009c7e <atoi>:
 8009c7e:	220a      	movs	r2, #10
 8009c80:	2100      	movs	r1, #0
 8009c82:	f000 b87d 	b.w	8009d80 <strtol>
	...

08009c88 <_strtol_l.isra.0>:
 8009c88:	2b24      	cmp	r3, #36	@ 0x24
 8009c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c8e:	4686      	mov	lr, r0
 8009c90:	4690      	mov	r8, r2
 8009c92:	d801      	bhi.n	8009c98 <_strtol_l.isra.0+0x10>
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d106      	bne.n	8009ca6 <_strtol_l.isra.0+0x1e>
 8009c98:	f000 fe1e 	bl	800a8d8 <__errno>
 8009c9c:	2316      	movs	r3, #22
 8009c9e:	6003      	str	r3, [r0, #0]
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca6:	4834      	ldr	r0, [pc, #208]	@ (8009d78 <_strtol_l.isra.0+0xf0>)
 8009ca8:	460d      	mov	r5, r1
 8009caa:	462a      	mov	r2, r5
 8009cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cb0:	5d06      	ldrb	r6, [r0, r4]
 8009cb2:	f016 0608 	ands.w	r6, r6, #8
 8009cb6:	d1f8      	bne.n	8009caa <_strtol_l.isra.0+0x22>
 8009cb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8009cba:	d110      	bne.n	8009cde <_strtol_l.isra.0+0x56>
 8009cbc:	782c      	ldrb	r4, [r5, #0]
 8009cbe:	2601      	movs	r6, #1
 8009cc0:	1c95      	adds	r5, r2, #2
 8009cc2:	f033 0210 	bics.w	r2, r3, #16
 8009cc6:	d115      	bne.n	8009cf4 <_strtol_l.isra.0+0x6c>
 8009cc8:	2c30      	cmp	r4, #48	@ 0x30
 8009cca:	d10d      	bne.n	8009ce8 <_strtol_l.isra.0+0x60>
 8009ccc:	782a      	ldrb	r2, [r5, #0]
 8009cce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009cd2:	2a58      	cmp	r2, #88	@ 0x58
 8009cd4:	d108      	bne.n	8009ce8 <_strtol_l.isra.0+0x60>
 8009cd6:	786c      	ldrb	r4, [r5, #1]
 8009cd8:	3502      	adds	r5, #2
 8009cda:	2310      	movs	r3, #16
 8009cdc:	e00a      	b.n	8009cf4 <_strtol_l.isra.0+0x6c>
 8009cde:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ce0:	bf04      	itt	eq
 8009ce2:	782c      	ldrbeq	r4, [r5, #0]
 8009ce4:	1c95      	addeq	r5, r2, #2
 8009ce6:	e7ec      	b.n	8009cc2 <_strtol_l.isra.0+0x3a>
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f6      	bne.n	8009cda <_strtol_l.isra.0+0x52>
 8009cec:	2c30      	cmp	r4, #48	@ 0x30
 8009cee:	bf14      	ite	ne
 8009cf0:	230a      	movne	r3, #10
 8009cf2:	2308      	moveq	r3, #8
 8009cf4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009cf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	fbbc f9f3 	udiv	r9, ip, r3
 8009d02:	4610      	mov	r0, r2
 8009d04:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d08:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d0c:	2f09      	cmp	r7, #9
 8009d0e:	d80f      	bhi.n	8009d30 <_strtol_l.isra.0+0xa8>
 8009d10:	463c      	mov	r4, r7
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	dd1b      	ble.n	8009d4e <_strtol_l.isra.0+0xc6>
 8009d16:	1c57      	adds	r7, r2, #1
 8009d18:	d007      	beq.n	8009d2a <_strtol_l.isra.0+0xa2>
 8009d1a:	4581      	cmp	r9, r0
 8009d1c:	d314      	bcc.n	8009d48 <_strtol_l.isra.0+0xc0>
 8009d1e:	d101      	bne.n	8009d24 <_strtol_l.isra.0+0x9c>
 8009d20:	45a2      	cmp	sl, r4
 8009d22:	db11      	blt.n	8009d48 <_strtol_l.isra.0+0xc0>
 8009d24:	fb00 4003 	mla	r0, r0, r3, r4
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d2e:	e7eb      	b.n	8009d08 <_strtol_l.isra.0+0x80>
 8009d30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009d34:	2f19      	cmp	r7, #25
 8009d36:	d801      	bhi.n	8009d3c <_strtol_l.isra.0+0xb4>
 8009d38:	3c37      	subs	r4, #55	@ 0x37
 8009d3a:	e7ea      	b.n	8009d12 <_strtol_l.isra.0+0x8a>
 8009d3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009d40:	2f19      	cmp	r7, #25
 8009d42:	d804      	bhi.n	8009d4e <_strtol_l.isra.0+0xc6>
 8009d44:	3c57      	subs	r4, #87	@ 0x57
 8009d46:	e7e4      	b.n	8009d12 <_strtol_l.isra.0+0x8a>
 8009d48:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4c:	e7ed      	b.n	8009d2a <_strtol_l.isra.0+0xa2>
 8009d4e:	1c53      	adds	r3, r2, #1
 8009d50:	d108      	bne.n	8009d64 <_strtol_l.isra.0+0xdc>
 8009d52:	2322      	movs	r3, #34	@ 0x22
 8009d54:	f8ce 3000 	str.w	r3, [lr]
 8009d58:	4660      	mov	r0, ip
 8009d5a:	f1b8 0f00 	cmp.w	r8, #0
 8009d5e:	d0a0      	beq.n	8009ca2 <_strtol_l.isra.0+0x1a>
 8009d60:	1e69      	subs	r1, r5, #1
 8009d62:	e006      	b.n	8009d72 <_strtol_l.isra.0+0xea>
 8009d64:	b106      	cbz	r6, 8009d68 <_strtol_l.isra.0+0xe0>
 8009d66:	4240      	negs	r0, r0
 8009d68:	f1b8 0f00 	cmp.w	r8, #0
 8009d6c:	d099      	beq.n	8009ca2 <_strtol_l.isra.0+0x1a>
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	d1f6      	bne.n	8009d60 <_strtol_l.isra.0+0xd8>
 8009d72:	f8c8 1000 	str.w	r1, [r8]
 8009d76:	e794      	b.n	8009ca2 <_strtol_l.isra.0+0x1a>
 8009d78:	0800d451 	.word	0x0800d451

08009d7c <_strtol_r>:
 8009d7c:	f7ff bf84 	b.w	8009c88 <_strtol_l.isra.0>

08009d80 <strtol>:
 8009d80:	4613      	mov	r3, r2
 8009d82:	460a      	mov	r2, r1
 8009d84:	4601      	mov	r1, r0
 8009d86:	4802      	ldr	r0, [pc, #8]	@ (8009d90 <strtol+0x10>)
 8009d88:	6800      	ldr	r0, [r0, #0]
 8009d8a:	f7ff bf7d 	b.w	8009c88 <_strtol_l.isra.0>
 8009d8e:	bf00      	nop
 8009d90:	200001cc 	.word	0x200001cc

08009d94 <siprintf>:
 8009d94:	b40e      	push	{r1, r2, r3}
 8009d96:	b510      	push	{r4, lr}
 8009d98:	b09d      	sub	sp, #116	@ 0x74
 8009d9a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009d9c:	9002      	str	r0, [sp, #8]
 8009d9e:	9006      	str	r0, [sp, #24]
 8009da0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009da4:	480a      	ldr	r0, [pc, #40]	@ (8009dd0 <siprintf+0x3c>)
 8009da6:	9107      	str	r1, [sp, #28]
 8009da8:	9104      	str	r1, [sp, #16]
 8009daa:	490a      	ldr	r1, [pc, #40]	@ (8009dd4 <siprintf+0x40>)
 8009dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db0:	9105      	str	r1, [sp, #20]
 8009db2:	2400      	movs	r4, #0
 8009db4:	a902      	add	r1, sp, #8
 8009db6:	6800      	ldr	r0, [r0, #0]
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009dbc:	f000 ffe8 	bl	800ad90 <_svfiprintf_r>
 8009dc0:	9b02      	ldr	r3, [sp, #8]
 8009dc2:	701c      	strb	r4, [r3, #0]
 8009dc4:	b01d      	add	sp, #116	@ 0x74
 8009dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dca:	b003      	add	sp, #12
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	200001cc 	.word	0x200001cc
 8009dd4:	ffff0208 	.word	0xffff0208

08009dd8 <__seofread>:
 8009dd8:	2000      	movs	r0, #0
 8009dda:	4770      	bx	lr

08009ddc <memset>:
 8009ddc:	4402      	add	r2, r0
 8009dde:	4603      	mov	r3, r0
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d100      	bne.n	8009de6 <memset+0xa>
 8009de4:	4770      	bx	lr
 8009de6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dea:	e7f9      	b.n	8009de0 <memset+0x4>

08009dec <validate_structure>:
 8009dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dee:	6801      	ldr	r1, [r0, #0]
 8009df0:	293b      	cmp	r1, #59	@ 0x3b
 8009df2:	4604      	mov	r4, r0
 8009df4:	d911      	bls.n	8009e1a <validate_structure+0x2e>
 8009df6:	223c      	movs	r2, #60	@ 0x3c
 8009df8:	4668      	mov	r0, sp
 8009dfa:	f000 fda3 	bl	800a944 <div>
 8009dfe:	9a01      	ldr	r2, [sp, #4]
 8009e00:	6863      	ldr	r3, [r4, #4]
 8009e02:	9900      	ldr	r1, [sp, #0]
 8009e04:	2a00      	cmp	r2, #0
 8009e06:	440b      	add	r3, r1
 8009e08:	6063      	str	r3, [r4, #4]
 8009e0a:	bfbb      	ittet	lt
 8009e0c:	323c      	addlt	r2, #60	@ 0x3c
 8009e0e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009e12:	6022      	strge	r2, [r4, #0]
 8009e14:	6022      	strlt	r2, [r4, #0]
 8009e16:	bfb8      	it	lt
 8009e18:	6063      	strlt	r3, [r4, #4]
 8009e1a:	6861      	ldr	r1, [r4, #4]
 8009e1c:	293b      	cmp	r1, #59	@ 0x3b
 8009e1e:	d911      	bls.n	8009e44 <validate_structure+0x58>
 8009e20:	223c      	movs	r2, #60	@ 0x3c
 8009e22:	4668      	mov	r0, sp
 8009e24:	f000 fd8e 	bl	800a944 <div>
 8009e28:	9a01      	ldr	r2, [sp, #4]
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	9900      	ldr	r1, [sp, #0]
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	440b      	add	r3, r1
 8009e32:	60a3      	str	r3, [r4, #8]
 8009e34:	bfbb      	ittet	lt
 8009e36:	323c      	addlt	r2, #60	@ 0x3c
 8009e38:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009e3c:	6062      	strge	r2, [r4, #4]
 8009e3e:	6062      	strlt	r2, [r4, #4]
 8009e40:	bfb8      	it	lt
 8009e42:	60a3      	strlt	r3, [r4, #8]
 8009e44:	68a1      	ldr	r1, [r4, #8]
 8009e46:	2917      	cmp	r1, #23
 8009e48:	d911      	bls.n	8009e6e <validate_structure+0x82>
 8009e4a:	2218      	movs	r2, #24
 8009e4c:	4668      	mov	r0, sp
 8009e4e:	f000 fd79 	bl	800a944 <div>
 8009e52:	9a01      	ldr	r2, [sp, #4]
 8009e54:	68e3      	ldr	r3, [r4, #12]
 8009e56:	9900      	ldr	r1, [sp, #0]
 8009e58:	2a00      	cmp	r2, #0
 8009e5a:	440b      	add	r3, r1
 8009e5c:	60e3      	str	r3, [r4, #12]
 8009e5e:	bfbb      	ittet	lt
 8009e60:	3218      	addlt	r2, #24
 8009e62:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009e66:	60a2      	strge	r2, [r4, #8]
 8009e68:	60a2      	strlt	r2, [r4, #8]
 8009e6a:	bfb8      	it	lt
 8009e6c:	60e3      	strlt	r3, [r4, #12]
 8009e6e:	6921      	ldr	r1, [r4, #16]
 8009e70:	290b      	cmp	r1, #11
 8009e72:	d911      	bls.n	8009e98 <validate_structure+0xac>
 8009e74:	220c      	movs	r2, #12
 8009e76:	4668      	mov	r0, sp
 8009e78:	f000 fd64 	bl	800a944 <div>
 8009e7c:	9a01      	ldr	r2, [sp, #4]
 8009e7e:	6963      	ldr	r3, [r4, #20]
 8009e80:	9900      	ldr	r1, [sp, #0]
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	440b      	add	r3, r1
 8009e86:	6163      	str	r3, [r4, #20]
 8009e88:	bfbb      	ittet	lt
 8009e8a:	320c      	addlt	r2, #12
 8009e8c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009e90:	6122      	strge	r2, [r4, #16]
 8009e92:	6122      	strlt	r2, [r4, #16]
 8009e94:	bfb8      	it	lt
 8009e96:	6163      	strlt	r3, [r4, #20]
 8009e98:	6963      	ldr	r3, [r4, #20]
 8009e9a:	079a      	lsls	r2, r3, #30
 8009e9c:	d13f      	bne.n	8009f1e <validate_structure+0x132>
 8009e9e:	2164      	movs	r1, #100	@ 0x64
 8009ea0:	fb93 f2f1 	sdiv	r2, r3, r1
 8009ea4:	fb01 3212 	mls	r2, r1, r2, r3
 8009ea8:	2a00      	cmp	r2, #0
 8009eaa:	d13a      	bne.n	8009f22 <validate_structure+0x136>
 8009eac:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8009eb0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009eb4:	fb93 f1f2 	sdiv	r1, r3, r2
 8009eb8:	fb02 3311 	mls	r3, r2, r1, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	bf0c      	ite	eq
 8009ec0:	231d      	moveq	r3, #29
 8009ec2:	231c      	movne	r3, #28
 8009ec4:	68e2      	ldr	r2, [r4, #12]
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	dd2d      	ble.n	8009f26 <validate_structure+0x13a>
 8009eca:	4d30      	ldr	r5, [pc, #192]	@ (8009f8c <validate_structure+0x1a0>)
 8009ecc:	6921      	ldr	r1, [r4, #16]
 8009ece:	2901      	cmp	r1, #1
 8009ed0:	bf14      	ite	ne
 8009ed2:	f855 0021 	ldrne.w	r0, [r5, r1, lsl #2]
 8009ed6:	4618      	moveq	r0, r3
 8009ed8:	4282      	cmp	r2, r0
 8009eda:	dd4d      	ble.n	8009f78 <validate_structure+0x18c>
 8009edc:	3101      	adds	r1, #1
 8009ede:	1a12      	subs	r2, r2, r0
 8009ee0:	290c      	cmp	r1, #12
 8009ee2:	60e2      	str	r2, [r4, #12]
 8009ee4:	6121      	str	r1, [r4, #16]
 8009ee6:	d1f1      	bne.n	8009ecc <validate_structure+0xe0>
 8009ee8:	6963      	ldr	r3, [r4, #20]
 8009eea:	2000      	movs	r0, #0
 8009eec:	1c59      	adds	r1, r3, #1
 8009eee:	6120      	str	r0, [r4, #16]
 8009ef0:	0788      	lsls	r0, r1, #30
 8009ef2:	6161      	str	r1, [r4, #20]
 8009ef4:	d146      	bne.n	8009f84 <validate_structure+0x198>
 8009ef6:	2064      	movs	r0, #100	@ 0x64
 8009ef8:	fb91 f6f0 	sdiv	r6, r1, r0
 8009efc:	fb00 1116 	mls	r1, r0, r6, r1
 8009f00:	2900      	cmp	r1, #0
 8009f02:	d141      	bne.n	8009f88 <validate_structure+0x19c>
 8009f04:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8009f08:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009f0c:	fb93 f0f1 	sdiv	r0, r3, r1
 8009f10:	fb01 3310 	mls	r3, r1, r0, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	bf0c      	ite	eq
 8009f18:	231d      	moveq	r3, #29
 8009f1a:	231c      	movne	r3, #28
 8009f1c:	e7d6      	b.n	8009ecc <validate_structure+0xe0>
 8009f1e:	231c      	movs	r3, #28
 8009f20:	e7d0      	b.n	8009ec4 <validate_structure+0xd8>
 8009f22:	231d      	movs	r3, #29
 8009f24:	e7ce      	b.n	8009ec4 <validate_structure+0xd8>
 8009f26:	4e19      	ldr	r6, [pc, #100]	@ (8009f8c <validate_structure+0x1a0>)
 8009f28:	250b      	movs	r5, #11
 8009f2a:	2064      	movs	r0, #100	@ 0x64
 8009f2c:	6921      	ldr	r1, [r4, #16]
 8009f2e:	3901      	subs	r1, #1
 8009f30:	6121      	str	r1, [r4, #16]
 8009f32:	3101      	adds	r1, #1
 8009f34:	d116      	bne.n	8009f64 <validate_structure+0x178>
 8009f36:	6963      	ldr	r3, [r4, #20]
 8009f38:	1e59      	subs	r1, r3, #1
 8009f3a:	078f      	lsls	r7, r1, #30
 8009f3c:	e9c4 5104 	strd	r5, r1, [r4, #16]
 8009f40:	d11c      	bne.n	8009f7c <validate_structure+0x190>
 8009f42:	fb91 f7f0 	sdiv	r7, r1, r0
 8009f46:	fb00 1117 	mls	r1, r0, r7, r1
 8009f4a:	b9c9      	cbnz	r1, 8009f80 <validate_structure+0x194>
 8009f4c:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009f50:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009f54:	fb93 f7f1 	sdiv	r7, r3, r1
 8009f58:	fb01 3317 	mls	r3, r1, r7, r3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bf0c      	ite	eq
 8009f60:	231d      	moveq	r3, #29
 8009f62:	231c      	movne	r3, #28
 8009f64:	6921      	ldr	r1, [r4, #16]
 8009f66:	2901      	cmp	r1, #1
 8009f68:	bf14      	ite	ne
 8009f6a:	f856 1021 	ldrne.w	r1, [r6, r1, lsl #2]
 8009f6e:	4619      	moveq	r1, r3
 8009f70:	440a      	add	r2, r1
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	60e2      	str	r2, [r4, #12]
 8009f76:	ddd9      	ble.n	8009f2c <validate_structure+0x140>
 8009f78:	b003      	add	sp, #12
 8009f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f7c:	231c      	movs	r3, #28
 8009f7e:	e7f1      	b.n	8009f64 <validate_structure+0x178>
 8009f80:	231d      	movs	r3, #29
 8009f82:	e7ef      	b.n	8009f64 <validate_structure+0x178>
 8009f84:	231c      	movs	r3, #28
 8009f86:	e7a1      	b.n	8009ecc <validate_structure+0xe0>
 8009f88:	231d      	movs	r3, #29
 8009f8a:	e79f      	b.n	8009ecc <validate_structure+0xe0>
 8009f8c:	0800d584 	.word	0x0800d584

08009f90 <mktime>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	b085      	sub	sp, #20
 8009f96:	4607      	mov	r7, r0
 8009f98:	f001 f9dc 	bl	800b354 <__gettzinfo>
 8009f9c:	4681      	mov	r9, r0
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	f7ff ff24 	bl	8009dec <validate_structure>
 8009fa4:	e9d7 4300 	ldrd	r4, r3, [r7]
 8009fa8:	223c      	movs	r2, #60	@ 0x3c
 8009faa:	fb02 4403 	mla	r4, r2, r3, r4
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	697d      	ldr	r5, [r7, #20]
 8009fb2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009fb6:	fb02 4403 	mla	r4, r2, r3, r4
 8009fba:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8009fbe:	4ac3      	ldr	r2, [pc, #780]	@ (800a2cc <mktime+0x33c>)
 8009fc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009fc4:	3e01      	subs	r6, #1
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	4416      	add	r6, r2
 8009fca:	dd11      	ble.n	8009ff0 <mktime+0x60>
 8009fcc:	07a9      	lsls	r1, r5, #30
 8009fce:	d10f      	bne.n	8009ff0 <mktime+0x60>
 8009fd0:	2264      	movs	r2, #100	@ 0x64
 8009fd2:	fb95 f3f2 	sdiv	r3, r5, r2
 8009fd6:	fb02 5313 	mls	r3, r2, r3, r5
 8009fda:	b943      	cbnz	r3, 8009fee <mktime+0x5e>
 8009fdc:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009fe0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009fe4:	fb93 f1f2 	sdiv	r1, r3, r2
 8009fe8:	fb02 3311 	mls	r3, r2, r1, r3
 8009fec:	b903      	cbnz	r3, 8009ff0 <mktime+0x60>
 8009fee:	3601      	adds	r6, #1
 8009ff0:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8009ff4:	3310      	adds	r3, #16
 8009ff6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	61fe      	str	r6, [r7, #28]
 8009ffe:	f200 8170 	bhi.w	800a2e2 <mktime+0x352>
 800a002:	2d46      	cmp	r5, #70	@ 0x46
 800a004:	f340 80b6 	ble.w	800a174 <mktime+0x1e4>
 800a008:	2346      	movs	r3, #70	@ 0x46
 800a00a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800a00e:	2164      	movs	r1, #100	@ 0x64
 800a010:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800a014:	079a      	lsls	r2, r3, #30
 800a016:	f040 80a7 	bne.w	800a168 <mktime+0x1d8>
 800a01a:	fb93 f2f1 	sdiv	r2, r3, r1
 800a01e:	fb01 3212 	mls	r2, r1, r2, r3
 800a022:	2a00      	cmp	r2, #0
 800a024:	f040 80a3 	bne.w	800a16e <mktime+0x1de>
 800a028:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800a02c:	fb92 fef0 	sdiv	lr, r2, r0
 800a030:	fb00 221e 	mls	r2, r0, lr, r2
 800a034:	2a00      	cmp	r2, #0
 800a036:	bf0c      	ite	eq
 800a038:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800a03c:	4662      	movne	r2, ip
 800a03e:	3301      	adds	r3, #1
 800a040:	42ab      	cmp	r3, r5
 800a042:	4416      	add	r6, r2
 800a044:	d1e6      	bne.n	800a014 <mktime+0x84>
 800a046:	4ba2      	ldr	r3, [pc, #648]	@ (800a2d0 <mktime+0x340>)
 800a048:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800a04c:	fbc6 4803 	smlal	r4, r8, r6, r3
 800a050:	f000 fa0a 	bl	800a468 <__tz_lock>
 800a054:	f000 fa14 	bl	800a480 <_tzset_unlocked>
 800a058:	4b9e      	ldr	r3, [pc, #632]	@ (800a2d4 <mktime+0x344>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 8147 	beq.w	800a2f0 <mktime+0x360>
 800a062:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800a066:	6978      	ldr	r0, [r7, #20]
 800a068:	4653      	mov	r3, sl
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	bfa8      	it	ge
 800a06e:	2301      	movge	r3, #1
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a076:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800a07a:	4283      	cmp	r3, r0
 800a07c:	f040 80bd 	bne.w	800a1fa <mktime+0x26a>
 800a080:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800a084:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800a088:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800a08c:	1a13      	subs	r3, r2, r0
 800a08e:	9303      	str	r3, [sp, #12]
 800a090:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800a094:	9302      	str	r3, [sp, #8]
 800a096:	9a02      	ldr	r2, [sp, #8]
 800a098:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800a09c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800a0a0:	ebb2 0e03 	subs.w	lr, r2, r3
 800a0a4:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800a0a8:	4574      	cmp	r4, lr
 800a0aa:	eb78 0201 	sbcs.w	r2, r8, r1
 800a0ae:	f280 80c7 	bge.w	800a240 <mktime+0x2b0>
 800a0b2:	f8d9 2000 	ldr.w	r2, [r9]
 800a0b6:	2a00      	cmp	r2, #0
 800a0b8:	f000 80d0 	beq.w	800a25c <mktime+0x2cc>
 800a0bc:	9a03      	ldr	r2, [sp, #12]
 800a0be:	4294      	cmp	r4, r2
 800a0c0:	eb78 020b 	sbcs.w	r2, r8, fp
 800a0c4:	f2c0 8111 	blt.w	800a2ea <mktime+0x35a>
 800a0c8:	4574      	cmp	r4, lr
 800a0ca:	eb78 0101 	sbcs.w	r1, r8, r1
 800a0ce:	bfb4      	ite	lt
 800a0d0:	f04f 0b01 	movlt.w	fp, #1
 800a0d4:	f04f 0b00 	movge.w	fp, #0
 800a0d8:	f1ba 0f00 	cmp.w	sl, #0
 800a0dc:	f2c0 8094 	blt.w	800a208 <mktime+0x278>
 800a0e0:	9a01      	ldr	r2, [sp, #4]
 800a0e2:	ea82 0a0b 	eor.w	sl, r2, fp
 800a0e6:	f1ba 0f01 	cmp.w	sl, #1
 800a0ea:	f040 808d 	bne.w	800a208 <mktime+0x278>
 800a0ee:	f1bb 0f00 	cmp.w	fp, #0
 800a0f2:	f000 80c2 	beq.w	800a27a <mktime+0x2ea>
 800a0f6:	1a1b      	subs	r3, r3, r0
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	441a      	add	r2, r3
 800a0fc:	191c      	adds	r4, r3, r4
 800a0fe:	603a      	str	r2, [r7, #0]
 800a100:	4638      	mov	r0, r7
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	9201      	str	r2, [sp, #4]
 800a106:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800a10a:	f7ff fe6f 	bl	8009dec <validate_structure>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	9a01      	ldr	r2, [sp, #4]
 800a112:	1a9b      	subs	r3, r3, r2
 800a114:	d078      	beq.n	800a208 <mktime+0x278>
 800a116:	2b01      	cmp	r3, #1
 800a118:	f300 80b1 	bgt.w	800a27e <mktime+0x2ee>
 800a11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a120:	bfa8      	it	ge
 800a122:	469a      	movge	sl, r3
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	eb1a 0303 	adds.w	r3, sl, r3
 800a12a:	4456      	add	r6, sl
 800a12c:	f140 80b0 	bpl.w	800a290 <mktime+0x300>
 800a130:	1e6b      	subs	r3, r5, #1
 800a132:	0799      	lsls	r1, r3, #30
 800a134:	f040 80a6 	bne.w	800a284 <mktime+0x2f4>
 800a138:	2264      	movs	r2, #100	@ 0x64
 800a13a:	fb93 f1f2 	sdiv	r1, r3, r2
 800a13e:	fb02 3311 	mls	r3, r2, r1, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 80a1 	bne.w	800a28a <mktime+0x2fa>
 800a148:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800a14c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800a150:	fb95 f2f3 	sdiv	r2, r5, r3
 800a154:	fb03 5512 	mls	r5, r3, r2, r5
 800a158:	2d00      	cmp	r5, #0
 800a15a:	f240 136d 	movw	r3, #365	@ 0x16d
 800a15e:	bf18      	it	ne
 800a160:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	e04f      	b.n	800a208 <mktime+0x278>
 800a168:	f240 126d 	movw	r2, #365	@ 0x16d
 800a16c:	e767      	b.n	800a03e <mktime+0xae>
 800a16e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800a172:	e764      	b.n	800a03e <mktime+0xae>
 800a174:	f43f af67 	beq.w	800a046 <mktime+0xb6>
 800a178:	2345      	movs	r3, #69	@ 0x45
 800a17a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800a17e:	2164      	movs	r1, #100	@ 0x64
 800a180:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800a184:	e012      	b.n	800a1ac <mktime+0x21c>
 800a186:	bb62      	cbnz	r2, 800a1e2 <mktime+0x252>
 800a188:	fb93 f2f1 	sdiv	r2, r3, r1
 800a18c:	fb01 3212 	mls	r2, r1, r2, r3
 800a190:	bb52      	cbnz	r2, 800a1e8 <mktime+0x258>
 800a192:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800a196:	fb92 fef0 	sdiv	lr, r2, r0
 800a19a:	fb00 221e 	mls	r2, r0, lr, r2
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	bf0c      	ite	eq
 800a1a2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800a1a6:	4662      	movne	r2, ip
 800a1a8:	1ab6      	subs	r6, r6, r2
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	42ab      	cmp	r3, r5
 800a1ae:	f003 0203 	and.w	r2, r3, #3
 800a1b2:	dce8      	bgt.n	800a186 <mktime+0x1f6>
 800a1b4:	b9da      	cbnz	r2, 800a1ee <mktime+0x25e>
 800a1b6:	2264      	movs	r2, #100	@ 0x64
 800a1b8:	fb95 f3f2 	sdiv	r3, r5, r2
 800a1bc:	fb02 5313 	mls	r3, r2, r3, r5
 800a1c0:	b9c3      	cbnz	r3, 800a1f4 <mktime+0x264>
 800a1c2:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800a1c6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a1ca:	fb93 f1f2 	sdiv	r1, r3, r2
 800a1ce:	fb02 3311 	mls	r3, r2, r1, r3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f240 136d 	movw	r3, #365	@ 0x16d
 800a1d8:	bf08      	it	eq
 800a1da:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800a1de:	1af6      	subs	r6, r6, r3
 800a1e0:	e731      	b.n	800a046 <mktime+0xb6>
 800a1e2:	f240 126d 	movw	r2, #365	@ 0x16d
 800a1e6:	e7df      	b.n	800a1a8 <mktime+0x218>
 800a1e8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800a1ec:	e7dc      	b.n	800a1a8 <mktime+0x218>
 800a1ee:	f240 136d 	movw	r3, #365	@ 0x16d
 800a1f2:	e7f4      	b.n	800a1de <mktime+0x24e>
 800a1f4:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800a1f8:	e7f1      	b.n	800a1de <mktime+0x24e>
 800a1fa:	f000 f881 	bl	800a300 <__tzcalc_limits>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f47f af3e 	bne.w	800a080 <mktime+0xf0>
 800a204:	f8dd b004 	ldr.w	fp, [sp, #4]
 800a208:	f1bb 0f01 	cmp.w	fp, #1
 800a20c:	d172      	bne.n	800a2f4 <mktime+0x364>
 800a20e:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800a212:	191c      	adds	r4, r3, r4
 800a214:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800a218:	f04f 0b01 	mov.w	fp, #1
 800a21c:	f000 f92a 	bl	800a474 <__tz_unlock>
 800a220:	3604      	adds	r6, #4
 800a222:	2307      	movs	r3, #7
 800a224:	fb96 f3f3 	sdiv	r3, r6, r3
 800a228:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a22c:	1af6      	subs	r6, r6, r3
 800a22e:	d456      	bmi.n	800a2de <mktime+0x34e>
 800a230:	f8c7 b020 	str.w	fp, [r7, #32]
 800a234:	61be      	str	r6, [r7, #24]
 800a236:	4620      	mov	r0, r4
 800a238:	4641      	mov	r1, r8
 800a23a:	b005      	add	sp, #20
 800a23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a240:	9a02      	ldr	r2, [sp, #8]
 800a242:	1a12      	subs	r2, r2, r0
 800a244:	9202      	str	r2, [sp, #8]
 800a246:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800a24a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800a24e:	9a02      	ldr	r2, [sp, #8]
 800a250:	4294      	cmp	r4, r2
 800a252:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800a256:	f6bf af2c 	bge.w	800a0b2 <mktime+0x122>
 800a25a:	e7d3      	b.n	800a204 <mktime+0x274>
 800a25c:	9a03      	ldr	r2, [sp, #12]
 800a25e:	4294      	cmp	r4, r2
 800a260:	eb78 020b 	sbcs.w	r2, r8, fp
 800a264:	f6ff af30 	blt.w	800a0c8 <mktime+0x138>
 800a268:	f1ba 0f00 	cmp.w	sl, #0
 800a26c:	dbcf      	blt.n	800a20e <mktime+0x27e>
 800a26e:	f04f 0b01 	mov.w	fp, #1
 800a272:	e735      	b.n	800a0e0 <mktime+0x150>
 800a274:	f04f 0b00 	mov.w	fp, #0
 800a278:	e732      	b.n	800a0e0 <mktime+0x150>
 800a27a:	1ac3      	subs	r3, r0, r3
 800a27c:	e73c      	b.n	800a0f8 <mktime+0x168>
 800a27e:	f04f 3aff 	mov.w	sl, #4294967295
 800a282:	e74f      	b.n	800a124 <mktime+0x194>
 800a284:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800a288:	e76c      	b.n	800a164 <mktime+0x1d4>
 800a28a:	f240 136d 	movw	r3, #365	@ 0x16d
 800a28e:	e769      	b.n	800a164 <mktime+0x1d4>
 800a290:	07aa      	lsls	r2, r5, #30
 800a292:	d117      	bne.n	800a2c4 <mktime+0x334>
 800a294:	2164      	movs	r1, #100	@ 0x64
 800a296:	fb95 f2f1 	sdiv	r2, r5, r1
 800a29a:	fb01 5212 	mls	r2, r1, r2, r5
 800a29e:	b9da      	cbnz	r2, 800a2d8 <mktime+0x348>
 800a2a0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a2a4:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800a2a8:	fb95 f1f2 	sdiv	r1, r5, r2
 800a2ac:	fb02 5511 	mls	r5, r2, r1, r5
 800a2b0:	2d00      	cmp	r5, #0
 800a2b2:	f240 126d 	movw	r2, #365	@ 0x16d
 800a2b6:	bf08      	it	eq
 800a2b8:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	bfa8      	it	ge
 800a2c0:	1a9b      	subge	r3, r3, r2
 800a2c2:	e74f      	b.n	800a164 <mktime+0x1d4>
 800a2c4:	f240 126d 	movw	r2, #365	@ 0x16d
 800a2c8:	e7f8      	b.n	800a2bc <mktime+0x32c>
 800a2ca:	bf00      	nop
 800a2cc:	0800d554 	.word	0x0800d554
 800a2d0:	00015180 	.word	0x00015180
 800a2d4:	20002848 	.word	0x20002848
 800a2d8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800a2dc:	e7ee      	b.n	800a2bc <mktime+0x32c>
 800a2de:	3607      	adds	r6, #7
 800a2e0:	e7a6      	b.n	800a230 <mktime+0x2a0>
 800a2e2:	f04f 34ff 	mov.w	r4, #4294967295
 800a2e6:	46a0      	mov	r8, r4
 800a2e8:	e7a5      	b.n	800a236 <mktime+0x2a6>
 800a2ea:	f1ba 0f00 	cmp.w	sl, #0
 800a2ee:	dac1      	bge.n	800a274 <mktime+0x2e4>
 800a2f0:	f04f 0b00 	mov.w	fp, #0
 800a2f4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800a2f8:	191c      	adds	r4, r3, r4
 800a2fa:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800a2fe:	e78d      	b.n	800a21c <mktime+0x28c>

0800a300 <__tzcalc_limits>:
 800a300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a304:	4604      	mov	r4, r0
 800a306:	f001 f825 	bl	800b354 <__gettzinfo>
 800a30a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800a30e:	429c      	cmp	r4, r3
 800a310:	f340 80a3 	ble.w	800a45a <__tzcalc_limits+0x15a>
 800a314:	f46f 65f6 	mvn.w	r5, #1968	@ 0x7b0
 800a318:	1966      	adds	r6, r4, r5
 800a31a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800a31e:	f240 126d 	movw	r2, #365	@ 0x16d
 800a322:	10b6      	asrs	r6, r6, #2
 800a324:	fb02 6603 	mla	r6, r2, r3, r6
 800a328:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800a32c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800a330:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800a334:	fb93 f3f2 	sdiv	r3, r3, r2
 800a338:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a33c:	441e      	add	r6, r3
 800a33e:	19e3      	adds	r3, r4, r7
 800a340:	fbb3 f3f2 	udiv	r3, r3, r2
 800a344:	4a46      	ldr	r2, [pc, #280]	@ (800a460 <__tzcalc_limits+0x160>)
 800a346:	6044      	str	r4, [r0, #4]
 800a348:	441e      	add	r6, r3
 800a34a:	4605      	mov	r5, r0
 800a34c:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800a350:	7a2b      	ldrb	r3, [r5, #8]
 800a352:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800a356:	2b4a      	cmp	r3, #74	@ 0x4a
 800a358:	d138      	bne.n	800a3cc <__tzcalc_limits+0xcc>
 800a35a:	07a1      	lsls	r1, r4, #30
 800a35c:	eb06 030c 	add.w	r3, r6, ip
 800a360:	d106      	bne.n	800a370 <__tzcalc_limits+0x70>
 800a362:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800a366:	fb94 f1fe 	sdiv	r1, r4, lr
 800a36a:	fb0e 4111 	mls	r1, lr, r1, r4
 800a36e:	b931      	cbnz	r1, 800a37e <__tzcalc_limits+0x7e>
 800a370:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800a374:	fb94 f1fe 	sdiv	r1, r4, lr
 800a378:	fb0e 4111 	mls	r1, lr, r1, r4
 800a37c:	bb19      	cbnz	r1, 800a3c6 <__tzcalc_limits+0xc6>
 800a37e:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800a382:	bfd4      	ite	le
 800a384:	f04f 0c00 	movle.w	ip, #0
 800a388:	f04f 0c01 	movgt.w	ip, #1
 800a38c:	4463      	add	r3, ip
 800a38e:	3b01      	subs	r3, #1
 800a390:	69a9      	ldr	r1, [r5, #24]
 800a392:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800a396:	fbc3 1c02 	smlal	r1, ip, r3, r2
 800a39a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800a39c:	18c9      	adds	r1, r1, r3
 800a39e:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800a3a2:	e9c5 1308 	strd	r1, r3, [r5, #32]
 800a3a6:	3528      	adds	r5, #40	@ 0x28
 800a3a8:	42af      	cmp	r7, r5
 800a3aa:	d1d1      	bne.n	800a350 <__tzcalc_limits+0x50>
 800a3ac:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800a3b0:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800a3b4:	428c      	cmp	r4, r1
 800a3b6:	4193      	sbcs	r3, r2
 800a3b8:	bfb4      	ite	lt
 800a3ba:	2301      	movlt	r3, #1
 800a3bc:	2300      	movge	r3, #0
 800a3be:	6003      	str	r3, [r0, #0]
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3c6:	f04f 0c00 	mov.w	ip, #0
 800a3ca:	e7df      	b.n	800a38c <__tzcalc_limits+0x8c>
 800a3cc:	2b44      	cmp	r3, #68	@ 0x44
 800a3ce:	d102      	bne.n	800a3d6 <__tzcalc_limits+0xd6>
 800a3d0:	eb06 030c 	add.w	r3, r6, ip
 800a3d4:	e7dc      	b.n	800a390 <__tzcalc_limits+0x90>
 800a3d6:	07a3      	lsls	r3, r4, #30
 800a3d8:	d105      	bne.n	800a3e6 <__tzcalc_limits+0xe6>
 800a3da:	2164      	movs	r1, #100	@ 0x64
 800a3dc:	fb94 f3f1 	sdiv	r3, r4, r1
 800a3e0:	fb01 4313 	mls	r3, r1, r3, r4
 800a3e4:	bb93      	cbnz	r3, 800a44c <__tzcalc_limits+0x14c>
 800a3e6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a3ea:	fb94 f3f1 	sdiv	r3, r4, r1
 800a3ee:	fb01 4313 	mls	r3, r1, r3, r4
 800a3f2:	fab3 f383 	clz	r3, r3
 800a3f6:	095b      	lsrs	r3, r3, #5
 800a3f8:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800a464 <__tzcalc_limits+0x164>
 800a3fc:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800a400:	425b      	negs	r3, r3
 800a402:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a406:	4631      	mov	r1, r6
 800a408:	f04f 0800 	mov.w	r8, #0
 800a40c:	4473      	add	r3, lr
 800a40e:	f108 0801 	add.w	r8, r8, #1
 800a412:	45c1      	cmp	r9, r8
 800a414:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800a418:	dc1a      	bgt.n	800a450 <__tzcalc_limits+0x150>
 800a41a:	f101 0804 	add.w	r8, r1, #4
 800a41e:	2307      	movs	r3, #7
 800a420:	fb98 f3f3 	sdiv	r3, r8, r3
 800a424:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a428:	eba8 0303 	sub.w	r3, r8, r3
 800a42c:	ebbc 0c03 	subs.w	ip, ip, r3
 800a430:	692b      	ldr	r3, [r5, #16]
 800a432:	f103 33ff 	add.w	r3, r3, #4294967295
 800a436:	bf48      	it	mi
 800a438:	f10c 0c07 	addmi.w	ip, ip, #7
 800a43c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a440:	449c      	add	ip, r3
 800a442:	45f4      	cmp	ip, lr
 800a444:	da06      	bge.n	800a454 <__tzcalc_limits+0x154>
 800a446:	eb01 030c 	add.w	r3, r1, ip
 800a44a:	e7a1      	b.n	800a390 <__tzcalc_limits+0x90>
 800a44c:	2301      	movs	r3, #1
 800a44e:	e7d3      	b.n	800a3f8 <__tzcalc_limits+0xf8>
 800a450:	4471      	add	r1, lr
 800a452:	e7dc      	b.n	800a40e <__tzcalc_limits+0x10e>
 800a454:	f1ac 0c07 	sub.w	ip, ip, #7
 800a458:	e7f3      	b.n	800a442 <__tzcalc_limits+0x142>
 800a45a:	2000      	movs	r0, #0
 800a45c:	e7b1      	b.n	800a3c2 <__tzcalc_limits+0xc2>
 800a45e:	bf00      	nop
 800a460:	00015180 	.word	0x00015180
 800a464:	0800d64c 	.word	0x0800d64c

0800a468 <__tz_lock>:
 800a468:	4801      	ldr	r0, [pc, #4]	@ (800a470 <__tz_lock+0x8>)
 800a46a:	f000 ba5f 	b.w	800a92c <__retarget_lock_acquire>
 800a46e:	bf00      	nop
 800a470:	20002850 	.word	0x20002850

0800a474 <__tz_unlock>:
 800a474:	4801      	ldr	r0, [pc, #4]	@ (800a47c <__tz_unlock+0x8>)
 800a476:	f000 ba5b 	b.w	800a930 <__retarget_lock_release>
 800a47a:	bf00      	nop
 800a47c:	20002850 	.word	0x20002850

0800a480 <_tzset_unlocked>:
 800a480:	4b01      	ldr	r3, [pc, #4]	@ (800a488 <_tzset_unlocked+0x8>)
 800a482:	6818      	ldr	r0, [r3, #0]
 800a484:	f000 b802 	b.w	800a48c <_tzset_unlocked_r>
 800a488:	200001cc 	.word	0x200001cc

0800a48c <_tzset_unlocked_r>:
 800a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	b08d      	sub	sp, #52	@ 0x34
 800a492:	4605      	mov	r5, r0
 800a494:	f000 ff5e 	bl	800b354 <__gettzinfo>
 800a498:	49bc      	ldr	r1, [pc, #752]	@ (800a78c <_tzset_unlocked_r+0x300>)
 800a49a:	4fbd      	ldr	r7, [pc, #756]	@ (800a790 <_tzset_unlocked_r+0x304>)
 800a49c:	4604      	mov	r4, r0
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 fade 	bl	800aa60 <_getenv_r>
 800a4a4:	6839      	ldr	r1, [r7, #0]
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	bb10      	cbnz	r0, 800a4f0 <_tzset_unlocked_r+0x64>
 800a4aa:	4bba      	ldr	r3, [pc, #744]	@ (800a794 <_tzset_unlocked_r+0x308>)
 800a4ac:	4aba      	ldr	r2, [pc, #744]	@ (800a798 <_tzset_unlocked_r+0x30c>)
 800a4ae:	6018      	str	r0, [r3, #0]
 800a4b0:	4bba      	ldr	r3, [pc, #744]	@ (800a79c <_tzset_unlocked_r+0x310>)
 800a4b2:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a4b4:	6018      	str	r0, [r3, #0]
 800a4b6:	4bba      	ldr	r3, [pc, #744]	@ (800a7a0 <_tzset_unlocked_r+0x314>)
 800a4b8:	6526      	str	r6, [r4, #80]	@ 0x50
 800a4ba:	e9c3 2200 	strd	r2, r2, [r3]
 800a4be:	204a      	movs	r0, #74	@ 0x4a
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	7220      	strb	r0, [r4, #8]
 800a4c6:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
 800a4ca:	e9c4 6603 	strd	r6, r6, [r4, #12]
 800a4ce:	e9c4 6605 	strd	r6, r6, [r4, #20]
 800a4d2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a4d6:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
 800a4da:	e9c4 660f 	strd	r6, r6, [r4, #60]	@ 0x3c
 800a4de:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	f000 fac4 	bl	800aa70 <free>
 800a4e8:	603e      	str	r6, [r7, #0]
 800a4ea:	b00d      	add	sp, #52	@ 0x34
 800a4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	f040 808f 	bne.w	800a614 <_tzset_unlocked_r+0x188>
 800a4f6:	6838      	ldr	r0, [r7, #0]
 800a4f8:	f000 faba 	bl	800aa70 <free>
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f7f5 fe51 	bl	80001a4 <strlen>
 800a502:	1c41      	adds	r1, r0, #1
 800a504:	4628      	mov	r0, r5
 800a506:	f000 fadd 	bl	800aac4 <_malloc_r>
 800a50a:	6038      	str	r0, [r7, #0]
 800a50c:	2800      	cmp	r0, #0
 800a50e:	f040 8087 	bne.w	800a620 <_tzset_unlocked_r+0x194>
 800a512:	4aa2      	ldr	r2, [pc, #648]	@ (800a79c <_tzset_unlocked_r+0x310>)
 800a514:	4fa2      	ldr	r7, [pc, #648]	@ (800a7a0 <_tzset_unlocked_r+0x314>)
 800a516:	f8df a27c 	ldr.w	sl, [pc, #636]	@ 800a794 <_tzset_unlocked_r+0x308>
 800a51a:	2300      	movs	r3, #0
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	4aa1      	ldr	r2, [pc, #644]	@ (800a7a4 <_tzset_unlocked_r+0x318>)
 800a520:	f8ca 3000 	str.w	r3, [sl]
 800a524:	2000      	movs	r0, #0
 800a526:	2100      	movs	r1, #0
 800a528:	e9c7 2200 	strd	r2, r2, [r7]
 800a52c:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800a530:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800a534:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800a538:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800a53c:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800a540:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800a544:	224a      	movs	r2, #74	@ 0x4a
 800a546:	7222      	strb	r2, [r4, #8]
 800a548:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a54a:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800a54e:	6523      	str	r3, [r4, #80]	@ 0x50
 800a550:	7833      	ldrb	r3, [r6, #0]
 800a552:	2b3a      	cmp	r3, #58	@ 0x3a
 800a554:	bf08      	it	eq
 800a556:	3601      	addeq	r6, #1
 800a558:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 800a55c:	7833      	ldrb	r3, [r6, #0]
 800a55e:	2b3c      	cmp	r3, #60	@ 0x3c
 800a560:	d162      	bne.n	800a628 <_tzset_unlocked_r+0x19c>
 800a562:	1c75      	adds	r5, r6, #1
 800a564:	4a90      	ldr	r2, [pc, #576]	@ (800a7a8 <_tzset_unlocked_r+0x31c>)
 800a566:	4991      	ldr	r1, [pc, #580]	@ (800a7ac <_tzset_unlocked_r+0x320>)
 800a568:	465b      	mov	r3, fp
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 fe9a 	bl	800b2a4 <siscanf>
 800a570:	2800      	cmp	r0, #0
 800a572:	ddba      	ble.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a576:	1eda      	subs	r2, r3, #3
 800a578:	2a07      	cmp	r2, #7
 800a57a:	d8b6      	bhi.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a57c:	5cea      	ldrb	r2, [r5, r3]
 800a57e:	2a3e      	cmp	r2, #62	@ 0x3e
 800a580:	d1b3      	bne.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a582:	3602      	adds	r6, #2
 800a584:	18f5      	adds	r5, r6, r3
 800a586:	5cf3      	ldrb	r3, [r6, r3]
 800a588:	2b2d      	cmp	r3, #45	@ 0x2d
 800a58a:	d15b      	bne.n	800a644 <_tzset_unlocked_r+0x1b8>
 800a58c:	3501      	adds	r5, #1
 800a58e:	f04f 38ff 	mov.w	r8, #4294967295
 800a592:	2300      	movs	r3, #0
 800a594:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a598:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a59c:	f10d 0920 	add.w	r9, sp, #32
 800a5a0:	f10d 031e 	add.w	r3, sp, #30
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	e9cd b901 	strd	fp, r9, [sp, #4]
 800a5aa:	4981      	ldr	r1, [pc, #516]	@ (800a7b0 <_tzset_unlocked_r+0x324>)
 800a5ac:	f8cd b00c 	str.w	fp, [sp, #12]
 800a5b0:	465b      	mov	r3, fp
 800a5b2:	aa07      	add	r2, sp, #28
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	f000 fe75 	bl	800b2a4 <siscanf>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	dd95      	ble.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a5be:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a5c2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800a5c6:	223c      	movs	r2, #60	@ 0x3c
 800a5c8:	fb02 6603 	mla	r6, r2, r3, r6
 800a5cc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a5d0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800a5d4:	fb02 6603 	mla	r6, r2, r3, r6
 800a5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5da:	fb08 f606 	mul.w	r6, r8, r6
 800a5de:	eb05 0803 	add.w	r8, r5, r3
 800a5e2:	5ceb      	ldrb	r3, [r5, r3]
 800a5e4:	2b3c      	cmp	r3, #60	@ 0x3c
 800a5e6:	f040 80ed 	bne.w	800a7c4 <_tzset_unlocked_r+0x338>
 800a5ea:	f108 0501 	add.w	r5, r8, #1
 800a5ee:	4a71      	ldr	r2, [pc, #452]	@ (800a7b4 <_tzset_unlocked_r+0x328>)
 800a5f0:	496e      	ldr	r1, [pc, #440]	@ (800a7ac <_tzset_unlocked_r+0x320>)
 800a5f2:	465b      	mov	r3, fp
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f000 fe55 	bl	800b2a4 <siscanf>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	dc28      	bgt.n	800a650 <_tzset_unlocked_r+0x1c4>
 800a5fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a602:	2b3e      	cmp	r3, #62	@ 0x3e
 800a604:	d124      	bne.n	800a650 <_tzset_unlocked_r+0x1c4>
 800a606:	4b68      	ldr	r3, [pc, #416]	@ (800a7a8 <_tzset_unlocked_r+0x31c>)
 800a608:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a60a:	e9c7 3300 	strd	r3, r3, [r7]
 800a60e:	f8ca 6000 	str.w	r6, [sl]
 800a612:	e76a      	b.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a614:	f7f5 fdbc 	bl	8000190 <strcmp>
 800a618:	2800      	cmp	r0, #0
 800a61a:	f47f af6c 	bne.w	800a4f6 <_tzset_unlocked_r+0x6a>
 800a61e:	e764      	b.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a620:	4631      	mov	r1, r6
 800a622:	f000 f987 	bl	800a934 <strcpy>
 800a626:	e774      	b.n	800a512 <_tzset_unlocked_r+0x86>
 800a628:	4a5f      	ldr	r2, [pc, #380]	@ (800a7a8 <_tzset_unlocked_r+0x31c>)
 800a62a:	4963      	ldr	r1, [pc, #396]	@ (800a7b8 <_tzset_unlocked_r+0x32c>)
 800a62c:	465b      	mov	r3, fp
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 fe38 	bl	800b2a4 <siscanf>
 800a634:	2800      	cmp	r0, #0
 800a636:	f77f af58 	ble.w	800a4ea <_tzset_unlocked_r+0x5e>
 800a63a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a63c:	1eda      	subs	r2, r3, #3
 800a63e:	2a07      	cmp	r2, #7
 800a640:	d9a0      	bls.n	800a584 <_tzset_unlocked_r+0xf8>
 800a642:	e752      	b.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a644:	2b2b      	cmp	r3, #43	@ 0x2b
 800a646:	bf08      	it	eq
 800a648:	3501      	addeq	r5, #1
 800a64a:	f04f 0801 	mov.w	r8, #1
 800a64e:	e7a0      	b.n	800a592 <_tzset_unlocked_r+0x106>
 800a650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a652:	1eda      	subs	r2, r3, #3
 800a654:	2a07      	cmp	r2, #7
 800a656:	f63f af48 	bhi.w	800a4ea <_tzset_unlocked_r+0x5e>
 800a65a:	5cea      	ldrb	r2, [r5, r3]
 800a65c:	2a3e      	cmp	r2, #62	@ 0x3e
 800a65e:	f47f af44 	bne.w	800a4ea <_tzset_unlocked_r+0x5e>
 800a662:	f108 0802 	add.w	r8, r8, #2
 800a666:	eb08 0503 	add.w	r5, r8, r3
 800a66a:	f818 3003 	ldrb.w	r3, [r8, r3]
 800a66e:	2b2d      	cmp	r3, #45	@ 0x2d
 800a670:	f040 80b7 	bne.w	800a7e2 <_tzset_unlocked_r+0x356>
 800a674:	3501      	adds	r5, #1
 800a676:	f04f 38ff 	mov.w	r8, #4294967295
 800a67a:	2300      	movs	r3, #0
 800a67c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a680:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a684:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a688:	930a      	str	r3, [sp, #40]	@ 0x28
 800a68a:	f10d 031e 	add.w	r3, sp, #30
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	e9cd 9b02 	strd	r9, fp, [sp, #8]
 800a694:	4946      	ldr	r1, [pc, #280]	@ (800a7b0 <_tzset_unlocked_r+0x324>)
 800a696:	f8cd b004 	str.w	fp, [sp, #4]
 800a69a:	465b      	mov	r3, fp
 800a69c:	aa07      	add	r2, sp, #28
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f000 fe00 	bl	800b2a4 <siscanf>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f300 80a2 	bgt.w	800a7ee <_tzset_unlocked_r+0x362>
 800a6aa:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800a6ae:	9304      	str	r3, [sp, #16]
 800a6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6b2:	46a0      	mov	r8, r4
 800a6b4:	441d      	add	r5, r3
 800a6b6:	f04f 0b00 	mov.w	fp, #0
 800a6ba:	782b      	ldrb	r3, [r5, #0]
 800a6bc:	2b2c      	cmp	r3, #44	@ 0x2c
 800a6be:	bf08      	it	eq
 800a6c0:	3501      	addeq	r5, #1
 800a6c2:	f895 9000 	ldrb.w	r9, [r5]
 800a6c6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800a6ca:	f040 80a0 	bne.w	800a80e <_tzset_unlocked_r+0x382>
 800a6ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6d0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800a6d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a6d8:	aa09      	add	r2, sp, #36	@ 0x24
 800a6da:	9200      	str	r2, [sp, #0]
 800a6dc:	4937      	ldr	r1, [pc, #220]	@ (800a7bc <_tzset_unlocked_r+0x330>)
 800a6de:	9303      	str	r3, [sp, #12]
 800a6e0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f000 fddd 	bl	800b2a4 <siscanf>
 800a6ea:	2803      	cmp	r0, #3
 800a6ec:	f47f aefd 	bne.w	800a4ea <_tzset_unlocked_r+0x5e>
 800a6f0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800a6f4:	1e4b      	subs	r3, r1, #1
 800a6f6:	2b0b      	cmp	r3, #11
 800a6f8:	f63f aef7 	bhi.w	800a4ea <_tzset_unlocked_r+0x5e>
 800a6fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800a700:	1e53      	subs	r3, r2, #1
 800a702:	2b04      	cmp	r3, #4
 800a704:	f63f aef1 	bhi.w	800a4ea <_tzset_unlocked_r+0x5e>
 800a708:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800a70c:	2b06      	cmp	r3, #6
 800a70e:	f63f aeec 	bhi.w	800a4ea <_tzset_unlocked_r+0x5e>
 800a712:	e9c8 1203 	strd	r1, r2, [r8, #12]
 800a716:	f888 9008 	strb.w	r9, [r8, #8]
 800a71a:	f8c8 3014 	str.w	r3, [r8, #20]
 800a71e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a720:	eb05 0903 	add.w	r9, r5, r3
 800a724:	2500      	movs	r5, #0
 800a726:	f04f 0302 	mov.w	r3, #2
 800a72a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a72e:	f8ad 501e 	strh.w	r5, [sp, #30]
 800a732:	f8ad 5020 	strh.w	r5, [sp, #32]
 800a736:	950a      	str	r5, [sp, #40]	@ 0x28
 800a738:	f899 3000 	ldrb.w	r3, [r9]
 800a73c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a73e:	f040 8094 	bne.w	800a86a <_tzset_unlocked_r+0x3de>
 800a742:	ab0a      	add	r3, sp, #40	@ 0x28
 800a744:	aa08      	add	r2, sp, #32
 800a746:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a74a:	f10d 021e 	add.w	r2, sp, #30
 800a74e:	9200      	str	r2, [sp, #0]
 800a750:	491b      	ldr	r1, [pc, #108]	@ (800a7c0 <_tzset_unlocked_r+0x334>)
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	aa07      	add	r2, sp, #28
 800a756:	4648      	mov	r0, r9
 800a758:	f000 fda4 	bl	800b2a4 <siscanf>
 800a75c:	42a8      	cmp	r0, r5
 800a75e:	f300 8084 	bgt.w	800a86a <_tzset_unlocked_r+0x3de>
 800a762:	214a      	movs	r1, #74	@ 0x4a
 800a764:	2200      	movs	r2, #0
 800a766:	2300      	movs	r3, #0
 800a768:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800a76c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a770:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a774:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800a778:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800a77c:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a780:	7221      	strb	r1, [r4, #8]
 800a782:	62a5      	str	r5, [r4, #40]	@ 0x28
 800a784:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a788:	6525      	str	r5, [r4, #80]	@ 0x50
 800a78a:	e6ae      	b.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a78c:	0800d5b4 	.word	0x0800d5b4
 800a790:	20002828 	.word	0x20002828
 800a794:	20002844 	.word	0x20002844
 800a798:	0800d5b7 	.word	0x0800d5b7
 800a79c:	20002848 	.word	0x20002848
 800a7a0:	200001c4 	.word	0x200001c4
 800a7a4:	0800d607 	.word	0x0800d607
 800a7a8:	20002838 	.word	0x20002838
 800a7ac:	0800d5bb 	.word	0x0800d5bb
 800a7b0:	0800d5f0 	.word	0x0800d5f0
 800a7b4:	2000282c 	.word	0x2000282c
 800a7b8:	0800d5ce 	.word	0x0800d5ce
 800a7bc:	0800d5dc 	.word	0x0800d5dc
 800a7c0:	0800d5ef 	.word	0x0800d5ef
 800a7c4:	4a40      	ldr	r2, [pc, #256]	@ (800a8c8 <_tzset_unlocked_r+0x43c>)
 800a7c6:	4941      	ldr	r1, [pc, #260]	@ (800a8cc <_tzset_unlocked_r+0x440>)
 800a7c8:	465b      	mov	r3, fp
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	f000 fd6a 	bl	800b2a4 <siscanf>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	f77f af18 	ble.w	800a606 <_tzset_unlocked_r+0x17a>
 800a7d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d8:	1eda      	subs	r2, r3, #3
 800a7da:	2a07      	cmp	r2, #7
 800a7dc:	f67f af43 	bls.w	800a666 <_tzset_unlocked_r+0x1da>
 800a7e0:	e683      	b.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a7e2:	2b2b      	cmp	r3, #43	@ 0x2b
 800a7e4:	bf08      	it	eq
 800a7e6:	3501      	addeq	r5, #1
 800a7e8:	f04f 0801 	mov.w	r8, #1
 800a7ec:	e745      	b.n	800a67a <_tzset_unlocked_r+0x1ee>
 800a7ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a7f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a7f6:	213c      	movs	r1, #60	@ 0x3c
 800a7f8:	fb01 3302 	mla	r3, r1, r2, r3
 800a7fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a800:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a804:	fb01 3302 	mla	r3, r1, r2, r3
 800a808:	fb08 f303 	mul.w	r3, r8, r3
 800a80c:	e74f      	b.n	800a6ae <_tzset_unlocked_r+0x222>
 800a80e:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800a812:	bf06      	itte	eq
 800a814:	3501      	addeq	r5, #1
 800a816:	464b      	moveq	r3, r9
 800a818:	2344      	movne	r3, #68	@ 0x44
 800a81a:	220a      	movs	r2, #10
 800a81c:	a90b      	add	r1, sp, #44	@ 0x2c
 800a81e:	4628      	mov	r0, r5
 800a820:	9305      	str	r3, [sp, #20]
 800a822:	f000 fa4b 	bl	800acbc <strtoul>
 800a826:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800a82a:	9b05      	ldr	r3, [sp, #20]
 800a82c:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800a830:	45a9      	cmp	r9, r5
 800a832:	d114      	bne.n	800a85e <_tzset_unlocked_r+0x3d2>
 800a834:	234d      	movs	r3, #77	@ 0x4d
 800a836:	f1bb 0f00 	cmp.w	fp, #0
 800a83a:	d107      	bne.n	800a84c <_tzset_unlocked_r+0x3c0>
 800a83c:	7223      	strb	r3, [r4, #8]
 800a83e:	2103      	movs	r1, #3
 800a840:	2302      	movs	r3, #2
 800a842:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800a846:	f8c4 b014 	str.w	fp, [r4, #20]
 800a84a:	e76b      	b.n	800a724 <_tzset_unlocked_r+0x298>
 800a84c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800a850:	220b      	movs	r2, #11
 800a852:	2301      	movs	r3, #1
 800a854:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800a858:	2300      	movs	r3, #0
 800a85a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a85c:	e762      	b.n	800a724 <_tzset_unlocked_r+0x298>
 800a85e:	b280      	uxth	r0, r0
 800a860:	f888 3008 	strb.w	r3, [r8, #8]
 800a864:	f8c8 0014 	str.w	r0, [r8, #20]
 800a868:	e75c      	b.n	800a724 <_tzset_unlocked_r+0x298>
 800a86a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a86e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a872:	213c      	movs	r1, #60	@ 0x3c
 800a874:	fb01 3302 	mla	r3, r1, r2, r3
 800a878:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a87c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a880:	fb01 3302 	mla	r3, r1, r2, r3
 800a884:	f8c8 3018 	str.w	r3, [r8, #24]
 800a888:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a88a:	f10b 0301 	add.w	r3, fp, #1
 800a88e:	2b02      	cmp	r3, #2
 800a890:	444d      	add	r5, r9
 800a892:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 800a896:	f04f 0b01 	mov.w	fp, #1
 800a89a:	f47f af0e 	bne.w	800a6ba <_tzset_unlocked_r+0x22e>
 800a89e:	9b04      	ldr	r3, [sp, #16]
 800a8a0:	6523      	str	r3, [r4, #80]	@ 0x50
 800a8a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a8d0 <_tzset_unlocked_r+0x444>)
 800a8a4:	603b      	str	r3, [r7, #0]
 800a8a6:	6860      	ldr	r0, [r4, #4]
 800a8a8:	4b07      	ldr	r3, [pc, #28]	@ (800a8c8 <_tzset_unlocked_r+0x43c>)
 800a8aa:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a8ac:	607b      	str	r3, [r7, #4]
 800a8ae:	f7ff fd27 	bl	800a300 <__tzcalc_limits>
 800a8b2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a8b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a8b6:	f8ca 2000 	str.w	r2, [sl]
 800a8ba:	1a9b      	subs	r3, r3, r2
 800a8bc:	4a05      	ldr	r2, [pc, #20]	@ (800a8d4 <_tzset_unlocked_r+0x448>)
 800a8be:	bf18      	it	ne
 800a8c0:	2301      	movne	r3, #1
 800a8c2:	6013      	str	r3, [r2, #0]
 800a8c4:	e611      	b.n	800a4ea <_tzset_unlocked_r+0x5e>
 800a8c6:	bf00      	nop
 800a8c8:	2000282c 	.word	0x2000282c
 800a8cc:	0800d5ce 	.word	0x0800d5ce
 800a8d0:	20002838 	.word	0x20002838
 800a8d4:	20002848 	.word	0x20002848

0800a8d8 <__errno>:
 800a8d8:	4b01      	ldr	r3, [pc, #4]	@ (800a8e0 <__errno+0x8>)
 800a8da:	6818      	ldr	r0, [r3, #0]
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	200001cc 	.word	0x200001cc

0800a8e4 <__libc_init_array>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a91c <__libc_init_array+0x38>)
 800a8e8:	4d0d      	ldr	r5, [pc, #52]	@ (800a920 <__libc_init_array+0x3c>)
 800a8ea:	1b5b      	subs	r3, r3, r5
 800a8ec:	109c      	asrs	r4, r3, #2
 800a8ee:	2600      	movs	r6, #0
 800a8f0:	42a6      	cmp	r6, r4
 800a8f2:	d109      	bne.n	800a908 <__libc_init_array+0x24>
 800a8f4:	f001 faa6 	bl	800be44 <_init>
 800a8f8:	4d0a      	ldr	r5, [pc, #40]	@ (800a924 <__libc_init_array+0x40>)
 800a8fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a928 <__libc_init_array+0x44>)
 800a8fc:	1b5b      	subs	r3, r3, r5
 800a8fe:	109c      	asrs	r4, r3, #2
 800a900:	2600      	movs	r6, #0
 800a902:	42a6      	cmp	r6, r4
 800a904:	d105      	bne.n	800a912 <__libc_init_array+0x2e>
 800a906:	bd70      	pop	{r4, r5, r6, pc}
 800a908:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90c:	4798      	blx	r3
 800a90e:	3601      	adds	r6, #1
 800a910:	e7ee      	b.n	800a8f0 <__libc_init_array+0xc>
 800a912:	f855 3b04 	ldr.w	r3, [r5], #4
 800a916:	4798      	blx	r3
 800a918:	3601      	adds	r6, #1
 800a91a:	e7f2      	b.n	800a902 <__libc_init_array+0x1e>
 800a91c:	0800d6b8 	.word	0x0800d6b8
 800a920:	0800d6b8 	.word	0x0800d6b8
 800a924:	0800d6b8 	.word	0x0800d6b8
 800a928:	0800d6bc 	.word	0x0800d6bc

0800a92c <__retarget_lock_acquire>:
 800a92c:	4770      	bx	lr

0800a92e <__retarget_lock_acquire_recursive>:
 800a92e:	4770      	bx	lr

0800a930 <__retarget_lock_release>:
 800a930:	4770      	bx	lr

0800a932 <__retarget_lock_release_recursive>:
 800a932:	4770      	bx	lr

0800a934 <strcpy>:
 800a934:	4603      	mov	r3, r0
 800a936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a93a:	f803 2b01 	strb.w	r2, [r3], #1
 800a93e:	2a00      	cmp	r2, #0
 800a940:	d1f9      	bne.n	800a936 <strcpy+0x2>
 800a942:	4770      	bx	lr

0800a944 <div>:
 800a944:	b510      	push	{r4, lr}
 800a946:	fb91 f4f2 	sdiv	r4, r1, r2
 800a94a:	fb02 1114 	mls	r1, r2, r4, r1
 800a94e:	6004      	str	r4, [r0, #0]
 800a950:	6041      	str	r1, [r0, #4]
 800a952:	bd10      	pop	{r4, pc}

0800a954 <_free_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4605      	mov	r5, r0
 800a958:	2900      	cmp	r1, #0
 800a95a:	d041      	beq.n	800a9e0 <_free_r+0x8c>
 800a95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a960:	1f0c      	subs	r4, r1, #4
 800a962:	2b00      	cmp	r3, #0
 800a964:	bfb8      	it	lt
 800a966:	18e4      	addlt	r4, r4, r3
 800a968:	f000 f92c 	bl	800abc4 <__malloc_lock>
 800a96c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e4 <_free_r+0x90>)
 800a96e:	6813      	ldr	r3, [r2, #0]
 800a970:	b933      	cbnz	r3, 800a980 <_free_r+0x2c>
 800a972:	6063      	str	r3, [r4, #4]
 800a974:	6014      	str	r4, [r2, #0]
 800a976:	4628      	mov	r0, r5
 800a978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a97c:	f000 b928 	b.w	800abd0 <__malloc_unlock>
 800a980:	42a3      	cmp	r3, r4
 800a982:	d908      	bls.n	800a996 <_free_r+0x42>
 800a984:	6820      	ldr	r0, [r4, #0]
 800a986:	1821      	adds	r1, r4, r0
 800a988:	428b      	cmp	r3, r1
 800a98a:	bf01      	itttt	eq
 800a98c:	6819      	ldreq	r1, [r3, #0]
 800a98e:	685b      	ldreq	r3, [r3, #4]
 800a990:	1809      	addeq	r1, r1, r0
 800a992:	6021      	streq	r1, [r4, #0]
 800a994:	e7ed      	b.n	800a972 <_free_r+0x1e>
 800a996:	461a      	mov	r2, r3
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	b10b      	cbz	r3, 800a9a0 <_free_r+0x4c>
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	d9fa      	bls.n	800a996 <_free_r+0x42>
 800a9a0:	6811      	ldr	r1, [r2, #0]
 800a9a2:	1850      	adds	r0, r2, r1
 800a9a4:	42a0      	cmp	r0, r4
 800a9a6:	d10b      	bne.n	800a9c0 <_free_r+0x6c>
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	4401      	add	r1, r0
 800a9ac:	1850      	adds	r0, r2, r1
 800a9ae:	4283      	cmp	r3, r0
 800a9b0:	6011      	str	r1, [r2, #0]
 800a9b2:	d1e0      	bne.n	800a976 <_free_r+0x22>
 800a9b4:	6818      	ldr	r0, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	6053      	str	r3, [r2, #4]
 800a9ba:	4408      	add	r0, r1
 800a9bc:	6010      	str	r0, [r2, #0]
 800a9be:	e7da      	b.n	800a976 <_free_r+0x22>
 800a9c0:	d902      	bls.n	800a9c8 <_free_r+0x74>
 800a9c2:	230c      	movs	r3, #12
 800a9c4:	602b      	str	r3, [r5, #0]
 800a9c6:	e7d6      	b.n	800a976 <_free_r+0x22>
 800a9c8:	6820      	ldr	r0, [r4, #0]
 800a9ca:	1821      	adds	r1, r4, r0
 800a9cc:	428b      	cmp	r3, r1
 800a9ce:	bf04      	itt	eq
 800a9d0:	6819      	ldreq	r1, [r3, #0]
 800a9d2:	685b      	ldreq	r3, [r3, #4]
 800a9d4:	6063      	str	r3, [r4, #4]
 800a9d6:	bf04      	itt	eq
 800a9d8:	1809      	addeq	r1, r1, r0
 800a9da:	6021      	streq	r1, [r4, #0]
 800a9dc:	6054      	str	r4, [r2, #4]
 800a9de:	e7ca      	b.n	800a976 <_free_r+0x22>
 800a9e0:	bd38      	pop	{r3, r4, r5, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20002858 	.word	0x20002858

0800a9e8 <_findenv_r>:
 800a9e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ec:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800aa5c <_findenv_r+0x74>
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	4689      	mov	r9, r1
 800a9f4:	4617      	mov	r7, r2
 800a9f6:	f000 fccf 	bl	800b398 <__env_lock>
 800a9fa:	f8da 4000 	ldr.w	r4, [sl]
 800a9fe:	b134      	cbz	r4, 800aa0e <_findenv_r+0x26>
 800aa00:	464b      	mov	r3, r9
 800aa02:	4698      	mov	r8, r3
 800aa04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa08:	b13a      	cbz	r2, 800aa1a <_findenv_r+0x32>
 800aa0a:	2a3d      	cmp	r2, #61	@ 0x3d
 800aa0c:	d1f9      	bne.n	800aa02 <_findenv_r+0x1a>
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 fcc8 	bl	800b3a4 <__env_unlock>
 800aa14:	2000      	movs	r0, #0
 800aa16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1a:	eba8 0809 	sub.w	r8, r8, r9
 800aa1e:	46a3      	mov	fp, r4
 800aa20:	f854 0b04 	ldr.w	r0, [r4], #4
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d0f2      	beq.n	800aa0e <_findenv_r+0x26>
 800aa28:	4642      	mov	r2, r8
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	f000 fc7f 	bl	800b32e <strncmp>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d1f4      	bne.n	800aa1e <_findenv_r+0x36>
 800aa34:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800aa38:	eb03 0508 	add.w	r5, r3, r8
 800aa3c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800aa40:	2b3d      	cmp	r3, #61	@ 0x3d
 800aa42:	d1ec      	bne.n	800aa1e <_findenv_r+0x36>
 800aa44:	f8da 3000 	ldr.w	r3, [sl]
 800aa48:	ebab 0303 	sub.w	r3, fp, r3
 800aa4c:	109b      	asrs	r3, r3, #2
 800aa4e:	4630      	mov	r0, r6
 800aa50:	603b      	str	r3, [r7, #0]
 800aa52:	f000 fca7 	bl	800b3a4 <__env_unlock>
 800aa56:	1c68      	adds	r0, r5, #1
 800aa58:	e7dd      	b.n	800aa16 <_findenv_r+0x2e>
 800aa5a:	bf00      	nop
 800aa5c:	200000c0 	.word	0x200000c0

0800aa60 <_getenv_r>:
 800aa60:	b507      	push	{r0, r1, r2, lr}
 800aa62:	aa01      	add	r2, sp, #4
 800aa64:	f7ff ffc0 	bl	800a9e8 <_findenv_r>
 800aa68:	b003      	add	sp, #12
 800aa6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800aa70 <free>:
 800aa70:	4b02      	ldr	r3, [pc, #8]	@ (800aa7c <free+0xc>)
 800aa72:	4601      	mov	r1, r0
 800aa74:	6818      	ldr	r0, [r3, #0]
 800aa76:	f7ff bf6d 	b.w	800a954 <_free_r>
 800aa7a:	bf00      	nop
 800aa7c:	200001cc 	.word	0x200001cc

0800aa80 <sbrk_aligned>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	4e0f      	ldr	r6, [pc, #60]	@ (800aac0 <sbrk_aligned+0x40>)
 800aa84:	460c      	mov	r4, r1
 800aa86:	6831      	ldr	r1, [r6, #0]
 800aa88:	4605      	mov	r5, r0
 800aa8a:	b911      	cbnz	r1, 800aa92 <sbrk_aligned+0x12>
 800aa8c:	f000 fc66 	bl	800b35c <_sbrk_r>
 800aa90:	6030      	str	r0, [r6, #0]
 800aa92:	4621      	mov	r1, r4
 800aa94:	4628      	mov	r0, r5
 800aa96:	f000 fc61 	bl	800b35c <_sbrk_r>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d103      	bne.n	800aaa6 <sbrk_aligned+0x26>
 800aa9e:	f04f 34ff 	mov.w	r4, #4294967295
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	1cc4      	adds	r4, r0, #3
 800aaa8:	f024 0403 	bic.w	r4, r4, #3
 800aaac:	42a0      	cmp	r0, r4
 800aaae:	d0f8      	beq.n	800aaa2 <sbrk_aligned+0x22>
 800aab0:	1a21      	subs	r1, r4, r0
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 fc52 	bl	800b35c <_sbrk_r>
 800aab8:	3001      	adds	r0, #1
 800aaba:	d1f2      	bne.n	800aaa2 <sbrk_aligned+0x22>
 800aabc:	e7ef      	b.n	800aa9e <sbrk_aligned+0x1e>
 800aabe:	bf00      	nop
 800aac0:	20002854 	.word	0x20002854

0800aac4 <_malloc_r>:
 800aac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aac8:	1ccd      	adds	r5, r1, #3
 800aaca:	f025 0503 	bic.w	r5, r5, #3
 800aace:	3508      	adds	r5, #8
 800aad0:	2d0c      	cmp	r5, #12
 800aad2:	bf38      	it	cc
 800aad4:	250c      	movcc	r5, #12
 800aad6:	2d00      	cmp	r5, #0
 800aad8:	4606      	mov	r6, r0
 800aada:	db01      	blt.n	800aae0 <_malloc_r+0x1c>
 800aadc:	42a9      	cmp	r1, r5
 800aade:	d904      	bls.n	800aaea <_malloc_r+0x26>
 800aae0:	230c      	movs	r3, #12
 800aae2:	6033      	str	r3, [r6, #0]
 800aae4:	2000      	movs	r0, #0
 800aae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abc0 <_malloc_r+0xfc>
 800aaee:	f000 f869 	bl	800abc4 <__malloc_lock>
 800aaf2:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf6:	461c      	mov	r4, r3
 800aaf8:	bb44      	cbnz	r4, 800ab4c <_malloc_r+0x88>
 800aafa:	4629      	mov	r1, r5
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff ffbf 	bl	800aa80 <sbrk_aligned>
 800ab02:	1c43      	adds	r3, r0, #1
 800ab04:	4604      	mov	r4, r0
 800ab06:	d158      	bne.n	800abba <_malloc_r+0xf6>
 800ab08:	f8d8 4000 	ldr.w	r4, [r8]
 800ab0c:	4627      	mov	r7, r4
 800ab0e:	2f00      	cmp	r7, #0
 800ab10:	d143      	bne.n	800ab9a <_malloc_r+0xd6>
 800ab12:	2c00      	cmp	r4, #0
 800ab14:	d04b      	beq.n	800abae <_malloc_r+0xea>
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	4639      	mov	r1, r7
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	eb04 0903 	add.w	r9, r4, r3
 800ab20:	f000 fc1c 	bl	800b35c <_sbrk_r>
 800ab24:	4581      	cmp	r9, r0
 800ab26:	d142      	bne.n	800abae <_malloc_r+0xea>
 800ab28:	6821      	ldr	r1, [r4, #0]
 800ab2a:	1a6d      	subs	r5, r5, r1
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f7ff ffa6 	bl	800aa80 <sbrk_aligned>
 800ab34:	3001      	adds	r0, #1
 800ab36:	d03a      	beq.n	800abae <_malloc_r+0xea>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	442b      	add	r3, r5
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	bb62      	cbnz	r2, 800aba0 <_malloc_r+0xdc>
 800ab46:	f8c8 7000 	str.w	r7, [r8]
 800ab4a:	e00f      	b.n	800ab6c <_malloc_r+0xa8>
 800ab4c:	6822      	ldr	r2, [r4, #0]
 800ab4e:	1b52      	subs	r2, r2, r5
 800ab50:	d420      	bmi.n	800ab94 <_malloc_r+0xd0>
 800ab52:	2a0b      	cmp	r2, #11
 800ab54:	d917      	bls.n	800ab86 <_malloc_r+0xc2>
 800ab56:	1961      	adds	r1, r4, r5
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	6025      	str	r5, [r4, #0]
 800ab5c:	bf18      	it	ne
 800ab5e:	6059      	strne	r1, [r3, #4]
 800ab60:	6863      	ldr	r3, [r4, #4]
 800ab62:	bf08      	it	eq
 800ab64:	f8c8 1000 	streq.w	r1, [r8]
 800ab68:	5162      	str	r2, [r4, r5]
 800ab6a:	604b      	str	r3, [r1, #4]
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f000 f82f 	bl	800abd0 <__malloc_unlock>
 800ab72:	f104 000b 	add.w	r0, r4, #11
 800ab76:	1d23      	adds	r3, r4, #4
 800ab78:	f020 0007 	bic.w	r0, r0, #7
 800ab7c:	1ac2      	subs	r2, r0, r3
 800ab7e:	bf1c      	itt	ne
 800ab80:	1a1b      	subne	r3, r3, r0
 800ab82:	50a3      	strne	r3, [r4, r2]
 800ab84:	e7af      	b.n	800aae6 <_malloc_r+0x22>
 800ab86:	6862      	ldr	r2, [r4, #4]
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	bf0c      	ite	eq
 800ab8c:	f8c8 2000 	streq.w	r2, [r8]
 800ab90:	605a      	strne	r2, [r3, #4]
 800ab92:	e7eb      	b.n	800ab6c <_malloc_r+0xa8>
 800ab94:	4623      	mov	r3, r4
 800ab96:	6864      	ldr	r4, [r4, #4]
 800ab98:	e7ae      	b.n	800aaf8 <_malloc_r+0x34>
 800ab9a:	463c      	mov	r4, r7
 800ab9c:	687f      	ldr	r7, [r7, #4]
 800ab9e:	e7b6      	b.n	800ab0e <_malloc_r+0x4a>
 800aba0:	461a      	mov	r2, r3
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	d1fb      	bne.n	800aba0 <_malloc_r+0xdc>
 800aba8:	2300      	movs	r3, #0
 800abaa:	6053      	str	r3, [r2, #4]
 800abac:	e7de      	b.n	800ab6c <_malloc_r+0xa8>
 800abae:	230c      	movs	r3, #12
 800abb0:	6033      	str	r3, [r6, #0]
 800abb2:	4630      	mov	r0, r6
 800abb4:	f000 f80c 	bl	800abd0 <__malloc_unlock>
 800abb8:	e794      	b.n	800aae4 <_malloc_r+0x20>
 800abba:	6005      	str	r5, [r0, #0]
 800abbc:	e7d6      	b.n	800ab6c <_malloc_r+0xa8>
 800abbe:	bf00      	nop
 800abc0:	20002858 	.word	0x20002858

0800abc4 <__malloc_lock>:
 800abc4:	4801      	ldr	r0, [pc, #4]	@ (800abcc <__malloc_lock+0x8>)
 800abc6:	f7ff beb2 	b.w	800a92e <__retarget_lock_acquire_recursive>
 800abca:	bf00      	nop
 800abcc:	20002852 	.word	0x20002852

0800abd0 <__malloc_unlock>:
 800abd0:	4801      	ldr	r0, [pc, #4]	@ (800abd8 <__malloc_unlock+0x8>)
 800abd2:	f7ff beae 	b.w	800a932 <__retarget_lock_release_recursive>
 800abd6:	bf00      	nop
 800abd8:	20002852 	.word	0x20002852

0800abdc <_strtoul_l.isra.0>:
 800abdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abe0:	4e34      	ldr	r6, [pc, #208]	@ (800acb4 <_strtoul_l.isra.0+0xd8>)
 800abe2:	4686      	mov	lr, r0
 800abe4:	460d      	mov	r5, r1
 800abe6:	4628      	mov	r0, r5
 800abe8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abec:	5d37      	ldrb	r7, [r6, r4]
 800abee:	f017 0708 	ands.w	r7, r7, #8
 800abf2:	d1f8      	bne.n	800abe6 <_strtoul_l.isra.0+0xa>
 800abf4:	2c2d      	cmp	r4, #45	@ 0x2d
 800abf6:	d110      	bne.n	800ac1a <_strtoul_l.isra.0+0x3e>
 800abf8:	782c      	ldrb	r4, [r5, #0]
 800abfa:	2701      	movs	r7, #1
 800abfc:	1c85      	adds	r5, r0, #2
 800abfe:	f033 0010 	bics.w	r0, r3, #16
 800ac02:	d115      	bne.n	800ac30 <_strtoul_l.isra.0+0x54>
 800ac04:	2c30      	cmp	r4, #48	@ 0x30
 800ac06:	d10d      	bne.n	800ac24 <_strtoul_l.isra.0+0x48>
 800ac08:	7828      	ldrb	r0, [r5, #0]
 800ac0a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ac0e:	2858      	cmp	r0, #88	@ 0x58
 800ac10:	d108      	bne.n	800ac24 <_strtoul_l.isra.0+0x48>
 800ac12:	786c      	ldrb	r4, [r5, #1]
 800ac14:	3502      	adds	r5, #2
 800ac16:	2310      	movs	r3, #16
 800ac18:	e00a      	b.n	800ac30 <_strtoul_l.isra.0+0x54>
 800ac1a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac1c:	bf04      	itt	eq
 800ac1e:	782c      	ldrbeq	r4, [r5, #0]
 800ac20:	1c85      	addeq	r5, r0, #2
 800ac22:	e7ec      	b.n	800abfe <_strtoul_l.isra.0+0x22>
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1f6      	bne.n	800ac16 <_strtoul_l.isra.0+0x3a>
 800ac28:	2c30      	cmp	r4, #48	@ 0x30
 800ac2a:	bf14      	ite	ne
 800ac2c:	230a      	movne	r3, #10
 800ac2e:	2308      	moveq	r3, #8
 800ac30:	f04f 38ff 	mov.w	r8, #4294967295
 800ac34:	2600      	movs	r6, #0
 800ac36:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac3a:	fb03 f908 	mul.w	r9, r3, r8
 800ac3e:	ea6f 0909 	mvn.w	r9, r9
 800ac42:	4630      	mov	r0, r6
 800ac44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ac48:	f1bc 0f09 	cmp.w	ip, #9
 800ac4c:	d810      	bhi.n	800ac70 <_strtoul_l.isra.0+0x94>
 800ac4e:	4664      	mov	r4, ip
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	dd1e      	ble.n	800ac92 <_strtoul_l.isra.0+0xb6>
 800ac54:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ac58:	d007      	beq.n	800ac6a <_strtoul_l.isra.0+0x8e>
 800ac5a:	4580      	cmp	r8, r0
 800ac5c:	d316      	bcc.n	800ac8c <_strtoul_l.isra.0+0xb0>
 800ac5e:	d101      	bne.n	800ac64 <_strtoul_l.isra.0+0x88>
 800ac60:	45a1      	cmp	r9, r4
 800ac62:	db13      	blt.n	800ac8c <_strtoul_l.isra.0+0xb0>
 800ac64:	fb00 4003 	mla	r0, r0, r3, r4
 800ac68:	2601      	movs	r6, #1
 800ac6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac6e:	e7e9      	b.n	800ac44 <_strtoul_l.isra.0+0x68>
 800ac70:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ac74:	f1bc 0f19 	cmp.w	ip, #25
 800ac78:	d801      	bhi.n	800ac7e <_strtoul_l.isra.0+0xa2>
 800ac7a:	3c37      	subs	r4, #55	@ 0x37
 800ac7c:	e7e8      	b.n	800ac50 <_strtoul_l.isra.0+0x74>
 800ac7e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ac82:	f1bc 0f19 	cmp.w	ip, #25
 800ac86:	d804      	bhi.n	800ac92 <_strtoul_l.isra.0+0xb6>
 800ac88:	3c57      	subs	r4, #87	@ 0x57
 800ac8a:	e7e1      	b.n	800ac50 <_strtoul_l.isra.0+0x74>
 800ac8c:	f04f 36ff 	mov.w	r6, #4294967295
 800ac90:	e7eb      	b.n	800ac6a <_strtoul_l.isra.0+0x8e>
 800ac92:	1c73      	adds	r3, r6, #1
 800ac94:	d106      	bne.n	800aca4 <_strtoul_l.isra.0+0xc8>
 800ac96:	2322      	movs	r3, #34	@ 0x22
 800ac98:	f8ce 3000 	str.w	r3, [lr]
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	b932      	cbnz	r2, 800acae <_strtoul_l.isra.0+0xd2>
 800aca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aca4:	b107      	cbz	r7, 800aca8 <_strtoul_l.isra.0+0xcc>
 800aca6:	4240      	negs	r0, r0
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	d0f9      	beq.n	800aca0 <_strtoul_l.isra.0+0xc4>
 800acac:	b106      	cbz	r6, 800acb0 <_strtoul_l.isra.0+0xd4>
 800acae:	1e69      	subs	r1, r5, #1
 800acb0:	6011      	str	r1, [r2, #0]
 800acb2:	e7f5      	b.n	800aca0 <_strtoul_l.isra.0+0xc4>
 800acb4:	0800d451 	.word	0x0800d451

0800acb8 <_strtoul_r>:
 800acb8:	f7ff bf90 	b.w	800abdc <_strtoul_l.isra.0>

0800acbc <strtoul>:
 800acbc:	4613      	mov	r3, r2
 800acbe:	460a      	mov	r2, r1
 800acc0:	4601      	mov	r1, r0
 800acc2:	4802      	ldr	r0, [pc, #8]	@ (800accc <strtoul+0x10>)
 800acc4:	6800      	ldr	r0, [r0, #0]
 800acc6:	f7ff bf89 	b.w	800abdc <_strtoul_l.isra.0>
 800acca:	bf00      	nop
 800accc:	200001cc 	.word	0x200001cc

0800acd0 <__ssputs_r>:
 800acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd4:	688e      	ldr	r6, [r1, #8]
 800acd6:	461f      	mov	r7, r3
 800acd8:	42be      	cmp	r6, r7
 800acda:	4682      	mov	sl, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	4690      	mov	r8, r2
 800ace0:	4633      	mov	r3, r6
 800ace2:	d853      	bhi.n	800ad8c <__ssputs_r+0xbc>
 800ace4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800ace8:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 800acec:	d02b      	beq.n	800ad46 <__ssputs_r+0x76>
 800acee:	6965      	ldr	r5, [r4, #20]
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	6909      	ldr	r1, [r1, #16]
 800acf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf8:	eba3 0901 	sub.w	r9, r3, r1
 800acfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad00:	1c7b      	adds	r3, r7, #1
 800ad02:	106d      	asrs	r5, r5, #1
 800ad04:	444b      	add	r3, r9
 800ad06:	42ab      	cmp	r3, r5
 800ad08:	462a      	mov	r2, r5
 800ad0a:	bf84      	itt	hi
 800ad0c:	461d      	movhi	r5, r3
 800ad0e:	462a      	movhi	r2, r5
 800ad10:	0543      	lsls	r3, r0, #21
 800ad12:	d527      	bpl.n	800ad64 <__ssputs_r+0x94>
 800ad14:	4611      	mov	r1, r2
 800ad16:	4650      	mov	r0, sl
 800ad18:	f7ff fed4 	bl	800aac4 <_malloc_r>
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	b358      	cbz	r0, 800ad78 <__ssputs_r+0xa8>
 800ad20:	6921      	ldr	r1, [r4, #16]
 800ad22:	464a      	mov	r2, r9
 800ad24:	f000 fb2a 	bl	800b37c <memcpy>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	6126      	str	r6, [r4, #16]
 800ad36:	6165      	str	r5, [r4, #20]
 800ad38:	444e      	add	r6, r9
 800ad3a:	eba5 0509 	sub.w	r5, r5, r9
 800ad3e:	6026      	str	r6, [r4, #0]
 800ad40:	60a5      	str	r5, [r4, #8]
 800ad42:	463e      	mov	r6, r7
 800ad44:	463b      	mov	r3, r7
 800ad46:	461f      	mov	r7, r3
 800ad48:	6820      	ldr	r0, [r4, #0]
 800ad4a:	463a      	mov	r2, r7
 800ad4c:	4641      	mov	r1, r8
 800ad4e:	f000 fad5 	bl	800b2fc <memmove>
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	1b9b      	subs	r3, r3, r6
 800ad56:	60a3      	str	r3, [r4, #8]
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	443b      	add	r3, r7
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	2000      	movs	r0, #0
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	4650      	mov	r0, sl
 800ad66:	f000 fb23 	bl	800b3b0 <_realloc_r>
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d1e1      	bne.n	800ad34 <__ssputs_r+0x64>
 800ad70:	6921      	ldr	r1, [r4, #16]
 800ad72:	4650      	mov	r0, sl
 800ad74:	f7ff fdee 	bl	800a954 <_free_r>
 800ad78:	230c      	movs	r3, #12
 800ad7a:	f8ca 3000 	str.w	r3, [sl]
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8a:	e7e9      	b.n	800ad60 <__ssputs_r+0x90>
 800ad8c:	463e      	mov	r6, r7
 800ad8e:	e7db      	b.n	800ad48 <__ssputs_r+0x78>

0800ad90 <_svfiprintf_r>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	4698      	mov	r8, r3
 800ad96:	898b      	ldrh	r3, [r1, #12]
 800ad98:	061b      	lsls	r3, r3, #24
 800ad9a:	b09d      	sub	sp, #116	@ 0x74
 800ad9c:	4607      	mov	r7, r0
 800ad9e:	460d      	mov	r5, r1
 800ada0:	4614      	mov	r4, r2
 800ada2:	d510      	bpl.n	800adc6 <_svfiprintf_r+0x36>
 800ada4:	690b      	ldr	r3, [r1, #16]
 800ada6:	b973      	cbnz	r3, 800adc6 <_svfiprintf_r+0x36>
 800ada8:	2140      	movs	r1, #64	@ 0x40
 800adaa:	f7ff fe8b 	bl	800aac4 <_malloc_r>
 800adae:	6028      	str	r0, [r5, #0]
 800adb0:	6128      	str	r0, [r5, #16]
 800adb2:	b930      	cbnz	r0, 800adc2 <_svfiprintf_r+0x32>
 800adb4:	230c      	movs	r3, #12
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295
 800adbc:	b01d      	add	sp, #116	@ 0x74
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc2:	2340      	movs	r3, #64	@ 0x40
 800adc4:	616b      	str	r3, [r5, #20]
 800adc6:	2300      	movs	r3, #0
 800adc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800adca:	2320      	movs	r3, #32
 800adcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800add0:	f8cd 800c 	str.w	r8, [sp, #12]
 800add4:	2330      	movs	r3, #48	@ 0x30
 800add6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af74 <_svfiprintf_r+0x1e4>
 800adda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adde:	f04f 0901 	mov.w	r9, #1
 800ade2:	4623      	mov	r3, r4
 800ade4:	469a      	mov	sl, r3
 800ade6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adea:	b10a      	cbz	r2, 800adf0 <_svfiprintf_r+0x60>
 800adec:	2a25      	cmp	r2, #37	@ 0x25
 800adee:	d1f9      	bne.n	800ade4 <_svfiprintf_r+0x54>
 800adf0:	ebba 0b04 	subs.w	fp, sl, r4
 800adf4:	d00b      	beq.n	800ae0e <_svfiprintf_r+0x7e>
 800adf6:	465b      	mov	r3, fp
 800adf8:	4622      	mov	r2, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7ff ff67 	bl	800acd0 <__ssputs_r>
 800ae02:	3001      	adds	r0, #1
 800ae04:	f000 80a7 	beq.w	800af56 <_svfiprintf_r+0x1c6>
 800ae08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae0a:	445a      	add	r2, fp
 800ae0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 809f 	beq.w	800af56 <_svfiprintf_r+0x1c6>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae22:	f10a 0a01 	add.w	sl, sl, #1
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae30:	4654      	mov	r4, sl
 800ae32:	2205      	movs	r2, #5
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	484e      	ldr	r0, [pc, #312]	@ (800af74 <_svfiprintf_r+0x1e4>)
 800ae3a:	f7f5 f9c1 	bl	80001c0 <memchr>
 800ae3e:	9a04      	ldr	r2, [sp, #16]
 800ae40:	b9d8      	cbnz	r0, 800ae7a <_svfiprintf_r+0xea>
 800ae42:	06d0      	lsls	r0, r2, #27
 800ae44:	bf44      	itt	mi
 800ae46:	2320      	movmi	r3, #32
 800ae48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4c:	0711      	lsls	r1, r2, #28
 800ae4e:	bf44      	itt	mi
 800ae50:	232b      	movmi	r3, #43	@ 0x2b
 800ae52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae56:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae5c:	d015      	beq.n	800ae8a <_svfiprintf_r+0xfa>
 800ae5e:	9a07      	ldr	r2, [sp, #28]
 800ae60:	4654      	mov	r4, sl
 800ae62:	2000      	movs	r0, #0
 800ae64:	f04f 0c0a 	mov.w	ip, #10
 800ae68:	4621      	mov	r1, r4
 800ae6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6e:	3b30      	subs	r3, #48	@ 0x30
 800ae70:	2b09      	cmp	r3, #9
 800ae72:	d94b      	bls.n	800af0c <_svfiprintf_r+0x17c>
 800ae74:	b1b0      	cbz	r0, 800aea4 <_svfiprintf_r+0x114>
 800ae76:	9207      	str	r2, [sp, #28]
 800ae78:	e014      	b.n	800aea4 <_svfiprintf_r+0x114>
 800ae7a:	eba0 0308 	sub.w	r3, r0, r8
 800ae7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae82:	4313      	orrs	r3, r2
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	46a2      	mov	sl, r4
 800ae88:	e7d2      	b.n	800ae30 <_svfiprintf_r+0xa0>
 800ae8a:	9b03      	ldr	r3, [sp, #12]
 800ae8c:	1d19      	adds	r1, r3, #4
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	9103      	str	r1, [sp, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bfbb      	ittet	lt
 800ae96:	425b      	neglt	r3, r3
 800ae98:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9c:	9307      	strge	r3, [sp, #28]
 800ae9e:	9307      	strlt	r3, [sp, #28]
 800aea0:	bfb8      	it	lt
 800aea2:	9204      	strlt	r2, [sp, #16]
 800aea4:	7823      	ldrb	r3, [r4, #0]
 800aea6:	2b2e      	cmp	r3, #46	@ 0x2e
 800aea8:	d10a      	bne.n	800aec0 <_svfiprintf_r+0x130>
 800aeaa:	7863      	ldrb	r3, [r4, #1]
 800aeac:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeae:	d132      	bne.n	800af16 <_svfiprintf_r+0x186>
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	1d1a      	adds	r2, r3, #4
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	9203      	str	r2, [sp, #12]
 800aeb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aebc:	3402      	adds	r4, #2
 800aebe:	9305      	str	r3, [sp, #20]
 800aec0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af84 <_svfiprintf_r+0x1f4>
 800aec4:	7821      	ldrb	r1, [r4, #0]
 800aec6:	2203      	movs	r2, #3
 800aec8:	4650      	mov	r0, sl
 800aeca:	f7f5 f979 	bl	80001c0 <memchr>
 800aece:	b138      	cbz	r0, 800aee0 <_svfiprintf_r+0x150>
 800aed0:	9b04      	ldr	r3, [sp, #16]
 800aed2:	eba0 000a 	sub.w	r0, r0, sl
 800aed6:	2240      	movs	r2, #64	@ 0x40
 800aed8:	4082      	lsls	r2, r0
 800aeda:	4313      	orrs	r3, r2
 800aedc:	3401      	adds	r4, #1
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee4:	4824      	ldr	r0, [pc, #144]	@ (800af78 <_svfiprintf_r+0x1e8>)
 800aee6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeea:	2206      	movs	r2, #6
 800aeec:	f7f5 f968 	bl	80001c0 <memchr>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d036      	beq.n	800af62 <_svfiprintf_r+0x1d2>
 800aef4:	4b21      	ldr	r3, [pc, #132]	@ (800af7c <_svfiprintf_r+0x1ec>)
 800aef6:	bb1b      	cbnz	r3, 800af40 <_svfiprintf_r+0x1b0>
 800aef8:	9b03      	ldr	r3, [sp, #12]
 800aefa:	3307      	adds	r3, #7
 800aefc:	f023 0307 	bic.w	r3, r3, #7
 800af00:	3308      	adds	r3, #8
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af06:	4433      	add	r3, r6
 800af08:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0a:	e76a      	b.n	800ade2 <_svfiprintf_r+0x52>
 800af0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af10:	460c      	mov	r4, r1
 800af12:	2001      	movs	r0, #1
 800af14:	e7a8      	b.n	800ae68 <_svfiprintf_r+0xd8>
 800af16:	2300      	movs	r3, #0
 800af18:	3401      	adds	r4, #1
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	4619      	mov	r1, r3
 800af1e:	f04f 0c0a 	mov.w	ip, #10
 800af22:	4620      	mov	r0, r4
 800af24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af28:	3a30      	subs	r2, #48	@ 0x30
 800af2a:	2a09      	cmp	r2, #9
 800af2c:	d903      	bls.n	800af36 <_svfiprintf_r+0x1a6>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0c6      	beq.n	800aec0 <_svfiprintf_r+0x130>
 800af32:	9105      	str	r1, [sp, #20]
 800af34:	e7c4      	b.n	800aec0 <_svfiprintf_r+0x130>
 800af36:	fb0c 2101 	mla	r1, ip, r1, r2
 800af3a:	4604      	mov	r4, r0
 800af3c:	2301      	movs	r3, #1
 800af3e:	e7f0      	b.n	800af22 <_svfiprintf_r+0x192>
 800af40:	ab03      	add	r3, sp, #12
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	462a      	mov	r2, r5
 800af46:	4b0e      	ldr	r3, [pc, #56]	@ (800af80 <_svfiprintf_r+0x1f0>)
 800af48:	a904      	add	r1, sp, #16
 800af4a:	4638      	mov	r0, r7
 800af4c:	f3af 8000 	nop.w
 800af50:	1c42      	adds	r2, r0, #1
 800af52:	4606      	mov	r6, r0
 800af54:	d1d6      	bne.n	800af04 <_svfiprintf_r+0x174>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	065b      	lsls	r3, r3, #25
 800af5a:	f53f af2d 	bmi.w	800adb8 <_svfiprintf_r+0x28>
 800af5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af60:	e72c      	b.n	800adbc <_svfiprintf_r+0x2c>
 800af62:	ab03      	add	r3, sp, #12
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	462a      	mov	r2, r5
 800af68:	4b05      	ldr	r3, [pc, #20]	@ (800af80 <_svfiprintf_r+0x1f0>)
 800af6a:	a904      	add	r1, sp, #16
 800af6c:	4638      	mov	r0, r7
 800af6e:	f000 f879 	bl	800b064 <_printf_i>
 800af72:	e7ed      	b.n	800af50 <_svfiprintf_r+0x1c0>
 800af74:	0800d602 	.word	0x0800d602
 800af78:	0800d60c 	.word	0x0800d60c
 800af7c:	00000000 	.word	0x00000000
 800af80:	0800acd1 	.word	0x0800acd1
 800af84:	0800d608 	.word	0x0800d608

0800af88 <_printf_common>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	4616      	mov	r6, r2
 800af8e:	4698      	mov	r8, r3
 800af90:	688a      	ldr	r2, [r1, #8]
 800af92:	690b      	ldr	r3, [r1, #16]
 800af94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af98:	4293      	cmp	r3, r2
 800af9a:	bfb8      	it	lt
 800af9c:	4613      	movlt	r3, r2
 800af9e:	6033      	str	r3, [r6, #0]
 800afa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afa4:	4607      	mov	r7, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b10a      	cbz	r2, 800afae <_printf_common+0x26>
 800afaa:	3301      	adds	r3, #1
 800afac:	6033      	str	r3, [r6, #0]
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	0699      	lsls	r1, r3, #26
 800afb2:	bf42      	ittt	mi
 800afb4:	6833      	ldrmi	r3, [r6, #0]
 800afb6:	3302      	addmi	r3, #2
 800afb8:	6033      	strmi	r3, [r6, #0]
 800afba:	6825      	ldr	r5, [r4, #0]
 800afbc:	f015 0506 	ands.w	r5, r5, #6
 800afc0:	d106      	bne.n	800afd0 <_printf_common+0x48>
 800afc2:	f104 0a19 	add.w	sl, r4, #25
 800afc6:	68e3      	ldr	r3, [r4, #12]
 800afc8:	6832      	ldr	r2, [r6, #0]
 800afca:	1a9b      	subs	r3, r3, r2
 800afcc:	42ab      	cmp	r3, r5
 800afce:	dc26      	bgt.n	800b01e <_printf_common+0x96>
 800afd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	3b00      	subs	r3, #0
 800afd8:	bf18      	it	ne
 800afda:	2301      	movne	r3, #1
 800afdc:	0692      	lsls	r2, r2, #26
 800afde:	d42b      	bmi.n	800b038 <_printf_common+0xb0>
 800afe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afe4:	4641      	mov	r1, r8
 800afe6:	4638      	mov	r0, r7
 800afe8:	47c8      	blx	r9
 800afea:	3001      	adds	r0, #1
 800afec:	d01e      	beq.n	800b02c <_printf_common+0xa4>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	6922      	ldr	r2, [r4, #16]
 800aff2:	f003 0306 	and.w	r3, r3, #6
 800aff6:	2b04      	cmp	r3, #4
 800aff8:	bf02      	ittt	eq
 800affa:	68e5      	ldreq	r5, [r4, #12]
 800affc:	6833      	ldreq	r3, [r6, #0]
 800affe:	1aed      	subeq	r5, r5, r3
 800b000:	68a3      	ldr	r3, [r4, #8]
 800b002:	bf0c      	ite	eq
 800b004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b008:	2500      	movne	r5, #0
 800b00a:	4293      	cmp	r3, r2
 800b00c:	bfc4      	itt	gt
 800b00e:	1a9b      	subgt	r3, r3, r2
 800b010:	18ed      	addgt	r5, r5, r3
 800b012:	2600      	movs	r6, #0
 800b014:	341a      	adds	r4, #26
 800b016:	42b5      	cmp	r5, r6
 800b018:	d11a      	bne.n	800b050 <_printf_common+0xc8>
 800b01a:	2000      	movs	r0, #0
 800b01c:	e008      	b.n	800b030 <_printf_common+0xa8>
 800b01e:	2301      	movs	r3, #1
 800b020:	4652      	mov	r2, sl
 800b022:	4641      	mov	r1, r8
 800b024:	4638      	mov	r0, r7
 800b026:	47c8      	blx	r9
 800b028:	3001      	adds	r0, #1
 800b02a:	d103      	bne.n	800b034 <_printf_common+0xac>
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b034:	3501      	adds	r5, #1
 800b036:	e7c6      	b.n	800afc6 <_printf_common+0x3e>
 800b038:	18e1      	adds	r1, r4, r3
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	2030      	movs	r0, #48	@ 0x30
 800b03e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b042:	4422      	add	r2, r4
 800b044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b04c:	3302      	adds	r3, #2
 800b04e:	e7c7      	b.n	800afe0 <_printf_common+0x58>
 800b050:	2301      	movs	r3, #1
 800b052:	4622      	mov	r2, r4
 800b054:	4641      	mov	r1, r8
 800b056:	4638      	mov	r0, r7
 800b058:	47c8      	blx	r9
 800b05a:	3001      	adds	r0, #1
 800b05c:	d0e6      	beq.n	800b02c <_printf_common+0xa4>
 800b05e:	3601      	adds	r6, #1
 800b060:	e7d9      	b.n	800b016 <_printf_common+0x8e>
	...

0800b064 <_printf_i>:
 800b064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b068:	7e0f      	ldrb	r7, [r1, #24]
 800b06a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b06c:	2f78      	cmp	r7, #120	@ 0x78
 800b06e:	4691      	mov	r9, r2
 800b070:	4680      	mov	r8, r0
 800b072:	460c      	mov	r4, r1
 800b074:	469a      	mov	sl, r3
 800b076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b07a:	d807      	bhi.n	800b08c <_printf_i+0x28>
 800b07c:	2f62      	cmp	r7, #98	@ 0x62
 800b07e:	d80a      	bhi.n	800b096 <_printf_i+0x32>
 800b080:	2f00      	cmp	r7, #0
 800b082:	f000 80d2 	beq.w	800b22a <_printf_i+0x1c6>
 800b086:	2f58      	cmp	r7, #88	@ 0x58
 800b088:	f000 80b7 	beq.w	800b1fa <_printf_i+0x196>
 800b08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b094:	e03a      	b.n	800b10c <_printf_i+0xa8>
 800b096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b09a:	2b15      	cmp	r3, #21
 800b09c:	d8f6      	bhi.n	800b08c <_printf_i+0x28>
 800b09e:	a101      	add	r1, pc, #4	@ (adr r1, 800b0a4 <_printf_i+0x40>)
 800b0a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a4:	0800b0fd 	.word	0x0800b0fd
 800b0a8:	0800b111 	.word	0x0800b111
 800b0ac:	0800b08d 	.word	0x0800b08d
 800b0b0:	0800b08d 	.word	0x0800b08d
 800b0b4:	0800b08d 	.word	0x0800b08d
 800b0b8:	0800b08d 	.word	0x0800b08d
 800b0bc:	0800b111 	.word	0x0800b111
 800b0c0:	0800b08d 	.word	0x0800b08d
 800b0c4:	0800b08d 	.word	0x0800b08d
 800b0c8:	0800b08d 	.word	0x0800b08d
 800b0cc:	0800b08d 	.word	0x0800b08d
 800b0d0:	0800b211 	.word	0x0800b211
 800b0d4:	0800b13b 	.word	0x0800b13b
 800b0d8:	0800b1c7 	.word	0x0800b1c7
 800b0dc:	0800b08d 	.word	0x0800b08d
 800b0e0:	0800b08d 	.word	0x0800b08d
 800b0e4:	0800b233 	.word	0x0800b233
 800b0e8:	0800b08d 	.word	0x0800b08d
 800b0ec:	0800b13b 	.word	0x0800b13b
 800b0f0:	0800b08d 	.word	0x0800b08d
 800b0f4:	0800b08d 	.word	0x0800b08d
 800b0f8:	0800b1cf 	.word	0x0800b1cf
 800b0fc:	6833      	ldr	r3, [r6, #0]
 800b0fe:	1d1a      	adds	r2, r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6032      	str	r2, [r6, #0]
 800b104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b10c:	2301      	movs	r3, #1
 800b10e:	e09d      	b.n	800b24c <_printf_i+0x1e8>
 800b110:	6833      	ldr	r3, [r6, #0]
 800b112:	6820      	ldr	r0, [r4, #0]
 800b114:	1d19      	adds	r1, r3, #4
 800b116:	6031      	str	r1, [r6, #0]
 800b118:	0606      	lsls	r6, r0, #24
 800b11a:	d501      	bpl.n	800b120 <_printf_i+0xbc>
 800b11c:	681d      	ldr	r5, [r3, #0]
 800b11e:	e003      	b.n	800b128 <_printf_i+0xc4>
 800b120:	0645      	lsls	r5, r0, #25
 800b122:	d5fb      	bpl.n	800b11c <_printf_i+0xb8>
 800b124:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b128:	2d00      	cmp	r5, #0
 800b12a:	da03      	bge.n	800b134 <_printf_i+0xd0>
 800b12c:	232d      	movs	r3, #45	@ 0x2d
 800b12e:	426d      	negs	r5, r5
 800b130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b134:	4859      	ldr	r0, [pc, #356]	@ (800b29c <_printf_i+0x238>)
 800b136:	230a      	movs	r3, #10
 800b138:	e010      	b.n	800b15c <_printf_i+0xf8>
 800b13a:	6821      	ldr	r1, [r4, #0]
 800b13c:	6833      	ldr	r3, [r6, #0]
 800b13e:	0608      	lsls	r0, r1, #24
 800b140:	f853 5b04 	ldr.w	r5, [r3], #4
 800b144:	d402      	bmi.n	800b14c <_printf_i+0xe8>
 800b146:	0649      	lsls	r1, r1, #25
 800b148:	bf48      	it	mi
 800b14a:	b2ad      	uxthmi	r5, r5
 800b14c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b14e:	4853      	ldr	r0, [pc, #332]	@ (800b29c <_printf_i+0x238>)
 800b150:	6033      	str	r3, [r6, #0]
 800b152:	d159      	bne.n	800b208 <_printf_i+0x1a4>
 800b154:	2308      	movs	r3, #8
 800b156:	2100      	movs	r1, #0
 800b158:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b15c:	6866      	ldr	r6, [r4, #4]
 800b15e:	60a6      	str	r6, [r4, #8]
 800b160:	2e00      	cmp	r6, #0
 800b162:	db05      	blt.n	800b170 <_printf_i+0x10c>
 800b164:	6821      	ldr	r1, [r4, #0]
 800b166:	432e      	orrs	r6, r5
 800b168:	f021 0104 	bic.w	r1, r1, #4
 800b16c:	6021      	str	r1, [r4, #0]
 800b16e:	d04d      	beq.n	800b20c <_printf_i+0x1a8>
 800b170:	4616      	mov	r6, r2
 800b172:	fbb5 f1f3 	udiv	r1, r5, r3
 800b176:	fb03 5711 	mls	r7, r3, r1, r5
 800b17a:	5dc7      	ldrb	r7, [r0, r7]
 800b17c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b180:	462f      	mov	r7, r5
 800b182:	42bb      	cmp	r3, r7
 800b184:	460d      	mov	r5, r1
 800b186:	d9f4      	bls.n	800b172 <_printf_i+0x10e>
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d10b      	bne.n	800b1a4 <_printf_i+0x140>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	07df      	lsls	r7, r3, #31
 800b190:	d508      	bpl.n	800b1a4 <_printf_i+0x140>
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	6861      	ldr	r1, [r4, #4]
 800b196:	4299      	cmp	r1, r3
 800b198:	bfde      	ittt	le
 800b19a:	2330      	movle	r3, #48	@ 0x30
 800b19c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1a4:	1b92      	subs	r2, r2, r6
 800b1a6:	6122      	str	r2, [r4, #16]
 800b1a8:	f8cd a000 	str.w	sl, [sp]
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	aa03      	add	r2, sp, #12
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	f7ff fee8 	bl	800af88 <_printf_common>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d14c      	bne.n	800b256 <_printf_i+0x1f2>
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	b004      	add	sp, #16
 800b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	f043 0320 	orr.w	r3, r3, #32
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	4834      	ldr	r0, [pc, #208]	@ (800b2a0 <_printf_i+0x23c>)
 800b1d0:	2778      	movs	r7, #120	@ 0x78
 800b1d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	6831      	ldr	r1, [r6, #0]
 800b1da:	061f      	lsls	r7, r3, #24
 800b1dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1e0:	d402      	bmi.n	800b1e8 <_printf_i+0x184>
 800b1e2:	065f      	lsls	r7, r3, #25
 800b1e4:	bf48      	it	mi
 800b1e6:	b2ad      	uxthmi	r5, r5
 800b1e8:	6031      	str	r1, [r6, #0]
 800b1ea:	07d9      	lsls	r1, r3, #31
 800b1ec:	bf44      	itt	mi
 800b1ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b1f2:	6023      	strmi	r3, [r4, #0]
 800b1f4:	b11d      	cbz	r5, 800b1fe <_printf_i+0x19a>
 800b1f6:	2310      	movs	r3, #16
 800b1f8:	e7ad      	b.n	800b156 <_printf_i+0xf2>
 800b1fa:	4828      	ldr	r0, [pc, #160]	@ (800b29c <_printf_i+0x238>)
 800b1fc:	e7e9      	b.n	800b1d2 <_printf_i+0x16e>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	f023 0320 	bic.w	r3, r3, #32
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	e7f6      	b.n	800b1f6 <_printf_i+0x192>
 800b208:	230a      	movs	r3, #10
 800b20a:	e7a4      	b.n	800b156 <_printf_i+0xf2>
 800b20c:	4616      	mov	r6, r2
 800b20e:	e7bb      	b.n	800b188 <_printf_i+0x124>
 800b210:	6833      	ldr	r3, [r6, #0]
 800b212:	6825      	ldr	r5, [r4, #0]
 800b214:	6961      	ldr	r1, [r4, #20]
 800b216:	1d18      	adds	r0, r3, #4
 800b218:	6030      	str	r0, [r6, #0]
 800b21a:	062e      	lsls	r6, r5, #24
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	d501      	bpl.n	800b224 <_printf_i+0x1c0>
 800b220:	6019      	str	r1, [r3, #0]
 800b222:	e002      	b.n	800b22a <_printf_i+0x1c6>
 800b224:	0668      	lsls	r0, r5, #25
 800b226:	d5fb      	bpl.n	800b220 <_printf_i+0x1bc>
 800b228:	8019      	strh	r1, [r3, #0]
 800b22a:	2300      	movs	r3, #0
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	4616      	mov	r6, r2
 800b230:	e7ba      	b.n	800b1a8 <_printf_i+0x144>
 800b232:	6833      	ldr	r3, [r6, #0]
 800b234:	1d1a      	adds	r2, r3, #4
 800b236:	6032      	str	r2, [r6, #0]
 800b238:	681e      	ldr	r6, [r3, #0]
 800b23a:	6862      	ldr	r2, [r4, #4]
 800b23c:	2100      	movs	r1, #0
 800b23e:	4630      	mov	r0, r6
 800b240:	f7f4 ffbe 	bl	80001c0 <memchr>
 800b244:	b108      	cbz	r0, 800b24a <_printf_i+0x1e6>
 800b246:	1b80      	subs	r0, r0, r6
 800b248:	6060      	str	r0, [r4, #4]
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	2300      	movs	r3, #0
 800b250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b254:	e7a8      	b.n	800b1a8 <_printf_i+0x144>
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	4632      	mov	r2, r6
 800b25a:	4649      	mov	r1, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	47d0      	blx	sl
 800b260:	3001      	adds	r0, #1
 800b262:	d0ab      	beq.n	800b1bc <_printf_i+0x158>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	079b      	lsls	r3, r3, #30
 800b268:	d413      	bmi.n	800b292 <_printf_i+0x22e>
 800b26a:	68e0      	ldr	r0, [r4, #12]
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	4298      	cmp	r0, r3
 800b270:	bfb8      	it	lt
 800b272:	4618      	movlt	r0, r3
 800b274:	e7a4      	b.n	800b1c0 <_printf_i+0x15c>
 800b276:	2301      	movs	r3, #1
 800b278:	4632      	mov	r2, r6
 800b27a:	4649      	mov	r1, r9
 800b27c:	4640      	mov	r0, r8
 800b27e:	47d0      	blx	sl
 800b280:	3001      	adds	r0, #1
 800b282:	d09b      	beq.n	800b1bc <_printf_i+0x158>
 800b284:	3501      	adds	r5, #1
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	9903      	ldr	r1, [sp, #12]
 800b28a:	1a5b      	subs	r3, r3, r1
 800b28c:	42ab      	cmp	r3, r5
 800b28e:	dcf2      	bgt.n	800b276 <_printf_i+0x212>
 800b290:	e7eb      	b.n	800b26a <_printf_i+0x206>
 800b292:	2500      	movs	r5, #0
 800b294:	f104 0619 	add.w	r6, r4, #25
 800b298:	e7f5      	b.n	800b286 <_printf_i+0x222>
 800b29a:	bf00      	nop
 800b29c:	0800d613 	.word	0x0800d613
 800b2a0:	0800d624 	.word	0x0800d624

0800b2a4 <siscanf>:
 800b2a4:	b40e      	push	{r1, r2, r3}
 800b2a6:	b570      	push	{r4, r5, r6, lr}
 800b2a8:	b09d      	sub	sp, #116	@ 0x74
 800b2aa:	ac21      	add	r4, sp, #132	@ 0x84
 800b2ac:	2500      	movs	r5, #0
 800b2ae:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b2b2:	f854 6b04 	ldr.w	r6, [r4], #4
 800b2b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b2ba:	951b      	str	r5, [sp, #108]	@ 0x6c
 800b2bc:	9002      	str	r0, [sp, #8]
 800b2be:	9006      	str	r0, [sp, #24]
 800b2c0:	f7f4 ff70 	bl	80001a4 <strlen>
 800b2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f4 <siscanf+0x50>)
 800b2c6:	9003      	str	r0, [sp, #12]
 800b2c8:	9007      	str	r0, [sp, #28]
 800b2ca:	480b      	ldr	r0, [pc, #44]	@ (800b2f8 <siscanf+0x54>)
 800b2cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	4623      	mov	r3, r4
 800b2da:	a902      	add	r1, sp, #8
 800b2dc:	6800      	ldr	r0, [r0, #0]
 800b2de:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b2e0:	9514      	str	r5, [sp, #80]	@ 0x50
 800b2e2:	9401      	str	r4, [sp, #4]
 800b2e4:	f000 f8ec 	bl	800b4c0 <__ssvfiscanf_r>
 800b2e8:	b01d      	add	sp, #116	@ 0x74
 800b2ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2ee:	b003      	add	sp, #12
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	08009dd9 	.word	0x08009dd9
 800b2f8:	200001cc 	.word	0x200001cc

0800b2fc <memmove>:
 800b2fc:	4288      	cmp	r0, r1
 800b2fe:	b510      	push	{r4, lr}
 800b300:	eb01 0402 	add.w	r4, r1, r2
 800b304:	d902      	bls.n	800b30c <memmove+0x10>
 800b306:	4284      	cmp	r4, r0
 800b308:	4623      	mov	r3, r4
 800b30a:	d807      	bhi.n	800b31c <memmove+0x20>
 800b30c:	1e43      	subs	r3, r0, #1
 800b30e:	42a1      	cmp	r1, r4
 800b310:	d007      	beq.n	800b322 <memmove+0x26>
 800b312:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b31a:	e7f8      	b.n	800b30e <memmove+0x12>
 800b31c:	4402      	add	r2, r0
 800b31e:	4282      	cmp	r2, r0
 800b320:	d100      	bne.n	800b324 <memmove+0x28>
 800b322:	bd10      	pop	{r4, pc}
 800b324:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b328:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b32c:	e7f7      	b.n	800b31e <memmove+0x22>

0800b32e <strncmp>:
 800b32e:	b510      	push	{r4, lr}
 800b330:	b16a      	cbz	r2, 800b34e <strncmp+0x20>
 800b332:	3901      	subs	r1, #1
 800b334:	1884      	adds	r4, r0, r2
 800b336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b33a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b33e:	429a      	cmp	r2, r3
 800b340:	d103      	bne.n	800b34a <strncmp+0x1c>
 800b342:	42a0      	cmp	r0, r4
 800b344:	d001      	beq.n	800b34a <strncmp+0x1c>
 800b346:	2a00      	cmp	r2, #0
 800b348:	d1f5      	bne.n	800b336 <strncmp+0x8>
 800b34a:	1ad0      	subs	r0, r2, r3
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	4610      	mov	r0, r2
 800b350:	e7fc      	b.n	800b34c <strncmp+0x1e>
	...

0800b354 <__gettzinfo>:
 800b354:	4800      	ldr	r0, [pc, #0]	@ (800b358 <__gettzinfo+0x4>)
 800b356:	4770      	bx	lr
 800b358:	20000220 	.word	0x20000220

0800b35c <_sbrk_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4d06      	ldr	r5, [pc, #24]	@ (800b378 <_sbrk_r+0x1c>)
 800b360:	2300      	movs	r3, #0
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	602b      	str	r3, [r5, #0]
 800b368:	f7fd f93c 	bl	80085e4 <_sbrk>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d102      	bne.n	800b376 <_sbrk_r+0x1a>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	b103      	cbz	r3, 800b376 <_sbrk_r+0x1a>
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	bd38      	pop	{r3, r4, r5, pc}
 800b378:	2000284c 	.word	0x2000284c

0800b37c <memcpy>:
 800b37c:	440a      	add	r2, r1
 800b37e:	4291      	cmp	r1, r2
 800b380:	f100 33ff 	add.w	r3, r0, #4294967295
 800b384:	d100      	bne.n	800b388 <memcpy+0xc>
 800b386:	4770      	bx	lr
 800b388:	b510      	push	{r4, lr}
 800b38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b392:	4291      	cmp	r1, r2
 800b394:	d1f9      	bne.n	800b38a <memcpy+0xe>
 800b396:	bd10      	pop	{r4, pc}

0800b398 <__env_lock>:
 800b398:	4801      	ldr	r0, [pc, #4]	@ (800b3a0 <__env_lock+0x8>)
 800b39a:	f7ff bac8 	b.w	800a92e <__retarget_lock_acquire_recursive>
 800b39e:	bf00      	nop
 800b3a0:	20002851 	.word	0x20002851

0800b3a4 <__env_unlock>:
 800b3a4:	4801      	ldr	r0, [pc, #4]	@ (800b3ac <__env_unlock+0x8>)
 800b3a6:	f7ff bac4 	b.w	800a932 <__retarget_lock_release_recursive>
 800b3aa:	bf00      	nop
 800b3ac:	20002851 	.word	0x20002851

0800b3b0 <_realloc_r>:
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	4614      	mov	r4, r2
 800b3b8:	460d      	mov	r5, r1
 800b3ba:	b921      	cbnz	r1, 800b3c6 <_realloc_r+0x16>
 800b3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	f7ff bb7f 	b.w	800aac4 <_malloc_r>
 800b3c6:	b92a      	cbnz	r2, 800b3d4 <_realloc_r+0x24>
 800b3c8:	f7ff fac4 	bl	800a954 <_free_r>
 800b3cc:	4625      	mov	r5, r4
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d4:	f000 fbb1 	bl	800bb3a <_malloc_usable_size_r>
 800b3d8:	4284      	cmp	r4, r0
 800b3da:	4606      	mov	r6, r0
 800b3dc:	d802      	bhi.n	800b3e4 <_realloc_r+0x34>
 800b3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3e2:	d8f4      	bhi.n	800b3ce <_realloc_r+0x1e>
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff fb6c 	bl	800aac4 <_malloc_r>
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	b908      	cbnz	r0, 800b3f4 <_realloc_r+0x44>
 800b3f0:	4645      	mov	r5, r8
 800b3f2:	e7ec      	b.n	800b3ce <_realloc_r+0x1e>
 800b3f4:	42b4      	cmp	r4, r6
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	bf28      	it	cs
 800b3fc:	4632      	movcs	r2, r6
 800b3fe:	f7ff ffbd 	bl	800b37c <memcpy>
 800b402:	4629      	mov	r1, r5
 800b404:	4638      	mov	r0, r7
 800b406:	f7ff faa5 	bl	800a954 <_free_r>
 800b40a:	e7f1      	b.n	800b3f0 <_realloc_r+0x40>

0800b40c <_sungetc_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	1c4b      	adds	r3, r1, #1
 800b410:	4614      	mov	r4, r2
 800b412:	d103      	bne.n	800b41c <_sungetc_r+0x10>
 800b414:	f04f 35ff 	mov.w	r5, #4294967295
 800b418:	4628      	mov	r0, r5
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	8993      	ldrh	r3, [r2, #12]
 800b41e:	f023 0320 	bic.w	r3, r3, #32
 800b422:	8193      	strh	r3, [r2, #12]
 800b424:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b426:	6852      	ldr	r2, [r2, #4]
 800b428:	b2cd      	uxtb	r5, r1
 800b42a:	b18b      	cbz	r3, 800b450 <_sungetc_r+0x44>
 800b42c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b42e:	4293      	cmp	r3, r2
 800b430:	dd08      	ble.n	800b444 <_sungetc_r+0x38>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	1e5a      	subs	r2, r3, #1
 800b436:	6022      	str	r2, [r4, #0]
 800b438:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b43c:	6863      	ldr	r3, [r4, #4]
 800b43e:	3301      	adds	r3, #1
 800b440:	6063      	str	r3, [r4, #4]
 800b442:	e7e9      	b.n	800b418 <_sungetc_r+0xc>
 800b444:	4621      	mov	r1, r4
 800b446:	f000 fb3e 	bl	800bac6 <__submore>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d0f1      	beq.n	800b432 <_sungetc_r+0x26>
 800b44e:	e7e1      	b.n	800b414 <_sungetc_r+0x8>
 800b450:	6921      	ldr	r1, [r4, #16]
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	b151      	cbz	r1, 800b46c <_sungetc_r+0x60>
 800b456:	4299      	cmp	r1, r3
 800b458:	d208      	bcs.n	800b46c <_sungetc_r+0x60>
 800b45a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b45e:	42a9      	cmp	r1, r5
 800b460:	d104      	bne.n	800b46c <_sungetc_r+0x60>
 800b462:	3b01      	subs	r3, #1
 800b464:	3201      	adds	r2, #1
 800b466:	6023      	str	r3, [r4, #0]
 800b468:	6062      	str	r2, [r4, #4]
 800b46a:	e7d5      	b.n	800b418 <_sungetc_r+0xc>
 800b46c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800b470:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b474:	6363      	str	r3, [r4, #52]	@ 0x34
 800b476:	2303      	movs	r3, #3
 800b478:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b47a:	4623      	mov	r3, r4
 800b47c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	2301      	movs	r3, #1
 800b484:	e7dc      	b.n	800b440 <_sungetc_r+0x34>

0800b486 <__ssrefill_r>:
 800b486:	b510      	push	{r4, lr}
 800b488:	460c      	mov	r4, r1
 800b48a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b48c:	b169      	cbz	r1, 800b4aa <__ssrefill_r+0x24>
 800b48e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b492:	4299      	cmp	r1, r3
 800b494:	d001      	beq.n	800b49a <__ssrefill_r+0x14>
 800b496:	f7ff fa5d 	bl	800a954 <_free_r>
 800b49a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	2000      	movs	r0, #0
 800b4a0:	6360      	str	r0, [r4, #52]	@ 0x34
 800b4a2:	b113      	cbz	r3, 800b4aa <__ssrefill_r+0x24>
 800b4a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b4a6:	6023      	str	r3, [r4, #0]
 800b4a8:	bd10      	pop	{r4, pc}
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	6063      	str	r3, [r4, #4]
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	f043 0320 	orr.w	r3, r3, #32
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b4be:	e7f3      	b.n	800b4a8 <__ssrefill_r+0x22>

0800b4c0 <__ssvfiscanf_r>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800b4c8:	ac41      	add	r4, sp, #260	@ 0x104
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	e9c4 1103 	strd	r1, r1, [r4, #12]
 800b4d2:	a901      	add	r1, sp, #4
 800b4d4:	6161      	str	r1, [r4, #20]
 800b4d6:	49af      	ldr	r1, [pc, #700]	@ (800b794 <__ssvfiscanf_r+0x2d4>)
 800b4d8:	f8c4 117c 	str.w	r1, [r4, #380]	@ 0x17c
 800b4dc:	f8df b2c4 	ldr.w	fp, [pc, #708]	@ 800b7a4 <__ssvfiscanf_r+0x2e4>
 800b4e0:	49ad      	ldr	r1, [pc, #692]	@ (800b798 <__ssvfiscanf_r+0x2d8>)
 800b4e2:	f8c4 1180 	str.w	r1, [r4, #384]	@ 0x180
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	46e8      	mov	r8, sp
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	f892 9000 	ldrb.w	r9, [r2]
 800b4f0:	f1b9 0f00 	cmp.w	r9, #0
 800b4f4:	f000 8160 	beq.w	800b7b8 <__ssvfiscanf_r+0x2f8>
 800b4f8:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800b4fc:	f013 0308 	ands.w	r3, r3, #8
 800b500:	f102 0601 	add.w	r6, r2, #1
 800b504:	d01b      	beq.n	800b53e <__ssvfiscanf_r+0x7e>
 800b506:	686b      	ldr	r3, [r5, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dd10      	ble.n	800b52e <__ssvfiscanf_r+0x6e>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	781a      	ldrb	r2, [r3, #0]
 800b510:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800b514:	0712      	lsls	r2, r2, #28
 800b516:	d401      	bmi.n	800b51c <__ssvfiscanf_r+0x5c>
 800b518:	4632      	mov	r2, r6
 800b51a:	e7e7      	b.n	800b4ec <__ssvfiscanf_r+0x2c>
 800b51c:	6922      	ldr	r2, [r4, #16]
 800b51e:	3201      	adds	r2, #1
 800b520:	6122      	str	r2, [r4, #16]
 800b522:	686a      	ldr	r2, [r5, #4]
 800b524:	3301      	adds	r3, #1
 800b526:	3a01      	subs	r2, #1
 800b528:	606a      	str	r2, [r5, #4]
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	e7eb      	b.n	800b506 <__ssvfiscanf_r+0x46>
 800b52e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b532:	4629      	mov	r1, r5
 800b534:	4638      	mov	r0, r7
 800b536:	4798      	blx	r3
 800b538:	2800      	cmp	r0, #0
 800b53a:	d0e7      	beq.n	800b50c <__ssvfiscanf_r+0x4c>
 800b53c:	e7ec      	b.n	800b518 <__ssvfiscanf_r+0x58>
 800b53e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800b542:	f040 8084 	bne.w	800b64e <__ssvfiscanf_r+0x18e>
 800b546:	6023      	str	r3, [r4, #0]
 800b548:	60a3      	str	r3, [r4, #8]
 800b54a:	7853      	ldrb	r3, [r2, #1]
 800b54c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b54e:	bf02      	ittt	eq
 800b550:	2310      	moveq	r3, #16
 800b552:	1c96      	addeq	r6, r2, #2
 800b554:	6023      	streq	r3, [r4, #0]
 800b556:	220a      	movs	r2, #10
 800b558:	46b2      	mov	sl, r6
 800b55a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b55e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b562:	2b09      	cmp	r3, #9
 800b564:	d91d      	bls.n	800b5a2 <__ssvfiscanf_r+0xe2>
 800b566:	4b8d      	ldr	r3, [pc, #564]	@ (800b79c <__ssvfiscanf_r+0x2dc>)
 800b568:	2203      	movs	r2, #3
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7f4 fe28 	bl	80001c0 <memchr>
 800b570:	b138      	cbz	r0, 800b582 <__ssvfiscanf_r+0xc2>
 800b572:	4b8a      	ldr	r3, [pc, #552]	@ (800b79c <__ssvfiscanf_r+0x2dc>)
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	1ac0      	subs	r0, r0, r3
 800b578:	2301      	movs	r3, #1
 800b57a:	4083      	lsls	r3, r0
 800b57c:	4313      	orrs	r3, r2
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	4656      	mov	r6, sl
 800b582:	f816 3b01 	ldrb.w	r3, [r6], #1
 800b586:	2b78      	cmp	r3, #120	@ 0x78
 800b588:	d806      	bhi.n	800b598 <__ssvfiscanf_r+0xd8>
 800b58a:	2b57      	cmp	r3, #87	@ 0x57
 800b58c:	d810      	bhi.n	800b5b0 <__ssvfiscanf_r+0xf0>
 800b58e:	2b25      	cmp	r3, #37	@ 0x25
 800b590:	d05d      	beq.n	800b64e <__ssvfiscanf_r+0x18e>
 800b592:	d857      	bhi.n	800b644 <__ssvfiscanf_r+0x184>
 800b594:	2b00      	cmp	r3, #0
 800b596:	d076      	beq.n	800b686 <__ssvfiscanf_r+0x1c6>
 800b598:	2303      	movs	r3, #3
 800b59a:	61a3      	str	r3, [r4, #24]
 800b59c:	230a      	movs	r3, #10
 800b59e:	6063      	str	r3, [r4, #4]
 800b5a0:	e089      	b.n	800b6b6 <__ssvfiscanf_r+0x1f6>
 800b5a2:	68a3      	ldr	r3, [r4, #8]
 800b5a4:	fb02 1103 	mla	r1, r2, r3, r1
 800b5a8:	3930      	subs	r1, #48	@ 0x30
 800b5aa:	60a1      	str	r1, [r4, #8]
 800b5ac:	4656      	mov	r6, sl
 800b5ae:	e7d3      	b.n	800b558 <__ssvfiscanf_r+0x98>
 800b5b0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b5b4:	2a20      	cmp	r2, #32
 800b5b6:	d8ef      	bhi.n	800b598 <__ssvfiscanf_r+0xd8>
 800b5b8:	a101      	add	r1, pc, #4	@ (adr r1, 800b5c0 <__ssvfiscanf_r+0x100>)
 800b5ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b5be:	bf00      	nop
 800b5c0:	0800b695 	.word	0x0800b695
 800b5c4:	0800b599 	.word	0x0800b599
 800b5c8:	0800b599 	.word	0x0800b599
 800b5cc:	0800b6f1 	.word	0x0800b6f1
 800b5d0:	0800b599 	.word	0x0800b599
 800b5d4:	0800b599 	.word	0x0800b599
 800b5d8:	0800b599 	.word	0x0800b599
 800b5dc:	0800b599 	.word	0x0800b599
 800b5e0:	0800b599 	.word	0x0800b599
 800b5e4:	0800b599 	.word	0x0800b599
 800b5e8:	0800b599 	.word	0x0800b599
 800b5ec:	0800b707 	.word	0x0800b707
 800b5f0:	0800b6ed 	.word	0x0800b6ed
 800b5f4:	0800b64b 	.word	0x0800b64b
 800b5f8:	0800b64b 	.word	0x0800b64b
 800b5fc:	0800b64b 	.word	0x0800b64b
 800b600:	0800b599 	.word	0x0800b599
 800b604:	0800b6a7 	.word	0x0800b6a7
 800b608:	0800b599 	.word	0x0800b599
 800b60c:	0800b599 	.word	0x0800b599
 800b610:	0800b599 	.word	0x0800b599
 800b614:	0800b599 	.word	0x0800b599
 800b618:	0800b717 	.word	0x0800b717
 800b61c:	0800b6af 	.word	0x0800b6af
 800b620:	0800b68d 	.word	0x0800b68d
 800b624:	0800b599 	.word	0x0800b599
 800b628:	0800b599 	.word	0x0800b599
 800b62c:	0800b713 	.word	0x0800b713
 800b630:	0800b599 	.word	0x0800b599
 800b634:	0800b6ed 	.word	0x0800b6ed
 800b638:	0800b599 	.word	0x0800b599
 800b63c:	0800b599 	.word	0x0800b599
 800b640:	0800b695 	.word	0x0800b695
 800b644:	3b45      	subs	r3, #69	@ 0x45
 800b646:	2b02      	cmp	r3, #2
 800b648:	d8a6      	bhi.n	800b598 <__ssvfiscanf_r+0xd8>
 800b64a:	2305      	movs	r3, #5
 800b64c:	e032      	b.n	800b6b4 <__ssvfiscanf_r+0x1f4>
 800b64e:	686b      	ldr	r3, [r5, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dd0d      	ble.n	800b670 <__ssvfiscanf_r+0x1b0>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	781a      	ldrb	r2, [r3, #0]
 800b658:	454a      	cmp	r2, r9
 800b65a:	f040 80ad 	bne.w	800b7b8 <__ssvfiscanf_r+0x2f8>
 800b65e:	3301      	adds	r3, #1
 800b660:	686a      	ldr	r2, [r5, #4]
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	3a01      	subs	r2, #1
 800b668:	3301      	adds	r3, #1
 800b66a:	606a      	str	r2, [r5, #4]
 800b66c:	6123      	str	r3, [r4, #16]
 800b66e:	e753      	b.n	800b518 <__ssvfiscanf_r+0x58>
 800b670:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b674:	4629      	mov	r1, r5
 800b676:	4638      	mov	r0, r7
 800b678:	4798      	blx	r3
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d0ea      	beq.n	800b654 <__ssvfiscanf_r+0x194>
 800b67e:	68e0      	ldr	r0, [r4, #12]
 800b680:	2800      	cmp	r0, #0
 800b682:	f040 8091 	bne.w	800b7a8 <__ssvfiscanf_r+0x2e8>
 800b686:	f04f 30ff 	mov.w	r0, #4294967295
 800b68a:	e091      	b.n	800b7b0 <__ssvfiscanf_r+0x2f0>
 800b68c:	6822      	ldr	r2, [r4, #0]
 800b68e:	f042 0220 	orr.w	r2, r2, #32
 800b692:	6022      	str	r2, [r4, #0]
 800b694:	6822      	ldr	r2, [r4, #0]
 800b696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b69a:	6022      	str	r2, [r4, #0]
 800b69c:	2210      	movs	r2, #16
 800b69e:	2b6e      	cmp	r3, #110	@ 0x6e
 800b6a0:	6062      	str	r2, [r4, #4]
 800b6a2:	d806      	bhi.n	800b6b2 <__ssvfiscanf_r+0x1f2>
 800b6a4:	e001      	b.n	800b6aa <__ssvfiscanf_r+0x1ea>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e002      	b.n	800b6b4 <__ssvfiscanf_r+0x1f4>
 800b6ae:	2308      	movs	r3, #8
 800b6b0:	6063      	str	r3, [r4, #4]
 800b6b2:	2304      	movs	r3, #4
 800b6b4:	61a3      	str	r3, [r4, #24]
 800b6b6:	686b      	ldr	r3, [r5, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	dd3c      	ble.n	800b736 <__ssvfiscanf_r+0x276>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	0659      	lsls	r1, r3, #25
 800b6c0:	d405      	bmi.n	800b6ce <__ssvfiscanf_r+0x20e>
 800b6c2:	682b      	ldr	r3, [r5, #0]
 800b6c4:	781a      	ldrb	r2, [r3, #0]
 800b6c6:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800b6ca:	0712      	lsls	r2, r2, #28
 800b6cc:	d43b      	bmi.n	800b746 <__ssvfiscanf_r+0x286>
 800b6ce:	69a3      	ldr	r3, [r4, #24]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	dc4b      	bgt.n	800b76c <__ssvfiscanf_r+0x2ac>
 800b6d4:	4643      	mov	r3, r8
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4621      	mov	r1, r4
 800b6da:	4638      	mov	r0, r7
 800b6dc:	f000 f86e 	bl	800b7bc <_scanf_chars>
 800b6e0:	2801      	cmp	r0, #1
 800b6e2:	d069      	beq.n	800b7b8 <__ssvfiscanf_r+0x2f8>
 800b6e4:	2802      	cmp	r0, #2
 800b6e6:	f47f af17 	bne.w	800b518 <__ssvfiscanf_r+0x58>
 800b6ea:	e7c8      	b.n	800b67e <__ssvfiscanf_r+0x1be>
 800b6ec:	220a      	movs	r2, #10
 800b6ee:	e7d6      	b.n	800b69e <__ssvfiscanf_r+0x1de>
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	a801      	add	r0, sp, #4
 800b6f4:	f000 f9ae 	bl	800ba54 <__sccl>
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6fe:	6023      	str	r3, [r4, #0]
 800b700:	4606      	mov	r6, r0
 800b702:	2301      	movs	r3, #1
 800b704:	e7d6      	b.n	800b6b4 <__ssvfiscanf_r+0x1f4>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	2300      	movs	r3, #0
 800b710:	e7d0      	b.n	800b6b4 <__ssvfiscanf_r+0x1f4>
 800b712:	2302      	movs	r3, #2
 800b714:	e7ce      	b.n	800b6b4 <__ssvfiscanf_r+0x1f4>
 800b716:	6820      	ldr	r0, [r4, #0]
 800b718:	06c3      	lsls	r3, r0, #27
 800b71a:	f53f aefd 	bmi.w	800b518 <__ssvfiscanf_r+0x58>
 800b71e:	f8d8 3000 	ldr.w	r3, [r8]
 800b722:	6922      	ldr	r2, [r4, #16]
 800b724:	1d19      	adds	r1, r3, #4
 800b726:	f8c8 1000 	str.w	r1, [r8]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	07c0      	lsls	r0, r0, #31
 800b72e:	bf4c      	ite	mi
 800b730:	801a      	strhmi	r2, [r3, #0]
 800b732:	601a      	strpl	r2, [r3, #0]
 800b734:	e6f0      	b.n	800b518 <__ssvfiscanf_r+0x58>
 800b736:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b73a:	4629      	mov	r1, r5
 800b73c:	4638      	mov	r0, r7
 800b73e:	4798      	blx	r3
 800b740:	2800      	cmp	r0, #0
 800b742:	d0bb      	beq.n	800b6bc <__ssvfiscanf_r+0x1fc>
 800b744:	e79b      	b.n	800b67e <__ssvfiscanf_r+0x1be>
 800b746:	6922      	ldr	r2, [r4, #16]
 800b748:	3201      	adds	r2, #1
 800b74a:	6122      	str	r2, [r4, #16]
 800b74c:	686a      	ldr	r2, [r5, #4]
 800b74e:	3a01      	subs	r2, #1
 800b750:	2a00      	cmp	r2, #0
 800b752:	606a      	str	r2, [r5, #4]
 800b754:	dd02      	ble.n	800b75c <__ssvfiscanf_r+0x29c>
 800b756:	3301      	adds	r3, #1
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	e7b2      	b.n	800b6c2 <__ssvfiscanf_r+0x202>
 800b75c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b760:	4629      	mov	r1, r5
 800b762:	4638      	mov	r0, r7
 800b764:	4798      	blx	r3
 800b766:	2800      	cmp	r0, #0
 800b768:	d0ab      	beq.n	800b6c2 <__ssvfiscanf_r+0x202>
 800b76a:	e788      	b.n	800b67e <__ssvfiscanf_r+0x1be>
 800b76c:	2b04      	cmp	r3, #4
 800b76e:	dc06      	bgt.n	800b77e <__ssvfiscanf_r+0x2be>
 800b770:	4643      	mov	r3, r8
 800b772:	462a      	mov	r2, r5
 800b774:	4621      	mov	r1, r4
 800b776:	4638      	mov	r0, r7
 800b778:	f000 f87a 	bl	800b870 <_scanf_i>
 800b77c:	e7b0      	b.n	800b6e0 <__ssvfiscanf_r+0x220>
 800b77e:	4b08      	ldr	r3, [pc, #32]	@ (800b7a0 <__ssvfiscanf_r+0x2e0>)
 800b780:	2b00      	cmp	r3, #0
 800b782:	f43f aec9 	beq.w	800b518 <__ssvfiscanf_r+0x58>
 800b786:	4643      	mov	r3, r8
 800b788:	462a      	mov	r2, r5
 800b78a:	4621      	mov	r1, r4
 800b78c:	4638      	mov	r0, r7
 800b78e:	f3af 8000 	nop.w
 800b792:	e7a5      	b.n	800b6e0 <__ssvfiscanf_r+0x220>
 800b794:	0800b40d 	.word	0x0800b40d
 800b798:	0800b487 	.word	0x0800b487
 800b79c:	0800d608 	.word	0x0800d608
 800b7a0:	00000000 	.word	0x00000000
 800b7a4:	0800d451 	.word	0x0800d451
 800b7a8:	89ab      	ldrh	r3, [r5, #12]
 800b7aa:	065b      	lsls	r3, r3, #25
 800b7ac:	f53f af6b 	bmi.w	800b686 <__ssvfiscanf_r+0x1c6>
 800b7b0:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b8:	68e0      	ldr	r0, [r4, #12]
 800b7ba:	e7f9      	b.n	800b7b0 <__ssvfiscanf_r+0x2f0>

0800b7bc <_scanf_chars>:
 800b7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c0:	4615      	mov	r5, r2
 800b7c2:	688a      	ldr	r2, [r1, #8]
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	b932      	cbnz	r2, 800b7d8 <_scanf_chars+0x1c>
 800b7ca:	698a      	ldr	r2, [r1, #24]
 800b7cc:	2a00      	cmp	r2, #0
 800b7ce:	bf14      	ite	ne
 800b7d0:	f04f 32ff 	movne.w	r2, #4294967295
 800b7d4:	2201      	moveq	r2, #1
 800b7d6:	608a      	str	r2, [r1, #8]
 800b7d8:	6822      	ldr	r2, [r4, #0]
 800b7da:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b86c <_scanf_chars+0xb0>
 800b7de:	06d1      	lsls	r1, r2, #27
 800b7e0:	bf5f      	itttt	pl
 800b7e2:	681a      	ldrpl	r2, [r3, #0]
 800b7e4:	1d11      	addpl	r1, r2, #4
 800b7e6:	6019      	strpl	r1, [r3, #0]
 800b7e8:	6816      	ldrpl	r6, [r2, #0]
 800b7ea:	2700      	movs	r7, #0
 800b7ec:	69a0      	ldr	r0, [r4, #24]
 800b7ee:	b188      	cbz	r0, 800b814 <_scanf_chars+0x58>
 800b7f0:	2801      	cmp	r0, #1
 800b7f2:	d107      	bne.n	800b804 <_scanf_chars+0x48>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	6963      	ldr	r3, [r4, #20]
 800b7fa:	5c9b      	ldrb	r3, [r3, r2]
 800b7fc:	b953      	cbnz	r3, 800b814 <_scanf_chars+0x58>
 800b7fe:	2f00      	cmp	r7, #0
 800b800:	d031      	beq.n	800b866 <_scanf_chars+0xaa>
 800b802:	e022      	b.n	800b84a <_scanf_chars+0x8e>
 800b804:	2802      	cmp	r0, #2
 800b806:	d120      	bne.n	800b84a <_scanf_chars+0x8e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b810:	071b      	lsls	r3, r3, #28
 800b812:	d41a      	bmi.n	800b84a <_scanf_chars+0x8e>
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	06da      	lsls	r2, r3, #27
 800b818:	bf5e      	ittt	pl
 800b81a:	682b      	ldrpl	r3, [r5, #0]
 800b81c:	781b      	ldrbpl	r3, [r3, #0]
 800b81e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b822:	682a      	ldr	r2, [r5, #0]
 800b824:	686b      	ldr	r3, [r5, #4]
 800b826:	3201      	adds	r2, #1
 800b828:	602a      	str	r2, [r5, #0]
 800b82a:	68a2      	ldr	r2, [r4, #8]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	3a01      	subs	r2, #1
 800b830:	606b      	str	r3, [r5, #4]
 800b832:	3701      	adds	r7, #1
 800b834:	60a2      	str	r2, [r4, #8]
 800b836:	b142      	cbz	r2, 800b84a <_scanf_chars+0x8e>
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dcd7      	bgt.n	800b7ec <_scanf_chars+0x30>
 800b83c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b840:	4629      	mov	r1, r5
 800b842:	4640      	mov	r0, r8
 800b844:	4798      	blx	r3
 800b846:	2800      	cmp	r0, #0
 800b848:	d0d0      	beq.n	800b7ec <_scanf_chars+0x30>
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	f013 0310 	ands.w	r3, r3, #16
 800b850:	d105      	bne.n	800b85e <_scanf_chars+0xa2>
 800b852:	68e2      	ldr	r2, [r4, #12]
 800b854:	3201      	adds	r2, #1
 800b856:	60e2      	str	r2, [r4, #12]
 800b858:	69a2      	ldr	r2, [r4, #24]
 800b85a:	b102      	cbz	r2, 800b85e <_scanf_chars+0xa2>
 800b85c:	7033      	strb	r3, [r6, #0]
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	443b      	add	r3, r7
 800b862:	6123      	str	r3, [r4, #16]
 800b864:	2000      	movs	r0, #0
 800b866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b86a:	bf00      	nop
 800b86c:	0800d451 	.word	0x0800d451

0800b870 <_scanf_i>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	4698      	mov	r8, r3
 800b876:	4b73      	ldr	r3, [pc, #460]	@ (800ba44 <_scanf_i+0x1d4>)
 800b878:	460c      	mov	r4, r1
 800b87a:	4682      	mov	sl, r0
 800b87c:	4616      	mov	r6, r2
 800b87e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b882:	b087      	sub	sp, #28
 800b884:	ab03      	add	r3, sp, #12
 800b886:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b88a:	4b6f      	ldr	r3, [pc, #444]	@ (800ba48 <_scanf_i+0x1d8>)
 800b88c:	69a1      	ldr	r1, [r4, #24]
 800b88e:	4a6f      	ldr	r2, [pc, #444]	@ (800ba4c <_scanf_i+0x1dc>)
 800b890:	2903      	cmp	r1, #3
 800b892:	bf08      	it	eq
 800b894:	461a      	moveq	r2, r3
 800b896:	68a3      	ldr	r3, [r4, #8]
 800b898:	9201      	str	r2, [sp, #4]
 800b89a:	1e5a      	subs	r2, r3, #1
 800b89c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b8a0:	bf88      	it	hi
 800b8a2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b8a6:	4627      	mov	r7, r4
 800b8a8:	bf82      	ittt	hi
 800b8aa:	eb03 0905 	addhi.w	r9, r3, r5
 800b8ae:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b8b2:	60a3      	strhi	r3, [r4, #8]
 800b8b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b8b8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b8bc:	bf98      	it	ls
 800b8be:	f04f 0900 	movls.w	r9, #0
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	463d      	mov	r5, r7
 800b8c6:	f04f 0b00 	mov.w	fp, #0
 800b8ca:	6831      	ldr	r1, [r6, #0]
 800b8cc:	ab03      	add	r3, sp, #12
 800b8ce:	7809      	ldrb	r1, [r1, #0]
 800b8d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	f7f4 fc73 	bl	80001c0 <memchr>
 800b8da:	b328      	cbz	r0, 800b928 <_scanf_i+0xb8>
 800b8dc:	f1bb 0f01 	cmp.w	fp, #1
 800b8e0:	d158      	bne.n	800b994 <_scanf_i+0x124>
 800b8e2:	6862      	ldr	r2, [r4, #4]
 800b8e4:	b92a      	cbnz	r2, 800b8f2 <_scanf_i+0x82>
 800b8e6:	6822      	ldr	r2, [r4, #0]
 800b8e8:	2108      	movs	r1, #8
 800b8ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8ee:	6061      	str	r1, [r4, #4]
 800b8f0:	6022      	str	r2, [r4, #0]
 800b8f2:	6822      	ldr	r2, [r4, #0]
 800b8f4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b8f8:	6022      	str	r2, [r4, #0]
 800b8fa:	68a2      	ldr	r2, [r4, #8]
 800b8fc:	1e51      	subs	r1, r2, #1
 800b8fe:	60a1      	str	r1, [r4, #8]
 800b900:	b192      	cbz	r2, 800b928 <_scanf_i+0xb8>
 800b902:	6832      	ldr	r2, [r6, #0]
 800b904:	1c51      	adds	r1, r2, #1
 800b906:	6031      	str	r1, [r6, #0]
 800b908:	7812      	ldrb	r2, [r2, #0]
 800b90a:	f805 2b01 	strb.w	r2, [r5], #1
 800b90e:	6872      	ldr	r2, [r6, #4]
 800b910:	3a01      	subs	r2, #1
 800b912:	2a00      	cmp	r2, #0
 800b914:	6072      	str	r2, [r6, #4]
 800b916:	dc07      	bgt.n	800b928 <_scanf_i+0xb8>
 800b918:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b91c:	4631      	mov	r1, r6
 800b91e:	4650      	mov	r0, sl
 800b920:	4790      	blx	r2
 800b922:	2800      	cmp	r0, #0
 800b924:	f040 8083 	bne.w	800ba2e <_scanf_i+0x1be>
 800b928:	f10b 0b01 	add.w	fp, fp, #1
 800b92c:	f1bb 0f03 	cmp.w	fp, #3
 800b930:	d1cb      	bne.n	800b8ca <_scanf_i+0x5a>
 800b932:	6861      	ldr	r1, [r4, #4]
 800b934:	b909      	cbnz	r1, 800b93a <_scanf_i+0xca>
 800b936:	210a      	movs	r1, #10
 800b938:	6061      	str	r1, [r4, #4]
 800b93a:	4b45      	ldr	r3, [pc, #276]	@ (800ba50 <_scanf_i+0x1e0>)
 800b93c:	6960      	ldr	r0, [r4, #20]
 800b93e:	1a59      	subs	r1, r3, r1
 800b940:	f000 f888 	bl	800ba54 <__sccl>
 800b944:	f04f 0b00 	mov.w	fp, #0
 800b948:	68a3      	ldr	r3, [r4, #8]
 800b94a:	6822      	ldr	r2, [r4, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d03d      	beq.n	800b9cc <_scanf_i+0x15c>
 800b950:	6831      	ldr	r1, [r6, #0]
 800b952:	6960      	ldr	r0, [r4, #20]
 800b954:	f891 c000 	ldrb.w	ip, [r1]
 800b958:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d035      	beq.n	800b9cc <_scanf_i+0x15c>
 800b960:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b964:	d124      	bne.n	800b9b0 <_scanf_i+0x140>
 800b966:	0510      	lsls	r0, r2, #20
 800b968:	d522      	bpl.n	800b9b0 <_scanf_i+0x140>
 800b96a:	f10b 0b01 	add.w	fp, fp, #1
 800b96e:	f1b9 0f00 	cmp.w	r9, #0
 800b972:	d003      	beq.n	800b97c <_scanf_i+0x10c>
 800b974:	3301      	adds	r3, #1
 800b976:	f109 39ff 	add.w	r9, r9, #4294967295
 800b97a:	60a3      	str	r3, [r4, #8]
 800b97c:	6873      	ldr	r3, [r6, #4]
 800b97e:	3b01      	subs	r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	6073      	str	r3, [r6, #4]
 800b984:	dd1b      	ble.n	800b9be <_scanf_i+0x14e>
 800b986:	6833      	ldr	r3, [r6, #0]
 800b988:	3301      	adds	r3, #1
 800b98a:	6033      	str	r3, [r6, #0]
 800b98c:	68a3      	ldr	r3, [r4, #8]
 800b98e:	3b01      	subs	r3, #1
 800b990:	60a3      	str	r3, [r4, #8]
 800b992:	e7d9      	b.n	800b948 <_scanf_i+0xd8>
 800b994:	f1bb 0f02 	cmp.w	fp, #2
 800b998:	d1af      	bne.n	800b8fa <_scanf_i+0x8a>
 800b99a:	6822      	ldr	r2, [r4, #0]
 800b99c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b9a0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b9a4:	d1c5      	bne.n	800b932 <_scanf_i+0xc2>
 800b9a6:	2110      	movs	r1, #16
 800b9a8:	6061      	str	r1, [r4, #4]
 800b9aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9ae:	e7a3      	b.n	800b8f8 <_scanf_i+0x88>
 800b9b0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b9b4:	6022      	str	r2, [r4, #0]
 800b9b6:	780b      	ldrb	r3, [r1, #0]
 800b9b8:	f805 3b01 	strb.w	r3, [r5], #1
 800b9bc:	e7de      	b.n	800b97c <_scanf_i+0x10c>
 800b9be:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4650      	mov	r0, sl
 800b9c6:	4798      	blx	r3
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d0df      	beq.n	800b98c <_scanf_i+0x11c>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	05db      	lsls	r3, r3, #23
 800b9d0:	d50d      	bpl.n	800b9ee <_scanf_i+0x17e>
 800b9d2:	42bd      	cmp	r5, r7
 800b9d4:	d909      	bls.n	800b9ea <_scanf_i+0x17a>
 800b9d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b9da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b9de:	4632      	mov	r2, r6
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	4798      	blx	r3
 800b9e4:	f105 39ff 	add.w	r9, r5, #4294967295
 800b9e8:	464d      	mov	r5, r9
 800b9ea:	42bd      	cmp	r5, r7
 800b9ec:	d027      	beq.n	800ba3e <_scanf_i+0x1ce>
 800b9ee:	6822      	ldr	r2, [r4, #0]
 800b9f0:	f012 0210 	ands.w	r2, r2, #16
 800b9f4:	d112      	bne.n	800ba1c <_scanf_i+0x1ac>
 800b9f6:	702a      	strb	r2, [r5, #0]
 800b9f8:	6863      	ldr	r3, [r4, #4]
 800b9fa:	9e01      	ldr	r6, [sp, #4]
 800b9fc:	4639      	mov	r1, r7
 800b9fe:	4650      	mov	r0, sl
 800ba00:	47b0      	blx	r6
 800ba02:	f8d8 3000 	ldr.w	r3, [r8]
 800ba06:	6821      	ldr	r1, [r4, #0]
 800ba08:	1d1a      	adds	r2, r3, #4
 800ba0a:	f8c8 2000 	str.w	r2, [r8]
 800ba0e:	068e      	lsls	r6, r1, #26
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	d50f      	bpl.n	800ba34 <_scanf_i+0x1c4>
 800ba14:	6018      	str	r0, [r3, #0]
 800ba16:	68e3      	ldr	r3, [r4, #12]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	60e3      	str	r3, [r4, #12]
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	1bed      	subs	r5, r5, r7
 800ba20:	445d      	add	r5, fp
 800ba22:	442b      	add	r3, r5
 800ba24:	6123      	str	r3, [r4, #16]
 800ba26:	2000      	movs	r0, #0
 800ba28:	b007      	add	sp, #28
 800ba2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2e:	f04f 0b00 	mov.w	fp, #0
 800ba32:	e7cb      	b.n	800b9cc <_scanf_i+0x15c>
 800ba34:	07ca      	lsls	r2, r1, #31
 800ba36:	bf4c      	ite	mi
 800ba38:	8018      	strhmi	r0, [r3, #0]
 800ba3a:	6018      	strpl	r0, [r3, #0]
 800ba3c:	e7eb      	b.n	800ba16 <_scanf_i+0x1a6>
 800ba3e:	2001      	movs	r0, #1
 800ba40:	e7f2      	b.n	800ba28 <_scanf_i+0x1b8>
 800ba42:	bf00      	nop
 800ba44:	0800be60 	.word	0x0800be60
 800ba48:	08009d7d 	.word	0x08009d7d
 800ba4c:	0800acb9 	.word	0x0800acb9
 800ba50:	0800d645 	.word	0x0800d645

0800ba54 <__sccl>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	780b      	ldrb	r3, [r1, #0]
 800ba58:	4604      	mov	r4, r0
 800ba5a:	2b5e      	cmp	r3, #94	@ 0x5e
 800ba5c:	bf0b      	itete	eq
 800ba5e:	784b      	ldrbeq	r3, [r1, #1]
 800ba60:	1c4a      	addne	r2, r1, #1
 800ba62:	1c8a      	addeq	r2, r1, #2
 800ba64:	2100      	movne	r1, #0
 800ba66:	bf08      	it	eq
 800ba68:	2101      	moveq	r1, #1
 800ba6a:	3801      	subs	r0, #1
 800ba6c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ba70:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ba74:	42a8      	cmp	r0, r5
 800ba76:	d1fb      	bne.n	800ba70 <__sccl+0x1c>
 800ba78:	b90b      	cbnz	r3, 800ba7e <__sccl+0x2a>
 800ba7a:	1e50      	subs	r0, r2, #1
 800ba7c:	bd70      	pop	{r4, r5, r6, pc}
 800ba7e:	f081 0101 	eor.w	r1, r1, #1
 800ba82:	54e1      	strb	r1, [r4, r3]
 800ba84:	4610      	mov	r0, r2
 800ba86:	4602      	mov	r2, r0
 800ba88:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ba8c:	2d2d      	cmp	r5, #45	@ 0x2d
 800ba8e:	d005      	beq.n	800ba9c <__sccl+0x48>
 800ba90:	2d5d      	cmp	r5, #93	@ 0x5d
 800ba92:	d016      	beq.n	800bac2 <__sccl+0x6e>
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	d0f1      	beq.n	800ba7c <__sccl+0x28>
 800ba98:	462b      	mov	r3, r5
 800ba9a:	e7f2      	b.n	800ba82 <__sccl+0x2e>
 800ba9c:	7846      	ldrb	r6, [r0, #1]
 800ba9e:	2e5d      	cmp	r6, #93	@ 0x5d
 800baa0:	d0fa      	beq.n	800ba98 <__sccl+0x44>
 800baa2:	42b3      	cmp	r3, r6
 800baa4:	dcf8      	bgt.n	800ba98 <__sccl+0x44>
 800baa6:	3002      	adds	r0, #2
 800baa8:	461a      	mov	r2, r3
 800baaa:	3201      	adds	r2, #1
 800baac:	4296      	cmp	r6, r2
 800baae:	54a1      	strb	r1, [r4, r2]
 800bab0:	dcfb      	bgt.n	800baaa <__sccl+0x56>
 800bab2:	1af2      	subs	r2, r6, r3
 800bab4:	3a01      	subs	r2, #1
 800bab6:	42b3      	cmp	r3, r6
 800bab8:	bfa8      	it	ge
 800baba:	2200      	movge	r2, #0
 800babc:	3301      	adds	r3, #1
 800babe:	4413      	add	r3, r2
 800bac0:	e7e1      	b.n	800ba86 <__sccl+0x32>
 800bac2:	4610      	mov	r0, r2
 800bac4:	e7da      	b.n	800ba7c <__sccl+0x28>

0800bac6 <__submore>:
 800bac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baca:	460c      	mov	r4, r1
 800bacc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bace:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bad2:	4299      	cmp	r1, r3
 800bad4:	d11d      	bne.n	800bb12 <__submore+0x4c>
 800bad6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bada:	f7fe fff3 	bl	800aac4 <_malloc_r>
 800bade:	b918      	cbnz	r0, 800bae8 <__submore+0x22>
 800bae0:	f04f 30ff 	mov.w	r0, #4294967295
 800bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800baec:	63a3      	str	r3, [r4, #56]	@ 0x38
 800baee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800baf2:	6360      	str	r0, [r4, #52]	@ 0x34
 800baf4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800baf8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bafc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bb00:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bb04:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bb08:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bb0c:	6020      	str	r0, [r4, #0]
 800bb0e:	2000      	movs	r0, #0
 800bb10:	e7e8      	b.n	800bae4 <__submore+0x1e>
 800bb12:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bb14:	0077      	lsls	r7, r6, #1
 800bb16:	463a      	mov	r2, r7
 800bb18:	f7ff fc4a 	bl	800b3b0 <_realloc_r>
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d0de      	beq.n	800bae0 <__submore+0x1a>
 800bb22:	eb00 0806 	add.w	r8, r0, r6
 800bb26:	4601      	mov	r1, r0
 800bb28:	4632      	mov	r2, r6
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	f7ff fc26 	bl	800b37c <memcpy>
 800bb30:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bb34:	f8c4 8000 	str.w	r8, [r4]
 800bb38:	e7e9      	b.n	800bb0e <__submore+0x48>

0800bb3a <_malloc_usable_size_r>:
 800bb3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb3e:	1f18      	subs	r0, r3, #4
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	bfbc      	itt	lt
 800bb44:	580b      	ldrlt	r3, [r1, r0]
 800bb46:	18c0      	addlt	r0, r0, r3
 800bb48:	4770      	bx	lr
	...

0800bb4c <__udivmoddi4>:
 800bb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb50:	9d08      	ldr	r5, [sp, #32]
 800bb52:	460f      	mov	r7, r1
 800bb54:	4604      	mov	r4, r0
 800bb56:	468c      	mov	ip, r1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d148      	bne.n	800bbee <__udivmoddi4+0xa2>
 800bb5c:	428a      	cmp	r2, r1
 800bb5e:	4616      	mov	r6, r2
 800bb60:	d961      	bls.n	800bc26 <__udivmoddi4+0xda>
 800bb62:	fab2 f382 	clz	r3, r2
 800bb66:	b14b      	cbz	r3, 800bb7c <__udivmoddi4+0x30>
 800bb68:	f1c3 0220 	rsb	r2, r3, #32
 800bb6c:	fa01 fc03 	lsl.w	ip, r1, r3
 800bb70:	fa20 f202 	lsr.w	r2, r0, r2
 800bb74:	409e      	lsls	r6, r3
 800bb76:	ea42 0c0c 	orr.w	ip, r2, ip
 800bb7a:	409c      	lsls	r4, r3
 800bb7c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800bb80:	b2b7      	uxth	r7, r6
 800bb82:	fbbc f1fe 	udiv	r1, ip, lr
 800bb86:	0c22      	lsrs	r2, r4, #16
 800bb88:	fb0e cc11 	mls	ip, lr, r1, ip
 800bb8c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800bb90:	fb01 f007 	mul.w	r0, r1, r7
 800bb94:	4290      	cmp	r0, r2
 800bb96:	d909      	bls.n	800bbac <__udivmoddi4+0x60>
 800bb98:	18b2      	adds	r2, r6, r2
 800bb9a:	f101 3cff 	add.w	ip, r1, #4294967295
 800bb9e:	f080 80ee 	bcs.w	800bd7e <__udivmoddi4+0x232>
 800bba2:	4290      	cmp	r0, r2
 800bba4:	f240 80eb 	bls.w	800bd7e <__udivmoddi4+0x232>
 800bba8:	3902      	subs	r1, #2
 800bbaa:	4432      	add	r2, r6
 800bbac:	1a12      	subs	r2, r2, r0
 800bbae:	b2a4      	uxth	r4, r4
 800bbb0:	fbb2 f0fe 	udiv	r0, r2, lr
 800bbb4:	fb0e 2210 	mls	r2, lr, r0, r2
 800bbb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bbbc:	fb00 f707 	mul.w	r7, r0, r7
 800bbc0:	42a7      	cmp	r7, r4
 800bbc2:	d909      	bls.n	800bbd8 <__udivmoddi4+0x8c>
 800bbc4:	1934      	adds	r4, r6, r4
 800bbc6:	f100 32ff 	add.w	r2, r0, #4294967295
 800bbca:	f080 80da 	bcs.w	800bd82 <__udivmoddi4+0x236>
 800bbce:	42a7      	cmp	r7, r4
 800bbd0:	f240 80d7 	bls.w	800bd82 <__udivmoddi4+0x236>
 800bbd4:	4434      	add	r4, r6
 800bbd6:	3802      	subs	r0, #2
 800bbd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800bbdc:	1be4      	subs	r4, r4, r7
 800bbde:	2100      	movs	r1, #0
 800bbe0:	b11d      	cbz	r5, 800bbea <__udivmoddi4+0x9e>
 800bbe2:	40dc      	lsrs	r4, r3
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	e9c5 4300 	strd	r4, r3, [r5]
 800bbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbee:	428b      	cmp	r3, r1
 800bbf0:	d906      	bls.n	800bc00 <__udivmoddi4+0xb4>
 800bbf2:	b10d      	cbz	r5, 800bbf8 <__udivmoddi4+0xac>
 800bbf4:	e9c5 0100 	strd	r0, r1, [r5]
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	4608      	mov	r0, r1
 800bbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc00:	fab3 f183 	clz	r1, r3
 800bc04:	2900      	cmp	r1, #0
 800bc06:	d148      	bne.n	800bc9a <__udivmoddi4+0x14e>
 800bc08:	42bb      	cmp	r3, r7
 800bc0a:	d302      	bcc.n	800bc12 <__udivmoddi4+0xc6>
 800bc0c:	4282      	cmp	r2, r0
 800bc0e:	f200 8107 	bhi.w	800be20 <__udivmoddi4+0x2d4>
 800bc12:	1a84      	subs	r4, r0, r2
 800bc14:	eb67 0203 	sbc.w	r2, r7, r3
 800bc18:	2001      	movs	r0, #1
 800bc1a:	4694      	mov	ip, r2
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	d0e4      	beq.n	800bbea <__udivmoddi4+0x9e>
 800bc20:	e9c5 4c00 	strd	r4, ip, [r5]
 800bc24:	e7e1      	b.n	800bbea <__udivmoddi4+0x9e>
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	f000 8092 	beq.w	800bd50 <__udivmoddi4+0x204>
 800bc2c:	fab2 f382 	clz	r3, r2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f040 80a8 	bne.w	800bd86 <__udivmoddi4+0x23a>
 800bc36:	1a8a      	subs	r2, r1, r2
 800bc38:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800bc3c:	fa1f fc86 	uxth.w	ip, r6
 800bc40:	2101      	movs	r1, #1
 800bc42:	0c20      	lsrs	r0, r4, #16
 800bc44:	fbb2 f7fe 	udiv	r7, r2, lr
 800bc48:	fb0e 2217 	mls	r2, lr, r7, r2
 800bc4c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800bc50:	fb0c f007 	mul.w	r0, ip, r7
 800bc54:	4290      	cmp	r0, r2
 800bc56:	d907      	bls.n	800bc68 <__udivmoddi4+0x11c>
 800bc58:	18b2      	adds	r2, r6, r2
 800bc5a:	f107 38ff 	add.w	r8, r7, #4294967295
 800bc5e:	d202      	bcs.n	800bc66 <__udivmoddi4+0x11a>
 800bc60:	4290      	cmp	r0, r2
 800bc62:	f200 80e2 	bhi.w	800be2a <__udivmoddi4+0x2de>
 800bc66:	4647      	mov	r7, r8
 800bc68:	1a12      	subs	r2, r2, r0
 800bc6a:	b2a4      	uxth	r4, r4
 800bc6c:	fbb2 f0fe 	udiv	r0, r2, lr
 800bc70:	fb0e 2210 	mls	r2, lr, r0, r2
 800bc74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bc78:	fb0c fc00 	mul.w	ip, ip, r0
 800bc7c:	45a4      	cmp	ip, r4
 800bc7e:	d907      	bls.n	800bc90 <__udivmoddi4+0x144>
 800bc80:	1934      	adds	r4, r6, r4
 800bc82:	f100 32ff 	add.w	r2, r0, #4294967295
 800bc86:	d202      	bcs.n	800bc8e <__udivmoddi4+0x142>
 800bc88:	45a4      	cmp	ip, r4
 800bc8a:	f200 80cb 	bhi.w	800be24 <__udivmoddi4+0x2d8>
 800bc8e:	4610      	mov	r0, r2
 800bc90:	eba4 040c 	sub.w	r4, r4, ip
 800bc94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800bc98:	e7a2      	b.n	800bbe0 <__udivmoddi4+0x94>
 800bc9a:	f1c1 0620 	rsb	r6, r1, #32
 800bc9e:	408b      	lsls	r3, r1
 800bca0:	fa22 fc06 	lsr.w	ip, r2, r6
 800bca4:	ea4c 0c03 	orr.w	ip, ip, r3
 800bca8:	fa07 f401 	lsl.w	r4, r7, r1
 800bcac:	fa20 f306 	lsr.w	r3, r0, r6
 800bcb0:	40f7      	lsrs	r7, r6
 800bcb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800bcb6:	4323      	orrs	r3, r4
 800bcb8:	fa00 f801 	lsl.w	r8, r0, r1
 800bcbc:	fa1f fe8c 	uxth.w	lr, ip
 800bcc0:	fbb7 f0f9 	udiv	r0, r7, r9
 800bcc4:	0c1c      	lsrs	r4, r3, #16
 800bcc6:	fb09 7710 	mls	r7, r9, r0, r7
 800bcca:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800bcce:	fb00 f70e 	mul.w	r7, r0, lr
 800bcd2:	42a7      	cmp	r7, r4
 800bcd4:	fa02 f201 	lsl.w	r2, r2, r1
 800bcd8:	d90a      	bls.n	800bcf0 <__udivmoddi4+0x1a4>
 800bcda:	eb1c 0404 	adds.w	r4, ip, r4
 800bcde:	f100 3aff 	add.w	sl, r0, #4294967295
 800bce2:	f080 809b 	bcs.w	800be1c <__udivmoddi4+0x2d0>
 800bce6:	42a7      	cmp	r7, r4
 800bce8:	f240 8098 	bls.w	800be1c <__udivmoddi4+0x2d0>
 800bcec:	3802      	subs	r0, #2
 800bcee:	4464      	add	r4, ip
 800bcf0:	1be4      	subs	r4, r4, r7
 800bcf2:	b29f      	uxth	r7, r3
 800bcf4:	fbb4 f3f9 	udiv	r3, r4, r9
 800bcf8:	fb09 4413 	mls	r4, r9, r3, r4
 800bcfc:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800bd00:	fb03 fe0e 	mul.w	lr, r3, lr
 800bd04:	45a6      	cmp	lr, r4
 800bd06:	d909      	bls.n	800bd1c <__udivmoddi4+0x1d0>
 800bd08:	eb1c 0404 	adds.w	r4, ip, r4
 800bd0c:	f103 37ff 	add.w	r7, r3, #4294967295
 800bd10:	f080 8082 	bcs.w	800be18 <__udivmoddi4+0x2cc>
 800bd14:	45a6      	cmp	lr, r4
 800bd16:	d97f      	bls.n	800be18 <__udivmoddi4+0x2cc>
 800bd18:	3b02      	subs	r3, #2
 800bd1a:	4464      	add	r4, ip
 800bd1c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800bd20:	eba4 040e 	sub.w	r4, r4, lr
 800bd24:	fba0 e702 	umull	lr, r7, r0, r2
 800bd28:	42bc      	cmp	r4, r7
 800bd2a:	4673      	mov	r3, lr
 800bd2c:	46b9      	mov	r9, r7
 800bd2e:	d363      	bcc.n	800bdf8 <__udivmoddi4+0x2ac>
 800bd30:	d060      	beq.n	800bdf4 <__udivmoddi4+0x2a8>
 800bd32:	b15d      	cbz	r5, 800bd4c <__udivmoddi4+0x200>
 800bd34:	ebb8 0203 	subs.w	r2, r8, r3
 800bd38:	eb64 0409 	sbc.w	r4, r4, r9
 800bd3c:	fa04 f606 	lsl.w	r6, r4, r6
 800bd40:	fa22 f301 	lsr.w	r3, r2, r1
 800bd44:	431e      	orrs	r6, r3
 800bd46:	40cc      	lsrs	r4, r1
 800bd48:	e9c5 6400 	strd	r6, r4, [r5]
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	e74c      	b.n	800bbea <__udivmoddi4+0x9e>
 800bd50:	0862      	lsrs	r2, r4, #1
 800bd52:	0848      	lsrs	r0, r1, #1
 800bd54:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800bd58:	0c0b      	lsrs	r3, r1, #16
 800bd5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd5e:	b28a      	uxth	r2, r1
 800bd60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd64:	fbb3 f1f6 	udiv	r1, r3, r6
 800bd68:	07e4      	lsls	r4, r4, #31
 800bd6a:	46b4      	mov	ip, r6
 800bd6c:	4637      	mov	r7, r6
 800bd6e:	46b6      	mov	lr, r6
 800bd70:	231f      	movs	r3, #31
 800bd72:	fbb0 f0f6 	udiv	r0, r0, r6
 800bd76:	1bd2      	subs	r2, r2, r7
 800bd78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd7c:	e761      	b.n	800bc42 <__udivmoddi4+0xf6>
 800bd7e:	4661      	mov	r1, ip
 800bd80:	e714      	b.n	800bbac <__udivmoddi4+0x60>
 800bd82:	4610      	mov	r0, r2
 800bd84:	e728      	b.n	800bbd8 <__udivmoddi4+0x8c>
 800bd86:	f1c3 0120 	rsb	r1, r3, #32
 800bd8a:	fa20 f201 	lsr.w	r2, r0, r1
 800bd8e:	409e      	lsls	r6, r3
 800bd90:	fa27 f101 	lsr.w	r1, r7, r1
 800bd94:	409f      	lsls	r7, r3
 800bd96:	433a      	orrs	r2, r7
 800bd98:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800bd9c:	fa1f fc86 	uxth.w	ip, r6
 800bda0:	fbb1 f7fe 	udiv	r7, r1, lr
 800bda4:	fb0e 1017 	mls	r0, lr, r7, r1
 800bda8:	0c11      	lsrs	r1, r2, #16
 800bdaa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdae:	fb07 f80c 	mul.w	r8, r7, ip
 800bdb2:	4588      	cmp	r8, r1
 800bdb4:	fa04 f403 	lsl.w	r4, r4, r3
 800bdb8:	d93a      	bls.n	800be30 <__udivmoddi4+0x2e4>
 800bdba:	1871      	adds	r1, r6, r1
 800bdbc:	f107 30ff 	add.w	r0, r7, #4294967295
 800bdc0:	d201      	bcs.n	800bdc6 <__udivmoddi4+0x27a>
 800bdc2:	4588      	cmp	r8, r1
 800bdc4:	d81f      	bhi.n	800be06 <__udivmoddi4+0x2ba>
 800bdc6:	eba1 0108 	sub.w	r1, r1, r8
 800bdca:	fbb1 f8fe 	udiv	r8, r1, lr
 800bdce:	fb08 f70c 	mul.w	r7, r8, ip
 800bdd2:	fb0e 1118 	mls	r1, lr, r8, r1
 800bdd6:	b292      	uxth	r2, r2
 800bdd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bddc:	42ba      	cmp	r2, r7
 800bdde:	d22f      	bcs.n	800be40 <__udivmoddi4+0x2f4>
 800bde0:	18b2      	adds	r2, r6, r2
 800bde2:	f108 31ff 	add.w	r1, r8, #4294967295
 800bde6:	d2c6      	bcs.n	800bd76 <__udivmoddi4+0x22a>
 800bde8:	42ba      	cmp	r2, r7
 800bdea:	d2c4      	bcs.n	800bd76 <__udivmoddi4+0x22a>
 800bdec:	f1a8 0102 	sub.w	r1, r8, #2
 800bdf0:	4432      	add	r2, r6
 800bdf2:	e7c0      	b.n	800bd76 <__udivmoddi4+0x22a>
 800bdf4:	45f0      	cmp	r8, lr
 800bdf6:	d29c      	bcs.n	800bd32 <__udivmoddi4+0x1e6>
 800bdf8:	ebbe 0302 	subs.w	r3, lr, r2
 800bdfc:	eb67 070c 	sbc.w	r7, r7, ip
 800be00:	3801      	subs	r0, #1
 800be02:	46b9      	mov	r9, r7
 800be04:	e795      	b.n	800bd32 <__udivmoddi4+0x1e6>
 800be06:	eba6 0808 	sub.w	r8, r6, r8
 800be0a:	4441      	add	r1, r8
 800be0c:	1eb8      	subs	r0, r7, #2
 800be0e:	fbb1 f8fe 	udiv	r8, r1, lr
 800be12:	fb08 f70c 	mul.w	r7, r8, ip
 800be16:	e7dc      	b.n	800bdd2 <__udivmoddi4+0x286>
 800be18:	463b      	mov	r3, r7
 800be1a:	e77f      	b.n	800bd1c <__udivmoddi4+0x1d0>
 800be1c:	4650      	mov	r0, sl
 800be1e:	e767      	b.n	800bcf0 <__udivmoddi4+0x1a4>
 800be20:	4608      	mov	r0, r1
 800be22:	e6fb      	b.n	800bc1c <__udivmoddi4+0xd0>
 800be24:	4434      	add	r4, r6
 800be26:	3802      	subs	r0, #2
 800be28:	e732      	b.n	800bc90 <__udivmoddi4+0x144>
 800be2a:	3f02      	subs	r7, #2
 800be2c:	4432      	add	r2, r6
 800be2e:	e71b      	b.n	800bc68 <__udivmoddi4+0x11c>
 800be30:	eba1 0108 	sub.w	r1, r1, r8
 800be34:	4638      	mov	r0, r7
 800be36:	fbb1 f8fe 	udiv	r8, r1, lr
 800be3a:	fb08 f70c 	mul.w	r7, r8, ip
 800be3e:	e7c8      	b.n	800bdd2 <__udivmoddi4+0x286>
 800be40:	4641      	mov	r1, r8
 800be42:	e798      	b.n	800bd76 <__udivmoddi4+0x22a>

0800be44 <_init>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	bf00      	nop
 800be48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be4a:	bc08      	pop	{r3}
 800be4c:	469e      	mov	lr, r3
 800be4e:	4770      	bx	lr

0800be50 <_fini>:
 800be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be52:	bf00      	nop
 800be54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be56:	bc08      	pop	{r3}
 800be58:	469e      	mov	lr, r3
 800be5a:	4770      	bx	lr
 800be5c:	0000      	movs	r0, r0
	...
