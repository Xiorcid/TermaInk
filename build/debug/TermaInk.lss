
build/debug/TermaInk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .ram2         00001ff0  10000000  10000000  00010000  2**2
                  ALLOC
  1 .isr_vector   00000190  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b8d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001868  0800ba60  0800ba60  0000ca60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800d2c8  0800d2c8  0000f278  2**0
                  CONTENTS
  5 .ARM          00000008  0800d2c8  0800d2c8  0000e2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800d2d0  0800d2d0  0000f278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0800d2d0  0800d2d0  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0800d2d8  0800d2d8  0000e2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000278  20000000  0800d2e0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000259c  20000278  0800d558  0000f278  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20002814  0800d558  0000f814  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f278  2**0
                  CONTENTS, READONLY
 13 .comment      00000045  00000000  00000000  0000f2a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002e784  00000000  00000000  0000f2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006037  00000000  00000000  0003da71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00012883  00000000  00000000  00043aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001b18  00000000  00000000  00056330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001838  00000000  00000000  00057e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d80e  00000000  00000000  00059680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000080b0  00000000  00000000  00076e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052dc  00000000  00000000  0007ef40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000232  00000000  00000000  0008421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strcmp>:
 8000190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000198:	2a01      	cmp	r2, #1
 800019a:	bf28      	it	cs
 800019c:	429a      	cmpcs	r2, r3
 800019e:	d0f7      	beq.n	8000190 <strcmp>
 80001a0:	1ad0      	subs	r0, r2, r3
 80001a2:	4770      	bx	lr

080001a4 <strlen>:
 80001a4:	4603      	mov	r3, r0
 80001a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001aa:	2a00      	cmp	r2, #0
 80001ac:	d1fb      	bne.n	80001a6 <strlen+0x2>
 80001ae:	1a18      	subs	r0, r3, r0
 80001b0:	3801      	subs	r0, #1
 80001b2:	4770      	bx	lr
	...

080001c0 <memchr>:
 80001c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001c4:	2a10      	cmp	r2, #16
 80001c6:	db2b      	blt.n	8000220 <memchr+0x60>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	d008      	beq.n	80001e0 <memchr+0x20>
 80001ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001d2:	3a01      	subs	r2, #1
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d02d      	beq.n	8000234 <memchr+0x74>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	b342      	cbz	r2, 8000230 <memchr+0x70>
 80001de:	d1f6      	bne.n	80001ce <memchr+0xe>
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
 80001e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ea:	f022 0407 	bic.w	r4, r2, #7
 80001ee:	f07f 0700 	mvns.w	r7, #0
 80001f2:	2300      	movs	r3, #0
 80001f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001f8:	3c08      	subs	r4, #8
 80001fa:	ea85 0501 	eor.w	r5, r5, r1
 80001fe:	ea86 0601 	eor.w	r6, r6, r1
 8000202:	fa85 f547 	uadd8	r5, r5, r7
 8000206:	faa3 f587 	sel	r5, r3, r7
 800020a:	fa86 f647 	uadd8	r6, r6, r7
 800020e:	faa5 f687 	sel	r6, r5, r7
 8000212:	b98e      	cbnz	r6, 8000238 <memchr+0x78>
 8000214:	d1ee      	bne.n	80001f4 <memchr+0x34>
 8000216:	bcf0      	pop	{r4, r5, r6, r7}
 8000218:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800021c:	f002 0207 	and.w	r2, r2, #7
 8000220:	b132      	cbz	r2, 8000230 <memchr+0x70>
 8000222:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000226:	3a01      	subs	r2, #1
 8000228:	ea83 0301 	eor.w	r3, r3, r1
 800022c:	b113      	cbz	r3, 8000234 <memchr+0x74>
 800022e:	d1f8      	bne.n	8000222 <memchr+0x62>
 8000230:	2000      	movs	r0, #0
 8000232:	4770      	bx	lr
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr
 8000238:	2d00      	cmp	r5, #0
 800023a:	bf06      	itte	eq
 800023c:	4635      	moveq	r5, r6
 800023e:	3803      	subeq	r0, #3
 8000240:	3807      	subne	r0, #7
 8000242:	f015 0f01 	tst.w	r5, #1
 8000246:	d107      	bne.n	8000258 <memchr+0x98>
 8000248:	3001      	adds	r0, #1
 800024a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800024e:	bf02      	ittt	eq
 8000250:	3001      	addeq	r0, #1
 8000252:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000256:	3001      	addeq	r0, #1
 8000258:	bcf0      	pop	{r4, r5, r6, r7}
 800025a:	3801      	subs	r0, #1
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop

08000260 <__aeabi_drsub>:
 8000260:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000264:	e002      	b.n	800026c <__adddf3>
 8000266:	bf00      	nop

08000268 <__aeabi_dsub>:
 8000268:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800026c <__adddf3>:
 800026c:	b530      	push	{r4, r5, lr}
 800026e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000272:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000276:	ea94 0f05 	teq	r4, r5
 800027a:	bf08      	it	eq
 800027c:	ea90 0f02 	teqeq	r0, r2
 8000280:	bf1f      	itttt	ne
 8000282:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000286:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000292:	f000 80e2 	beq.w	800045a <__adddf3+0x1ee>
 8000296:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029e:	bfb8      	it	lt
 80002a0:	426d      	neglt	r5, r5
 80002a2:	dd0c      	ble.n	80002be <__adddf3+0x52>
 80002a4:	442c      	add	r4, r5
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	ea82 0000 	eor.w	r0, r2, r0
 80002b2:	ea83 0101 	eor.w	r1, r3, r1
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	2d36      	cmp	r5, #54	@ 0x36
 80002c0:	bf88      	it	hi
 80002c2:	bd30      	pophi	{r4, r5, pc}
 80002c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x70>
 80002d6:	4240      	negs	r0, r0
 80002d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x84>
 80002ea:	4252      	negs	r2, r2
 80002ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f0:	ea94 0f05 	teq	r4, r5
 80002f4:	f000 80a7 	beq.w	8000446 <__adddf3+0x1da>
 80002f8:	f1a4 0401 	sub.w	r4, r4, #1
 80002fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000300:	db0d      	blt.n	800031e <__adddf3+0xb2>
 8000302:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000306:	fa22 f205 	lsr.w	r2, r2, r5
 800030a:	1880      	adds	r0, r0, r2
 800030c:	f141 0100 	adc.w	r1, r1, #0
 8000310:	fa03 f20e 	lsl.w	r2, r3, lr
 8000314:	1880      	adds	r0, r0, r2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	4159      	adcs	r1, r3
 800031c:	e00e      	b.n	800033c <__adddf3+0xd0>
 800031e:	f1a5 0520 	sub.w	r5, r5, #32
 8000322:	f10e 0e20 	add.w	lr, lr, #32
 8000326:	2a01      	cmp	r2, #1
 8000328:	fa03 fc0e 	lsl.w	ip, r3, lr
 800032c:	bf28      	it	cs
 800032e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	18c0      	adds	r0, r0, r3
 8000338:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800033c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000340:	d507      	bpl.n	8000352 <__adddf3+0xe6>
 8000342:	f04f 0e00 	mov.w	lr, #0
 8000346:	f1dc 0c00 	rsbs	ip, ip, #0
 800034a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000352:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000356:	d31b      	bcc.n	8000390 <__adddf3+0x124>
 8000358:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800035c:	d30c      	bcc.n	8000378 <__adddf3+0x10c>
 800035e:	0849      	lsrs	r1, r1, #1
 8000360:	ea5f 0030 	movs.w	r0, r0, rrx
 8000364:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000368:	f104 0401 	add.w	r4, r4, #1
 800036c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000370:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000374:	f080 809a 	bcs.w	80004ac <__adddf3+0x240>
 8000378:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800037c:	bf08      	it	eq
 800037e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000382:	f150 0000 	adcs.w	r0, r0, #0
 8000386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038a:	ea41 0105 	orr.w	r1, r1, r5
 800038e:	bd30      	pop	{r4, r5, pc}
 8000390:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000394:	4140      	adcs	r0, r0
 8000396:	eb41 0101 	adc.w	r1, r1, r1
 800039a:	3c01      	subs	r4, #1
 800039c:	bf28      	it	cs
 800039e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003a2:	d2e9      	bcs.n	8000378 <__adddf3+0x10c>
 80003a4:	f091 0f00 	teq	r1, #0
 80003a8:	bf04      	itt	eq
 80003aa:	4601      	moveq	r1, r0
 80003ac:	2000      	moveq	r0, #0
 80003ae:	fab1 f381 	clz	r3, r1
 80003b2:	bf08      	it	eq
 80003b4:	3320      	addeq	r3, #32
 80003b6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ba:	f1b3 0220 	subs.w	r2, r3, #32
 80003be:	da0c      	bge.n	80003da <__adddf3+0x16e>
 80003c0:	320c      	adds	r2, #12
 80003c2:	dd08      	ble.n	80003d6 <__adddf3+0x16a>
 80003c4:	f102 0c14 	add.w	ip, r2, #20
 80003c8:	f1c2 020c 	rsb	r2, r2, #12
 80003cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d0:	fa21 f102 	lsr.w	r1, r1, r2
 80003d4:	e00c      	b.n	80003f0 <__adddf3+0x184>
 80003d6:	f102 0214 	add.w	r2, r2, #20
 80003da:	bfd8      	it	le
 80003dc:	f1c2 0c20 	rsble	ip, r2, #32
 80003e0:	fa01 f102 	lsl.w	r1, r1, r2
 80003e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e8:	bfdc      	itt	le
 80003ea:	ea41 010c 	orrle.w	r1, r1, ip
 80003ee:	4090      	lslle	r0, r2
 80003f0:	1ae4      	subs	r4, r4, r3
 80003f2:	bfa2      	ittt	ge
 80003f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f8:	4329      	orrge	r1, r5
 80003fa:	bd30      	popge	{r4, r5, pc}
 80003fc:	ea6f 0404 	mvn.w	r4, r4
 8000400:	3c1f      	subs	r4, #31
 8000402:	da1c      	bge.n	800043e <__adddf3+0x1d2>
 8000404:	340c      	adds	r4, #12
 8000406:	dc0e      	bgt.n	8000426 <__adddf3+0x1ba>
 8000408:	f104 0414 	add.w	r4, r4, #20
 800040c:	f1c4 0220 	rsb	r2, r4, #32
 8000410:	fa20 f004 	lsr.w	r0, r0, r4
 8000414:	fa01 f302 	lsl.w	r3, r1, r2
 8000418:	ea40 0003 	orr.w	r0, r0, r3
 800041c:	fa21 f304 	lsr.w	r3, r1, r4
 8000420:	ea45 0103 	orr.w	r1, r5, r3
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f1c4 040c 	rsb	r4, r4, #12
 800042a:	f1c4 0220 	rsb	r2, r4, #32
 800042e:	fa20 f002 	lsr.w	r0, r0, r2
 8000432:	fa01 f304 	lsl.w	r3, r1, r4
 8000436:	ea40 0003 	orr.w	r0, r0, r3
 800043a:	4629      	mov	r1, r5
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	fa21 f004 	lsr.w	r0, r1, r4
 8000442:	4629      	mov	r1, r5
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f094 0f00 	teq	r4, #0
 800044a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800044e:	bf06      	itte	eq
 8000450:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000454:	3401      	addeq	r4, #1
 8000456:	3d01      	subne	r5, #1
 8000458:	e74e      	b.n	80002f8 <__adddf3+0x8c>
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf18      	it	ne
 8000460:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000464:	d029      	beq.n	80004ba <__adddf3+0x24e>
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	d005      	beq.n	800047e <__adddf3+0x212>
 8000472:	ea54 0c00 	orrs.w	ip, r4, r0
 8000476:	bf04      	itt	eq
 8000478:	4619      	moveq	r1, r3
 800047a:	4610      	moveq	r0, r2
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea91 0f03 	teq	r1, r3
 8000482:	bf1e      	ittt	ne
 8000484:	2100      	movne	r1, #0
 8000486:	2000      	movne	r0, #0
 8000488:	bd30      	popne	{r4, r5, pc}
 800048a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048e:	d105      	bne.n	800049c <__adddf3+0x230>
 8000490:	0040      	lsls	r0, r0, #1
 8000492:	4149      	adcs	r1, r1
 8000494:	bf28      	it	cs
 8000496:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800049a:	bd30      	pop	{r4, r5, pc}
 800049c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004a0:	bf3c      	itt	cc
 80004a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004a6:	bd30      	popcc	{r4, r5, pc}
 80004a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf1a      	itte	ne
 80004c0:	4619      	movne	r1, r3
 80004c2:	4610      	movne	r0, r2
 80004c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c8:	bf1c      	itt	ne
 80004ca:	460b      	movne	r3, r1
 80004cc:	4602      	movne	r2, r0
 80004ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d2:	bf06      	itte	eq
 80004d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d8:	ea91 0f03 	teqeq	r1, r3
 80004dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	bf00      	nop

080004e4 <__aeabi_ui2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f04f 0500 	mov.w	r5, #0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e750      	b.n	80003a4 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_i2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800051c:	bf48      	it	mi
 800051e:	4240      	negmi	r0, r0
 8000520:	f04f 0100 	mov.w	r1, #0
 8000524:	e73e      	b.n	80003a4 <__adddf3+0x138>
 8000526:	bf00      	nop

08000528 <__aeabi_f2d>:
 8000528:	0042      	lsls	r2, r0, #1
 800052a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000532:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000536:	bf1f      	itttt	ne
 8000538:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800053c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000540:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000544:	4770      	bxne	lr
 8000546:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800054a:	bf08      	it	eq
 800054c:	4770      	bxeq	lr
 800054e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000552:	bf04      	itt	eq
 8000554:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000558:	4770      	bxeq	lr
 800055a:	b530      	push	{r4, r5, lr}
 800055c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000568:	e71c      	b.n	80003a4 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_ul2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f04f 0500 	mov.w	r5, #0
 800057a:	e00a      	b.n	8000592 <__aeabi_l2d+0x16>

0800057c <__aeabi_l2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800058a:	d502      	bpl.n	8000592 <__aeabi_l2d+0x16>
 800058c:	4240      	negs	r0, r0
 800058e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000592:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000596:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800059a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800059e:	f43f aed8 	beq.w	8000352 <__adddf3+0xe6>
 80005a2:	f04f 0203 	mov.w	r2, #3
 80005a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005aa:	bf18      	it	ne
 80005ac:	3203      	addne	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ba:	f1c2 0320 	rsb	r3, r2, #32
 80005be:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c2:	fa20 f002 	lsr.w	r0, r0, r2
 80005c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ca:	ea40 000e 	orr.w	r0, r0, lr
 80005ce:	fa21 f102 	lsr.w	r1, r1, r2
 80005d2:	4414      	add	r4, r2
 80005d4:	e6bd      	b.n	8000352 <__adddf3+0xe6>
 80005d6:	bf00      	nop

080005d8 <__aeabi_dmul>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005e6:	bf1d      	ittte	ne
 80005e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ec:	ea94 0f0c 	teqne	r4, ip
 80005f0:	ea95 0f0c 	teqne	r5, ip
 80005f4:	f000 f8de 	bleq	80007b4 <__aeabi_dmul+0x1dc>
 80005f8:	442c      	add	r4, r5
 80005fa:	ea81 0603 	eor.w	r6, r1, r3
 80005fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000602:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000606:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060a:	bf18      	it	ne
 800060c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000610:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000614:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000618:	d038      	beq.n	800068c <__aeabi_dmul+0xb4>
 800061a:	fba0 ce02 	umull	ip, lr, r0, r2
 800061e:	f04f 0500 	mov.w	r5, #0
 8000622:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000626:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800062a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800062e:	f04f 0600 	mov.w	r6, #0
 8000632:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000636:	f09c 0f00 	teq	ip, #0
 800063a:	bf18      	it	ne
 800063c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000640:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000644:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000648:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800064c:	d204      	bcs.n	8000658 <__aeabi_dmul+0x80>
 800064e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000652:	416d      	adcs	r5, r5
 8000654:	eb46 0606 	adc.w	r6, r6, r6
 8000658:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800065c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000660:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000664:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000668:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800066c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000670:	bf88      	it	hi
 8000672:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000676:	d81e      	bhi.n	80006b6 <__aeabi_dmul+0xde>
 8000678:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800067c:	bf08      	it	eq
 800067e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000682:	f150 0000 	adcs.w	r0, r0, #0
 8000686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000690:	ea46 0101 	orr.w	r1, r6, r1
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	ea81 0103 	eor.w	r1, r1, r3
 800069c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a0:	bfc2      	ittt	gt
 80006a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	popgt	{r4, r5, r6, pc}
 80006ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006b0:	f04f 0e00 	mov.w	lr, #0
 80006b4:	3c01      	subs	r4, #1
 80006b6:	f300 80ab 	bgt.w	8000810 <__aeabi_dmul+0x238>
 80006ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006be:	bfde      	ittt	le
 80006c0:	2000      	movle	r0, #0
 80006c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006c6:	bd70      	pople	{r4, r5, r6, pc}
 80006c8:	f1c4 0400 	rsb	r4, r4, #0
 80006cc:	3c20      	subs	r4, #32
 80006ce:	da35      	bge.n	800073c <__aeabi_dmul+0x164>
 80006d0:	340c      	adds	r4, #12
 80006d2:	dc1b      	bgt.n	800070c <__aeabi_dmul+0x134>
 80006d4:	f104 0414 	add.w	r4, r4, #20
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f305 	lsl.w	r3, r0, r5
 80006e0:	fa20 f004 	lsr.w	r0, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f8:	fa21 f604 	lsr.w	r6, r1, r4
 80006fc:	eb42 0106 	adc.w	r1, r2, r6
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 040c 	rsb	r4, r4, #12
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f304 	lsl.w	r3, r0, r4
 8000718:	fa20 f005 	lsr.w	r0, r0, r5
 800071c:	fa01 f204 	lsl.w	r2, r1, r4
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	f141 0100 	adc.w	r1, r1, #0
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f205 	lsl.w	r2, r0, r5
 8000744:	ea4e 0e02 	orr.w	lr, lr, r2
 8000748:	fa20 f304 	lsr.w	r3, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea43 0302 	orr.w	r3, r3, r2
 8000754:	fa21 f004 	lsr.w	r0, r1, r4
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	fa21 f204 	lsr.w	r2, r1, r4
 8000760:	ea20 0002 	bic.w	r0, r0, r2
 8000764:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f094 0f00 	teq	r4, #0
 8000778:	d10f      	bne.n	800079a <__aeabi_dmul+0x1c2>
 800077a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800077e:	0040      	lsls	r0, r0, #1
 8000780:	eb41 0101 	adc.w	r1, r1, r1
 8000784:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3c01      	subeq	r4, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1a6>
 800078e:	ea41 0106 	orr.w	r1, r1, r6
 8000792:	f095 0f00 	teq	r5, #0
 8000796:	bf18      	it	ne
 8000798:	4770      	bxne	lr
 800079a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800079e:	0052      	lsls	r2, r2, #1
 80007a0:	eb43 0303 	adc.w	r3, r3, r3
 80007a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3d01      	subeq	r5, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1c6>
 80007ae:	ea43 0306 	orr.w	r3, r3, r6
 80007b2:	4770      	bx	lr
 80007b4:	ea94 0f0c 	teq	r4, ip
 80007b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007bc:	bf18      	it	ne
 80007be:	ea95 0f0c 	teqne	r5, ip
 80007c2:	d00c      	beq.n	80007de <__aeabi_dmul+0x206>
 80007c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ce:	d1d1      	bne.n	8000774 <__aeabi_dmul+0x19c>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d8:	f04f 0000 	mov.w	r0, #0
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
 80007de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e2:	bf06      	itte	eq
 80007e4:	4610      	moveq	r0, r2
 80007e6:	4619      	moveq	r1, r3
 80007e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ec:	d019      	beq.n	8000822 <__aeabi_dmul+0x24a>
 80007ee:	ea94 0f0c 	teq	r4, ip
 80007f2:	d102      	bne.n	80007fa <__aeabi_dmul+0x222>
 80007f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f8:	d113      	bne.n	8000822 <__aeabi_dmul+0x24a>
 80007fa:	ea95 0f0c 	teq	r5, ip
 80007fe:	d105      	bne.n	800080c <__aeabi_dmul+0x234>
 8000800:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000804:	bf1c      	itt	ne
 8000806:	4610      	movne	r0, r2
 8000808:	4619      	movne	r1, r3
 800080a:	d10a      	bne.n	8000822 <__aeabi_dmul+0x24a>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000818:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000826:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800082a:	bd70      	pop	{r4, r5, r6, pc}

0800082c <__aeabi_ddiv>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000832:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083a:	bf1d      	ittte	ne
 800083c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000840:	ea94 0f0c 	teqne	r4, ip
 8000844:	ea95 0f0c 	teqne	r5, ip
 8000848:	f000 f8a7 	bleq	800099a <__aeabi_ddiv+0x16e>
 800084c:	eba4 0405 	sub.w	r4, r4, r5
 8000850:	ea81 0e03 	eor.w	lr, r1, r3
 8000854:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000858:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800085c:	f000 8088 	beq.w	8000970 <__aeabi_ddiv+0x144>
 8000860:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000864:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000868:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800086c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000870:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000874:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000878:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800087c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000880:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000884:	429d      	cmp	r5, r3
 8000886:	bf08      	it	eq
 8000888:	4296      	cmpeq	r6, r2
 800088a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800088e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000892:	d202      	bcs.n	800089a <__aeabi_ddiv+0x6e>
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	1ab6      	subs	r6, r6, r2
 800089c:	eb65 0503 	sbc.w	r5, r5, r3
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000908:	ea55 0e06 	orrs.w	lr, r5, r6
 800090c:	d018      	beq.n	8000940 <__aeabi_ddiv+0x114>
 800090e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000912:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000916:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800091e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000922:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000926:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092a:	d1c0      	bne.n	80008ae <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000930:	d10b      	bne.n	800094a <__aeabi_ddiv+0x11e>
 8000932:	ea41 0100 	orr.w	r1, r1, r0
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800093e:	e7b6      	b.n	80008ae <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000944:	bf04      	itt	eq
 8000946:	4301      	orreq	r1, r0
 8000948:	2000      	moveq	r0, #0
 800094a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800094e:	bf88      	it	hi
 8000950:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000954:	f63f aeaf 	bhi.w	80006b6 <__aeabi_dmul+0xde>
 8000958:	ebb5 0c03 	subs.w	ip, r5, r3
 800095c:	bf04      	itt	eq
 800095e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000966:	f150 0000 	adcs.w	r0, r0, #0
 800096a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000974:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000978:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800097c:	bfc2      	ittt	gt
 800097e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000986:	bd70      	popgt	{r4, r5, r6, pc}
 8000988:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800098c:	f04f 0e00 	mov.w	lr, #0
 8000990:	3c01      	subs	r4, #1
 8000992:	e690      	b.n	80006b6 <__aeabi_dmul+0xde>
 8000994:	ea45 0e06 	orr.w	lr, r5, r6
 8000998:	e68d      	b.n	80006b6 <__aeabi_dmul+0xde>
 800099a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800099e:	ea94 0f0c 	teq	r4, ip
 80009a2:	bf08      	it	eq
 80009a4:	ea95 0f0c 	teqeq	r5, ip
 80009a8:	f43f af3b 	beq.w	8000822 <__aeabi_dmul+0x24a>
 80009ac:	ea94 0f0c 	teq	r4, ip
 80009b0:	d10a      	bne.n	80009c8 <__aeabi_ddiv+0x19c>
 80009b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009b6:	f47f af34 	bne.w	8000822 <__aeabi_dmul+0x24a>
 80009ba:	ea95 0f0c 	teq	r5, ip
 80009be:	f47f af25 	bne.w	800080c <__aeabi_dmul+0x234>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e72c      	b.n	8000822 <__aeabi_dmul+0x24a>
 80009c8:	ea95 0f0c 	teq	r5, ip
 80009cc:	d106      	bne.n	80009dc <__aeabi_ddiv+0x1b0>
 80009ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d2:	f43f aefd 	beq.w	80007d0 <__aeabi_dmul+0x1f8>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e722      	b.n	8000822 <__aeabi_dmul+0x24a>
 80009dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e6:	f47f aec5 	bne.w	8000774 <__aeabi_dmul+0x19c>
 80009ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ee:	f47f af0d 	bne.w	800080c <__aeabi_dmul+0x234>
 80009f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009f6:	f47f aeeb 	bne.w	80007d0 <__aeabi_dmul+0x1f8>
 80009fa:	e712      	b.n	8000822 <__aeabi_dmul+0x24a>

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b80c 	b.w	8000acc <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f00a fe46 	bl	800b74c <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <deregister_tm_clones>:
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <deregister_tm_clones+0x10>)
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <deregister_tm_clones+0x14>)
 8000ad4:	4283      	cmp	r3, r0
 8000ad6:	d002      	beq.n	8000ade <deregister_tm_clones+0xe>
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <deregister_tm_clones+0x18>)
 8000ada:	b103      	cbz	r3, 8000ade <deregister_tm_clones+0xe>
 8000adc:	4718      	bx	r3
 8000ade:	4770      	bx	lr
 8000ae0:	20000278 	.word	0x20000278
 8000ae4:	20000278 	.word	0x20000278
 8000ae8:	00000000 	.word	0x00000000

08000aec <register_tm_clones>:
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <register_tm_clones+0x18>)
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <register_tm_clones+0x1c>)
 8000af0:	1a1b      	subs	r3, r3, r0
 8000af2:	0fd9      	lsrs	r1, r3, #31
 8000af4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000af8:	1049      	asrs	r1, r1, #1
 8000afa:	d002      	beq.n	8000b02 <register_tm_clones+0x16>
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <register_tm_clones+0x20>)
 8000afe:	b103      	cbz	r3, 8000b02 <register_tm_clones+0x16>
 8000b00:	4718      	bx	r3
 8000b02:	4770      	bx	lr
 8000b04:	20000278 	.word	0x20000278
 8000b08:	20000278 	.word	0x20000278
 8000b0c:	00000000 	.word	0x00000000

08000b10 <__do_global_dtors_aux>:
 8000b10:	b510      	push	{r4, lr}
 8000b12:	4c06      	ldr	r4, [pc, #24]	@ (8000b2c <__do_global_dtors_aux+0x1c>)
 8000b14:	7823      	ldrb	r3, [r4, #0]
 8000b16:	b943      	cbnz	r3, 8000b2a <__do_global_dtors_aux+0x1a>
 8000b18:	f7ff ffda 	bl	8000ad0 <deregister_tm_clones>
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__do_global_dtors_aux+0x20>)
 8000b1e:	b113      	cbz	r3, 8000b26 <__do_global_dtors_aux+0x16>
 8000b20:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <__do_global_dtors_aux+0x24>)
 8000b22:	f3af 8000 	nop.w
 8000b26:	2301      	movs	r3, #1
 8000b28:	7023      	strb	r3, [r4, #0]
 8000b2a:	bd10      	pop	{r4, pc}
 8000b2c:	20000278 	.word	0x20000278
 8000b30:	00000000 	.word	0x00000000
 8000b34:	0800ba44 	.word	0x0800ba44

08000b38 <frame_dummy>:
 8000b38:	b508      	push	{r3, lr}
 8000b3a:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <frame_dummy+0x18>)
 8000b3c:	b11b      	cbz	r3, 8000b46 <frame_dummy+0xe>
 8000b3e:	4905      	ldr	r1, [pc, #20]	@ (8000b54 <frame_dummy+0x1c>)
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <frame_dummy+0x20>)
 8000b42:	f3af 8000 	nop.w
 8000b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b4a:	f7ff bfcf 	b.w	8000aec <register_tm_clones>
 8000b4e:	bf00      	nop
 8000b50:	00000000 	.word	0x00000000
 8000b54:	2000027c 	.word	0x2000027c
 8000b58:	0800ba44 	.word	0x0800ba44

08000b5c <EPD_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_Reset(void)
{
 8000b5c:	b508      	push	{r3, lr}
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2108      	movs	r1, #8
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f003 fb52 	bl	800420e <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 8000b6a:	2014      	movs	r0, #20
 8000b6c:	f002 f996 	bl	8002e9c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f003 fb49 	bl	800420e <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f002 f98d 	bl	8002e9c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2108      	movs	r1, #8
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f003 fb40 	bl	800420e <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 8000b8e:	2014      	movs	r0, #20
 8000b90:	f002 f984 	bl	8002e9c <HAL_Delay>
}
 8000b94:	bd08      	pop	{r3, pc}

08000b96 <EPD_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_SendCommand(UBYTE Reg)
{
 8000b96:	b510      	push	{r4, lr}
 8000b98:	4604      	mov	r4, r0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f003 fb34 	bl	800420e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bae:	f003 fb2e 	bl	800420e <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f000 f94c 	bl	8000e50 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f003 fb25 	bl	800420e <HAL_GPIO_WritePin>
}
 8000bc4:	bd10      	pop	{r4, pc}

08000bc6 <EPD_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_SendData(UBYTE Data)
{
 8000bc6:	b510      	push	{r4, lr}
 8000bc8:	4604      	mov	r4, r0
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2140      	movs	r1, #64	@ 0x40
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd2:	f003 fb1c 	bl	800420e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2110      	movs	r1, #16
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f003 fb16 	bl	800420e <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8000be2:	4620      	mov	r0, r4
 8000be4:	f000 f934 	bl	8000e50 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2110      	movs	r1, #16
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f003 fb0d 	bl	800420e <HAL_GPIO_WritePin>
}
 8000bf4:	bd10      	pop	{r4, pc}

08000bf6 <EPD_SetWindows>:
	Ystart : Y-axis starting position
	Xend : End position of X-axis
	Yend : End position of Y-axis
******************************************************************************/
static void EPD_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8000bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf8:	4607      	mov	r7, r0
 8000bfa:	460d      	mov	r5, r1
 8000bfc:	4616      	mov	r6, r2
 8000bfe:	461c      	mov	r4, r3
    EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000c00:	2044      	movs	r0, #68	@ 0x44
 8000c02:	f7ff ffc8 	bl	8000b96 <EPD_SendCommand>
    EPD_SendData((Xstart>>3) & 0xFF);
 8000c06:	f3c7 00c7 	ubfx	r0, r7, #3, #8
 8000c0a:	f7ff ffdc 	bl	8000bc6 <EPD_SendData>
    EPD_SendData((Xend>>3) & 0xFF);
 8000c0e:	f3c6 00c7 	ubfx	r0, r6, #3, #8
 8000c12:	f7ff ffd8 	bl	8000bc6 <EPD_SendData>
	
    EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000c16:	2045      	movs	r0, #69	@ 0x45
 8000c18:	f7ff ffbd 	bl	8000b96 <EPD_SendCommand>
    EPD_SendData(Ystart & 0xFF);
 8000c1c:	b2e8      	uxtb	r0, r5
 8000c1e:	f7ff ffd2 	bl	8000bc6 <EPD_SendData>
    EPD_SendData((Ystart >> 8) & 0xFF);
 8000c22:	0a28      	lsrs	r0, r5, #8
 8000c24:	f7ff ffcf 	bl	8000bc6 <EPD_SendData>
    EPD_SendData(Yend & 0xFF);
 8000c28:	b2e0      	uxtb	r0, r4
 8000c2a:	f7ff ffcc 	bl	8000bc6 <EPD_SendData>
    EPD_SendData((Yend >> 8) & 0xFF);
 8000c2e:	0a20      	lsrs	r0, r4, #8
 8000c30:	f7ff ffc9 	bl	8000bc6 <EPD_SendData>
}
 8000c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c36 <EPD_SetCursor>:
parameter:
	Xstart : X-axis starting position
	Ystart : Y-axis starting position
******************************************************************************/
static void EPD_SetCursor(UWORD Xstart, UWORD Ystart)
{
 8000c36:	b538      	push	{r3, r4, r5, lr}
 8000c38:	4605      	mov	r5, r0
 8000c3a:	460c      	mov	r4, r1
    EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000c3c:	204e      	movs	r0, #78	@ 0x4e
 8000c3e:	f7ff ffaa 	bl	8000b96 <EPD_SendCommand>
    EPD_SendData(Xstart & 0xFF);
 8000c42:	b2e8      	uxtb	r0, r5
 8000c44:	f7ff ffbf 	bl	8000bc6 <EPD_SendData>

    EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000c48:	204f      	movs	r0, #79	@ 0x4f
 8000c4a:	f7ff ffa4 	bl	8000b96 <EPD_SendCommand>
    EPD_SendData(Ystart & 0xFF);
 8000c4e:	b2e0      	uxtb	r0, r4
 8000c50:	f7ff ffb9 	bl	8000bc6 <EPD_SendData>
    EPD_SendData((Ystart >> 8) & 0xFF);
 8000c54:	0a20      	lsrs	r0, r4, #8
 8000c56:	f7ff ffb6 	bl	8000bc6 <EPD_SendData>
}
 8000c5a:	bd38      	pop	{r3, r4, r5, pc}

08000c5c <EPD_ReadBusy>:
{
 8000c5c:	b508      	push	{r3, lr}
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8000c5e:	2120      	movs	r1, #32
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c64:	f003 facc 	bl	8004200 <HAL_GPIO_ReadPin>
 8000c68:	b118      	cbz	r0, 8000c72 <EPD_ReadBusy+0x16>
		DEV_Delay_ms(10);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f002 f916 	bl	8002e9c <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8000c70:	e7f5      	b.n	8000c5e <EPD_ReadBusy+0x2>
	DEV_Delay_ms(10);
 8000c72:	200a      	movs	r0, #10
 8000c74:	f002 f912 	bl	8002e9c <HAL_Delay>
}
 8000c78:	bd08      	pop	{r3, pc}

08000c7a <EPD_LUT>:
{
 8000c7a:	b538      	push	{r3, r4, r5, lr}
 8000c7c:	4605      	mov	r5, r0
	EPD_SendCommand(0x32);
 8000c7e:	2032      	movs	r0, #50	@ 0x32
 8000c80:	f7ff ff89 	bl	8000b96 <EPD_SendCommand>
	for(count=0; count<153; count++) 
 8000c84:	2400      	movs	r4, #0
 8000c86:	e004      	b.n	8000c92 <EPD_LUT+0x18>
		EPD_SendData(lut[count]); 
 8000c88:	5d28      	ldrb	r0, [r5, r4]
 8000c8a:	f7ff ff9c 	bl	8000bc6 <EPD_SendData>
	for(count=0; count<153; count++) 
 8000c8e:	3401      	adds	r4, #1
 8000c90:	b2e4      	uxtb	r4, r4
 8000c92:	2c98      	cmp	r4, #152	@ 0x98
 8000c94:	d9f8      	bls.n	8000c88 <EPD_LUT+0xe>
	EPD_ReadBusy();
 8000c96:	f7ff ffe1 	bl	8000c5c <EPD_ReadBusy>
}
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}

08000c9c <EPD_2IN13_V2_LUT_by_host>:
{
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	4604      	mov	r4, r0
	EPD_LUT((UBYTE *)lut);			//lut
 8000ca0:	f7ff ffeb 	bl	8000c7a <EPD_LUT>
	EPD_SendCommand(0x3f);
 8000ca4:	203f      	movs	r0, #63	@ 0x3f
 8000ca6:	f7ff ff76 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(*(lut+153));
 8000caa:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 8000cae:	f7ff ff8a 	bl	8000bc6 <EPD_SendData>
	EPD_SendCommand(0x03);	// gate voltage
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f7ff ff6f 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(*(lut+154));
 8000cb8:	f894 009a 	ldrb.w	r0, [r4, #154]	@ 0x9a
 8000cbc:	f7ff ff83 	bl	8000bc6 <EPD_SendData>
	EPD_SendCommand(0x04);	// source voltage
 8000cc0:	2004      	movs	r0, #4
 8000cc2:	f7ff ff68 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(*(lut+155));	// VSH
 8000cc6:	f894 009b 	ldrb.w	r0, [r4, #155]	@ 0x9b
 8000cca:	f7ff ff7c 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(*(lut+156));	// VSH2
 8000cce:	f894 009c 	ldrb.w	r0, [r4, #156]	@ 0x9c
 8000cd2:	f7ff ff78 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(*(lut+157));	// VSL
 8000cd6:	f894 009d 	ldrb.w	r0, [r4, #157]	@ 0x9d
 8000cda:	f7ff ff74 	bl	8000bc6 <EPD_SendData>
	EPD_SendCommand(0x2c);		// VCOM
 8000cde:	202c      	movs	r0, #44	@ 0x2c
 8000ce0:	f7ff ff59 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(*(lut+158));
 8000ce4:	f894 009e 	ldrb.w	r0, [r4, #158]	@ 0x9e
 8000ce8:	f7ff ff6d 	bl	8000bc6 <EPD_SendData>
}
 8000cec:	bd10      	pop	{r4, pc}

08000cee <EPD_TurnOnDisplay>:
{
 8000cee:	b508      	push	{r3, lr}
	EPD_SendCommand(0x22); // Display Update Control
 8000cf0:	2022      	movs	r0, #34	@ 0x22
 8000cf2:	f7ff ff50 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0xc7);
 8000cf6:	20c7      	movs	r0, #199	@ 0xc7
 8000cf8:	f7ff ff65 	bl	8000bc6 <EPD_SendData>
	EPD_SendCommand(0x20); // Activate Display Update Sequence
 8000cfc:	2020      	movs	r0, #32
 8000cfe:	f7ff ff4a 	bl	8000b96 <EPD_SendCommand>
	EPD_ReadBusy();
 8000d02:	f7ff ffab 	bl	8000c5c <EPD_ReadBusy>
}
 8000d06:	bd08      	pop	{r3, pc}

08000d08 <EPD_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_Init(void)
{
 8000d08:	b508      	push	{r3, lr}
	DEV_Digital_Write(EPD_PWR_PIN, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4824      	ldr	r0, [pc, #144]	@ (8000da0 <EPD_Init+0x98>)
 8000d10:	f003 fa7d 	bl	800420e <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8000d14:	2064      	movs	r0, #100	@ 0x64
 8000d16:	f002 f8c1 	bl	8002e9c <HAL_Delay>
	EPD_Reset();
 8000d1a:	f7ff ff1f 	bl	8000b5c <EPD_Reset>
	DEV_Delay_ms(100);
 8000d1e:	2064      	movs	r0, #100	@ 0x64
 8000d20:	f002 f8bc 	bl	8002e9c <HAL_Delay>

	EPD_ReadBusy();   
 8000d24:	f7ff ff9a 	bl	8000c5c <EPD_ReadBusy>
	EPD_SendCommand(0x12);  //SWRESET
 8000d28:	2012      	movs	r0, #18
 8000d2a:	f7ff ff34 	bl	8000b96 <EPD_SendCommand>
	EPD_ReadBusy();   
 8000d2e:	f7ff ff95 	bl	8000c5c <EPD_ReadBusy>

	EPD_SendCommand(0x01); //Driver output control      
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff ff2f 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0xf9);
 8000d38:	20f9      	movs	r0, #249	@ 0xf9
 8000d3a:	f7ff ff44 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(0x00);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff ff41 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(0x00);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff ff3e 	bl	8000bc6 <EPD_SendData>

	EPD_SendCommand(0x11); //data entry mode       
 8000d4a:	2011      	movs	r0, #17
 8000d4c:	f7ff ff23 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x03);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f7ff ff38 	bl	8000bc6 <EPD_SendData>

	EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000d56:	23f9      	movs	r3, #249	@ 0xf9
 8000d58:	2279      	movs	r2, #121	@ 0x79
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	f7ff ff4a 	bl	8000bf6 <EPD_SetWindows>
	EPD_SetCursor(0, 0);
 8000d62:	2100      	movs	r1, #0
 8000d64:	4608      	mov	r0, r1
 8000d66:	f7ff ff66 	bl	8000c36 <EPD_SetCursor>
	
	EPD_SendCommand(0x3C); //BorderWavefrom
 8000d6a:	203c      	movs	r0, #60	@ 0x3c
 8000d6c:	f7ff ff13 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x05);	
 8000d70:	2005      	movs	r0, #5
 8000d72:	f7ff ff28 	bl	8000bc6 <EPD_SendData>

	EPD_SendCommand(0x21); //  Display update control
 8000d76:	2021      	movs	r0, #33	@ 0x21
 8000d78:	f7ff ff0d 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x00);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ff22 	bl	8000bc6 <EPD_SendData>
	EPD_SendData(0x80);	
 8000d82:	2080      	movs	r0, #128	@ 0x80
 8000d84:	f7ff ff1f 	bl	8000bc6 <EPD_SendData>

	EPD_SendCommand(0x18); //Read built-in temperature sensor
 8000d88:	2018      	movs	r0, #24
 8000d8a:	f7ff ff04 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x80);	
 8000d8e:	2080      	movs	r0, #128	@ 0x80
 8000d90:	f7ff ff19 	bl	8000bc6 <EPD_SendData>

	EPD_ReadBusy();
 8000d94:	f7ff ff62 	bl	8000c5c <EPD_ReadBusy>
	EPD_2IN13_V2_LUT_by_host(WS_20_30);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <EPD_Init+0x9c>)
 8000d9a:	f7ff ff7f 	bl	8000c9c <EPD_2IN13_V2_LUT_by_host>
}
 8000d9e:	bd08      	pop	{r3, pc}
 8000da0:	48000400 	.word	0x48000400
 8000da4:	20000000 	.word	0x20000000

08000da8 <EPD_Display_Base>:
function :	Refresh a base image
parameter:
	image : Image data	
******************************************************************************/
void EPD_Display_Base(UBYTE *Image)
{  
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	4605      	mov	r5, r0
	UWORD Width, Height;
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
    Height = EPD_HEIGHT;
	
	EPD_SendCommand(0x24);   //Write Black and White image to RAM
 8000dac:	2024      	movs	r0, #36	@ 0x24
 8000dae:	f7ff fef2 	bl	8000b96 <EPD_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000db2:	2600      	movs	r6, #0
 8000db4:	e001      	b.n	8000dba <EPD_Display_Base+0x12>
 8000db6:	3601      	adds	r6, #1
 8000db8:	b2b6      	uxth	r6, r6
 8000dba:	2ef9      	cmp	r6, #249	@ 0xf9
 8000dbc:	d80a      	bhi.n	8000dd4 <EPD_Display_Base+0x2c>
        for (UWORD i = 0; i < Width; i++) {        
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2c0f      	cmp	r4, #15
 8000dc2:	d8f8      	bhi.n	8000db6 <EPD_Display_Base+0xe>
			EPD_SendData(Image[i + j * Width]);
 8000dc4:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 8000dc8:	5ce8      	ldrb	r0, [r5, r3]
 8000dca:	f7ff fefc 	bl	8000bc6 <EPD_SendData>
        for (UWORD i = 0; i < Width; i++) {        
 8000dce:	3401      	adds	r4, #1
 8000dd0:	b2a4      	uxth	r4, r4
 8000dd2:	e7f5      	b.n	8000dc0 <EPD_Display_Base+0x18>
		}
	}
	EPD_SendCommand(0x26);   //Write Black and White image to RAM
 8000dd4:	2026      	movs	r0, #38	@ 0x26
 8000dd6:	f7ff fede 	bl	8000b96 <EPD_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000dda:	2600      	movs	r6, #0
 8000ddc:	e00a      	b.n	8000df4 <EPD_Display_Base+0x4c>
        for (UWORD i = 0; i < Width; i++) {
			EPD_SendData(Image[i + j * Width]);
 8000dde:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 8000de2:	5ce8      	ldrb	r0, [r5, r3]
 8000de4:	f7ff feef 	bl	8000bc6 <EPD_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000de8:	3401      	adds	r4, #1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	2c0f      	cmp	r4, #15
 8000dee:	d9f6      	bls.n	8000dde <EPD_Display_Base+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8000df0:	3601      	adds	r6, #1
 8000df2:	b2b6      	uxth	r6, r6
 8000df4:	2ef9      	cmp	r6, #249	@ 0xf9
 8000df6:	d801      	bhi.n	8000dfc <EPD_Display_Base+0x54>
        for (UWORD i = 0; i < Width; i++) {
 8000df8:	2400      	movs	r4, #0
 8000dfa:	e7f7      	b.n	8000dec <EPD_Display_Base+0x44>
		}
	}
	EPD_TurnOnDisplay();	
 8000dfc:	f7ff ff77 	bl	8000cee <EPD_TurnOnDisplay>
}
 8000e00:	bd70      	pop	{r4, r5, r6, pc}

08000e02 <EPD_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_Sleep(void)
{	
 8000e02:	b508      	push	{r3, lr}
	// EPD_SendCommand(0x22); //enter deep sleep
	// EPD_SendData(0xC3); 
	// EPD_SendCommand(0x20); //enter deep sleep
	EPD_SendCommand(0x10); //enter deep sleep
 8000e04:	2010      	movs	r0, #16
 8000e06:	f7ff fec6 	bl	8000b96 <EPD_SendCommand>
	EPD_SendData(0x01); 
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff fedb 	bl	8000bc6 <EPD_SendData>
	DEV_Delay_ms(100);
 8000e10:	2064      	movs	r0, #100	@ 0x64
 8000e12:	f002 f843 	bl	8002e9c <HAL_Delay>
}
 8000e16:	bd08      	pop	{r3, pc}

08000e18 <EPD_Exit>:

void EPD_Exit(void)
{
 8000e18:	b508      	push	{r3, lr}
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2140      	movs	r1, #64	@ 0x40
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e22:	f003 f9f4 	bl	800420e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2e:	f003 f9ee 	bl	800420e <HAL_GPIO_WritePin>

    //close 5V
	DEV_Digital_Write(EPD_PWR_PIN, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2102      	movs	r1, #2
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <EPD_Exit+0x34>)
 8000e38:	f003 f9e9 	bl	800420e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2108      	movs	r1, #8
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f003 f9e3 	bl	800420e <HAL_GPIO_WritePin>
 8000e48:	bd08      	pop	{r3, pc}
 8000e4a:	bf00      	nop
 8000e4c:	48000400 	.word	0x48000400

08000e50 <DEV_SPI_WriteByte>:
#include "EPD_Conf.h"
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000e50:	b500      	push	{lr}
 8000e52:	b083      	sub	sp, #12
 8000e54:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f10d 0107 	add.w	r1, sp, #7
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <DEV_SPI_WriteByte+0x20>)
 8000e64:	f005 fdb6 	bl	80069d4 <HAL_SPI_Transmit>
}
 8000e68:	b003      	add	sp, #12
 8000e6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e6e:	bf00      	nop
 8000e70:	20001318 	.word	0x20001318

08000e74 <EPD_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void EPD_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000e74:	b430      	push	{r4, r5}
    Paint.Image = NULL;
 8000e76:	4c12      	ldr	r4, [pc, #72]	@ (8000ec0 <EPD_NewImage+0x4c>)
 8000e78:	2500      	movs	r5, #0
 8000e7a:	6025      	str	r5, [r4, #0]
    Paint.Image = image;
 8000e7c:	6020      	str	r0, [r4, #0]

    Paint.WidthMemory = Width;
 8000e7e:	8121      	strh	r1, [r4, #8]
    Paint.HeightMemory = Height;
 8000e80:	8162      	strh	r2, [r4, #10]
    Paint.Color = Color;    
 8000e82:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8000e86:	81a0      	strh	r0, [r4, #12]
	Paint.Scale = 2;
 8000e88:	2002      	movs	r0, #2
 8000e8a:	82e0      	strh	r0, [r4, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000e8c:	f011 0f07 	tst.w	r1, #7
 8000e90:	d10d      	bne.n	8000eae <EPD_NewImage+0x3a>
 8000e92:	08cc      	lsrs	r4, r1, #3
 8000e94:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <EPD_NewImage+0x4c>)
 8000e96:	8244      	strh	r4, [r0, #18]
    Paint.HeightByte = Height;    
 8000e98:	8282      	strh	r2, [r0, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000e9a:	81c3      	strh	r3, [r0, #14]
    Paint.Mirror = MIRROR_NONE;
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	8204      	strh	r4, [r0, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000ea0:	b143      	cbz	r3, 8000eb4 <EPD_NewImage+0x40>
 8000ea2:	2bb4      	cmp	r3, #180	@ 0xb4
 8000ea4:	d006      	beq.n	8000eb4 <EPD_NewImage+0x40>
        Paint.Width = Width;
        Paint.Height = Height;
    } else {
        Paint.Width = Height;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <EPD_NewImage+0x4c>)
 8000ea8:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8000eaa:	80d9      	strh	r1, [r3, #6]
    }
}
 8000eac:	e005      	b.n	8000eba <EPD_NewImage+0x46>
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000eae:	08cc      	lsrs	r4, r1, #3
 8000eb0:	3401      	adds	r4, #1
 8000eb2:	e7ef      	b.n	8000e94 <EPD_NewImage+0x20>
        Paint.Width = Width;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	@ (8000ec0 <EPD_NewImage+0x4c>)
 8000eb6:	8099      	strh	r1, [r3, #4]
        Paint.Height = Height;
 8000eb8:	80da      	strh	r2, [r3, #6]
}
 8000eba:	bc30      	pop	{r4, r5}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000294 	.word	0x20000294

08000ec4 <EPD_SelectImage>:
parameter:
    image : Pointer to the image cache
******************************************************************************/
void EPD_SelectImage(UBYTE *image)
{
    Paint.Image = image;
 8000ec4:	4b01      	ldr	r3, [pc, #4]	@ (8000ecc <EPD_SelectImage+0x8>)
 8000ec6:	6018      	str	r0, [r3, #0]
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000294 	.word	0x20000294

08000ed0 <EPD_SetRotate>:
parameter:
    Rotate : 0,90,180,270
******************************************************************************/
void EPD_SetRotate(UWORD Rotate)
{
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b130      	cbz	r0, 8000ee2 <EPD_SetRotate+0x12>
 8000ed4:	285a      	cmp	r0, #90	@ 0x5a
 8000ed6:	d004      	beq.n	8000ee2 <EPD_SetRotate+0x12>
 8000ed8:	28b4      	cmp	r0, #180	@ 0xb4
 8000eda:	d002      	beq.n	8000ee2 <EPD_SetRotate+0x12>
 8000edc:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8000ee0:	d101      	bne.n	8000ee6 <EPD_SetRotate+0x16>
        Paint.Rotate = Rotate;
 8000ee2:	4a01      	ldr	r2, [pc, #4]	@ (8000ee8 <EPD_SetRotate+0x18>)
 8000ee4:	81d3      	strh	r3, [r2, #14]
    } else {
    }
}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000294 	.word	0x20000294

08000eec <EPD_SetPixel>:
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void EPD_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000eec:	4b58      	ldr	r3, [pc, #352]	@ (8001050 <EPD_SetPixel+0x164>)
 8000eee:	889b      	ldrh	r3, [r3, #4]
 8000ef0:	4283      	cmp	r3, r0
 8000ef2:	f0c0 80ab 	bcc.w	800104c <EPD_SetPixel+0x160>
 8000ef6:	4b56      	ldr	r3, [pc, #344]	@ (8001050 <EPD_SetPixel+0x164>)
 8000ef8:	88db      	ldrh	r3, [r3, #6]
 8000efa:	428b      	cmp	r3, r1
 8000efc:	f0c0 80a6 	bcc.w	800104c <EPD_SetPixel+0x160>
{
 8000f00:	b410      	push	{r4}
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000f02:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f04:	89db      	ldrh	r3, [r3, #14]
 8000f06:	2bb4      	cmp	r3, #180	@ 0xb4
 8000f08:	d016      	beq.n	8000f38 <EPD_SetPixel+0x4c>
 8000f0a:	d80a      	bhi.n	8000f22 <EPD_SetPixel+0x36>
 8000f0c:	b1fb      	cbz	r3, 8000f4e <EPD_SetPixel+0x62>
 8000f0e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000f10:	d13b      	bne.n	8000f8a <EPD_SetPixel+0x9e>
    case 0:
        X = Xpoint;
        Y = Ypoint;  
        break;
    case 90:
        X = Paint.WidthMemory - Ypoint - 1;
 8000f12:	4b4f      	ldr	r3, [pc, #316]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f14:	891b      	ldrh	r3, [r3, #8]
 8000f16:	1a5b      	subs	r3, r3, r1
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
        Y = Xpoint;
 8000f1c:	4601      	mov	r1, r0
        X = Paint.WidthMemory - Ypoint - 1;
 8000f1e:	b298      	uxth	r0, r3
        break;
 8000f20:	e015      	b.n	8000f4e <EPD_SetPixel+0x62>
    switch(Paint.Rotate) {
 8000f22:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000f26:	d130      	bne.n	8000f8a <EPD_SetPixel+0x9e>
        X = Paint.WidthMemory - Xpoint - 1;
        Y = Paint.HeightMemory - Ypoint - 1;
        break;
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
 8000f28:	4b49      	ldr	r3, [pc, #292]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f2a:	895b      	ldrh	r3, [r3, #10]
 8000f2c:	1a1b      	subs	r3, r3, r0
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3b01      	subs	r3, #1
        X = Ypoint;
 8000f32:	4608      	mov	r0, r1
        Y = Paint.HeightMemory - Xpoint - 1;
 8000f34:	b299      	uxth	r1, r3
        break;
 8000f36:	e00a      	b.n	8000f4e <EPD_SetPixel+0x62>
        X = Paint.WidthMemory - Xpoint - 1;
 8000f38:	4c45      	ldr	r4, [pc, #276]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f3a:	8923      	ldrh	r3, [r4, #8]
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b298      	uxth	r0, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 8000f44:	8963      	ldrh	r3, [r4, #10]
 8000f46:	1a5b      	subs	r3, r3, r1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b299      	uxth	r1, r3
    default:
        return;
    }
    
    switch(Paint.Mirror) {
 8000f4e:	4b40      	ldr	r3, [pc, #256]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f50:	8a1b      	ldrh	r3, [r3, #16]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d819      	bhi.n	8000f8a <EPD_SetPixel+0x9e>
 8000f56:	e8df f003 	tbb	[pc, r3]
 8000f5a:	0208      	.short	0x0208
 8000f5c:	221b      	.short	0x221b
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f60:	891b      	ldrh	r3, [r3, #8]
 8000f62:	1a1b      	subs	r3, r3, r0
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3b01      	subs	r3, #1
 8000f68:	b298      	uxth	r0, r3
        break;
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000f6a:	4b39      	ldr	r3, [pc, #228]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f6c:	891b      	ldrh	r3, [r3, #8]
 8000f6e:	4283      	cmp	r3, r0
 8000f70:	d30b      	bcc.n	8000f8a <EPD_SetPixel+0x9e>
 8000f72:	4b37      	ldr	r3, [pc, #220]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f74:	895b      	ldrh	r3, [r3, #10]
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d307      	bcc.n	8000f8a <EPD_SetPixel+0x9e>
        return;
    }
    
    if(Paint.Scale == 2){
 8000f7a:	4b35      	ldr	r3, [pc, #212]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f7c:	8adb      	ldrh	r3, [r3, #22]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d019      	beq.n	8000fb6 <EPD_SetPixel+0xca>
        UBYTE Rdata = Paint.Image[Addr];
        if(Color == BLACK)
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
    }else if(Paint.Scale == 4){
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d030      	beq.n	8000fe8 <EPD_SetPixel+0xfc>
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
        UBYTE Rdata = Paint.Image[Addr];
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
    }else if(Paint.Scale == 7){
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	d048      	beq.n	800101c <EPD_SetPixel+0x130>
		UBYTE Rdata = Paint.Image[Addr];
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8000f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f8e:	4770      	bx	lr
        Y = Paint.HeightMemory - Y - 1;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <EPD_SetPixel+0x164>)
 8000f92:	895b      	ldrh	r3, [r3, #10]
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b299      	uxth	r1, r3
        break;
 8000f9c:	e7e5      	b.n	8000f6a <EPD_SetPixel+0x7e>
        X = Paint.WidthMemory - X - 1;
 8000f9e:	4c2c      	ldr	r4, [pc, #176]	@ (8001050 <EPD_SetPixel+0x164>)
 8000fa0:	8923      	ldrh	r3, [r4, #8]
 8000fa2:	1a1b      	subs	r3, r3, r0
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b298      	uxth	r0, r3
        Y = Paint.HeightMemory - Y - 1;
 8000faa:	8963      	ldrh	r3, [r4, #10]
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	b299      	uxth	r1, r3
        break;
 8000fb4:	e7d9      	b.n	8000f6a <EPD_SetPixel+0x7e>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8000fb6:	f3c0 03cf 	ubfx	r3, r0, #3, #16
 8000fba:	4c25      	ldr	r4, [pc, #148]	@ (8001050 <EPD_SetPixel+0x164>)
 8000fbc:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 8000fc0:	fb0c 3301 	mla	r3, ip, r1, r3
        UBYTE Rdata = Paint.Image[Addr];
 8000fc4:	6824      	ldr	r4, [r4, #0]
 8000fc6:	5ce1      	ldrb	r1, [r4, r3]
        if(Color == BLACK)
 8000fc8:	b93a      	cbnz	r2, 8000fda <EPD_SetPixel+0xee>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000fca:	f000 0007 	and.w	r0, r0, #7
 8000fce:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8000fd2:	4102      	asrs	r2, r0
 8000fd4:	4011      	ands	r1, r2
 8000fd6:	54e1      	strb	r1, [r4, r3]
 8000fd8:	e7d7      	b.n	8000f8a <EPD_SetPixel+0x9e>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000fda:	f000 0007 	and.w	r0, r0, #7
 8000fde:	2280      	movs	r2, #128	@ 0x80
 8000fe0:	4102      	asrs	r2, r0
 8000fe2:	4311      	orrs	r1, r2
 8000fe4:	54e1      	strb	r1, [r4, r3]
 8000fe6:	e7d0      	b.n	8000f8a <EPD_SetPixel+0x9e>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000fe8:	f3c0 048f 	ubfx	r4, r0, #2, #16
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <EPD_SetPixel+0x164>)
 8000fee:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8000ff2:	fb0c 4101 	mla	r1, ip, r1, r4
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8000ff6:	f002 0203 	and.w	r2, r2, #3
        UBYTE Rdata = Paint.Image[Addr];
 8000ffa:	681c      	ldr	r4, [r3, #0]
 8000ffc:	f814 c001 	ldrb.w	ip, [r4, r1]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8001000:	f000 0003 	and.w	r0, r0, #3
 8001004:	0040      	lsls	r0, r0, #1
 8001006:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 800100a:	4103      	asrs	r3, r0
 800100c:	ea03 030c 	and.w	r3, r3, ip
 8001010:	b25b      	sxtb	r3, r3
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8001012:	0192      	lsls	r2, r2, #6
 8001014:	4102      	asrs	r2, r0
 8001016:	4313      	orrs	r3, r2
 8001018:	5463      	strb	r3, [r4, r1]
 800101a:	e7b6      	b.n	8000f8a <EPD_SetPixel+0x9e>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 800101c:	f3c0 044f 	ubfx	r4, r0, #1, #16
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <EPD_SetPixel+0x164>)
 8001022:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8001026:	fb0c 4101 	mla	r1, ip, r1, r4
		UBYTE Rdata = Paint.Image[Addr];
 800102a:	681c      	ldr	r4, [r3, #0]
 800102c:	f814 c001 	ldrb.w	ip, [r4, r1]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8001030:	f000 0001 	and.w	r0, r0, #1
 8001034:	0080      	lsls	r0, r0, #2
 8001036:	f06f 03f0 	mvn.w	r3, #240	@ 0xf0
 800103a:	4103      	asrs	r3, r0
 800103c:	ea03 030c 	and.w	r3, r3, ip
 8001040:	b25b      	sxtb	r3, r3
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	4102      	asrs	r2, r0
 8001046:	4313      	orrs	r3, r2
 8001048:	5463      	strb	r3, [r4, r1]
 800104a:	e79e      	b.n	8000f8a <EPD_SetPixel+0x9e>
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000294 	.word	0x20000294

08001054 <EPD_Clear>:
parameter:
    Color : Painted colors
******************************************************************************/
void EPD_Clear(UWORD Color)
{
	if(Paint.Scale == 2) {
 8001054:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <EPD_Clear+0xc0>)
 8001056:	8adb      	ldrh	r3, [r3, #22]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d01a      	beq.n	8001092 <EPD_Clear+0x3e>
{
 800105c:	b510      	push	{r4, lr}
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = Color;
			}
		}		
    }else if(Paint.Scale == 4) {
 800105e:	2b04      	cmp	r3, #4
 8001060:	d03a      	beq.n	80010d8 <EPD_Clear+0x84>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
			}
		}		
	}else if(Paint.Scale == 7) {
 8001062:	2b07      	cmp	r3, #7
 8001064:	d053      	beq.n	800110e <EPD_Clear+0xba>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8001066:	bd10      	pop	{r4, pc}
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001068:	fb02 320c 	mla	r2, r2, ip, r3
				Paint.Image[Addr] = Color;
 800106c:	4929      	ldr	r1, [pc, #164]	@ (8001114 <EPD_Clear+0xc0>)
 800106e:	6809      	ldr	r1, [r1, #0]
 8001070:	5488      	strb	r0, [r1, r2]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001072:	3301      	adds	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	4a27      	ldr	r2, [pc, #156]	@ (8001114 <EPD_Clear+0xc0>)
 8001078:	8a52      	ldrh	r2, [r2, #18]
 800107a:	429a      	cmp	r2, r3
 800107c:	d8f4      	bhi.n	8001068 <EPD_Clear+0x14>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800107e:	f10c 0c01 	add.w	ip, ip, #1
 8001082:	fa1f fc8c 	uxth.w	ip, ip
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <EPD_Clear+0xc0>)
 8001088:	8a9b      	ldrh	r3, [r3, #20]
 800108a:	4563      	cmp	r3, ip
 800108c:	d904      	bls.n	8001098 <EPD_Clear+0x44>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800108e:	2300      	movs	r3, #0
 8001090:	e7f1      	b.n	8001076 <EPD_Clear+0x22>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001092:	f04f 0c00 	mov.w	ip, #0
 8001096:	e7f6      	b.n	8001086 <EPD_Clear+0x32>
 8001098:	4770      	bx	lr
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800109a:	fb03 1c0e 	mla	ip, r3, lr, r1
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 800109e:	b242      	sxtb	r2, r0
 80010a0:	0113      	lsls	r3, r2, #4
 80010a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	4c19      	ldr	r4, [pc, #100]	@ (8001114 <EPD_Clear+0xc0>)
 80010b0:	6824      	ldr	r4, [r4, #0]
 80010b2:	431a      	orrs	r2, r3
 80010b4:	f804 200c 	strb.w	r2, [r4, ip]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80010b8:	3101      	adds	r1, #1
 80010ba:	b289      	uxth	r1, r1
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <EPD_Clear+0xc0>)
 80010be:	8a5b      	ldrh	r3, [r3, #18]
 80010c0:	428b      	cmp	r3, r1
 80010c2:	d8ea      	bhi.n	800109a <EPD_Clear+0x46>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80010c4:	f10e 0e01 	add.w	lr, lr, #1
 80010c8:	fa1f fe8e 	uxth.w	lr, lr
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <EPD_Clear+0xc0>)
 80010ce:	8a9b      	ldrh	r3, [r3, #20]
 80010d0:	4573      	cmp	r3, lr
 80010d2:	d9c8      	bls.n	8001066 <EPD_Clear+0x12>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80010d4:	2100      	movs	r1, #0
 80010d6:	e7f1      	b.n	80010bc <EPD_Clear+0x68>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80010d8:	f04f 0e00 	mov.w	lr, #0
 80010dc:	e7f6      	b.n	80010cc <EPD_Clear+0x78>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80010de:	f10c 0c01 	add.w	ip, ip, #1
 80010e2:	fa1f fc8c 	uxth.w	ip, ip
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <EPD_Clear+0xc0>)
 80010e8:	8a9b      	ldrh	r3, [r3, #20]
 80010ea:	4563      	cmp	r3, ip
 80010ec:	d9bb      	bls.n	8001066 <EPD_Clear+0x12>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80010ee:	2200      	movs	r2, #0
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <EPD_Clear+0xc0>)
 80010f2:	8a5b      	ldrh	r3, [r3, #18]
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d9f2      	bls.n	80010de <EPD_Clear+0x8a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80010f8:	fb03 210c 	mla	r1, r3, ip, r2
				Paint.Image[Addr] = (Color<<4)|Color;
 80010fc:	b243      	sxtb	r3, r0
 80010fe:	4c05      	ldr	r4, [pc, #20]	@ (8001114 <EPD_Clear+0xc0>)
 8001100:	6824      	ldr	r4, [r4, #0]
 8001102:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 8001106:	5463      	strb	r3, [r4, r1]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001108:	3201      	adds	r2, #1
 800110a:	b292      	uxth	r2, r2
 800110c:	e7f0      	b.n	80010f0 <EPD_Clear+0x9c>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800110e:	f04f 0c00 	mov.w	ip, #0
 8001112:	e7e8      	b.n	80010e6 <EPD_Clear+0x92>
 8001114:	20000294 	.word	0x20000294

08001118 <EPD_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void EPD_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8001118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800111c:	461d      	mov	r5, r3
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <EPD_DrawPoint+0xbc>)
 8001120:	889b      	ldrh	r3, [r3, #4]
 8001122:	4283      	cmp	r3, r0
 8001124:	d353      	bcc.n	80011ce <EPD_DrawPoint+0xb6>
 8001126:	4606      	mov	r6, r0
 8001128:	460f      	mov	r7, r1
 800112a:	4690      	mov	r8, r2
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <EPD_DrawPoint+0xbc>)
 800112e:	88db      	ldrh	r3, [r3, #6]
 8001130:	428b      	cmp	r3, r1
 8001132:	d34c      	bcc.n	80011ce <EPD_DrawPoint+0xb6>
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8001134:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8001138:	2b01      	cmp	r3, #1
 800113a:	d029      	beq.n	8001190 <EPD_DrawPoint+0x78>
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                EPD_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800113c:	f04f 0900 	mov.w	r9, #0
 8001140:	e040      	b.n	80011c4 <EPD_DrawPoint+0xac>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001142:	3401      	adds	r4, #1
 8001144:	b224      	sxth	r4, r4
 8001146:	46a2      	mov	sl, r4
 8001148:	ea4f 0945 	mov.w	r9, r5, lsl #1
 800114c:	f109 39ff 	add.w	r9, r9, #4294967295
 8001150:	454c      	cmp	r4, r9
 8001152:	da3c      	bge.n	80011ce <EPD_DrawPoint+0xb6>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001154:	2300      	movs	r3, #0
 8001156:	454b      	cmp	r3, r9
 8001158:	daf3      	bge.n	8001142 <EPD_DrawPoint+0x2a>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800115a:	eb06 020a 	add.w	r2, r6, sl
 800115e:	1b52      	subs	r2, r2, r5
 8001160:	2a00      	cmp	r2, #0
 8001162:	dbee      	blt.n	8001142 <EPD_DrawPoint+0x2a>
 8001164:	18fa      	adds	r2, r7, r3
 8001166:	1b52      	subs	r2, r2, r5
 8001168:	2a00      	cmp	r2, #0
 800116a:	dbea      	blt.n	8001142 <EPD_DrawPoint+0x2a>
                EPD_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800116c:	1930      	adds	r0, r6, r4
 800116e:	b280      	uxth	r0, r0
 8001170:	fa1f fb83 	uxth.w	fp, r3
 8001174:	eb0b 0107 	add.w	r1, fp, r7
 8001178:	b289      	uxth	r1, r1
 800117a:	1b49      	subs	r1, r1, r5
 800117c:	1b40      	subs	r0, r0, r5
 800117e:	4642      	mov	r2, r8
 8001180:	b289      	uxth	r1, r1
 8001182:	b280      	uxth	r0, r0
 8001184:	f7ff feb2 	bl	8000eec <EPD_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001188:	f10b 0301 	add.w	r3, fp, #1
 800118c:	b21b      	sxth	r3, r3
 800118e:	e7e2      	b.n	8001156 <EPD_DrawPoint+0x3e>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001190:	2400      	movs	r4, #0
 8001192:	e7d8      	b.n	8001146 <EPD_DrawPoint+0x2e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
                EPD_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001194:	eb06 0009 	add.w	r0, r6, r9
 8001198:	b280      	uxth	r0, r0
 800119a:	fa1f f48c 	uxth.w	r4, ip
 800119e:	19e1      	adds	r1, r4, r7
 80011a0:	b289      	uxth	r1, r1
 80011a2:	3901      	subs	r1, #1
 80011a4:	3801      	subs	r0, #1
 80011a6:	4642      	mov	r2, r8
 80011a8:	b289      	uxth	r1, r1
 80011aa:	b280      	uxth	r0, r0
 80011ac:	f7ff fe9e 	bl	8000eec <EPD_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80011b0:	f104 0c01 	add.w	ip, r4, #1
 80011b4:	fa0f fc8c 	sxth.w	ip, ip
 80011b8:	45ac      	cmp	ip, r5
 80011ba:	dbeb      	blt.n	8001194 <EPD_DrawPoint+0x7c>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80011bc:	f109 0901 	add.w	r9, r9, #1
 80011c0:	fa0f f989 	sxth.w	r9, r9
 80011c4:	45a9      	cmp	r9, r5
 80011c6:	da02      	bge.n	80011ce <EPD_DrawPoint+0xb6>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80011c8:	f04f 0c00 	mov.w	ip, #0
 80011cc:	e7f4      	b.n	80011b8 <EPD_DrawPoint+0xa0>
            }
        }
    }
}
 80011ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d2:	bf00      	nop
 80011d4:	20000294 	.word	0x20000294

080011d8 <EPD_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void EPD_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011dc:	b08b      	sub	sp, #44	@ 0x2c
 80011de:	4605      	mov	r5, r0
 80011e0:	460e      	mov	r6, r1
 80011e2:	9206      	str	r2, [sp, #24]
 80011e4:	461c      	mov	r4, r3
 80011e6:	9305      	str	r3, [sp, #20]
 80011e8:	f8bd 1050 	ldrh.w	r1, [sp, #80]	@ 0x50
 80011ec:	9103      	str	r1, [sp, #12]
 80011ee:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 80011f2:	f89d a058 	ldrb.w	sl, [sp, #88]	@ 0x58
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80011f6:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <EPD_DrawLine+0xfc>)
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	4283      	cmp	r3, r0
 80011fc:	d366      	bcc.n	80012cc <EPD_DrawLine+0xf4>
 80011fe:	4610      	mov	r0, r2
 8001200:	4a34      	ldr	r2, [pc, #208]	@ (80012d4 <EPD_DrawLine+0xfc>)
 8001202:	88d2      	ldrh	r2, [r2, #6]
 8001204:	42b2      	cmp	r2, r6
 8001206:	d361      	bcc.n	80012cc <EPD_DrawLine+0xf4>
 8001208:	4283      	cmp	r3, r0
 800120a:	d35f      	bcc.n	80012cc <EPD_DrawLine+0xf4>
        Xend > Paint.Width || Yend > Paint.Height) {
 800120c:	42a2      	cmp	r2, r4
 800120e:	d35d      	bcc.n	80012cc <EPD_DrawLine+0xf4>
        return;
    }

    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001210:	eba0 0905 	sub.w	r9, r0, r5
 8001214:	f1b9 0f00 	cmp.w	r9, #0
 8001218:	bfb8      	it	lt
 800121a:	f1c9 0900 	rsblt	r9, r9, #0
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800121e:	1ba3      	subs	r3, r4, r6
 8001220:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001224:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001228:	9107      	str	r1, [sp, #28]
 800122a:	424b      	negs	r3, r1
 800122c:	9304      	str	r3, [sp, #16]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800122e:	4285      	cmp	r5, r0
 8001230:	d20b      	bcs.n	800124a <EPD_DrawLine+0x72>
 8001232:	2301      	movs	r3, #1
 8001234:	9308      	str	r3, [sp, #32]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001236:	9b05      	ldr	r3, [sp, #20]
 8001238:	429e      	cmp	r6, r3
 800123a:	d20a      	bcs.n	8001252 <EPD_DrawLine+0x7a>
 800123c:	2301      	movs	r3, #1
 800123e:	9309      	str	r3, [sp, #36]	@ 0x24

    //Cumulative error
    int Esp = dx + dy;
 8001240:	9b07      	ldr	r3, [sp, #28]
 8001242:	eba9 0803 	sub.w	r8, r9, r3
    char Dotted_Len = 0;
 8001246:	2400      	movs	r4, #0
 8001248:	e026      	b.n	8001298 <EPD_DrawLine+0xc0>
    int XAddway = Xstart < Xend ? 1 : -1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	9308      	str	r3, [sp, #32]
 8001250:	e7f1      	b.n	8001236 <EPD_DrawLine+0x5e>
    int YAddway = Ystart < Yend ? 1 : -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9309      	str	r3, [sp, #36]	@ 0x24
 8001258:	e7f2      	b.n	8001240 <EPD_DrawLine+0x68>
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
            //Debug("LINE_DOTTED\r\n");
            EPD_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
            Dotted_Len = 0;
        } else {
            EPD_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800125a:	2301      	movs	r3, #1
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	465b      	mov	r3, fp
 8001260:	9a03      	ldr	r2, [sp, #12]
 8001262:	4631      	mov	r1, r6
 8001264:	4628      	mov	r0, r5
 8001266:	f7ff ff57 	bl	8001118 <EPD_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800126a:	9b04      	ldr	r3, [sp, #16]
 800126c:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
 8001270:	dc08      	bgt.n	8001284 <EPD_DrawLine+0xac>
            if (Xpoint == Xend)
 8001272:	9b06      	ldr	r3, [sp, #24]
 8001274:	429d      	cmp	r5, r3
 8001276:	d029      	beq.n	80012cc <EPD_DrawLine+0xf4>
                break;
            Esp += dy;
 8001278:	9b07      	ldr	r3, [sp, #28]
 800127a:	eba8 0803 	sub.w	r8, r8, r3
            Xpoint += XAddway;
 800127e:	9b08      	ldr	r3, [sp, #32]
 8001280:	441d      	add	r5, r3
 8001282:	b2ad      	uxth	r5, r5
        }
        if (2 * Esp <= dx) {
 8001284:	ebb9 0f48 	cmp.w	r9, r8, lsl #1
 8001288:	db06      	blt.n	8001298 <EPD_DrawLine+0xc0>
            if (Ypoint == Yend)
 800128a:	9b05      	ldr	r3, [sp, #20]
 800128c:	429e      	cmp	r6, r3
 800128e:	d01d      	beq.n	80012cc <EPD_DrawLine+0xf4>
                break;
            Esp += dx;
 8001290:	44c8      	add	r8, r9
            Ypoint += YAddway;
 8001292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001294:	441e      	add	r6, r3
 8001296:	b2b6      	uxth	r6, r6
        Dotted_Len++;
 8001298:	3401      	adds	r4, #1
 800129a:	b2e4      	uxtb	r4, r4
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800129c:	f1ba 0f01 	cmp.w	sl, #1
 80012a0:	d1db      	bne.n	800125a <EPD_DrawLine+0x82>
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <EPD_DrawLine+0x100>)
 80012a4:	fba3 2304 	umull	r2, r3, r3, r4
 80012a8:	f023 0701 	bic.w	r7, r3, #1
 80012ac:	eb07 0753 	add.w	r7, r7, r3, lsr #1
 80012b0:	1be7      	subs	r7, r4, r7
 80012b2:	f017 07ff 	ands.w	r7, r7, #255	@ 0xff
 80012b6:	d1d0      	bne.n	800125a <EPD_DrawLine+0x82>
            EPD_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80012b8:	2301      	movs	r3, #1
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	465b      	mov	r3, fp
 80012be:	22ff      	movs	r2, #255	@ 0xff
 80012c0:	4631      	mov	r1, r6
 80012c2:	4628      	mov	r0, r5
 80012c4:	f7ff ff28 	bl	8001118 <EPD_DrawPoint>
            Dotted_Len = 0;
 80012c8:	463c      	mov	r4, r7
 80012ca:	e7ce      	b.n	800126a <EPD_DrawLine+0x92>
        }
    }
}
 80012cc:	b00b      	add	sp, #44	@ 0x2c
 80012ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d2:	bf00      	nop
 80012d4:	20000294 	.word	0x20000294
 80012d8:	aaaaaaab 	.word	0xaaaaaaab

080012dc <EPD_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void EPD_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80012dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e0:	461f      	mov	r7, r3
 80012e2:	f8bd b028 	ldrh.w	fp, [sp, #40]	@ 0x28
 80012e6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	@ 0x2c
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80012ea:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <EPD_DrawChar+0xd0>)
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	4283      	cmp	r3, r0
 80012f0:	d359      	bcc.n	80013a6 <EPD_DrawChar+0xca>
 80012f2:	4681      	mov	r9, r0
 80012f4:	468a      	mov	sl, r1
 80012f6:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <EPD_DrawChar+0xd0>)
 80012f8:	88db      	ldrh	r3, [r3, #6]
 80012fa:	428b      	cmp	r3, r1
 80012fc:	d353      	bcc.n	80013a6 <EPD_DrawChar+0xca>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80012fe:	3a20      	subs	r2, #32
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	88b9      	ldrh	r1, [r7, #4]
 8001308:	f011 0207 	ands.w	r2, r1, #7
 800130c:	bf18      	it	ne
 800130e:	2201      	movne	r2, #1
 8001310:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001314:	683d      	ldr	r5, [r7, #0]
 8001316:	fb02 5503 	mla	r5, r2, r3, r5

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800131a:	2600      	movs	r6, #0
 800131c:	e03e      	b.n	800139c <EPD_DrawChar+0xc0>
        for (Column = 0; Column < Font->Width; Column ++ ) {

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 800131e:	782a      	ldrb	r2, [r5, #0]
 8001320:	f004 0107 	and.w	r1, r4, #7
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	410b      	asrs	r3, r1
 8001328:	421a      	tst	r2, r3
 800132a:	d012      	beq.n	8001352 <EPD_DrawChar+0x76>
                    EPD_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800132c:	eb06 010a 	add.w	r1, r6, sl
 8001330:	eb04 0009 	add.w	r0, r4, r9
 8001334:	465a      	mov	r2, fp
 8001336:	b289      	uxth	r1, r1
 8001338:	b280      	uxth	r0, r0
 800133a:	f7ff fdd7 	bl	8000eec <EPD_SetPixel>
 800133e:	e008      	b.n	8001352 <EPD_DrawChar+0x76>
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
                    EPD_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
                    // EPD_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    EPD_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001340:	eb06 010a 	add.w	r1, r6, sl
 8001344:	eb04 0009 	add.w	r0, r4, r9
 8001348:	4642      	mov	r2, r8
 800134a:	b289      	uxth	r1, r1
 800134c:	b280      	uxth	r0, r0
 800134e:	f7ff fdcd 	bl	8000eec <EPD_SetPixel>
                    // EPD_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001352:	f004 0307 	and.w	r3, r4, #7
 8001356:	2b07      	cmp	r3, #7
 8001358:	d018      	beq.n	800138c <EPD_DrawChar+0xb0>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800135a:	3401      	adds	r4, #1
 800135c:	b2a4      	uxth	r4, r4
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	42a3      	cmp	r3, r4
 8001362:	d915      	bls.n	8001390 <EPD_DrawChar+0xb4>
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001364:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8001368:	d0d9      	beq.n	800131e <EPD_DrawChar+0x42>
                if (*ptr & (0x80 >> (Column % 8))) {
 800136a:	782a      	ldrb	r2, [r5, #0]
 800136c:	f004 0107 	and.w	r1, r4, #7
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	410b      	asrs	r3, r1
 8001374:	421a      	tst	r2, r3
 8001376:	d0e3      	beq.n	8001340 <EPD_DrawChar+0x64>
                    EPD_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001378:	eb06 010a 	add.w	r1, r6, sl
 800137c:	eb04 0009 	add.w	r0, r4, r9
 8001380:	465a      	mov	r2, fp
 8001382:	b289      	uxth	r1, r1
 8001384:	b280      	uxth	r0, r0
 8001386:	f7ff fdb1 	bl	8000eec <EPD_SetPixel>
 800138a:	e7e2      	b.n	8001352 <EPD_DrawChar+0x76>
                ptr++;
 800138c:	3501      	adds	r5, #1
 800138e:	e7e4      	b.n	800135a <EPD_DrawChar+0x7e>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001390:	f013 0f07 	tst.w	r3, #7
 8001394:	d000      	beq.n	8001398 <EPD_DrawChar+0xbc>
            ptr++;
 8001396:	3501      	adds	r5, #1
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001398:	3601      	adds	r6, #1
 800139a:	b2b6      	uxth	r6, r6
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	42b3      	cmp	r3, r6
 80013a0:	d901      	bls.n	80013a6 <EPD_DrawChar+0xca>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80013a2:	2400      	movs	r4, #0
 80013a4:	e7db      	b.n	800135e <EPD_DrawChar+0x82>
    }// Write all
}
 80013a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013aa:	bf00      	nop
 80013ac:	20000294 	.word	0x20000294

080013b0 <EPD_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void EPD_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80013b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b4:	b083      	sub	sp, #12
 80013b6:	461c      	mov	r4, r3
 80013b8:	f8bd a030 	ldrh.w	sl, [sp, #48]	@ 0x30
 80013bc:	f8bd b034 	ldrh.w	fp, [sp, #52]	@ 0x34
    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <EPD_DrawString_EN+0x78>)
 80013c2:	889b      	ldrh	r3, [r3, #4]
 80013c4:	4283      	cmp	r3, r0
 80013c6:	d32b      	bcc.n	8001420 <EPD_DrawString_EN+0x70>
 80013c8:	4680      	mov	r8, r0
 80013ca:	4689      	mov	r9, r1
 80013cc:	4616      	mov	r6, r2
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <EPD_DrawString_EN+0x78>)
 80013d0:	88db      	ldrh	r3, [r3, #6]
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d324      	bcc.n	8001420 <EPD_DrawString_EN+0x70>
    UWORD Ypoint = Ystart;
 80013d6:	460f      	mov	r7, r1
    UWORD Xpoint = Xstart;
 80013d8:	4605      	mov	r5, r0
 80013da:	e00c      	b.n	80013f6 <EPD_DrawString_EN+0x46>
        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
            Xpoint = Xstart;
            Ypoint = Ystart;
        }
        EPD_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80013dc:	f8cd a004 	str.w	sl, [sp, #4]
 80013e0:	f8cd b000 	str.w	fp, [sp]
 80013e4:	4623      	mov	r3, r4
 80013e6:	4639      	mov	r1, r7
 80013e8:	4628      	mov	r0, r5
 80013ea:	f7ff ff77 	bl	80012dc <EPD_DrawChar>

        //The next character of the address
        pString ++;
 80013ee:	3601      	adds	r6, #1

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80013f0:	88a3      	ldrh	r3, [r4, #4]
 80013f2:	442b      	add	r3, r5
 80013f4:	b29d      	uxth	r5, r3
    while (* pString != '\0') {
 80013f6:	7832      	ldrb	r2, [r6, #0]
 80013f8:	b192      	cbz	r2, 8001420 <EPD_DrawString_EN+0x70>
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80013fa:	88a3      	ldrh	r3, [r4, #4]
 80013fc:	442b      	add	r3, r5
 80013fe:	490a      	ldr	r1, [pc, #40]	@ (8001428 <EPD_DrawString_EN+0x78>)
 8001400:	8889      	ldrh	r1, [r1, #4]
 8001402:	428b      	cmp	r3, r1
 8001404:	dd03      	ble.n	800140e <EPD_DrawString_EN+0x5e>
            Ypoint += Font->Height;
 8001406:	88e3      	ldrh	r3, [r4, #6]
 8001408:	443b      	add	r3, r7
 800140a:	b29f      	uxth	r7, r3
            Xpoint = Xstart;
 800140c:	4645      	mov	r5, r8
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800140e:	88e3      	ldrh	r3, [r4, #6]
 8001410:	443b      	add	r3, r7
 8001412:	4905      	ldr	r1, [pc, #20]	@ (8001428 <EPD_DrawString_EN+0x78>)
 8001414:	88c9      	ldrh	r1, [r1, #6]
 8001416:	428b      	cmp	r3, r1
 8001418:	dde0      	ble.n	80013dc <EPD_DrawString_EN+0x2c>
            Ypoint = Ystart;
 800141a:	464f      	mov	r7, r9
            Xpoint = Xstart;
 800141c:	4645      	mov	r5, r8
 800141e:	e7dd      	b.n	80013dc <EPD_DrawString_EN+0x2c>
    }
}
 8001420:	b003      	add	sp, #12
 8001422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001426:	bf00      	nop
 8001428:	20000294 	.word	0x20000294

0800142c <EPD_DrawDate>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void EPD_DrawDate(UWORD Xstart, UWORD Ystart, EPD_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 800142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001430:	b08b      	sub	sp, #44	@ 0x2c
 8001432:	4606      	mov	r6, r0
 8001434:	460f      	mov	r7, r1
 8001436:	4615      	mov	r5, r2
 8001438:	4698      	mov	r8, r3
 800143a:	f8bd a050 	ldrh.w	sl, [sp, #80]	@ 0x50
 800143e:	f8bd 9054 	ldrh.w	r9, [sp, #84]	@ 0x54
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8001442:	4a5e      	ldr	r2, [pc, #376]	@ (80015bc <EPD_DrawDate+0x190>)
 8001444:	ac07      	add	r4, sp, #28
 8001446:	ca07      	ldmia	r2, {r0, r1, r2}
 8001448:	c403      	stmia	r4!, {r0, r1}
 800144a:	8022      	strh	r2, [r4, #0]

    UWORD Dx = Font->Width;
 800144c:	889c      	ldrh	r4, [r3, #4]

    //Write data into the cache
    EPD_DrawChar(Xstart                           , Ystart, value[pTime->Day / 10], Font, Color_Background, Color_Foreground);
 800144e:	9503      	str	r5, [sp, #12]
 8001450:	78ea      	ldrb	r2, [r5, #3]
 8001452:	4d5b      	ldr	r5, [pc, #364]	@ (80015c0 <EPD_DrawDate+0x194>)
 8001454:	fba5 1202 	umull	r1, r2, r5, r2
 8001458:	a90a      	add	r1, sp, #40	@ 0x28
 800145a:	eb01 02d2 	add.w	r2, r1, r2, lsr #3
 800145e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001462:	f8cd a004 	str.w	sl, [sp, #4]
 8001466:	f8cd 9000 	str.w	r9, [sp]
 800146a:	4639      	mov	r1, r7
 800146c:	4630      	mov	r0, r6
 800146e:	f7ff ff35 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Day % 10], Font, Color_Background, Color_Foreground);
 8001472:	eb04 0b06 	add.w	fp, r4, r6
 8001476:	fa1f fb8b 	uxth.w	fp, fp
 800147a:	9a03      	ldr	r2, [sp, #12]
 800147c:	78d3      	ldrb	r3, [r2, #3]
 800147e:	fba5 1203 	umull	r1, r2, r5, r3
 8001482:	08d2      	lsrs	r2, r2, #3
 8001484:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001488:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800148c:	a90a      	add	r1, sp, #40	@ 0x28
 800148e:	fa51 f383 	uxtab	r3, r1, r3
 8001492:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001496:	f8cd a004 	str.w	sl, [sp, #4]
 800149a:	f8cd 9000 	str.w	r9, [sp]
 800149e:	4643      	mov	r3, r8
 80014a0:	4639      	mov	r1, r7
 80014a2:	4658      	mov	r0, fp
 80014a4:	f7ff ff1a 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, '.'                    , Font, Color_Background, Color_Foreground);
 80014a8:	08a3      	lsrs	r3, r4, #2
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	eb0b 0094 	add.w	r0, fp, r4, lsr #2
 80014b0:	ea4f 0b54 	mov.w	fp, r4, lsr #1
 80014b4:	fa1b f080 	uxtah	r0, fp, r0
 80014b8:	f8cd a004 	str.w	sl, [sp, #4]
 80014bc:	f8cd 9000 	str.w	r9, [sp]
 80014c0:	4643      	mov	r3, r8
 80014c2:	222e      	movs	r2, #46	@ 0x2e
 80014c4:	4639      	mov	r1, r7
 80014c6:	b280      	uxth	r0, r0
 80014c8:	f7ff ff08 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Month / 10] , Font, Color_Background, Color_Foreground);
 80014cc:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80014d0:	9a03      	ldr	r2, [sp, #12]
 80014d2:	7893      	ldrb	r3, [r2, #2]
 80014d4:	fba5 2303 	umull	r2, r3, r5, r3
 80014d8:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80014dc:	eb0c 03d3 	add.w	r3, ip, r3, lsr #3
 80014e0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80014e4:	fa1b f080 	uxtah	r0, fp, r0
 80014e8:	f8cd a004 	str.w	sl, [sp, #4]
 80014ec:	f8cd 9000 	str.w	r9, [sp]
 80014f0:	4643      	mov	r3, r8
 80014f2:	4639      	mov	r1, r7
 80014f4:	b280      	uxth	r0, r0
 80014f6:	f7ff fef1 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Month % 10] , Font, Color_Background, Color_Foreground);
 80014fa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80014fe:	9304      	str	r3, [sp, #16]
 8001500:	18f0      	adds	r0, r6, r3
 8001502:	9a03      	ldr	r2, [sp, #12]
 8001504:	7893      	ldrb	r3, [r2, #2]
 8001506:	fba5 1203 	umull	r1, r2, r5, r3
 800150a:	08d2      	lsrs	r2, r2, #3
 800150c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001510:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8001514:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8001518:	fa5c f383 	uxtab	r3, ip, r3
 800151c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001520:	fa1b f080 	uxtah	r0, fp, r0
 8001524:	f8cd a004 	str.w	sl, [sp, #4]
 8001528:	f8cd 9000 	str.w	r9, [sp]
 800152c:	4643      	mov	r3, r8
 800152e:	4639      	mov	r1, r7
 8001530:	b280      	uxth	r0, r0
 8001532:	f7ff fed3 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, '.'                    , Font, Color_Background, Color_Foreground);
 8001536:	eb06 0084 	add.w	r0, r6, r4, lsl #2
 800153a:	fa1b f080 	uxtah	r0, fp, r0
 800153e:	b280      	uxth	r0, r0
 8001540:	9905      	ldr	r1, [sp, #20]
 8001542:	1a40      	subs	r0, r0, r1
 8001544:	f8cd a004 	str.w	sl, [sp, #4]
 8001548:	f8cd 9000 	str.w	r9, [sp]
 800154c:	4643      	mov	r3, r8
 800154e:	222e      	movs	r2, #46	@ 0x2e
 8001550:	4639      	mov	r1, r7
 8001552:	b280      	uxth	r0, r0
 8001554:	f7ff fec2 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Year / 10] , Font, Color_Background, Color_Foreground);
 8001558:	9a03      	ldr	r2, [sp, #12]
 800155a:	8813      	ldrh	r3, [r2, #0]
 800155c:	fba5 2303 	umull	r2, r3, r5, r3
 8001560:	a90a      	add	r1, sp, #40	@ 0x28
 8001562:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8001566:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800156a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800156e:	1930      	adds	r0, r6, r4
 8001570:	f8cd a004 	str.w	sl, [sp, #4]
 8001574:	f8cd 9000 	str.w	r9, [sp]
 8001578:	4643      	mov	r3, r8
 800157a:	4639      	mov	r1, r7
 800157c:	b280      	uxth	r0, r0
 800157e:	f7ff fead 	bl	80012dc <EPD_DrawChar>
    EPD_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Year % 10] , Font, Color_Background, Color_Foreground);
 8001582:	9a03      	ldr	r2, [sp, #12]
 8001584:	8813      	ldrh	r3, [r2, #0]
 8001586:	fba5 2503 	umull	r2, r5, r5, r3
 800158a:	08ed      	lsrs	r5, r5, #3
 800158c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001590:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 8001594:	aa0a      	add	r2, sp, #40	@ 0x28
 8001596:	fa12 f383 	uxtah	r3, r2, r3
 800159a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800159e:	9b04      	ldr	r3, [sp, #16]
 80015a0:	eb06 0043 	add.w	r0, r6, r3, lsl #1
 80015a4:	f8cd a004 	str.w	sl, [sp, #4]
 80015a8:	f8cd 9000 	str.w	r9, [sp]
 80015ac:	4643      	mov	r3, r8
 80015ae:	4639      	mov	r1, r7
 80015b0:	b280      	uxth	r0, r0
 80015b2:	f7ff fe93 	bl	80012dc <EPD_DrawChar>
}
 80015b6:	b00b      	add	sp, #44	@ 0x2c
 80015b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015bc:	0800ba6c 	.word	0x0800ba6c
 80015c0:	cccccccd 	.word	0xcccccccd

080015c4 <EPD_DrawBMP>:
						(unsigned char)image_buffer[Addr+ (Paint.HeightByte)*Paint.WidthByte*(Region - 1)];
				}
		}
}

void EPD_DrawBMP(uint8_t xs, uint8_t ys, uint8_t xl, uint8_t yl, uint8_t bmp[xl][yl]){
 80015c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015c8:	4682      	mov	sl, r0
 80015ca:	4689      	mov	r9, r1
 80015cc:	4617      	mov	r7, r2
 80015ce:	461e      	mov	r6, r3
 80015d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    for (uint8_t y = 0; y < yl; y++){
 80015d4:	2500      	movs	r5, #0
 80015d6:	e012      	b.n	80015fe <EPD_DrawBMP+0x3a>
      for (uint8_t x = 0; x < xl; x++){
        if(bmp[x][y] == 0){
          EPD_SetPixel(x+xs, y+ys, BLACK);
 80015d8:	2200      	movs	r2, #0
 80015da:	eb05 0109 	add.w	r1, r5, r9
 80015de:	eb04 000a 	add.w	r0, r4, sl
 80015e2:	f7ff fc83 	bl	8000eec <EPD_SetPixel>
      for (uint8_t x = 0; x < xl; x++){
 80015e6:	3401      	adds	r4, #1
 80015e8:	b2e4      	uxtb	r4, r4
 80015ea:	42bc      	cmp	r4, r7
 80015ec:	d205      	bcs.n	80015fa <EPD_DrawBMP+0x36>
        if(bmp[x][y] == 0){
 80015ee:	fb06 8304 	mla	r3, r6, r4, r8
 80015f2:	5d5b      	ldrb	r3, [r3, r5]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f6      	bne.n	80015e6 <EPD_DrawBMP+0x22>
 80015f8:	e7ee      	b.n	80015d8 <EPD_DrawBMP+0x14>
    for (uint8_t y = 0; y < yl; y++){
 80015fa:	3501      	adds	r5, #1
 80015fc:	b2ed      	uxtb	r5, r5
 80015fe:	42b5      	cmp	r5, r6
 8001600:	d201      	bcs.n	8001606 <EPD_DrawBMP+0x42>
      for (uint8_t x = 0; x < xl; x++){
 8001602:	2400      	movs	r4, #0
 8001604:	e7f1      	b.n	80015ea <EPD_DrawBMP+0x26>
        }
      }
    }
  }
 8001606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800160c <UDISK_init>:
uint16_t last_pointer __attribute__((section(".ram2_bss")));
uint16_t length __attribute__((section(".ram2_bss")));
bool is_first_writing __attribute__((section(".ram2_bss")));
uint32_t data_retention_code __attribute__((section(".ram2_bss")));

void UDISK_init(){
 800160c:	b508      	push	{r3, lr}
    is_first_writing = true;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <UDISK_init+0x24>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
    last_pointer = 0;
 8001614:	2100      	movs	r1, #0
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <UDISK_init+0x28>)
 8001618:	8019      	strh	r1, [r3, #0]
    length = 0;
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <UDISK_init+0x2c>)
 800161c:	8019      	strh	r1, [r3, #0]
    data_retention_code = 0xAAFF55FF;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <UDISK_init+0x30>)
 8001620:	4a07      	ldr	r2, [pc, #28]	@ (8001640 <UDISK_init+0x34>)
 8001622:	601a      	str	r2, [r3, #0]
    memset(USBDisk, 0x00, 4080);
 8001624:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <UDISK_init+0x38>)
 800162a:	f008 f989 	bl	8009940 <memset>
}
 800162e:	bd08      	pop	{r3, pc}
 8001630:	10000004 	.word	0x10000004
 8001634:	10000008 	.word	0x10000008
 8001638:	10000006 	.word	0x10000006
 800163c:	10000000 	.word	0x10000000
 8001640:	aaff55ff 	.word	0xaaff55ff
 8001644:	10000010 	.word	0x10000010

08001648 <UDISK_push>:

void UDISK_push(int16_t temp, uint32_t timestamp){
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4604      	mov	r4, r0
 800164c:	460d      	mov	r5, r1
    if(data_retention_code != 0xAAFF55FF){
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <UDISK_push+0x54>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <UDISK_push+0x58>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d11d      	bne.n	8001694 <UDISK_push+0x4c>
        UDISK_init();
    }
    last_timestamp = timestamp;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <UDISK_push+0x5c>)
 800165a:	601d      	str	r5, [r3, #0]
    USBDisk[last_pointer] = temp;
 800165c:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <UDISK_push+0x60>)
 800165e:	8813      	ldrh	r3, [r2, #0]
 8001660:	4912      	ldr	r1, [pc, #72]	@ (80016ac <UDISK_push+0x64>)
 8001662:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
    last_pointer++;
 8001666:	3301      	adds	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	8013      	strh	r3, [r2, #0]
    length++;
 800166c:	4910      	ldr	r1, [pc, #64]	@ (80016b0 <UDISK_push+0x68>)
 800166e:	880a      	ldrh	r2, [r1, #0]
 8001670:	3201      	adds	r2, #1
 8001672:	800a      	strh	r2, [r1, #0]
    if(last_pointer >= 4080){
 8001674:	f5b3 6f7f 	cmp.w	r3, #4080	@ 0xff0
 8001678:	d304      	bcc.n	8001684 <UDISK_push+0x3c>
        is_first_writing = false;
 800167a:	2300      	movs	r3, #0
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <UDISK_push+0x6c>)
 800167e:	7013      	strb	r3, [r2, #0]
        last_pointer = 0;
 8001680:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <UDISK_push+0x60>)
 8001682:	8013      	strh	r3, [r2, #0]
    }
    if(!is_first_writing){
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <UDISK_push+0x6c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b91b      	cbnz	r3, 8001692 <UDISK_push+0x4a>
        length = 4079;
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <UDISK_push+0x68>)
 800168c:	f640 72ef 	movw	r2, #4079	@ 0xfef
 8001690:	801a      	strh	r2, [r3, #0]
    }
}
 8001692:	bd38      	pop	{r3, r4, r5, pc}
        UDISK_init();
 8001694:	f7ff ffba 	bl	800160c <UDISK_init>
 8001698:	e7de      	b.n	8001658 <UDISK_push+0x10>
 800169a:	bf00      	nop
 800169c:	10000000 	.word	0x10000000
 80016a0:	aaff55ff 	.word	0xaaff55ff
 80016a4:	1000000c 	.word	0x1000000c
 80016a8:	10000008 	.word	0x10000008
 80016ac:	10000010 	.word	0x10000010
 80016b0:	10000006 	.word	0x10000006
 80016b4:	10000004 	.word	0x10000004

080016b8 <UDISK_get>:

int16_t UDISK_get(uint16_t i){
    if(data_retention_code != 0xAAFF55FF){
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <UDISK_get+0x40>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <UDISK_get+0x44>)
 80016be:	429a      	cmp	r2, r3
 80016c0:	d117      	bne.n	80016f2 <UDISK_get+0x3a>
        return -32768;
    }
    if(is_first_writing){
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <UDISK_get+0x48>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b95b      	cbnz	r3, 80016e0 <UDISK_get+0x28>
        return USBDisk[i];
    }
    if(last_pointer+i-1 < 4080){
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <UDISK_get+0x4c>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	4418      	add	r0, r3
 80016ce:	f5b0 6f7f 	cmp.w	r0, #4080	@ 0xff0
 80016d2:	dd09      	ble.n	80016e8 <UDISK_get+0x30>
        return USBDisk[last_pointer+i-1];
    }
    return USBDisk[last_pointer+i-4081];
 80016d4:	f6a0 70f1 	subw	r0, r0, #4081	@ 0xff1
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <UDISK_get+0x50>)
 80016da:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80016de:	4770      	bx	lr
        return USBDisk[i];
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <UDISK_get+0x50>)
 80016e2:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80016e6:	4770      	bx	lr
        return USBDisk[last_pointer+i-1];
 80016e8:	3801      	subs	r0, #1
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <UDISK_get+0x50>)
 80016ec:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80016f0:	4770      	bx	lr
        return -32768;
 80016f2:	4806      	ldr	r0, [pc, #24]	@ (800170c <UDISK_get+0x54>)
}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	10000000 	.word	0x10000000
 80016fc:	aaff55ff 	.word	0xaaff55ff
 8001700:	10000004 	.word	0x10000004
 8001704:	10000008 	.word	0x10000008
 8001708:	10000010 	.word	0x10000010
 800170c:	ffff8000 	.word	0xffff8000

08001710 <UDISK_len>:

uint16_t UDISK_len(){
    return length;
}
 8001710:	4b01      	ldr	r3, [pc, #4]	@ (8001718 <UDISK_len+0x8>)
 8001712:	8818      	ldrh	r0, [r3, #0]
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	10000006 	.word	0x10000006

0800171c <UDISK_tst>:

uint32_t UDISK_tst(){
    return last_timestamp;
 800171c:	4b01      	ldr	r3, [pc, #4]	@ (8001724 <UDISK_tst+0x8>)
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	1000000c 	.word	0x1000000c

08001728 <tick>:
void init(Button *btt){
    //gpio_SetGPIOmode_In(btt->port, btt->pin, 0);
    btt->btn_flag = true;
}

bool tick(Button *btt){
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	4604      	mov	r4, r0
    bool btn_state = !HAL_GPIO_ReadPin(btt->port, btt->pin);
 800172c:	8881      	ldrh	r1, [r0, #4]
 800172e:	6800      	ldr	r0, [r0, #0]
 8001730:	f002 fd66 	bl	8004200 <HAL_GPIO_ReadPin>
 8001734:	fab0 f580 	clz	r5, r0
 8001738:	096d      	lsrs	r5, r5, #5
    btn_state ^= !btt->type;
 800173a:	79a7      	ldrb	r7, [r4, #6]
 800173c:	42af      	cmp	r7, r5
 800173e:	bf0c      	ite	eq
 8001740:	2601      	moveq	r6, #1
 8001742:	2600      	movne	r6, #0

    if (!btn_state && !btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 8001744:	d001      	beq.n	800174a <tick+0x22>
 8001746:	7c23      	ldrb	r3, [r4, #16]
 8001748:	b13b      	cbz	r3, 800175a <tick+0x32>
        btt->btn_flag = true;
        if(!btt->btn_hold){btt->btn_single = true;}
        btt->btn_hold = false;
        btt->btn_timer = HAL_GetTick();
    }
    if (btn_state && btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 800174a:	42af      	cmp	r7, r5
 800174c:	d017      	beq.n	800177e <tick+0x56>
        btt->btn_flag = false;
        btt->btn_timer = HAL_GetTick();
        btt->btn_hold_timer = HAL_GetTick();
    }

    if (!btt->btn_flag && btn_state && (HAL_GetTick() - btt->btn_hold_timer >= 200) && !btt->btn_hold) {
 800174e:	7c23      	ldrb	r3, [r4, #16]
 8001750:	b90b      	cbnz	r3, 8001756 <tick+0x2e>
 8001752:	42af      	cmp	r7, r5
 8001754:	d025      	beq.n	80017a2 <tick+0x7a>
        btt->btn_hold = true;
        btt->btn_hold_timer = HAL_GetTick();
    }

    return btn_state;
}
 8001756:	4630      	mov	r0, r6
 8001758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!btn_state && !btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 800175a:	f001 fb99 	bl	8002e90 <HAL_GetTick>
 800175e:	68a3      	ldr	r3, [r4, #8]
 8001760:	1ac0      	subs	r0, r0, r3
 8001762:	2864      	cmp	r0, #100	@ 0x64
 8001764:	d9f1      	bls.n	800174a <tick+0x22>
        btt->btn_flag = true;
 8001766:	2301      	movs	r3, #1
 8001768:	7423      	strb	r3, [r4, #16]
        if(!btt->btn_hold){btt->btn_single = true;}
 800176a:	7c63      	ldrb	r3, [r4, #17]
 800176c:	b90b      	cbnz	r3, 8001772 <tick+0x4a>
 800176e:	2301      	movs	r3, #1
 8001770:	74e3      	strb	r3, [r4, #19]
        btt->btn_hold = false;
 8001772:	2300      	movs	r3, #0
 8001774:	7463      	strb	r3, [r4, #17]
        btt->btn_timer = HAL_GetTick();
 8001776:	f001 fb8b 	bl	8002e90 <HAL_GetTick>
 800177a:	60a0      	str	r0, [r4, #8]
 800177c:	e7e5      	b.n	800174a <tick+0x22>
    if (btn_state && btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 800177e:	7c23      	ldrb	r3, [r4, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0e4      	beq.n	800174e <tick+0x26>
 8001784:	f001 fb84 	bl	8002e90 <HAL_GetTick>
 8001788:	68a3      	ldr	r3, [r4, #8]
 800178a:	1ac0      	subs	r0, r0, r3
 800178c:	2864      	cmp	r0, #100	@ 0x64
 800178e:	d9de      	bls.n	800174e <tick+0x26>
        btt->btn_flag = false;
 8001790:	2300      	movs	r3, #0
 8001792:	7423      	strb	r3, [r4, #16]
        btt->btn_timer = HAL_GetTick();
 8001794:	f001 fb7c 	bl	8002e90 <HAL_GetTick>
 8001798:	60a0      	str	r0, [r4, #8]
        btt->btn_hold_timer = HAL_GetTick();
 800179a:	f001 fb79 	bl	8002e90 <HAL_GetTick>
 800179e:	60e0      	str	r0, [r4, #12]
 80017a0:	e7d5      	b.n	800174e <tick+0x26>
    if (!btt->btn_flag && btn_state && (HAL_GetTick() - btt->btn_hold_timer >= 200) && !btt->btn_hold) {
 80017a2:	f001 fb75 	bl	8002e90 <HAL_GetTick>
 80017a6:	68e3      	ldr	r3, [r4, #12]
 80017a8:	1ac0      	subs	r0, r0, r3
 80017aa:	28c7      	cmp	r0, #199	@ 0xc7
 80017ac:	d9d3      	bls.n	8001756 <tick+0x2e>
 80017ae:	7c63      	ldrb	r3, [r4, #17]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1d0      	bne.n	8001756 <tick+0x2e>
        btt->btn_hold = true;
 80017b4:	2301      	movs	r3, #1
 80017b6:	7463      	strb	r3, [r4, #17]
        btt->btn_hold_timer = HAL_GetTick();
 80017b8:	f001 fb6a 	bl	8002e90 <HAL_GetTick>
 80017bc:	60e0      	str	r0, [r4, #12]
 80017be:	e7ca      	b.n	8001756 <tick+0x2e>

080017c0 <isClicked>:

bool isClicked(Button *btt){
 80017c0:	4603      	mov	r3, r0
    if(btt->btn_single){
 80017c2:	7cc0      	ldrb	r0, [r0, #19]
 80017c4:	b900      	cbnz	r0, 80017c8 <isClicked+0x8>
        btt->btn_single = false;
        return true;
    } return false;
}
 80017c6:	4770      	bx	lr
        btt->btn_single = false;
 80017c8:	2200      	movs	r2, #0
 80017ca:	74da      	strb	r2, [r3, #19]
        return true;
 80017cc:	e7fb      	b.n	80017c6 <isClicked+0x6>

080017ce <CalculateChecksum>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 80017ce:	b500      	push	{lr}
 80017d0:	4686      	mov	lr, r0
  uint8_t checksum = 0;
 80017d2:	2000      	movs	r0, #0

  while (length--)
 80017d4:	460b      	mov	r3, r1
 80017d6:	3901      	subs	r1, #1
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	b1a3      	cbz	r3, 8001806 <CalculateChecksum+0x38>
  {
    uint8_t currentByte = *data++;
 80017dc:	f81e cb01 	ldrb.w	ip, [lr], #1

    for (uint8_t i = 8; i; i--)
 80017e0:	2308      	movs	r3, #8
 80017e2:	e003      	b.n	80017ec <CalculateChecksum+0x1e>
      if (temp)
      {
        checksum ^= 0x8C;
      }

      currentByte >>= 1;
 80017e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (uint8_t i = 8; i; i--)
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f1      	beq.n	80017d4 <CalculateChecksum+0x6>
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 80017f0:	ea80 020c 	eor.w	r2, r0, ip
      if (temp)
 80017f4:	f012 0f01 	tst.w	r2, #1
 80017f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80017fc:	d0f2      	beq.n	80017e4 <CalculateChecksum+0x16>
        checksum ^= 0x8C;
 80017fe:	f080 008c 	eor.w	r0, r0, #140	@ 0x8c
 8001802:	b2c0      	uxtb	r0, r0
 8001804:	e7ee      	b.n	80017e4 <CalculateChecksum+0x16>
    }
  }

  return checksum;
}
 8001806:	f85d fb04 	ldr.w	pc, [sp], #4

0800180a <ExecuteCommand>:



/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 800180a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180c:	b083      	sub	sp, #12
 800180e:	9101      	str	r1, [sp, #4]
  if (sensor->isConnected == 0)
 8001810:	7843      	ldrb	r3, [r0, #1]
 8001812:	b91b      	cbnz	r3, 800181c <ExecuteCommand+0x12>
  {
    return DS18B20_ERROR;
 8001814:	2701      	movs	r7, #1
      OneWire_ProcessByte(sensor->uart, data[i]);
    }
  }

  return DS18B20_OK;
}
 8001816:	4638      	mov	r0, r7
 8001818:	b003      	add	sp, #12
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	4605      	mov	r5, r0
 800181e:	4616      	mov	r6, r2
  OneWire_ProcessByte(sensor->uart, command.code);
 8001820:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001824:	6840      	ldr	r0, [r0, #4]
 8001826:	f001 f987 	bl	8002b38 <OneWire_ProcessByte>
  if (command.rxBytesNum != 0)
 800182a:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800182e:	b9b7      	cbnz	r7, 800185e <ExecuteCommand+0x54>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8001830:	463c      	mov	r4, r7
 8001832:	e01c      	b.n	800186e <ExecuteCommand+0x64>
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 8001834:	21ff      	movs	r1, #255	@ 0xff
 8001836:	6868      	ldr	r0, [r5, #4]
 8001838:	f001 f97e 	bl	8002b38 <OneWire_ProcessByte>
 800183c:	5530      	strb	r0, [r6, r4]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 800183e:	3401      	adds	r4, #1
 8001840:	b2e4      	uxtb	r4, r4
 8001842:	42a7      	cmp	r7, r4
 8001844:	d8f6      	bhi.n	8001834 <ExecuteCommand+0x2a>
    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 8001846:	1e79      	subs	r1, r7, #1
 8001848:	b2c9      	uxtb	r1, r1
 800184a:	4630      	mov	r0, r6
 800184c:	f7ff ffbf 	bl	80017ce <CalculateChecksum>
    if (checkSum != data[command.rxBytesNum - 1])
 8001850:	443e      	add	r6, r7
 8001852:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8001856:	4283      	cmp	r3, r0
 8001858:	d10e      	bne.n	8001878 <ExecuteCommand+0x6e>
  return DS18B20_OK;
 800185a:	2700      	movs	r7, #0
 800185c:	e7db      	b.n	8001816 <ExecuteCommand+0xc>
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 800185e:	2400      	movs	r4, #0
 8001860:	e7ef      	b.n	8001842 <ExecuteCommand+0x38>
      OneWire_ProcessByte(sensor->uart, data[i]);
 8001862:	5d31      	ldrb	r1, [r6, r4]
 8001864:	6868      	ldr	r0, [r5, #4]
 8001866:	f001 f967 	bl	8002b38 <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 800186a:	3401      	adds	r4, #1
 800186c:	b2e4      	uxtb	r4, r4
 800186e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001872:	42a3      	cmp	r3, r4
 8001874:	d8f5      	bhi.n	8001862 <ExecuteCommand+0x58>
 8001876:	e7ce      	b.n	8001816 <ExecuteCommand+0xc>
      return DS18B20_ERROR;
 8001878:	2701      	movs	r7, #1
 800187a:	e7cc      	b.n	8001816 <ExecuteCommand+0xc>

0800187c <WaitForConversionFinished>:



/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 800187c:	b510      	push	{r4, lr}
 800187e:	4604      	mov	r4, r0
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 8001880:	2101      	movs	r1, #1
 8001882:	6840      	ldr	r0, [r0, #4]
 8001884:	f001 f93a 	bl	8002afc <OneWire_ProcessBit>
  while(data != 0xFF)
 8001888:	e003      	b.n	8001892 <WaitForConversionFinished+0x16>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 800188a:	2101      	movs	r1, #1
 800188c:	6860      	ldr	r0, [r4, #4]
 800188e:	f001 f935 	bl	8002afc <OneWire_ProcessBit>
  while(data != 0xFF)
 8001892:	28ff      	cmp	r0, #255	@ 0xff
 8001894:	d1f9      	bne.n	800188a <WaitForConversionFinished+0xe>
  }
}
 8001896:	bd10      	pop	{r4, pc}

08001898 <DS18B20_ConvertT>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	4606      	mov	r6, r0
 800189e:	460c      	mov	r4, r1
  DS18B20_Status result;
  uint8_t rxDummyData;

  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 80018a0:	f10d 0207 	add.w	r2, sp, #7
 80018a4:	2144      	movs	r1, #68	@ 0x44
 80018a6:	f7ff ffb0 	bl	800180a <ExecuteCommand>
 80018aa:	4605      	mov	r5, r0

  if (waitCondition == DS18B20_DATA)
 80018ac:	2c01      	cmp	r4, #1
 80018ae:	d004      	beq.n	80018ba <DS18B20_ConvertT+0x22>
  {
    WaitForConversionFinished(sensor);
  }

  if (waitCondition == DS18B20_DELAY)
 80018b0:	2c02      	cmp	r4, #2
 80018b2:	d006      	beq.n	80018c2 <DS18B20_ConvertT+0x2a>

    HAL_Delay(delayValueMs);
  }

  return result;
}
 80018b4:	4628      	mov	r0, r5
 80018b6:	b002      	add	sp, #8
 80018b8:	bd70      	pop	{r4, r5, r6, pc}
    WaitForConversionFinished(sensor);
 80018ba:	4630      	mov	r0, r6
 80018bc:	f7ff ffde 	bl	800187c <WaitForConversionFinished>
 80018c0:	e7f6      	b.n	80018b0 <DS18B20_ConvertT+0x18>
    switch (sensor->configRegister)
 80018c2:	7c33      	ldrb	r3, [r6, #16]
 80018c4:	2b5f      	cmp	r3, #95	@ 0x5f
 80018c6:	d00b      	beq.n	80018e0 <DS18B20_ConvertT+0x48>
 80018c8:	d805      	bhi.n	80018d6 <DS18B20_ConvertT+0x3e>
 80018ca:	2b1f      	cmp	r3, #31
 80018cc:	d00d      	beq.n	80018ea <DS18B20_ConvertT+0x52>
 80018ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80018d0:	d10d      	bne.n	80018ee <DS18B20_ConvertT+0x56>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 80018d2:	20bc      	movs	r0, #188	@ 0xbc
 80018d4:	e006      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
    switch (sensor->configRegister)
 80018d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80018d8:	d10b      	bne.n	80018f2 <DS18B20_ConvertT+0x5a>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 80018da:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80018de:	e001      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 80018e0:	f240 1077 	movw	r0, #375	@ 0x177
    HAL_Delay(delayValueMs);
 80018e4:	f001 fada 	bl	8002e9c <HAL_Delay>
 80018e8:	e7e4      	b.n	80018b4 <DS18B20_ConvertT+0x1c>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 80018ea:	205e      	movs	r0, #94	@ 0x5e
 80018ec:	e7fa      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
    switch (sensor->configRegister)
 80018ee:	2000      	movs	r0, #0
 80018f0:	e7f8      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
 80018f2:	2000      	movs	r0, #0
 80018f4:	e7f6      	b.n	80018e4 <DS18B20_ConvertT+0x4c>
	...

080018f8 <DS18B20_ReadScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 80018f8:	b510      	push	{r4, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	4604      	mov	r4, r0
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_SCRATCHPAD_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 80018fe:	aa01      	add	r2, sp, #4
 8001900:	2100      	movs	r1, #0
 8001902:	f06f 0341 	mvn.w	r3, #65	@ 0x41
 8001906:	f363 0107 	bfi	r1, r3, #0, #8
 800190a:	2309      	movs	r3, #9
 800190c:	f363 210f 	bfi	r1, r3, #8, #8
 8001910:	f7ff ff7b 	bl	800180a <ExecuteCommand>

  if (result != DS18B20_OK)
 8001914:	bbd0      	cbnz	r0, 800198c <DS18B20_ReadScratchpad+0x94>
  {
    return result;
  }

  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8001916:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800191a:	73e3      	strb	r3, [r4, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 800191c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001920:	73a3      	strb	r3, [r4, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 8001922:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8001926:	7421      	strb	r1, [r4, #16]

  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 8001928:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800192c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001930:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001934:	4613      	mov	r3, r2
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;

  if (sign != 0)
 8001936:	f412 4278 	ands.w	r2, r2, #63488	@ 0xf800
 800193a:	d001      	beq.n	8001940 <DS18B20_ReadScratchpad+0x48>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 800193c:	425b      	negs	r3, r3
 800193e:	b29b      	uxth	r3, r3
  }

  switch (sensor->configRegister)
 8001940:	295f      	cmp	r1, #95	@ 0x5f
 8001942:	d025      	beq.n	8001990 <DS18B20_ReadScratchpad+0x98>
 8001944:	d80a      	bhi.n	800195c <DS18B20_ReadScratchpad+0x64>
 8001946:	291f      	cmp	r1, #31
 8001948:	d00f      	beq.n	800196a <DS18B20_ReadScratchpad+0x72>
 800194a:	293f      	cmp	r1, #63	@ 0x3f
 800194c:	d127      	bne.n	800199e <DS18B20_ReadScratchpad+0xa6>
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
      break;

    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	055b      	lsls	r3, r3, #21
 8001954:	0d5b      	lsrs	r3, r3, #21
 8001956:	ee07 3a90 	vmov	s15, r3
      break;
 800195a:	e00a      	b.n	8001972 <DS18B20_ReadScratchpad+0x7a>
  switch (sensor->configRegister)
 800195c:	297f      	cmp	r1, #127	@ 0x7f
 800195e:	d11e      	bne.n	800199e <DS18B20_ReadScratchpad+0xa6>
    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
      break;

    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8001960:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001964:	ee07 3a90 	vmov	s15, r3
      break;
 8001968:	e003      	b.n	8001972 <DS18B20_ReadScratchpad+0x7a>
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 800196a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800196e:	ee07 3a90 	vmov	s15, r3
    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
      break;
  }

  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 8001972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001976:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80019a8 <DS18B20_ReadScratchpad+0xb0>
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197e:	edc4 7a05 	vstr	s15, [r4, #20]

  if (sign != 0)
 8001982:	b11a      	cbz	r2, 800198c <DS18B20_ReadScratchpad+0x94>
  {
    sensor->temperature *= (-1);
 8001984:	eef1 7a67 	vneg.f32	s15, s15
 8001988:	edc4 7a05 	vstr	s15, [r4, #20]
  }

  return DS18B20_OK;
}
 800198c:	b004      	add	sp, #16
 800198e:	bd10      	pop	{r4, pc}
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	055b      	lsls	r3, r3, #21
 8001996:	0d5b      	lsrs	r3, r3, #21
 8001998:	ee07 3a90 	vmov	s15, r3
      break;
 800199c:	e7e9      	b.n	8001972 <DS18B20_ReadScratchpad+0x7a>
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 800199e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019a2:	ee07 3a90 	vmov	s15, r3
      break;
 80019a6:	e7e4      	b.n	8001972 <DS18B20_ReadScratchpad+0x7a>
 80019a8:	3d800000 	.word	0x3d800000

080019ac <DS18B20_WriteScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_WriteScratchpad(DS18B20 *sensor, uint8_t *data)
{
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4605      	mov	r5, r0
 80019b0:	460c      	mov	r4, r1
  DS18B20_Status result;

  result = ExecuteCommand(sensor, writeScratchpad, data);
 80019b2:	460a      	mov	r2, r1
 80019b4:	2100      	movs	r1, #0
 80019b6:	234e      	movs	r3, #78	@ 0x4e
 80019b8:	f363 0107 	bfi	r1, r3, #0, #8
 80019bc:	2303      	movs	r3, #3
 80019be:	f363 4117 	bfi	r1, r3, #16, #8
 80019c2:	f7ff ff22 	bl	800180a <ExecuteCommand>

  if (result != DS18B20_OK)
 80019c6:	b928      	cbnz	r0, 80019d4 <DS18B20_WriteScratchpad+0x28>
  {
    return result;
  }

  sensor->temperatureLimitHigh = data[0];
 80019c8:	7823      	ldrb	r3, [r4, #0]
 80019ca:	73eb      	strb	r3, [r5, #15]
  sensor->temperatureLimitLow = data[1];
 80019cc:	7863      	ldrb	r3, [r4, #1]
 80019ce:	73ab      	strb	r3, [r5, #14]
  sensor->configRegister = data[2];
 80019d0:	78a3      	ldrb	r3, [r4, #2]
 80019d2:	742b      	strb	r3, [r5, #16]

  return result;
}
 80019d4:	bd38      	pop	{r3, r4, r5, pc}

080019d6 <DS18B20_InitializationCommand>:


/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
  if (sensor->isInitialized == 0)
 80019d6:	7803      	ldrb	r3, [r0, #0]
 80019d8:	b90b      	cbnz	r3, 80019de <DS18B20_InitializationCommand+0x8>
  {
    return DS18B20_ERROR;
 80019da:	2001      	movs	r0, #1
  else
  {
    sensor->isConnected = 0;
    return DS18B20_ERROR;
  }
}
 80019dc:	4770      	bx	lr
{
 80019de:	b510      	push	{r4, lr}
 80019e0:	4604      	mov	r4, r0
  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 80019e2:	6840      	ldr	r0, [r0, #4]
 80019e4:	f001 f8c7 	bl	8002b76 <OneWire_Reset>
  if (status == ONEWIRE_OK)
 80019e8:	b910      	cbnz	r0, 80019f0 <DS18B20_InitializationCommand+0x1a>
    sensor->isConnected = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	7063      	strb	r3, [r4, #1]
}
 80019ee:	bd10      	pop	{r4, pc}
    sensor->isConnected = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	7063      	strb	r3, [r4, #1]
    return DS18B20_ERROR;
 80019f4:	2001      	movs	r0, #1
 80019f6:	e7fa      	b.n	80019ee <DS18B20_InitializationCommand+0x18>

080019f8 <DS18B20_ReadRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 80019f8:	b510      	push	{r4, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	4604      	mov	r4, r0
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_ROM_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readRom, rxData);
 80019fe:	466a      	mov	r2, sp
 8001a00:	2100      	movs	r1, #0
 8001a02:	2333      	movs	r3, #51	@ 0x33
 8001a04:	f363 0107 	bfi	r1, r3, #0, #8
 8001a08:	2308      	movs	r3, #8
 8001a0a:	f363 210f 	bfi	r1, r3, #8, #8
 8001a0e:	f7ff fefc 	bl	800180a <ExecuteCommand>

  if (result != DS18B20_OK)
 8001a12:	b960      	cbnz	r0, 8001a2e <DS18B20_ReadRom+0x36>
 8001a14:	4603      	mov	r3, r0
 8001a16:	e008      	b.n	8001a2a <DS18B20_ReadRom+0x32>
    return result;
  }

  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	f103 0109 	add.w	r1, r3, #9
 8001a1e:	4469      	add	r1, sp
 8001a20:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8001a24:	4423      	add	r3, r4
 8001a26:	7219      	strb	r1, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8001a28:	b2d3      	uxtb	r3, r2
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d9f4      	bls.n	8001a18 <DS18B20_ReadRom+0x20>
  }

  return DS18B20_OK;
}
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd10      	pop	{r4, pc}

08001a32 <DS18B20_SkipRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_SkipRom(DS18B20 *sensor)
{
 8001a32:	b500      	push	{lr}
 8001a34:	b083      	sub	sp, #12
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, skipRom, &rxDummyData);
 8001a36:	f10d 0207 	add.w	r2, sp, #7
 8001a3a:	21cc      	movs	r1, #204	@ 0xcc
 8001a3c:	f7ff fee5 	bl	800180a <ExecuteCommand>
  {
    return result;
  }

  return DS18B20_OK;
}
 8001a40:	b003      	add	sp, #12
 8001a42:	f85d fb04 	ldr.w	pc, [sp], #4

08001a46 <DS18B20_Init>:


/*----------------------------------------------------------------------------*/
void DS18B20_Init(DS18B20 *sensor, UART_HandleTypeDef *huart)
{
  sensor->isConnected = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	7043      	strb	r3, [r0, #1]
  sensor->uart = huart;
 8001a4a:	6041      	str	r1, [r0, #4]
  sensor->isInitialized = 1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	7003      	strb	r3, [r0, #0]
}
 8001a50:	4770      	bx	lr
	...

08001a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a58:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	ad05      	add	r5, sp, #20
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	9405      	str	r4, [sp, #20]
 8001a60:	9406      	str	r4, [sp, #24]
 8001a62:	9407      	str	r4, [sp, #28]
 8001a64:	9408      	str	r4, [sp, #32]
 8001a66:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a68:	4b50      	ldr	r3, [pc, #320]	@ (8001bac <MX_GPIO_Init+0x158>)
 8001a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a6c:	f042 0204 	orr.w	r2, r2, #4
 8001a70:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a74:	f002 0204 	and.w	r2, r2, #4
 8001a78:	9201      	str	r2, [sp, #4]
 8001a7a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a86:	f002 0201 	and.w	r2, r2, #1
 8001a8a:	9202      	str	r2, [sp, #8]
 8001a8c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a90:	f042 0202 	orr.w	r2, r2, #2
 8001a94:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a98:	f002 0202 	and.w	r2, r2, #2
 8001a9c:	9203      	str	r2, [sp, #12]
 8001a9e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001aa2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aae:	9304      	str	r3, [sp, #16]
 8001ab0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	2158      	movs	r1, #88	@ 0x58
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aba:	f002 fba8 	bl	800420e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_RESET);
 8001abe:	4f3c      	ldr	r7, [pc, #240]	@ (8001bb0 <MX_GPIO_Init+0x15c>)
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4638      	mov	r0, r7
 8001ac6:	f002 fba2 	bl	800420e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OK_Pin */
  GPIO_InitStruct.Pin = OK_Pin;
 8001aca:	2601      	movs	r6, #1
 8001acc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ace:	f44f 1a88 	mov.w	sl, #1114112	@ 0x110000
 8001ad2:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(OK_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ade:	f002 fa31 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001ae2:	f04f 0908 	mov.w	r9, #8
 8001ae6:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aec:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001af0:	4629      	mov	r1, r5
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af6:	f002 fa25 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 8001afa:	2350      	movs	r3, #80	@ 0x50
 8001afc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	4629      	mov	r1, r5
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0a:	f002 fa1b 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin DOWN_Pin UP_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin|DOWN_Pin|UP_Pin;
 8001b0e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001b12:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1e:	f002 fa11 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001b22:	23d1      	movs	r3, #209	@ 0xd1
 8001b24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b26:	f04f 0803 	mov.w	r8, #3
 8001b2a:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	4629      	mov	r1, r5
 8001b32:	4638      	mov	r0, r7
 8001b34:	f002 fa06 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_Pin */
  GPIO_InitStruct.Pin = PWR_Pin;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(PWR_GPIO_Port, &GPIO_InitStruct);
 8001b42:	4629      	mov	r1, r5
 8001b44:	4638      	mov	r0, r7
 8001b46:	f002 f9fd 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001b4a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001b4e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b50:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	4629      	mov	r1, r5
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5c:	f002 f9f2 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_WKUP_Pin */
  GPIO_InitStruct.Pin = USB_WKUP_Pin;
 8001b60:	2320      	movs	r3, #32
 8001b62:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b64:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USB_WKUP_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	f002 f9e9 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b72:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b76:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <MX_GPIO_Init+0x160>)
 8001b80:	f002 f9e0 	bl	8003f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b84:	4622      	mov	r2, r4
 8001b86:	4621      	mov	r1, r4
 8001b88:	2006      	movs	r0, #6
 8001b8a:	f002 f877 	bl	8003c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b8e:	2006      	movs	r0, #6
 8001b90:	f002 f884 	bl	8003c9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b94:	4622      	mov	r2, r4
 8001b96:	4621      	mov	r1, r4
 8001b98:	2017      	movs	r0, #23
 8001b9a:	f002 f86f 	bl	8003c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b9e:	2017      	movs	r0, #23
 8001ba0:	f002 f87c 	bl	8003c9c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba4:	b00a      	add	sp, #40	@ 0x28
 8001ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	48001c00 	.word	0x48001c00

08001bb8 <MX_DMA_Init>:
{
 8001bb8:	b500      	push	{lr}
 8001bba:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <MX_DMA_Init+0x30>)
 8001bbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	649a      	str	r2, [r3, #72]	@ 0x48
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	200b      	movs	r0, #11
 8001bd6:	f002 f851 	bl	8003c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bda:	200b      	movs	r0, #11
 8001bdc:	f002 f85e 	bl	8003c9c <HAL_NVIC_EnableIRQ>
}
 8001be0:	b003      	add	sp, #12
 8001be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000

08001bec <map>:
  
  EPD_Display_Base(BlackImage);
  HAL_Delay(100);
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001bec:	b410      	push	{r4}
  if(in_min == in_max){
 8001bee:	4291      	cmp	r1, r2
 8001bf0:	d00c      	beq.n	8001c0c <map+0x20>
    return (out_max+out_min)/2;
  }
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001bf2:	1a40      	subs	r0, r0, r1
 8001bf4:	9c01      	ldr	r4, [sp, #4]
 8001bf6:	eba4 0c03 	sub.w	ip, r4, r3
 8001bfa:	fb0c f000 	mul.w	r0, ip, r0
 8001bfe:	1a52      	subs	r2, r2, r1
 8001c00:	fb90 f0f2 	sdiv	r0, r0, r2
 8001c04:	4418      	add	r0, r3
}
 8001c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c0a:	4770      	bx	lr
    return (out_max+out_min)/2;
 8001c0c:	9a01      	ldr	r2, [sp, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001c14:	1058      	asrs	r0, r3, #1
 8001c16:	e7f6      	b.n	8001c06 <map+0x1a>

08001c18 <shutdown>:

void shutdown(bool skipRTC){
 8001c18:	b500      	push	{lr}
 8001c1a:	b087      	sub	sp, #28
  EPD_Sleep();
 8001c1c:	f7ff f8f1 	bl	8000e02 <EPD_Sleep>
  EPD_Exit();
 8001c20:	f7ff f8fa 	bl	8000e18 <EPD_Exit>

  __HAL_RCC_SPI1_CLK_DISABLE();
 8001c24:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <shutdown+0x58>)
 8001c26:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c2c:	6613      	str	r3, [r2, #96]	@ 0x60
  HAL_SPI_DeInit(&hspi1);
 8001c2e:	4811      	ldr	r0, [pc, #68]	@ (8001c74 <shutdown+0x5c>)
 8001c30:	f004 feba 	bl	80069a8 <HAL_SPI_DeInit>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	a901      	add	r1, sp, #4
 8001c36:	2300      	movs	r3, #0
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	608b      	str	r3, [r1, #8]
 8001c3e:	60cb      	str	r3, [r1, #12]
 8001c40:	610b      	str	r3, [r1, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 | GPIO_PIN_6;
 8001c42:	23fa      	movs	r3, #250	@ 0xfa
 8001c44:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c46:	2303      	movs	r3, #3
 8001c48:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4e:	f002 f979 	bl	8003f44 <HAL_GPIO_Init>

  HAL_SuspendTick();
 8001c52:	f001 f937 	bl	8002ec4 <HAL_SuspendTick>
  HAL_NVIC_DisableIRQ(SysTick_IRQn);
 8001c56:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5a:	f002 f823 	bl	8003ca4 <HAL_NVIC_DisableIRQ>
  // uint32_t sleep_time = MEASURMENTS_DELTA_SEC;
  // if(skipRTC && ((RTC->CR & RTC_CR_WUTE) != 0)){
  //   sleep_time = HAL_RTCEx_GetWakeUpTimer(&hrtc);
  // }
  // HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleep_time, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0);
  HAL_PWREx_EnableLowPowerRunMode();
 8001c5e:	f003 fc77 	bl	8005550 <HAL_PWREx_EnableLowPowerRunMode>
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f003 fc7c 	bl	8005560 <HAL_PWREx_EnterSTOP2Mode>
}
 8001c68:	b007      	add	sp, #28
 8001c6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	20001318 	.word	0x20001318

08001c78 <DS18_INIT>:
  MX_SPI1_Init();
  MX_USB_DEVICE_Init();
  EPD_Init();
}

void DS18_INIT(){
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	b082      	sub	sp, #8
  DS18B20_Init(&temperatureSensor, &huart2);
 8001c7c:	4c11      	ldr	r4, [pc, #68]	@ (8001cc4 <DS18_INIT+0x4c>)
 8001c7e:	4912      	ldr	r1, [pc, #72]	@ (8001cc8 <DS18_INIT+0x50>)
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fee0 	bl	8001a46 <DS18B20_Init>
  DS18B20_InitializationCommand(&temperatureSensor);
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff fea5 	bl	80019d6 <DS18B20_InitializationCommand>
  DS18B20_ReadRom(&temperatureSensor);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff feb3 	bl	80019f8 <DS18B20_ReadRom>
  DS18B20_ReadScratchpad(&temperatureSensor);
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff fe30 	bl	80018f8 <DS18B20_ReadScratchpad>
  uint8_t settings[3];
  settings[0] = temperatureSensor.temperatureLimitHigh;
 8001c98:	7be3      	ldrb	r3, [r4, #15]
 8001c9a:	f88d 3004 	strb.w	r3, [sp, #4]
  settings[1] = temperatureSensor.temperatureLimitLow;
 8001c9e:	7ba3      	ldrb	r3, [r4, #14]
 8001ca0:	f88d 3005 	strb.w	r3, [sp, #5]
  settings[2] = DS18B20_12_BITS_CONFIG;
 8001ca4:	237f      	movs	r3, #127	@ 0x7f
 8001ca6:	f88d 3006 	strb.w	r3, [sp, #6]
  DS18B20_InitializationCommand(&temperatureSensor);
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fe93 	bl	80019d6 <DS18B20_InitializationCommand>
  DS18B20_SkipRom(&temperatureSensor);
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7ff febe 	bl	8001a32 <DS18B20_SkipRom>
  DS18B20_WriteScratchpad(&temperatureSensor, settings);
 8001cb6:	a901      	add	r1, sp, #4
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff fe77 	bl	80019ac <DS18B20_WriteScratchpad>
}
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd10      	pop	{r4, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20001270 	.word	0x20001270
 8001cc8:	20001290 	.word	0x20001290

08001ccc <DS18_GET>:

float DS18_GET(){
 8001ccc:	b510      	push	{r4, lr}
	DS18B20_InitializationCommand(&temperatureSensor);
 8001cce:	4c0b      	ldr	r4, [pc, #44]	@ (8001cfc <DS18_GET+0x30>)
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7ff fe80 	bl	80019d6 <DS18B20_InitializationCommand>
	DS18B20_SkipRom(&temperatureSensor);
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7ff feab 	bl	8001a32 <DS18B20_SkipRom>
	DS18B20_ConvertT(&temperatureSensor, DS18B20_DATA);
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff fdda 	bl	8001898 <DS18B20_ConvertT>
	DS18B20_InitializationCommand(&temperatureSensor);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fe76 	bl	80019d6 <DS18B20_InitializationCommand>
	DS18B20_SkipRom(&temperatureSensor);
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff fea1 	bl	8001a32 <DS18B20_SkipRom>
	DS18B20_ReadScratchpad(&temperatureSensor);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fe01 	bl	80018f8 <DS18B20_ReadScratchpad>
	return temperatureSensor.temperature;
}
 8001cf6:	ed94 0a05 	vldr	s0, [r4, #20]
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	20001270 	.word	0x20001270

08001d00 <set_time>:

void set_time(){
 8001d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d04:	b09c      	sub	sp, #112	@ 0x70
  bool flag = true; // true ONLY FOR DEBUG!!!
  Button bt_ok = {GPIOA, GPIO_PIN_0, TYPE_LOW_PULL};
 8001d06:	af17      	add	r7, sp, #92	@ 0x5c
 8001d08:	2400      	movs	r4, #0
 8001d0a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8001d0c:	9418      	str	r4, [sp, #96]	@ 0x60
 8001d0e:	9419      	str	r4, [sp, #100]	@ 0x64
 8001d10:	941a      	str	r4, [sp, #104]	@ 0x68
 8001d12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001d14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d18:	9317      	str	r3, [sp, #92]	@ 0x5c
 8001d1a:	f04f 0801 	mov.w	r8, #1
 8001d1e:	f8ad 8060 	strh.w	r8, [sp, #96]	@ 0x60
  Button bt_down = {GPIOA, GPIO_PIN_8, TYPE_LOW_PULL};
 8001d22:	ae12      	add	r6, sp, #72	@ 0x48
 8001d24:	9412      	str	r4, [sp, #72]	@ 0x48
 8001d26:	9413      	str	r4, [sp, #76]	@ 0x4c
 8001d28:	9414      	str	r4, [sp, #80]	@ 0x50
 8001d2a:	9415      	str	r4, [sp, #84]	@ 0x54
 8001d2c:	9416      	str	r4, [sp, #88]	@ 0x58
 8001d2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8001d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d34:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
  Button bt_up = {GPIOA, GPIO_PIN_9, TYPE_LOW_PULL};
 8001d38:	ad0d      	add	r5, sp, #52	@ 0x34
 8001d3a:	940d      	str	r4, [sp, #52]	@ 0x34
 8001d3c:	940e      	str	r4, [sp, #56]	@ 0x38
 8001d3e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8001d40:	9410      	str	r4, [sp, #64]	@ 0x40
 8001d42:	9411      	str	r4, [sp, #68]	@ 0x44
 8001d44:	930d      	str	r3, [sp, #52]	@ 0x34
 8001d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d4a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38

  int8_t d_time[5] = {25, 03, 24, 12, 00};
 8001d4e:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <set_time+0xe0>)
 8001d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001d52:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
  uint8_t up_lim[5] = {99, 12, 31, 23, 59};
 8001d56:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <set_time+0xe4>)
 8001d58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8001d5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
  uint8_t down_lim[5] = {0, 1, 1, 0, 0};
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <set_time+0xe8>)
 8001d64:	9307      	str	r3, [sp, #28]
 8001d66:	f88d 4020 	strb.w	r4, [sp, #32]
  uint8_t edit_ptr = 0;

  uint32_t upd_tmr = HAL_GetTick();
 8001d6a:	f001 f891 	bl	8002e90 <HAL_GetTick>
  bool edited;
  // FIX THIS
  tick(&bt_ok);
 8001d6e:	4638      	mov	r0, r7
 8001d70:	f7ff fcda 	bl	8001728 <tick>
  tick(&bt_up);
 8001d74:	4628      	mov	r0, r5
 8001d76:	f7ff fcd7 	bl	8001728 <tick>
  tick(&bt_down);
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f7ff fcd4 	bl	8001728 <tick>
  isClicked(&bt_ok);
 8001d80:	4638      	mov	r0, r7
 8001d82:	f7ff fd1d 	bl	80017c0 <isClicked>
  isClicked(&bt_down);
 8001d86:	4630      	mov	r0, r6
 8001d88:	f7ff fd1a 	bl	80017c0 <isClicked>
  isClicked(&bt_up);
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	f7ff fd17 	bl	80017c0 <isClicked>
      if(HAL_GetTick() - upd_tmr > 1000 && edited){
        break;
      }
    }
  }
  RTC_TimeTypeDef sTime = {0};
 8001d92:	ad02      	add	r5, sp, #8
 8001d94:	9402      	str	r4, [sp, #8]
 8001d96:	9403      	str	r4, [sp, #12]
 8001d98:	9404      	str	r4, [sp, #16]
 8001d9a:	9405      	str	r4, [sp, #20]
 8001d9c:	9406      	str	r4, [sp, #24]
  RTC_DateTypeDef sDate = {0};
 8001d9e:	9401      	str	r4, [sp, #4]

  sTime.Hours = d_time[3];
 8001da0:	230c      	movs	r3, #12
 8001da2:	f88d 3008 	strb.w	r3, [sp, #8]
  sTime.Minutes = d_time[4];
  sDate.Year = d_time[0];
 8001da6:	2319      	movs	r3, #25
 8001da8:	f88d 3007 	strb.w	r3, [sp, #7]
  sDate.Month = d_time[1];
 8001dac:	2303      	movs	r3, #3
 8001dae:	f88d 3005 	strb.w	r3, [sp, #5]
  sDate.Date = d_time[2];
 8001db2:	2318      	movs	r3, #24
 8001db4:	f88d 3006 	strb.w	r3, [sp, #6]
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001db8:	f88d 8004 	strb.w	r8, [sp, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
 8001dbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dc0:	9305      	str	r3, [sp, #20]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;

  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001dc2:	4e0a      	ldr	r6, [pc, #40]	@ (8001dec <set_time+0xec>)
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	a901      	add	r1, sp, #4
 8001dc8:	4630      	mov	r0, r6
 8001dca:	f004 fb32 	bl	8006432 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001dce:	4622      	mov	r2, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	f004 fac7 	bl	8006366 <HAL_RTC_SetTime>
}
 8001dd8:	b01c      	add	sp, #112	@ 0x70
 8001dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dde:	bf00      	nop
 8001de0:	0c180319 	.word	0x0c180319
 8001de4:	0800ba78 	.word	0x0800ba78
 8001de8:	00010100 	.word	0x00010100
 8001dec:	2000137c 	.word	0x2000137c

08001df0 <timestamp_to_time>:
  if(goto_sleep){
    shutdown(false);
  }
}

void timestamp_to_time(uint32_t timestamp, uint8_t* hours, uint8_t* minutes) {
 8001df0:	b410      	push	{r4}
  uint32_t seconds_in_day = 86400;
  uint32_t seconds_in_hour = 3600;
  uint32_t seconds_in_minute = 60;

  // Get seconds since midnight (UTC)
  uint32_t time_of_day = timestamp % seconds_in_day;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <timestamp_to_time+0x34>)
 8001df4:	fba3 4300 	umull	r4, r3, r3, r0
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	4c0b      	ldr	r4, [pc, #44]	@ (8001e28 <timestamp_to_time+0x38>)
 8001dfc:	fb04 0313 	mls	r3, r4, r3, r0

  *hours = time_of_day / seconds_in_hour;
 8001e00:	480a      	ldr	r0, [pc, #40]	@ (8001e2c <timestamp_to_time+0x3c>)
 8001e02:	fba0 4003 	umull	r4, r0, r0, r3
 8001e06:	0ac0      	lsrs	r0, r0, #11
 8001e08:	7008      	strb	r0, [r1, #0]
  *minutes = (time_of_day % seconds_in_hour) / seconds_in_minute;
 8001e0a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001e0e:	fb01 3310 	mls	r3, r1, r0, r3
 8001e12:	4907      	ldr	r1, [pc, #28]	@ (8001e30 <timestamp_to_time+0x40>)
 8001e14:	fba1 1303 	umull	r1, r3, r1, r3
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	7013      	strb	r3, [r2, #0]
}
 8001e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	c22e4507 	.word	0xc22e4507
 8001e28:	00015180 	.word	0x00015180
 8001e2c:	91a2b3c5 	.word	0x91a2b3c5
 8001e30:	88888889 	.word	0x88888889
 8001e34:	00000000 	.word	0x00000000

08001e38 <plot>:
void plot(){
 8001e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e3c:	b09b      	sub	sp, #108	@ 0x6c
  EPD_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 90, WHITE);  	
 8001e3e:	4db5      	ldr	r5, [pc, #724]	@ (8002114 <plot+0x2dc>)
 8001e40:	24ff      	movs	r4, #255	@ 0xff
 8001e42:	9400      	str	r4, [sp, #0]
 8001e44:	235a      	movs	r3, #90	@ 0x5a
 8001e46:	22fa      	movs	r2, #250	@ 0xfa
 8001e48:	217a      	movs	r1, #122	@ 0x7a
 8001e4a:	4628      	mov	r0, r5
 8001e4c:	f7ff f812 	bl	8000e74 <EPD_NewImage>
  EPD_SelectImage(BlackImage);
 8001e50:	4628      	mov	r0, r5
 8001e52:	f7ff f837 	bl	8000ec4 <EPD_SelectImage>
  EPD_Clear(WHITE);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff f8fc 	bl	8001054 <EPD_Clear>
  int16_t min = q_get(0);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f000 ff2f 	bl	8002cc0 <q_get>
 8001e62:	4605      	mov	r5, r0
  int16_t max = q_get(0);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 ff2b 	bl	8002cc0 <q_get>
 8001e6a:	4607      	mov	r7, r0
  for (uint8_t i = 0; i < q_len(); i++){
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	e006      	b.n	8001e7e <plot+0x46>
      min = q_get(i);
 8001e70:	4620      	mov	r0, r4
 8001e72:	f000 ff25 	bl	8002cc0 <q_get>
 8001e76:	4605      	mov	r5, r0
 8001e78:	e00a      	b.n	8001e90 <plot+0x58>
  for (uint8_t i = 0; i < q_len(); i++){
 8001e7a:	3401      	adds	r4, #1
 8001e7c:	b2e4      	uxtb	r4, r4
 8001e7e:	f000 ffb7 	bl	8002df0 <q_len>
 8001e82:	4284      	cmp	r4, r0
 8001e84:	d20e      	bcs.n	8001ea4 <plot+0x6c>
    if(q_get(i) <= min){
 8001e86:	4620      	mov	r0, r4
 8001e88:	f000 ff1a 	bl	8002cc0 <q_get>
 8001e8c:	42a8      	cmp	r0, r5
 8001e8e:	ddef      	ble.n	8001e70 <plot+0x38>
    if(q_get(i) >= max){
 8001e90:	4620      	mov	r0, r4
 8001e92:	f000 ff15 	bl	8002cc0 <q_get>
 8001e96:	42b8      	cmp	r0, r7
 8001e98:	dbef      	blt.n	8001e7a <plot+0x42>
      max = q_get(i);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f000 ff10 	bl	8002cc0 <q_get>
 8001ea0:	4607      	mov	r7, r0
 8001ea2:	e7ea      	b.n	8001e7a <plot+0x42>
  if(min == max){
 8001ea4:	42bd      	cmp	r5, r7
 8001ea6:	d01a      	beq.n	8001ede <plot+0xa6>
  if(min < 0 && max > 0){
 8001ea8:	2d00      	cmp	r5, #0
 8001eaa:	db1d      	blt.n	8001ee8 <plot+0xb0>
  switch (max - min)
 8001eac:	463e      	mov	r6, r7
 8001eae:	46a8      	mov	r8, r5
 8001eb0:	eba7 0c05 	sub.w	ip, r7, r5
 8001eb4:	f5bc 7fc8 	cmp.w	ip, #400	@ 0x190
 8001eb8:	da40      	bge.n	8001f3c <plot+0x104>
 8001eba:	f1bc 0ffa 	cmp.w	ip, #250	@ 0xfa
 8001ebe:	da59      	bge.n	8001f74 <plot+0x13c>
 8001ec0:	f1bc 0f63 	cmp.w	ip, #99	@ 0x63
 8001ec4:	dc30      	bgt.n	8001f28 <plot+0xf0>
 8001ec6:	f1bc 0f32 	cmp.w	ip, #50	@ 0x32
 8001eca:	da63      	bge.n	8001f94 <plot+0x15c>
 8001ecc:	f1bc 0f18 	cmp.w	ip, #24
 8001ed0:	dc20      	bgt.n	8001f14 <plot+0xdc>
 8001ed2:	f1bc 0f00 	cmp.w	ip, #0
 8001ed6:	db60      	blt.n	8001f9a <plot+0x162>
    dt = 5;
 8001ed8:	f04f 0905 	mov.w	r9, #5
 8001edc:	e04c      	b.n	8001f78 <plot+0x140>
    min-=10;
 8001ede:	3d0a      	subs	r5, #10
 8001ee0:	b22d      	sxth	r5, r5
    max+=10;
 8001ee2:	370a      	adds	r7, #10
 8001ee4:	b23f      	sxth	r7, r7
 8001ee6:	e7df      	b.n	8001ea8 <plot+0x70>
  if(min < 0 && max > 0){
 8001ee8:	2f00      	cmp	r7, #0
 8001eea:	dddf      	ble.n	8001eac <plot+0x74>
    EPD_DrawLine(10, map(0, min, max, 110, 22), 250, map(0, min, max, 110, 22), BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8001eec:	2316      	movs	r3, #22
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	236e      	movs	r3, #110	@ 0x6e
 8001ef2:	463a      	mov	r2, r7
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fe78 	bl	8001bec <map>
 8001efc:	b281      	uxth	r1, r0
 8001efe:	2300      	movs	r3, #0
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	2201      	movs	r2, #1
 8001f04:	9201      	str	r2, [sp, #4]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	22fa      	movs	r2, #250	@ 0xfa
 8001f0c:	200a      	movs	r0, #10
 8001f0e:	f7ff f963 	bl	80011d8 <EPD_DrawLine>
 8001f12:	e7cb      	b.n	8001eac <plot+0x74>
  switch (max - min)
 8001f14:	f1ac 0319 	sub.w	r3, ip, #25
 8001f18:	2b18      	cmp	r3, #24
 8001f1a:	d802      	bhi.n	8001f22 <plot+0xea>
    dt = 10;
 8001f1c:	f04f 090a 	mov.w	r9, #10
 8001f20:	e02a      	b.n	8001f78 <plot+0x140>
    dt = 2000;
 8001f22:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f26:	e027      	b.n	8001f78 <plot+0x140>
  switch (max - min)
 8001f28:	f1ac 0364 	sub.w	r3, ip, #100	@ 0x64
 8001f2c:	2b95      	cmp	r3, #149	@ 0x95
 8001f2e:	d802      	bhi.n	8001f36 <plot+0xfe>
    dt = 50;
 8001f30:	f04f 0932 	mov.w	r9, #50	@ 0x32
 8001f34:	e020      	b.n	8001f78 <plot+0x140>
    dt = 2000;
 8001f36:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f3a:	e01d      	b.n	8001f78 <plot+0x140>
  switch (max - min)
 8001f3c:	f5bc 6ffa 	cmp.w	ip, #2000	@ 0x7d0
 8001f40:	da0d      	bge.n	8001f5e <plot+0x126>
 8001f42:	f5bc 7f48 	cmp.w	ip, #800	@ 0x320
 8001f46:	da2b      	bge.n	8001fa0 <plot+0x168>
 8001f48:	f5ac 73c8 	sub.w	r3, ip, #400	@ 0x190
 8001f4c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001f50:	d202      	bcs.n	8001f58 <plot+0x120>
    dt = 200;
 8001f52:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8001f56:	e00f      	b.n	8001f78 <plot+0x140>
    dt = 2000;
 8001f58:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f5c:	e00c      	b.n	8001f78 <plot+0x140>
  switch (max - min)
 8001f5e:	f5ac 63fa 	sub.w	r3, ip, #2000	@ 0x7d0
 8001f62:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001f66:	d802      	bhi.n	8001f6e <plot+0x136>
 8001f68:	f44f 797a 	mov.w	r9, #1000	@ 0x3e8
 8001f6c:	e004      	b.n	8001f78 <plot+0x140>
    dt = 2000;
 8001f6e:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f72:	e001      	b.n	8001f78 <plot+0x140>
    dt = 100;
 8001f74:	f04f 0964 	mov.w	r9, #100	@ 0x64
  for (int16_t x = roundUpToDiv(min, dt); x < max+dt; x += dt){
 8001f78:	2d00      	cmp	r5, #0
 8001f7a:	db14      	blt.n	8001fa6 <plot+0x16e>
 8001f7c:	f109 34ff 	add.w	r4, r9, #4294967295
 8001f80:	4444      	add	r4, r8
 8001f82:	46ca      	mov	sl, r9
 8001f84:	fb94 f4f9 	sdiv	r4, r4, r9
 8001f88:	fb14 f409 	smulbb	r4, r4, r9
 8001f8c:	b224      	sxth	r4, r4
 8001f8e:	f8cd c010 	str.w	ip, [sp, #16]
 8001f92:	e038      	b.n	8002006 <plot+0x1ce>
    dt = 20;
 8001f94:	f04f 0914 	mov.w	r9, #20
 8001f98:	e7ee      	b.n	8001f78 <plot+0x140>
    dt = 2000;
 8001f9a:	f44f 69fa 	mov.w	r9, #2000	@ 0x7d0
 8001f9e:	e7eb      	b.n	8001f78 <plot+0x140>
    dt = 500;
 8001fa0:	f44f 79fa 	mov.w	r9, #500	@ 0x1f4
 8001fa4:	e7e8      	b.n	8001f78 <plot+0x140>
  for (int16_t x = roundUpToDiv(min, dt); x < max+dt; x += dt){
 8001fa6:	f1c9 0401 	rsb	r4, r9, #1
 8001faa:	e7e9      	b.n	8001f80 <plot+0x148>
    if(x == 0){st = LINE_STYLE_SOLID;}
 8001fac:	f04f 0b00 	mov.w	fp, #0
 8001fb0:	e032      	b.n	8002018 <plot+0x1e0>
      ln = sprintf(buf, "%d", x/100);
 8001fb2:	4b59      	ldr	r3, [pc, #356]	@ (8002118 <plot+0x2e0>)
 8001fb4:	fb83 2304 	smull	r2, r3, r3, r4
 8001fb8:	17e2      	asrs	r2, r4, #31
 8001fba:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8001fbe:	b212      	sxth	r2, r2
 8001fc0:	4956      	ldr	r1, [pc, #344]	@ (800211c <plot+0x2e4>)
 8001fc2:	a808      	add	r0, sp, #32
 8001fc4:	f007 fc6c 	bl	80098a0 <siprintf>
 8001fc8:	fa5f fb80 	uxtb.w	fp, r0
    EPD_SetRotate(0);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7fe ff7f 	bl	8000ed0 <EPD_SetRotate>
    EPD_DrawString_EN(map(x, min, max, 2, 88)+8-(2*ln), 0,  buf, &Font8, WHITE, BLACK);
 8001fd2:	2358      	movs	r3, #88	@ 0x58
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	4632      	mov	r2, r6
 8001fda:	4641      	mov	r1, r8
 8001fdc:	4628      	mov	r0, r5
 8001fde:	f7ff fe05 	bl	8001bec <map>
 8001fe2:	eba0 004b 	sub.w	r0, r0, fp, lsl #1
 8001fe6:	b280      	uxth	r0, r0
 8001fe8:	3008      	adds	r0, #8
 8001fea:	2100      	movs	r1, #0
 8001fec:	9101      	str	r1, [sp, #4]
 8001fee:	23ff      	movs	r3, #255	@ 0xff
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <plot+0x2e8>)
 8001ff4:	aa08      	add	r2, sp, #32
 8001ff6:	b280      	uxth	r0, r0
 8001ff8:	f7ff f9da 	bl	80013b0 <EPD_DrawString_EN>
    EPD_SetRotate(90);
 8001ffc:	205a      	movs	r0, #90	@ 0x5a
 8001ffe:	f7fe ff67 	bl	8000ed0 <EPD_SetRotate>
  for (int16_t x = roundUpToDiv(min, dt); x < max+dt; x += dt){
 8002002:	444c      	add	r4, r9
 8002004:	b224      	sxth	r4, r4
 8002006:	4625      	mov	r5, r4
 8002008:	eb06 030a 	add.w	r3, r6, sl
 800200c:	429c      	cmp	r4, r3
 800200e:	da76      	bge.n	80020fe <plot+0x2c6>
    if(x == 0){st = LINE_STYLE_SOLID;}
 8002010:	2c00      	cmp	r4, #0
 8002012:	d0cb      	beq.n	8001fac <plot+0x174>
    bool st = LINE_STYLE_DOTTED;
 8002014:	f04f 0b01 	mov.w	fp, #1
    if(x > max && map(x, min, max, 110, 22) < 22){break;}
 8002018:	42a7      	cmp	r7, r4
 800201a:	da09      	bge.n	8002030 <plot+0x1f8>
 800201c:	2316      	movs	r3, #22
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	236e      	movs	r3, #110	@ 0x6e
 8002022:	4632      	mov	r2, r6
 8002024:	4641      	mov	r1, r8
 8002026:	4628      	mov	r0, r5
 8002028:	f7ff fde0 	bl	8001bec <map>
 800202c:	2815      	cmp	r0, #21
 800202e:	dd66      	ble.n	80020fe <plot+0x2c6>
    EPD_DrawLine(10, map(x, min, max, 110, 22), 250, map(x, min, max, 110, 22), BLACK, DOT_PIXEL_1X1, st);
 8002030:	2316      	movs	r3, #22
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	236e      	movs	r3, #110	@ 0x6e
 8002036:	4632      	mov	r2, r6
 8002038:	4641      	mov	r1, r8
 800203a:	4628      	mov	r0, r5
 800203c:	f7ff fdd6 	bl	8001bec <map>
 8002040:	b281      	uxth	r1, r0
 8002042:	f8cd b008 	str.w	fp, [sp, #8]
 8002046:	2301      	movs	r3, #1
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2300      	movs	r3, #0
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	460b      	mov	r3, r1
 8002050:	22fa      	movs	r2, #250	@ 0xfa
 8002052:	200a      	movs	r0, #10
 8002054:	f7ff f8c0 	bl	80011d8 <EPD_DrawLine>
    if(x%100 == 0){
 8002058:	4a2f      	ldr	r2, [pc, #188]	@ (8002118 <plot+0x2e0>)
 800205a:	fb82 3204 	smull	r3, r2, r2, r4
 800205e:	17e3      	asrs	r3, r4, #31
 8002060:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8002064:	2264      	movs	r2, #100	@ 0x64
 8002066:	fb02 4313 	mls	r3, r2, r3, r4
 800206a:	b21b      	sxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0a0      	beq.n	8001fb2 <plot+0x17a>
    else if(x%10 == 0 && max-min < 100){
 8002070:	492c      	ldr	r1, [pc, #176]	@ (8002124 <plot+0x2ec>)
 8002072:	fb81 2104 	smull	r2, r1, r1, r4
 8002076:	17e2      	asrs	r2, r4, #31
 8002078:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800207c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002080:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
 8002084:	b212      	sxth	r2, r2
 8002086:	b912      	cbnz	r2, 800208e <plot+0x256>
 8002088:	9a04      	ldr	r2, [sp, #16]
 800208a:	2a63      	cmp	r2, #99	@ 0x63
 800208c:	dd1d      	ble.n	80020ca <plot+0x292>
    }else if(x%5 == 0 && max-min < 10){
 800208e:	4925      	ldr	r1, [pc, #148]	@ (8002124 <plot+0x2ec>)
 8002090:	fb81 2104 	smull	r2, r1, r1, r4
 8002094:	17e2      	asrs	r2, r4, #31
 8002096:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 800209a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800209e:	1aa2      	subs	r2, r4, r2
 80020a0:	b212      	sxth	r2, r2
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d1ad      	bne.n	8002002 <plot+0x1ca>
 80020a6:	9a04      	ldr	r2, [sp, #16]
 80020a8:	2a09      	cmp	r2, #9
 80020aa:	dcaa      	bgt.n	8002002 <plot+0x1ca>
      uint8_t int_part = x / 100;
 80020ac:	491a      	ldr	r1, [pc, #104]	@ (8002118 <plot+0x2e0>)
 80020ae:	fb81 2104 	smull	r2, r1, r1, r4
 80020b2:	17e2      	asrs	r2, r4, #31
 80020b4:	ebc2 1261 	rsb	r2, r2, r1, asr #5
      ln = sprintf(buf, "%d.%d", int_part, frac_part);
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	491a      	ldr	r1, [pc, #104]	@ (8002128 <plot+0x2f0>)
 80020be:	a808      	add	r0, sp, #32
 80020c0:	f007 fbee 	bl	80098a0 <siprintf>
 80020c4:	fa5f fb80 	uxtb.w	fp, r0
    }else if(x%5 == 0 && max-min < 10){
 80020c8:	e780      	b.n	8001fcc <plot+0x194>
      uint16_t rounded = (x + 5) / 10;
 80020ca:	1d6b      	adds	r3, r5, #5
 80020cc:	4a15      	ldr	r2, [pc, #84]	@ (8002124 <plot+0x2ec>)
 80020ce:	fb82 1203 	smull	r1, r2, r2, r3
 80020d2:	17db      	asrs	r3, r3, #31
 80020d4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80020d8:	b29b      	uxth	r3, r3
      uint8_t int_part = rounded / 10;
 80020da:	4a14      	ldr	r2, [pc, #80]	@ (800212c <plot+0x2f4>)
 80020dc:	fba2 1203 	umull	r1, r2, r2, r3
 80020e0:	08d1      	lsrs	r1, r2, #3
      uint8_t frac_part = rounded % 10;
 80020e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80020e6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
      ln = sprintf(buf, "%d.%d", int_part, frac_part);
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80020f0:	490d      	ldr	r1, [pc, #52]	@ (8002128 <plot+0x2f0>)
 80020f2:	a808      	add	r0, sp, #32
 80020f4:	f007 fbd4 	bl	80098a0 <siprintf>
 80020f8:	fa5f fb80 	uxtb.w	fp, r0
    else if(x%10 == 0 && max-min < 100){
 80020fc:	e766      	b.n	8001fcc <plot+0x194>
  uint32_t timestamp = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 80020fe:	2105      	movs	r1, #5
 8002100:	480b      	ldr	r0, [pc, #44]	@ (8002130 <plot+0x2f8>)
 8002102:	f004 facc 	bl	800669e <HAL_RTCEx_BKUPRead>
 8002106:	4683      	mov	fp, r0
  for (uint8_t i = 0; i < q_len(); i++){
 8002108:	2700      	movs	r7, #0
 800210a:	f8cd a014 	str.w	sl, [sp, #20]
 800210e:	46b2      	mov	sl, r6
 8002110:	e039      	b.n	8002186 <plot+0x34e>
 8002112:	bf00      	nop
 8002114:	200002d0 	.word	0x200002d0
 8002118:	51eb851f 	.word	0x51eb851f
 800211c:	0800ba80 	.word	0x0800ba80
 8002120:	200000b0 	.word	0x200000b0
 8002124:	66666667 	.word	0x66666667
 8002128:	0800ba84 	.word	0x0800ba84
 800212c:	cccccccd 	.word	0xcccccccd
 8002130:	2000137c 	.word	0x2000137c
    EPD_DrawLine(10+(i*5), map(q_get(i), min, max, 110, 22), 10+((i+1)*5), map(q_get(i+1), min, max, 110, 22), BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8002134:	4638      	mov	r0, r7
 8002136:	f000 fdc3 	bl	8002cc0 <q_get>
 800213a:	2616      	movs	r6, #22
 800213c:	9600      	str	r6, [sp, #0]
 800213e:	236e      	movs	r3, #110	@ 0x6e
 8002140:	4652      	mov	r2, sl
 8002142:	4641      	mov	r1, r8
 8002144:	f7ff fd52 	bl	8001bec <map>
 8002148:	9004      	str	r0, [sp, #16]
 800214a:	1c7c      	adds	r4, r7, #1
 800214c:	b2e7      	uxtb	r7, r4
 800214e:	4638      	mov	r0, r7
 8002150:	f000 fdb6 	bl	8002cc0 <q_get>
 8002154:	9600      	str	r6, [sp, #0]
 8002156:	236e      	movs	r3, #110	@ 0x6e
 8002158:	4652      	mov	r2, sl
 800215a:	4641      	mov	r1, r8
 800215c:	f7ff fd46 	bl	8001bec <map>
 8002160:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002164:	f104 020a 	add.w	r2, r4, #10
 8002168:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800216c:	350a      	adds	r5, #10
 800216e:	2100      	movs	r1, #0
 8002170:	9102      	str	r1, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	9100      	str	r1, [sp, #0]
 8002178:	b283      	uxth	r3, r0
 800217a:	b292      	uxth	r2, r2
 800217c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8002180:	b2a8      	uxth	r0, r5
 8002182:	f7ff f829 	bl	80011d8 <EPD_DrawLine>
  for (uint8_t i = 0; i < q_len(); i++){
 8002186:	463d      	mov	r5, r7
 8002188:	f000 fe32 	bl	8002df0 <q_len>
 800218c:	4287      	cmp	r7, r0
 800218e:	d3d1      	bcc.n	8002134 <plot+0x2fc>
  for (int8_t i = q_len(); i > 0; i-=8){
 8002190:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002194:	f000 fe2c 	bl	8002df0 <q_len>
 8002198:	b244      	sxtb	r4, r0
 800219a:	e001      	b.n	80021a0 <plot+0x368>
 800219c:	3c08      	subs	r4, #8
 800219e:	b264      	sxtb	r4, r4
 80021a0:	2c00      	cmp	r4, #0
 80021a2:	dd34      	ble.n	800220e <plot+0x3d6>
    if(i == q_len()){continue;}
 80021a4:	f000 fe24 	bl	8002df0 <q_len>
 80021a8:	4284      	cmp	r4, r0
 80021aa:	d0f7      	beq.n	800219c <plot+0x364>
    EPD_DrawLine(10+(i*5), 20, 10+(i*5), 112, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80021ac:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 80021b0:	b2ad      	uxth	r5, r5
 80021b2:	350a      	adds	r5, #10
 80021b4:	b2ad      	uxth	r5, r5
 80021b6:	2301      	movs	r3, #1
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2600      	movs	r6, #0
 80021be:	9600      	str	r6, [sp, #0]
 80021c0:	2370      	movs	r3, #112	@ 0x70
 80021c2:	462a      	mov	r2, r5
 80021c4:	2114      	movs	r1, #20
 80021c6:	4628      	mov	r0, r5
 80021c8:	f7ff f806 	bl	80011d8 <EPD_DrawLine>
    uint32_t this_time = timestamp - 1800*(q_len()-i-1);
 80021cc:	f000 fe10 	bl	8002df0 <q_len>
 80021d0:	1b00      	subs	r0, r0, r4
 80021d2:	3801      	subs	r0, #1
    timestamp_to_time(this_time, &hours, &minutes);
 80021d4:	f10d 021f 	add.w	r2, sp, #31
 80021d8:	f10d 011e 	add.w	r1, sp, #30
 80021dc:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80021e0:	fb03 b010 	mls	r0, r3, r0, fp
 80021e4:	f7ff fe04 	bl	8001df0 <timestamp_to_time>
    sprintf(timest_buf, "%d:%d", hours, minutes);
 80021e8:	af08      	add	r7, sp, #32
 80021ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80021ee:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80021f2:	496d      	ldr	r1, [pc, #436]	@ (80023a8 <plot+0x570>)
 80021f4:	4638      	mov	r0, r7
 80021f6:	f007 fb53 	bl	80098a0 <siprintf>
    EPD_DrawString_EN(10+(i*5), 114, timest_buf, &Font8, WHITE, BLACK);
 80021fa:	9601      	str	r6, [sp, #4]
 80021fc:	23ff      	movs	r3, #255	@ 0xff
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	4b6a      	ldr	r3, [pc, #424]	@ (80023ac <plot+0x574>)
 8002202:	463a      	mov	r2, r7
 8002204:	2172      	movs	r1, #114	@ 0x72
 8002206:	4628      	mov	r0, r5
 8002208:	f7ff f8d2 	bl	80013b0 <EPD_DrawString_EN>
 800220c:	e7c6      	b.n	800219c <plot+0x364>
  if(dt < 100 && dt >= 10){
 800220e:	f1a9 030a 	sub.w	r3, r9, #10
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b59      	cmp	r3, #89	@ 0x59
 8002216:	f240 809f 	bls.w	8002358 <plot+0x520>
  }else if(dt < 10){
 800221a:	f1b9 0f09 	cmp.w	r9, #9
 800221e:	f200 80a6 	bhi.w	800236e <plot+0x536>
    sprintf(buf, "%d.0%d*C/div", dt/100, dt-(dt/100));
 8002222:	4a63      	ldr	r2, [pc, #396]	@ (80023b0 <plot+0x578>)
 8002224:	fba2 9209 	umull	r9, r2, r2, r9
 8002228:	ebaa 1352 	sub.w	r3, sl, r2, lsr #5
 800222c:	0952      	lsrs	r2, r2, #5
 800222e:	4961      	ldr	r1, [pc, #388]	@ (80023b4 <plot+0x57c>)
 8002230:	a817      	add	r0, sp, #92	@ 0x5c
 8002232:	f007 fb35 	bl	80098a0 <siprintf>
  EPD_DrawString_EN(0, 0, buf, &Font12, WHITE, BLACK);
 8002236:	2000      	movs	r0, #0
 8002238:	9001      	str	r0, [sp, #4]
 800223a:	23ff      	movs	r3, #255	@ 0xff
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4b5e      	ldr	r3, [pc, #376]	@ (80023b8 <plot+0x580>)
 8002240:	aa17      	add	r2, sp, #92	@ 0x5c
 8002242:	4601      	mov	r1, r0
 8002244:	f7ff f8b4 	bl	80013b0 <EPD_DrawString_EN>
  mcuVoltage = 0xFFF * 1.18 / adcData;
 8002248:	4b5c      	ldr	r3, [pc, #368]	@ (80023bc <plot+0x584>)
 800224a:	8818      	ldrh	r0, [r3, #0]
 800224c:	f7fe f95a 	bl	8000504 <__aeabi_i2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	a152      	add	r1, pc, #328	@ (adr r1, 80023a0 <plot+0x568>)
 8002256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800225a:	f7fe fae7 	bl	800082c <__aeabi_ddiv>
 800225e:	f7fe fbcd 	bl	80009fc <__aeabi_d2f>
 8002262:	ee07 0a90 	vmov	s15, r0
 8002266:	4b56      	ldr	r3, [pc, #344]	@ (80023c0 <plot+0x588>)
 8002268:	6018      	str	r0, [r3, #0]
  if(mcuVoltage < 2.25){
 800226a:	eeb0 7a02 	vmov.f32	s14, #2	@ 0x40100000  2.250
 800226e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	f100 8083 	bmi.w	8002380 <plot+0x548>
  EPD_DrawLine(10, 112, 250, 112, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800227a:	2400      	movs	r4, #0
 800227c:	9402      	str	r4, [sp, #8]
 800227e:	2501      	movs	r5, #1
 8002280:	9501      	str	r5, [sp, #4]
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	2370      	movs	r3, #112	@ 0x70
 8002286:	22fa      	movs	r2, #250	@ 0xfa
 8002288:	4619      	mov	r1, r3
 800228a:	200a      	movs	r0, #10
 800228c:	f7fe ffa4 	bl	80011d8 <EPD_DrawLine>
  EPD_DrawLine(10, 20, 10, 112, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8002290:	9402      	str	r4, [sp, #8]
 8002292:	9501      	str	r5, [sp, #4]
 8002294:	9400      	str	r4, [sp, #0]
 8002296:	2370      	movs	r3, #112	@ 0x70
 8002298:	220a      	movs	r2, #10
 800229a:	2114      	movs	r1, #20
 800229c:	4610      	mov	r0, r2
 800229e:	f7fe ff9b 	bl	80011d8 <EPD_DrawLine>
  RTC_TimeTypeDef sTime = {0};
 80022a2:	a912      	add	r1, sp, #72	@ 0x48
 80022a4:	9412      	str	r4, [sp, #72]	@ 0x48
 80022a6:	604c      	str	r4, [r1, #4]
 80022a8:	608c      	str	r4, [r1, #8]
 80022aa:	60cc      	str	r4, [r1, #12]
 80022ac:	610c      	str	r4, [r1, #16]
  RTC_DateTypeDef sDate = {0};
 80022ae:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80022b0:	4d44      	ldr	r5, [pc, #272]	@ (80023c4 <plot+0x58c>)
 80022b2:	4622      	mov	r2, r4
 80022b4:	4628      	mov	r0, r5
 80022b6:	f004 f917 	bl	80064e8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022ba:	4622      	mov	r2, r4
 80022bc:	a911      	add	r1, sp, #68	@ 0x44
 80022be:	4628      	mov	r0, r5
 80022c0:	f004 f938 	bl	8006534 <HAL_RTC_GetDate>
  time.Day = sDate.Date;
 80022c4:	f89d 3046 	ldrb.w	r3, [sp, #70]	@ 0x46
 80022c8:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
  time.Month = sDate.Month;
 80022cc:	f89d 3045 	ldrb.w	r3, [sp, #69]	@ 0x45
 80022d0:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
  time.Year = sDate.Year;
 80022d4:	f89d 3047 	ldrb.w	r3, [sp, #71]	@ 0x47
 80022d8:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  EPD_DrawDate(175, 0, &time, &Font16, WHITE, BLACK);
 80022dc:	4e3a      	ldr	r6, [pc, #232]	@ (80023c8 <plot+0x590>)
 80022de:	9401      	str	r4, [sp, #4]
 80022e0:	27ff      	movs	r7, #255	@ 0xff
 80022e2:	9700      	str	r7, [sp, #0]
 80022e4:	4633      	mov	r3, r6
 80022e6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80022e8:	4621      	mov	r1, r4
 80022ea:	20af      	movs	r0, #175	@ 0xaf
 80022ec:	f7ff f89e 	bl	800142c <EPD_DrawDate>
  sprintf(temp_buf, "%d.%dC", q_get(q_len()-1)/100, q_get(q_len()-1)%100);
 80022f0:	f000 fd7e 	bl	8002df0 <q_len>
 80022f4:	3801      	subs	r0, #1
 80022f6:	b2c0      	uxtb	r0, r0
 80022f8:	f000 fce2 	bl	8002cc0 <q_get>
 80022fc:	4605      	mov	r5, r0
 80022fe:	f000 fd77 	bl	8002df0 <q_len>
 8002302:	3801      	subs	r0, #1
 8002304:	b2c0      	uxtb	r0, r0
 8002306:	f000 fcdb 	bl	8002cc0 <q_get>
 800230a:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <plot+0x578>)
 800230c:	fb83 2100 	smull	r2, r1, r3, r0
 8002310:	17c2      	asrs	r2, r0, #31
 8002312:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 8002316:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800231a:	fb08 0012 	mls	r0, r8, r2, r0
 800231e:	fb83 2305 	smull	r2, r3, r3, r5
 8002322:	17ea      	asrs	r2, r5, #31
 8002324:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8002328:	ad0c      	add	r5, sp, #48	@ 0x30
 800232a:	b203      	sxth	r3, r0
 800232c:	b212      	sxth	r2, r2
 800232e:	4927      	ldr	r1, [pc, #156]	@ (80023cc <plot+0x594>)
 8002330:	4628      	mov	r0, r5
 8002332:	f007 fab5 	bl	80098a0 <siprintf>
  EPD_DrawString_EN(85, 0, temp_buf, &Font16, WHITE, BLACK);
 8002336:	9401      	str	r4, [sp, #4]
 8002338:	9700      	str	r7, [sp, #0]
 800233a:	4633      	mov	r3, r6
 800233c:	462a      	mov	r2, r5
 800233e:	4621      	mov	r1, r4
 8002340:	2055      	movs	r0, #85	@ 0x55
 8002342:	f7ff f835 	bl	80013b0 <EPD_DrawString_EN>
  EPD_Display_Base(BlackImage);
 8002346:	4822      	ldr	r0, [pc, #136]	@ (80023d0 <plot+0x598>)
 8002348:	f7fe fd2e 	bl	8000da8 <EPD_Display_Base>
  HAL_Delay(100);
 800234c:	4640      	mov	r0, r8
 800234e:	f000 fda5 	bl	8002e9c <HAL_Delay>
}
 8002352:	b01b      	add	sp, #108	@ 0x6c
 8002354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sprintf(buf, "%d.%d*C/div", dt/100, dt-(dt/100));
 8002358:	4a15      	ldr	r2, [pc, #84]	@ (80023b0 <plot+0x578>)
 800235a:	fba2 9209 	umull	r9, r2, r2, r9
 800235e:	ebaa 1352 	sub.w	r3, sl, r2, lsr #5
 8002362:	0952      	lsrs	r2, r2, #5
 8002364:	491b      	ldr	r1, [pc, #108]	@ (80023d4 <plot+0x59c>)
 8002366:	a817      	add	r0, sp, #92	@ 0x5c
 8002368:	f007 fa9a 	bl	80098a0 <siprintf>
 800236c:	e763      	b.n	8002236 <plot+0x3fe>
    sprintf(buf, "%d*C/div", dt/100);
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <plot+0x578>)
 8002370:	fba3 3209 	umull	r3, r2, r3, r9
 8002374:	0952      	lsrs	r2, r2, #5
 8002376:	4918      	ldr	r1, [pc, #96]	@ (80023d8 <plot+0x5a0>)
 8002378:	a817      	add	r0, sp, #92	@ 0x5c
 800237a:	f007 fa91 	bl	80098a0 <siprintf>
 800237e:	e75a      	b.n	8002236 <plot+0x3fe>
    EPD_SetRotate(0);
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fda5 	bl	8000ed0 <EPD_SetRotate>
    EPD_DrawBMP(107, 95, 16, 26, dead_batt_26x16);
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <plot+0x5a4>)
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	231a      	movs	r3, #26
 800238c:	2210      	movs	r2, #16
 800238e:	215f      	movs	r1, #95	@ 0x5f
 8002390:	206b      	movs	r0, #107	@ 0x6b
 8002392:	f7ff f917 	bl	80015c4 <EPD_DrawBMP>
    EPD_SetRotate(90);
 8002396:	205a      	movs	r0, #90	@ 0x5a
 8002398:	f7fe fd9a 	bl	8000ed0 <EPD_SetRotate>
 800239c:	e76d      	b.n	800227a <plot+0x442>
 800239e:	bf00      	nop
 80023a0:	99999999 	.word	0x99999999
 80023a4:	40b2e019 	.word	0x40b2e019
 80023a8:	0800ba8c 	.word	0x0800ba8c
 80023ac:	200000b0 	.word	0x200000b0
 80023b0:	51eb851f 	.word	0x51eb851f
 80023b4:	0800baa0 	.word	0x0800baa0
 80023b8:	200000a0 	.word	0x200000a0
 80023bc:	20001288 	.word	0x20001288
 80023c0:	2000128c 	.word	0x2000128c
 80023c4:	2000137c 	.word	0x2000137c
 80023c8:	200000a8 	.word	0x200000a8
 80023cc:	0800babc 	.word	0x0800babc
 80023d0:	200002d0 	.word	0x200002d0
 80023d4:	0800ba94 	.word	0x0800ba94
 80023d8:	0800bab0 	.word	0x0800bab0
 80023dc:	0800ce7c 	.word	0x0800ce7c

080023e0 <USB_CDC_RxHandler>:


void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 80023e0:	b510      	push	{r4, lr}
  switch(Buf[0]){
 80023e2:	7803      	ldrb	r3, [r0, #0]
 80023e4:	2b73      	cmp	r3, #115	@ 0x73
 80023e6:	d00c      	beq.n	8002402 <USB_CDC_RxHandler+0x22>
 80023e8:	2b74      	cmp	r3, #116	@ 0x74
 80023ea:	d005      	beq.n	80023f8 <USB_CDC_RxHandler+0x18>
 80023ec:	2b67      	cmp	r3, #103	@ 0x67
 80023ee:	d107      	bne.n	8002400 <USB_CDC_RxHandler+0x20>
    case 't':
      CDC_Transmit_FS("Termaink Ready\n\r", 17);
      break;
    case 'g':
      send_usb_data = true;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <USB_CDC_RxHandler+0x50>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
      break;
 80023f6:	e003      	b.n	8002400 <USB_CDC_RxHandler+0x20>
      CDC_Transmit_FS("Termaink Ready\n\r", 17);
 80023f8:	2111      	movs	r1, #17
 80023fa:	480e      	ldr	r0, [pc, #56]	@ (8002434 <USB_CDC_RxHandler+0x54>)
 80023fc:	f006 fa04 	bl	8008808 <CDC_Transmit_FS>
    case 's':
      set_rtc = true;
      memcpy(rtc_buf, Buf, 25);
      break;
  }
}
 8002400:	bd10      	pop	{r4, pc}
 8002402:	4684      	mov	ip, r0
      set_rtc = true;
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <USB_CDC_RxHandler+0x58>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
      memcpy(rtc_buf, Buf, 25);
 800240a:	4c0c      	ldr	r4, [pc, #48]	@ (800243c <USB_CDC_RxHandler+0x5c>)
 800240c:	6800      	ldr	r0, [r0, #0]
 800240e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002412:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002416:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800241a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8002420:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8002424:	c403      	stmia	r4!, {r0, r1}
 8002426:	f89c 3018 	ldrb.w	r3, [ip, #24]
 800242a:	7023      	strb	r3, [r4, #0]
}
 800242c:	e7e8      	b.n	8002400 <USB_CDC_RxHandler+0x20>
 800242e:	bf00      	nop
 8002430:	200002cc 	.word	0x200002cc
 8002434:	0800bac4 	.word	0x0800bac4
 8002438:	200002c9 	.word	0x200002c9
 800243c:	200002b0 	.word	0x200002b0

08002440 <syncRTC>:

void syncRTC(){
 8002440:	b530      	push	{r4, r5, lr}
 8002442:	b08d      	sub	sp, #52	@ 0x34
  RTC_TimeTypeDef sTime = {0};
 8002444:	2300      	movs	r3, #0
 8002446:	9307      	str	r3, [sp, #28]
 8002448:	9308      	str	r3, [sp, #32]
 800244a:	9309      	str	r3, [sp, #36]	@ 0x24
 800244c:	930a      	str	r3, [sp, #40]	@ 0x28
 800244e:	930b      	str	r3, [sp, #44]	@ 0x2c
  RTC_DateTypeDef sDate = {0};
 8002450:	9306      	str	r3, [sp, #24]



  uint8_t day, month, year, hours, minutes, seconds;

  uint8_t matched = sscanf(rtc_buf, "s%02d.%02d.%02d.%02d.%02d.%02d", &hours, &minutes, &seconds, &year , &month, &day);
 8002452:	f10d 0317 	add.w	r3, sp, #23
 8002456:	9303      	str	r3, [sp, #12]
 8002458:	f10d 0316 	add.w	r3, sp, #22
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	f10d 0315 	add.w	r3, sp, #21
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	f10d 0312 	add.w	r3, sp, #18
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	f10d 0313 	add.w	r3, sp, #19
 800246e:	aa05      	add	r2, sp, #20
 8002470:	491a      	ldr	r1, [pc, #104]	@ (80024dc <syncRTC+0x9c>)
 8002472:	481b      	ldr	r0, [pc, #108]	@ (80024e0 <syncRTC+0xa0>)
 8002474:	f007 fa36 	bl	80098e4 <siscanf>
 8002478:	b2c0      	uxtb	r0, r0
  if (matched < 6){
 800247a:	2805      	cmp	r0, #5
 800247c:	d801      	bhi.n	8002482 <syncRTC+0x42>
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;

  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
}
 800247e:	b00d      	add	sp, #52	@ 0x34
 8002480:	bd30      	pop	{r4, r5, pc}
  sTime.Hours = hours;
 8002482:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002486:	f88d 301c 	strb.w	r3, [sp, #28]
  sTime.Minutes = minutes;
 800248a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800248e:	f88d 301d 	strb.w	r3, [sp, #29]
  sTime.Seconds = seconds;
 8002492:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8002496:	f88d 301e 	strb.w	r3, [sp, #30]
  sDate.Year = year;
 800249a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800249e:	f88d 301b 	strb.w	r3, [sp, #27]
  sDate.Month = month;
 80024a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80024a6:	f88d 3019 	strb.w	r3, [sp, #25]
  sDate.Date = day;
 80024aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80024ae:	f88d 301a 	strb.w	r3, [sp, #26]
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f88d 3018 	strb.w	r3, [sp, #24]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
 80024b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024bc:	930a      	str	r3, [sp, #40]	@ 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024be:	2400      	movs	r4, #0
 80024c0:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80024c2:	4d08      	ldr	r5, [pc, #32]	@ (80024e4 <syncRTC+0xa4>)
 80024c4:	4622      	mov	r2, r4
 80024c6:	a906      	add	r1, sp, #24
 80024c8:	4628      	mov	r0, r5
 80024ca:	f003 ffb2 	bl	8006432 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80024ce:	4622      	mov	r2, r4
 80024d0:	a907      	add	r1, sp, #28
 80024d2:	4628      	mov	r0, r5
 80024d4:	f003 ff47 	bl	8006366 <HAL_RTC_SetTime>
 80024d8:	e7d1      	b.n	800247e <syncRTC+0x3e>
 80024da:	bf00      	nop
 80024dc:	0800bad8 	.word	0x0800bad8
 80024e0:	200002b0 	.word	0x200002b0
 80024e4:	2000137c 	.word	0x2000137c

080024e8 <USB_SendAllData>:

void USB_SendAllData(){
 80024e8:	b530      	push	{r4, r5, lr}
 80024ea:	b087      	sub	sp, #28
  char buf[20];
  uint16_t len = UDISK_len();
 80024ec:	f7ff f910 	bl	8001710 <UDISK_len>
 80024f0:	4605      	mov	r5, r0
  uint8_t ln = sprintf(buf, "%d\n\r", len);
 80024f2:	ac01      	add	r4, sp, #4
 80024f4:	4602      	mov	r2, r0
 80024f6:	491b      	ldr	r1, [pc, #108]	@ (8002564 <USB_SendAllData+0x7c>)
 80024f8:	4620      	mov	r0, r4
 80024fa:	f007 f9d1 	bl	80098a0 <siprintf>
  CDC_Transmit_FS(buf, ln);
 80024fe:	b2c1      	uxtb	r1, r0
 8002500:	4620      	mov	r0, r4
 8002502:	f006 f981 	bl	8008808 <CDC_Transmit_FS>
  for (uint16_t i = len; i > 0; i--){
 8002506:	e017      	b.n	8002538 <USB_SendAllData+0x50>
    memset(buf, 0x00, 20);
 8002508:	ac01      	add	r4, sp, #4
 800250a:	2300      	movs	r3, #0
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	9302      	str	r3, [sp, #8]
 8002510:	9303      	str	r3, [sp, #12]
 8002512:	9304      	str	r3, [sp, #16]
 8002514:	9305      	str	r3, [sp, #20]
    ln = sprintf(buf, "%d\n\r", UDISK_get(i));
 8002516:	4628      	mov	r0, r5
 8002518:	f7ff f8ce 	bl	80016b8 <UDISK_get>
 800251c:	4602      	mov	r2, r0
 800251e:	4911      	ldr	r1, [pc, #68]	@ (8002564 <USB_SendAllData+0x7c>)
 8002520:	4620      	mov	r0, r4
 8002522:	f007 f9bd 	bl	80098a0 <siprintf>
    CDC_Transmit_FS(buf, ln);
 8002526:	b2c1      	uxtb	r1, r0
 8002528:	4620      	mov	r0, r4
 800252a:	f006 f96d 	bl	8008808 <CDC_Transmit_FS>
    HAL_Delay(1);
 800252e:	2001      	movs	r0, #1
 8002530:	f000 fcb4 	bl	8002e9c <HAL_Delay>
  for (uint16_t i = len; i > 0; i--){
 8002534:	3d01      	subs	r5, #1
 8002536:	b2ad      	uxth	r5, r5
 8002538:	2d00      	cmp	r5, #0
 800253a:	d1e5      	bne.n	8002508 <USB_SendAllData+0x20>
  }
  memset(buf, 0x00, 20);
 800253c:	ac01      	add	r4, sp, #4
 800253e:	2300      	movs	r3, #0
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	9303      	str	r3, [sp, #12]
 8002546:	9304      	str	r3, [sp, #16]
 8002548:	9305      	str	r3, [sp, #20]
  ln = sprintf(buf, "T%d\n\r", UDISK_tst());
 800254a:	f7ff f8e7 	bl	800171c <UDISK_tst>
 800254e:	4602      	mov	r2, r0
 8002550:	4905      	ldr	r1, [pc, #20]	@ (8002568 <USB_SendAllData+0x80>)
 8002552:	4620      	mov	r0, r4
 8002554:	f007 f9a4 	bl	80098a0 <siprintf>
  CDC_Transmit_FS(buf, ln);
 8002558:	b2c1      	uxtb	r1, r0
 800255a:	4620      	mov	r0, r4
 800255c:	f006 f954 	bl	8008808 <CDC_Transmit_FS>
}
 8002560:	b007      	add	sp, #28
 8002562:	bd30      	pop	{r4, r5, pc}
 8002564:	0800baf8 	.word	0x0800baf8
 8002568:	0800bb00 	.word	0x0800bb00

0800256c <HAL_GPIO_EXTI_Callback>:
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == GPIO_PIN_5) {
 800256c:	2820      	cmp	r0, #32
 800256e:	d001      	beq.n	8002574 <HAL_GPIO_EXTI_Callback+0x8>
    initialise_usb_connection = true;
  } else {
      __NOP();
 8002570:	bf00      	nop
  }
}
 8002572:	4770      	bx	lr
    initialise_usb_connection = true;
 8002574:	4b01      	ldr	r3, [pc, #4]	@ (800257c <HAL_GPIO_EXTI_Callback+0x10>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	4770      	bx	lr
 800257c:	200002ca 	.word	0x200002ca

08002580 <USB_DEVICE_IsConnected>:

bool USB_DEVICE_IsConnected(){
 8002580:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(USB_WKUP_GPIO_Port, USB_WKUP_Pin);
 8002582:	2120      	movs	r1, #32
 8002584:	4803      	ldr	r0, [pc, #12]	@ (8002594 <USB_DEVICE_IsConnected+0x14>)
 8002586:	f001 fe3b 	bl	8004200 <HAL_GPIO_ReadPin>
}
 800258a:	3800      	subs	r0, #0
 800258c:	bf18      	it	ne
 800258e:	2001      	movne	r0, #1
 8002590:	bd08      	pop	{r3, pc}
 8002592:	bf00      	nop
 8002594:	48000400 	.word	0x48000400

08002598 <HAL_RTCEx_WakeUpTimerEventCallback>:
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8002598:	b508      	push	{r3, lr}
  measure = true;
 800259a:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <HAL_RTCEx_WakeUpTimerEventCallback+0x14>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
  send_usb = USB_DEVICE_IsConnected();
 80025a0:	f7ff ffee 	bl	8002580 <USB_DEVICE_IsConnected>
 80025a4:	4b02      	ldr	r3, [pc, #8]	@ (80025b0 <HAL_RTCEx_WakeUpTimerEventCallback+0x18>)
 80025a6:	7018      	strb	r0, [r3, #0]
}
 80025a8:	bd08      	pop	{r3, pc}
 80025aa:	bf00      	nop
 80025ac:	200002cb 	.word	0x200002cb
 80025b0:	200002cd 	.word	0x200002cd

080025b4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <Error_Handler+0x2>

080025b8 <MX_SPI1_Init>:
{
 80025b8:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80025ba:	4811      	ldr	r0, [pc, #68]	@ (8002600 <MX_SPI1_Init+0x48>)
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <MX_SPI1_Init+0x4c>)
 80025be:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025c0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80025c4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80025c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025ca:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025cc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80025d0:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025dc:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025de:	2218      	movs	r2, #24
 80025e0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e4:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e6:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025e8:	2207      	movs	r2, #7
 80025ea:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025ec:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025ee:	2308      	movs	r3, #8
 80025f0:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025f2:	f004 f96a 	bl	80068ca <HAL_SPI_Init>
 80025f6:	b900      	cbnz	r0, 80025fa <MX_SPI1_Init+0x42>
}
 80025f8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80025fa:	f7ff ffdb 	bl	80025b4 <Error_Handler>
 80025fe:	bf00      	nop
 8002600:	20001318 	.word	0x20001318
 8002604:	40013000 	.word	0x40013000

08002608 <MX_RTC_Init>:
{
 8002608:	b530      	push	{r4, r5, lr}
 800260a:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 800260c:	2500      	movs	r5, #0
 800260e:	9501      	str	r5, [sp, #4]
 8002610:	9502      	str	r5, [sp, #8]
 8002612:	9503      	str	r5, [sp, #12]
 8002614:	9504      	str	r5, [sp, #16]
 8002616:	9505      	str	r5, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8002618:	9500      	str	r5, [sp, #0]
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6) == RTC_key){
 800261a:	4c24      	ldr	r4, [pc, #144]	@ (80026ac <MX_RTC_Init+0xa4>)
 800261c:	2106      	movs	r1, #6
 800261e:	4620      	mov	r0, r4
 8002620:	f004 f83d 	bl	800669e <HAL_RTCEx_BKUPRead>
  hrtc.Instance = RTC;
 8002624:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <MX_RTC_Init+0xa8>)
 8002626:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002628:	60a5      	str	r5, [r4, #8]
  hrtc.Init.AsynchPrediv = 127;
 800262a:	237f      	movs	r3, #127	@ 0x7f
 800262c:	60e3      	str	r3, [r4, #12]
  hrtc.Init.SynchPrediv = 255;
 800262e:	23ff      	movs	r3, #255	@ 0xff
 8002630:	6123      	str	r3, [r4, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002632:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002634:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002636:	61e5      	str	r5, [r4, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800263c:	6223      	str	r3, [r4, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800263e:	6265      	str	r5, [r4, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002640:	4620      	mov	r0, r4
 8002642:	f003 fe29 	bl	8006298 <HAL_RTC_Init>
 8002646:	bb40      	cbnz	r0, 800269a <MX_RTC_Init+0x92>
  sTime.Hours = 0x0;
 8002648:	2300      	movs	r3, #0
 800264a:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 800264e:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8002652:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
 8002656:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800265a:	9204      	str	r2, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800265c:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800265e:	2201      	movs	r2, #1
 8002660:	a901      	add	r1, sp, #4
 8002662:	4812      	ldr	r0, [pc, #72]	@ (80026ac <MX_RTC_Init+0xa4>)
 8002664:	f003 fe7f 	bl	8006366 <HAL_RTC_SetTime>
 8002668:	b9c8      	cbnz	r0, 800269e <MX_RTC_Init+0x96>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800266a:	2201      	movs	r2, #1
 800266c:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8002670:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8002674:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x25;
 8002678:	2325      	movs	r3, #37	@ 0x25
 800267a:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800267e:	4669      	mov	r1, sp
 8002680:	480a      	ldr	r0, [pc, #40]	@ (80026ac <MX_RTC_Init+0xa4>)
 8002682:	f003 fed6 	bl	8006432 <HAL_RTC_SetDate>
 8002686:	b960      	cbnz	r0, 80026a2 <MX_RTC_Init+0x9a>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8002688:	2300      	movs	r3, #0
 800268a:	2204      	movs	r2, #4
 800268c:	210a      	movs	r1, #10
 800268e:	4807      	ldr	r0, [pc, #28]	@ (80026ac <MX_RTC_Init+0xa4>)
 8002690:	f003 ff6e 	bl	8006570 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002694:	b938      	cbnz	r0, 80026a6 <MX_RTC_Init+0x9e>
}
 8002696:	b007      	add	sp, #28
 8002698:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800269a:	f7ff ff8b 	bl	80025b4 <Error_Handler>
    Error_Handler();
 800269e:	f7ff ff89 	bl	80025b4 <Error_Handler>
    Error_Handler();
 80026a2:	f7ff ff87 	bl	80025b4 <Error_Handler>
    Error_Handler();
 80026a6:	f7ff ff85 	bl	80025b4 <Error_Handler>
 80026aa:	bf00      	nop
 80026ac:	2000137c 	.word	0x2000137c
 80026b0:	40002800 	.word	0x40002800

080026b4 <MX_USART2_UART_Init>:
{
 80026b4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80026b6:	480b      	ldr	r0, [pc, #44]	@ (80026e4 <MX_USART2_UART_Init+0x30>)
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <MX_USART2_UART_Init+0x34>)
 80026ba:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80026bc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80026c0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	2300      	movs	r3, #0
 80026c4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026c6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026c8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026ca:	220c      	movs	r2, #12
 80026cc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d4:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80026d6:	f004 fe00 	bl	80072da <HAL_HalfDuplex_Init>
 80026da:	b900      	cbnz	r0, 80026de <MX_USART2_UART_Init+0x2a>
}
 80026dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80026de:	f7ff ff69 	bl	80025b4 <Error_Handler>
 80026e2:	bf00      	nop
 80026e4:	20001290 	.word	0x20001290
 80026e8:	40004400 	.word	0x40004400

080026ec <MX_ADC1_Init>:
{
 80026ec:	b500      	push	{lr}
 80026ee:	b08b      	sub	sp, #44	@ 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 80026f0:	2300      	movs	r3, #0
 80026f2:	9307      	str	r3, [sp, #28]
 80026f4:	9308      	str	r3, [sp, #32]
 80026f6:	9309      	str	r3, [sp, #36]	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	9302      	str	r3, [sp, #8]
 80026fc:	9303      	str	r3, [sp, #12]
 80026fe:	9304      	str	r3, [sp, #16]
 8002700:	9305      	str	r3, [sp, #20]
 8002702:	9306      	str	r3, [sp, #24]
  hadc1.Instance = ADC1;
 8002704:	481c      	ldr	r0, [pc, #112]	@ (8002778 <MX_ADC1_Init+0x8c>)
 8002706:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <MX_ADC1_Init+0x90>)
 8002708:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800270a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800270c:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800270e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002710:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002712:	2204      	movs	r2, #4
 8002714:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002716:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002718:	2201      	movs	r2, #1
 800271a:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 800271c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800271e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002722:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002724:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002726:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800272a:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800272c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002730:	f000 fc04 	bl	8002f3c <HAL_ADC_Init>
 8002734:	b9d0      	cbnz	r0, 800276c <MX_ADC1_Init+0x80>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002736:	2300      	movs	r3, #0
 8002738:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800273a:	a907      	add	r1, sp, #28
 800273c:	480e      	ldr	r0, [pc, #56]	@ (8002778 <MX_ADC1_Init+0x8c>)
 800273e:	f001 f9ab 	bl	8003a98 <HAL_ADCEx_MultiModeConfigChannel>
 8002742:	b9a8      	cbnz	r0, 8002770 <MX_ADC1_Init+0x84>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002744:	4b0e      	ldr	r3, [pc, #56]	@ (8002780 <MX_ADC1_Init+0x94>)
 8002746:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002748:	2306      	movs	r3, #6
 800274a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800274c:	2300      	movs	r3, #0
 800274e:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002750:	227f      	movs	r2, #127	@ 0x7f
 8002752:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002754:	2204      	movs	r2, #4
 8002756:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8002758:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800275a:	eb0d 0102 	add.w	r1, sp, r2
 800275e:	4806      	ldr	r0, [pc, #24]	@ (8002778 <MX_ADC1_Init+0x8c>)
 8002760:	f000 fe84 	bl	800346c <HAL_ADC_ConfigChannel>
 8002764:	b930      	cbnz	r0, 8002774 <MX_ADC1_Init+0x88>
}
 8002766:	b00b      	add	sp, #44	@ 0x2c
 8002768:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800276c:	f7ff ff22 	bl	80025b4 <Error_Handler>
    Error_Handler();
 8002770:	f7ff ff20 	bl	80025b4 <Error_Handler>
    Error_Handler();
 8002774:	f7ff ff1e 	bl	80025b4 <Error_Handler>
 8002778:	200013f0 	.word	0x200013f0
 800277c:	50040000 	.word	0x50040000
 8002780:	80000001 	.word	0x80000001

08002784 <SystemClock_Config>:
{
 8002784:	b500      	push	{lr}
 8002786:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002788:	2244      	movs	r2, #68	@ 0x44
 800278a:	2100      	movs	r1, #0
 800278c:	a805      	add	r0, sp, #20
 800278e:	f007 f8d7 	bl	8009940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002792:	2300      	movs	r3, #0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	9303      	str	r3, [sp, #12]
 800279c:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800279e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027a2:	f002 fe85 	bl	80054b0 <HAL_PWREx_ControlVoltageScaling>
 80027a6:	bb38      	cbnz	r0, 80027f8 <SystemClock_Config+0x74>
  HAL_PWR_EnableBkUpAccess();
 80027a8:	f002 fe72 	bl	8005490 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027ac:	4a15      	ldr	r2, [pc, #84]	@ (8002804 <SystemClock_Config+0x80>)
 80027ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80027b2:	f023 0318 	bic.w	r3, r3, #24
 80027b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80027ba:	2334      	movs	r3, #52	@ 0x34
 80027bc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027be:	2301      	movs	r3, #1
 80027c0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80027c2:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027c4:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027ce:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d0:	a805      	add	r0, sp, #20
 80027d2:	f002 ff7f 	bl	80056d4 <HAL_RCC_OscConfig>
 80027d6:	b988      	cbnz	r0, 80027fc <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d8:	230f      	movs	r3, #15
 80027da:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80027dc:	2100      	movs	r1, #0
 80027de:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e0:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027e2:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e4:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027e6:	4668      	mov	r0, sp
 80027e8:	f003 fae2 	bl	8005db0 <HAL_RCC_ClockConfig>
 80027ec:	b940      	cbnz	r0, 8002800 <SystemClock_Config+0x7c>
  HAL_RCCEx_EnableMSIPLLMode();
 80027ee:	f003 fce7 	bl	80061c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80027f2:	b017      	add	sp, #92	@ 0x5c
 80027f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80027f8:	f7ff fedc 	bl	80025b4 <Error_Handler>
    Error_Handler();
 80027fc:	f7ff feda 	bl	80025b4 <Error_Handler>
    Error_Handler();
 8002800:	f7ff fed8 	bl	80025b4 <Error_Handler>
 8002804:	40021000 	.word	0x40021000

08002808 <power_on>:
void power_on(void){
 8002808:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800280a:	f000 fb62 	bl	8002ed2 <HAL_ResumeTick>
  SystemClock_Config();
 800280e:	f7ff ffb9 	bl	8002784 <SystemClock_Config>
  MX_GPIO_Init();
 8002812:	f7ff f91f 	bl	8001a54 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002816:	f7ff fecf 	bl	80025b8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800281a:	f005 fd21 	bl	8008260 <MX_USB_DEVICE_Init>
  EPD_Init();
 800281e:	f7fe fa73 	bl	8000d08 <EPD_Init>
}
 8002822:	bd08      	pop	{r3, pc}

08002824 <get_data>:
void get_data(bool goto_sleep){
 8002824:	b510      	push	{r4, lr}
 8002826:	ed2d 8b02 	vpush	{d8}
  if(goto_sleep){
 800282a:	4604      	mov	r4, r0
 800282c:	bbb8      	cbnz	r0, 800289e <get_data+0x7a>
  q_load();
 800282e:	f000 fa91 	bl	8002d54 <q_load>
  q_push(DS18_GET()*100);
 8002832:	f7ff fa4b 	bl	8001ccc <DS18_GET>
 8002836:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 80028ac <get_data+0x88>
 800283a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800283e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002842:	ee10 3a10 	vmov	r3, s0
 8002846:	b218      	sxth	r0, r3
 8002848:	f000 f9ce 	bl	8002be8 <q_push>
  q_push(DS18_GET()*100);
 800284c:	f7ff fa3e 	bl	8001ccc <DS18_GET>
 8002850:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002854:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002858:	ee10 3a10 	vmov	r3, s0
 800285c:	b218      	sxth	r0, r3
 800285e:	f000 f9c3 	bl	8002be8 <q_push>
  q_push(DS18_GET()*100);
 8002862:	f7ff fa33 	bl	8001ccc <DS18_GET>
 8002866:	ee20 0a08 	vmul.f32	s0, s0, s16
 800286a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800286e:	ee10 3a10 	vmov	r3, s0
 8002872:	b218      	sxth	r0, r3
 8002874:	f000 f9b8 	bl	8002be8 <q_push>
  q_push(DS18_GET()*100);
 8002878:	f7ff fa28 	bl	8001ccc <DS18_GET>
 800287c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002880:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002884:	ee10 3a10 	vmov	r3, s0
 8002888:	b218      	sxth	r0, r3
 800288a:	f000 f9ad 	bl	8002be8 <q_push>
  plot();
 800288e:	f7ff fad3 	bl	8001e38 <plot>
  q_save();
 8002892:	f000 fa25 	bl	8002ce0 <q_save>
  if(goto_sleep){
 8002896:	b92c      	cbnz	r4, 80028a4 <get_data+0x80>
}
 8002898:	ecbd 8b02 	vpop	{d8}
 800289c:	bd10      	pop	{r4, pc}
    power_on();
 800289e:	f7ff ffb3 	bl	8002808 <power_on>
 80028a2:	e7c4      	b.n	800282e <get_data+0xa>
    shutdown(false);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7ff f9b7 	bl	8001c18 <shutdown>
}
 80028aa:	e7f5      	b.n	8002898 <get_data+0x74>
 80028ac:	42c80000 	.word	0x42c80000

080028b0 <main>:
{
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	ed2d 8b02 	vpush	{d8}
  HAL_Init();
 80028b6:	f000 fac9 	bl	8002e4c <HAL_Init>
  SystemClock_Config();
 80028ba:	f7ff ff63 	bl	8002784 <SystemClock_Config>
  MX_GPIO_Init();
 80028be:	f7ff f8c9 	bl	8001a54 <MX_GPIO_Init>
  MX_DMA_Init();
 80028c2:	f7ff f979 	bl	8001bb8 <MX_DMA_Init>
  MX_SPI1_Init();
 80028c6:	f7ff fe77 	bl	80025b8 <MX_SPI1_Init>
  MX_RTC_Init();
 80028ca:	f7ff fe9d 	bl	8002608 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80028ce:	f7ff fef1 	bl	80026b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80028d2:	f7ff ff0b 	bl	80026ec <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80028d6:	f005 fcc3 	bl	8008260 <MX_USB_DEVICE_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcData, 1);
 80028da:	2201      	movs	r2, #1
 80028dc:	4949      	ldr	r1, [pc, #292]	@ (8002a04 <main+0x154>)
 80028de:	484a      	ldr	r0, [pc, #296]	@ (8002a08 <main+0x158>)
 80028e0:	f001 f850 	bl	8003984 <HAL_ADC_Start_DMA>
  DS18_INIT();
 80028e4:	f7ff f9c8 	bl	8001c78 <DS18_INIT>
  EPD_Init();
 80028e8:	f7fe fa0e 	bl	8000d08 <EPD_Init>
  q_init();
 80028ec:	f000 f96e 	bl	8002bcc <q_init>
 bool is_RTC_retained = q_load();
 80028f0:	f000 fa30 	bl	8002d54 <q_load>
  if (is_RTC_retained) {
 80028f4:	b3d8      	cbz	r0, 800296e <main+0xbe>
    shutdown(true);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff f98e 	bl	8001c18 <shutdown>
    power_on();
 80028fc:	f7ff ff84 	bl	8002808 <power_on>
  q_push(DS18_GET()*100);
 8002900:	f7ff f9e4 	bl	8001ccc <DS18_GET>
 8002904:	ed9f 8a41 	vldr	s16, [pc, #260]	@ 8002a0c <main+0x15c>
 8002908:	ee60 7a08 	vmul.f32	s15, s0, s16
 800290c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002910:	ee17 3a90 	vmov	r3, s15
 8002914:	b218      	sxth	r0, r3
 8002916:	f000 f967 	bl	8002be8 <q_push>
  q_push(DS18_GET()*100);
 800291a:	f7ff f9d7 	bl	8001ccc <DS18_GET>
 800291e:	ee60 7a08 	vmul.f32	s15, s0, s16
 8002922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002926:	ee17 3a90 	vmov	r3, s15
 800292a:	b218      	sxth	r0, r3
 800292c:	f000 f95c 	bl	8002be8 <q_push>
  q_push(DS18_GET()*100);
 8002930:	f7ff f9cc 	bl	8001ccc <DS18_GET>
 8002934:	ee60 7a08 	vmul.f32	s15, s0, s16
 8002938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293c:	ee17 3a90 	vmov	r3, s15
 8002940:	b218      	sxth	r0, r3
 8002942:	f000 f951 	bl	8002be8 <q_push>
  q_push(DS18_GET()*100);
 8002946:	f7ff f9c1 	bl	8001ccc <DS18_GET>
 800294a:	ee60 7a08 	vmul.f32	s15, s0, s16
 800294e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002952:	ee17 3a90 	vmov	r3, s15
 8002956:	b218      	sxth	r0, r3
 8002958:	f000 f946 	bl	8002be8 <q_push>
  q_save();
 800295c:	f000 f9c0 	bl	8002ce0 <q_save>
  plot();
 8002960:	f7ff fa6a 	bl	8001e38 <plot>
  if(!USB_DEVICE_IsConnected()){
 8002964:	f7ff fe0c 	bl	8002580 <USB_DEVICE_IsConnected>
 8002968:	b120      	cbz	r0, 8002974 <main+0xc4>
{
 800296a:	2400      	movs	r4, #0
 800296c:	e029      	b.n	80029c2 <main+0x112>
    set_time();
 800296e:	f7ff f9c7 	bl	8001d00 <set_time>
 8002972:	e7c5      	b.n	8002900 <main+0x50>
    shutdown(false);
 8002974:	f7ff f950 	bl	8001c18 <shutdown>
 8002978:	e7f7      	b.n	800296a <main+0xba>
      measure = false;
 800297a:	2600      	movs	r6, #0
 800297c:	4b24      	ldr	r3, [pc, #144]	@ (8002a10 <main+0x160>)
 800297e:	701e      	strb	r6, [r3, #0]
      get_data(!send_usb);
 8002980:	4d24      	ldr	r5, [pc, #144]	@ (8002a14 <main+0x164>)
 8002982:	7828      	ldrb	r0, [r5, #0]
 8002984:	f080 0001 	eor.w	r0, r0, #1
 8002988:	f7ff ff4c 	bl	8002824 <get_data>
      send_usb = false;
 800298c:	702e      	strb	r6, [r5, #0]
 800298e:	e01c      	b.n	80029ca <main+0x11a>
      initialise_usb_connection = false;
 8002990:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <main+0x168>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
      power_on();
 8002996:	f7ff ff37 	bl	8002808 <power_on>
      usb_conn_tmr = HAL_GetTick();
 800299a:	f000 fa79 	bl	8002e90 <HAL_GetTick>
 800299e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a1c <main+0x16c>)
 80029a0:	6018      	str	r0, [r3, #0]
 80029a2:	e016      	b.n	80029d2 <main+0x122>
      send_usb_data = false;
 80029a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a20 <main+0x170>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
      USB_SendAllData();
 80029aa:	f7ff fd9d 	bl	80024e8 <USB_SendAllData>
 80029ae:	e014      	b.n	80029da <main+0x12a>
      set_rtc = false;
 80029b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <main+0x174>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
      syncRTC();
 80029b6:	f7ff fd43 	bl	8002440 <syncRTC>
 80029ba:	e012      	b.n	80029e2 <main+0x132>
    old_usb_state = USB_DEVICE_IsConnected();
 80029bc:	f7ff fde0 	bl	8002580 <USB_DEVICE_IsConnected>
 80029c0:	4604      	mov	r4, r0
    if(measure){
 80029c2:	4b13      	ldr	r3, [pc, #76]	@ (8002a10 <main+0x160>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1d7      	bne.n	800297a <main+0xca>
    if(initialise_usb_connection){
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <main+0x168>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1de      	bne.n	8002990 <main+0xe0>
    if(send_usb_data){
 80029d2:	4b13      	ldr	r3, [pc, #76]	@ (8002a20 <main+0x170>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e4      	bne.n	80029a4 <main+0xf4>
    if(set_rtc){
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <main+0x174>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e6      	bne.n	80029b0 <main+0x100>
    if(!USB_DEVICE_IsConnected() && old_usb_state && HAL_GetTick()-usb_conn_tmr>150){
 80029e2:	f7ff fdcd 	bl	8002580 <USB_DEVICE_IsConnected>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d1e8      	bne.n	80029bc <main+0x10c>
 80029ea:	2c00      	cmp	r4, #0
 80029ec:	d0e6      	beq.n	80029bc <main+0x10c>
 80029ee:	f000 fa4f 	bl	8002e90 <HAL_GetTick>
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <main+0x16c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1ac0      	subs	r0, r0, r3
 80029f8:	2896      	cmp	r0, #150	@ 0x96
 80029fa:	d9df      	bls.n	80029bc <main+0x10c>
      shutdown(true);
 80029fc:	2001      	movs	r0, #1
 80029fe:	f7ff f90b 	bl	8001c18 <shutdown>
 8002a02:	e7db      	b.n	80029bc <main+0x10c>
 8002a04:	20001288 	.word	0x20001288
 8002a08:	200013f0 	.word	0x200013f0
 8002a0c:	42c80000 	.word	0x42c80000
 8002a10:	200002cb 	.word	0x200002cb
 8002a14:	200002cd 	.word	0x200002cd
 8002a18:	200002ca 	.word	0x200002ca
 8002a1c:	200002ac 	.word	0x200002ac
 8002a20:	200002cc 	.word	0x200002cc
 8002a24:	200002c9 	.word	0x200002c9

08002a28 <SetBaudrate>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	4604      	mov	r4, r0
  uint32_t pclk = 0;
  huart->Init.BaudRate = baudrate;
 8002a2c:	6041      	str	r1, [r0, #4]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#else
    if (huart->Instance == USART1)
 8002a2e:	6802      	ldr	r2, [r0, #0]
 8002a30:	4b30      	ldr	r3, [pc, #192]	@ (8002af4 <SetBaudrate+0xcc>)
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d030      	beq.n	8002a98 <SetBaudrate+0x70>
      pclk = HAL_RCC_GetPCLK1Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a36:	f003 fa85 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
 8002a3a:	4602      	mov	r2, r0
    }

//  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a3c:	69e3      	ldr	r3, [r4, #28]
 8002a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a42:	d02d      	beq.n	8002aa0 <SetBaudrate+0x78>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a44:	2100      	movs	r1, #0
 8002a46:	1890      	adds	r0, r2, r2
 8002a48:	4149      	adcs	r1, r1
 8002a4a:	1880      	adds	r0, r0, r2
 8002a4c:	f141 0100 	adc.w	r1, r1, #0
 8002a50:	00c9      	lsls	r1, r1, #3
 8002a52:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
 8002a56:	00c0      	lsls	r0, r0, #3
 8002a58:	1880      	adds	r0, r0, r2
 8002a5a:	6863      	ldr	r3, [r4, #4]
 8002a5c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002a60:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002a64:	f141 0100 	adc.w	r1, r1, #0
 8002a68:	f7fe f818 	bl	8000a9c <__aeabi_uldivmod>
 8002a6c:	4a22      	ldr	r2, [pc, #136]	@ (8002af8 <SetBaudrate+0xd0>)
 8002a6e:	fba2 3100 	umull	r3, r1, r2, r0
 8002a72:	0949      	lsrs	r1, r1, #5
 8002a74:	2364      	movs	r3, #100	@ 0x64
 8002a76:	fb03 0311 	mls	r3, r3, r1, r0
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	3332      	adds	r3, #50	@ 0x32
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a88:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	6821      	ldr	r1, [r4, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	60cb      	str	r3, [r1, #12]
  }
}
 8002a96:	bd10      	pop	{r4, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a98:	f003 fa54 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	e7cd      	b.n	8002a3c <SetBaudrate+0x14>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	1890      	adds	r0, r2, r2
 8002aa4:	eb43 0103 	adc.w	r1, r3, r3
 8002aa8:	1880      	adds	r0, r0, r2
 8002aaa:	f141 0100 	adc.w	r1, r1, #0
 8002aae:	00c9      	lsls	r1, r1, #3
 8002ab0:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
 8002ab4:	00c0      	lsls	r0, r0, #3
 8002ab6:	1880      	adds	r0, r0, r2
 8002ab8:	f141 0100 	adc.w	r1, r1, #0
 8002abc:	6862      	ldr	r2, [r4, #4]
 8002abe:	1892      	adds	r2, r2, r2
 8002ac0:	415b      	adcs	r3, r3
 8002ac2:	f7fd ffeb 	bl	8000a9c <__aeabi_uldivmod>
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8002af8 <SetBaudrate+0xd0>)
 8002ac8:	fba2 3100 	umull	r3, r1, r2, r0
 8002acc:	0949      	lsrs	r1, r1, #5
 8002ace:	2364      	movs	r3, #100	@ 0x64
 8002ad0:	fb03 0311 	mls	r3, r3, r1, r0
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	3332      	adds	r3, #50	@ 0x32
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	005a      	lsls	r2, r3, #1
 8002ae0:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002ae4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	6821      	ldr	r1, [r4, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	60cb      	str	r3, [r1, #12]
 8002af2:	e7d0      	b.n	8002a96 <SetBaudrate+0x6e>
 8002af4:	40013800 	.word	0x40013800
 8002af8:	51eb851f 	.word	0x51eb851f

08002afc <OneWire_ProcessBit>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 8002afc:	b510      	push	{r4, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	4604      	mov	r4, r0
  uint8_t txData = 0xFF;
 8002b02:	23ff      	movs	r3, #255	@ 0xff
 8002b04:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t rxData = 0x00;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f88d 3006 	strb.w	r3, [sp, #6]

  if (bit == 0)
 8002b0e:	b909      	cbnz	r1, 8002b14 <OneWire_ProcessBit+0x18>
  {
    txData = 0x00;
 8002b10:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 8002b14:	230a      	movs	r3, #10
 8002b16:	2201      	movs	r2, #1
 8002b18:	f10d 0107 	add.w	r1, sp, #7
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f004 fa89 	bl	8007034 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 8002b22:	230a      	movs	r3, #10
 8002b24:	2201      	movs	r2, #1
 8002b26:	f10d 0106 	add.w	r1, sp, #6
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f004 fae6 	bl	80070fc <HAL_UART_Receive>

  return rxData;
}
 8002b30:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8002b34:	b002      	add	sp, #8
 8002b36:	bd10      	pop	{r4, pc}

08002b38 <OneWire_ProcessByte>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8002b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	460e      	mov	r6, r1
  uint8_t rxByte = 0x00;

  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8002b40:	2400      	movs	r4, #0
  uint8_t rxByte = 0x00;
 8002b42:	4625      	mov	r5, r4
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8002b44:	e006      	b.n	8002b54 <OneWire_ProcessByte+0x1c>

    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);

    if (tempRxData == 0xFF)
    {
      rxBit = 1;
 8002b46:	2301      	movs	r3, #1
    }

    rxByte |= (rxBit << i);
 8002b48:	fa03 f308 	lsl.w	r3, r3, r8
 8002b4c:	432b      	orrs	r3, r5
 8002b4e:	b2dd      	uxtb	r5, r3
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8002b50:	3401      	adds	r4, #1
 8002b52:	b2e4      	uxtb	r4, r4
 8002b54:	2c07      	cmp	r4, #7
 8002b56:	d80b      	bhi.n	8002b70 <OneWire_ProcessByte+0x38>
    uint8_t txBit = (byte >> i) & 0x01;
 8002b58:	46a0      	mov	r8, r4
 8002b5a:	fa46 f104 	asr.w	r1, r6, r4
    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 8002b5e:	f001 0101 	and.w	r1, r1, #1
 8002b62:	4638      	mov	r0, r7
 8002b64:	f7ff ffca 	bl	8002afc <OneWire_ProcessBit>
    if (tempRxData == 0xFF)
 8002b68:	28ff      	cmp	r0, #255	@ 0xff
 8002b6a:	d0ec      	beq.n	8002b46 <OneWire_ProcessByte+0xe>
    uint8_t rxBit = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e7eb      	b.n	8002b48 <OneWire_ProcessByte+0x10>
  }

  return rxByte;
}
 8002b70:	4628      	mov	r0, r5
 8002b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b76 <OneWire_Reset>:



/*----------------------------------------------------------------------------*/
ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8002b76:	b510      	push	{r4, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	4604      	mov	r4, r0
  ONEWIRE_Status status = ONEWIRE_OK;
  uint8_t txByte = ONEWIRE_RESET_BYTE;
 8002b7c:	23f0      	movs	r3, #240	@ 0xf0
 8002b7e:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t rxByte = 0x00;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f88d 3006 	strb.w	r3, [sp, #6]

  SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8002b88:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002b8c:	f7ff ff4c 	bl	8002a28 <SetBaudrate>

  HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8002b90:	230a      	movs	r3, #10
 8002b92:	2201      	movs	r2, #1
 8002b94:	f10d 0107 	add.w	r1, sp, #7
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f004 fa4b 	bl	8007034 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f10d 0106 	add.w	r1, sp, #6
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f004 faa8 	bl	80070fc <HAL_UART_Receive>

  SetBaudrate(huart, ONEWIRE_BAUDRATE);
 8002bac:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff ff39 	bl	8002a28 <SetBaudrate>

  if (rxByte == txByte)
 8002bb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d002      	beq.n	8002bc8 <OneWire_Reset+0x52>
  ONEWIRE_Status status = ONEWIRE_OK;
 8002bc2:	2000      	movs	r0, #0
  {
    status = ONEWIRE_ERROR;
  }

  return status;
}
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd10      	pop	{r4, pc}
    status = ONEWIRE_ERROR;
 8002bc8:	2001      	movs	r0, #1
 8002bca:	e7fb      	b.n	8002bc4 <OneWire_Reset+0x4e>

08002bcc <q_init>:
queue data_queue;
//
static uint8_t flag;
//
void q_init(void){
    data_queue.write_ptr = 0;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <q_init+0x18>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    data_queue.length = 0;
 8002bd4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    data_queue.is_first_writing = true;
 8002bd8:	2101      	movs	r1, #1
 8002bda:	f883 1062 	strb.w	r1, [r3, #98]	@ 0x62
    data_queue.start_ptr = 0;
 8002bde:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
}
 8002be2:	4770      	bx	lr
 8002be4:	20001458 	.word	0x20001458

08002be8 <q_push>:

void q_push(int16_t temp){
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	b090      	sub	sp, #64	@ 0x40
 8002bec:	4605      	mov	r5, r0
    // TIME - REG5
    data_queue.data[data_queue.write_ptr] = temp;
 8002bee:	4a31      	ldr	r2, [pc, #196]	@ (8002cb4 <q_push+0xcc>)
 8002bf0:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 8002bf4:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    data_queue.write_ptr++;
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
    data_queue.length++;
 8002c00:	f892 1063 	ldrb.w	r1, [r2, #99]	@ 0x63
 8002c04:	3101      	adds	r1, #1
 8002c06:	f882 1063 	strb.w	r1, [r2, #99]	@ 0x63
    if(data_queue.write_ptr >= 48){
 8002c0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c0c:	d905      	bls.n	8002c1a <q_push+0x32>
        data_queue.is_first_writing = false;
 8002c0e:	4613      	mov	r3, r2
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
        data_queue.write_ptr = 0;
 8002c16:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    }
    if(!data_queue.is_first_writing){
 8002c1a:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <q_push+0xcc>)
 8002c1c:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002c20:	b93b      	cbnz	r3, 8002c32 <q_push+0x4a>
        data_queue.start_ptr = data_queue.write_ptr;
 8002c22:	4b24      	ldr	r3, [pc, #144]	@ (8002cb4 <q_push+0xcc>)
 8002c24:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8002c28:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        data_queue.length = 47;
 8002c2c:	222f      	movs	r2, #47	@ 0x2f
 8002c2e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    }
    RTC_TimeTypeDef sTime = {0};
 8002c32:	a90b      	add	r1, sp, #44	@ 0x2c
 8002c34:	2400      	movs	r4, #0
 8002c36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002c38:	604c      	str	r4, [r1, #4]
 8002c3a:	608c      	str	r4, [r1, #8]
 8002c3c:	60cc      	str	r4, [r1, #12]
 8002c3e:	610c      	str	r4, [r1, #16]
    RTC_DateTypeDef sDate = {0};
 8002c40:	940a      	str	r4, [sp, #40]	@ 0x28

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002c42:	4e1d      	ldr	r6, [pc, #116]	@ (8002cb8 <q_push+0xd0>)
 8002c44:	4622      	mov	r2, r4
 8002c46:	4630      	mov	r0, r6
 8002c48:	f003 fc4e 	bl	80064e8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	a90a      	add	r1, sp, #40	@ 0x28
 8002c50:	4630      	mov	r0, r6
 8002c52:	f003 fc6f 	bl	8006534 <HAL_RTC_GetDate>

    struct tm t;
    time_t t_of_day;

    t.tm_year = 100+sDate.Year;  // Year - 1900
 8002c56:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 8002c5a:	3364      	adds	r3, #100	@ 0x64
 8002c5c:	9306      	str	r3, [sp, #24]
    t.tm_mon = sDate.Month-1;           // Month, where 0 = jan
 8002c5e:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8002c62:	3b01      	subs	r3, #1
 8002c64:	9305      	str	r3, [sp, #20]
    t.tm_mday = sDate.Date;          // Day of the month
 8002c66:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8002c6a:	9304      	str	r3, [sp, #16]
    t.tm_hour = sTime.Hours;
 8002c6c:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8002c70:	9303      	str	r3, [sp, #12]
    t.tm_min = sTime.Minutes;
 8002c72:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8002c76:	9302      	str	r3, [sp, #8]
    t.tm_sec = sTime.Seconds;
 8002c78:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8002c7c:	9301      	str	r3, [sp, #4]
    t.tm_isdst = 1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8002c7e:	2301      	movs	r3, #1
 8002c80:	9309      	str	r3, [sp, #36]	@ 0x24
    t_of_day = mktime(&t);
 8002c82:	a801      	add	r0, sp, #4
 8002c84:	f006 ff36 	bl	8009af4 <mktime>
 8002c88:	4604      	mov	r4, r0

    HAL_PWR_EnableBkUpAccess();
 8002c8a:	f002 fc01 	bl	8005490 <HAL_PWR_EnableBkUpAccess>
    if(flag ==0){
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <q_push+0xd4>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b12b      	cbz	r3, 8002ca0 <q_push+0xb8>
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, (long) t_of_day);
    flag = 1;}

    UDISK_push(temp, (long) t_of_day);
 8002c94:	4621      	mov	r1, r4
 8002c96:	4628      	mov	r0, r5
 8002c98:	f7fe fcd6 	bl	8001648 <UDISK_push>
    // TEST
    // uint32_t testtime = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5)+1800;
    // HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, (long) testtime);
}
 8002c9c:	b010      	add	sp, #64	@ 0x40
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, (long) t_of_day);
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	2105      	movs	r1, #5
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f003 fceb 	bl	8006680 <HAL_RTCEx_BKUPWrite>
    flag = 1;}
 8002caa:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <q_push+0xd4>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e7f0      	b.n	8002c94 <q_push+0xac>
 8002cb2:	bf00      	nop
 8002cb4:	20001458 	.word	0x20001458
 8002cb8:	2000137c 	.word	0x2000137c
 8002cbc:	20001454 	.word	0x20001454

08002cc0 <q_get>:

int16_t q_get(uint8_t pos){
    uint8_t ptr = pos + data_queue.start_ptr;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <q_get+0x1c>)
 8002cc2:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002cc6:	4418      	add	r0, r3
 8002cc8:	b2c0      	uxtb	r0, r0
    if(ptr>=48){
 8002cca:	282f      	cmp	r0, #47	@ 0x2f
 8002ccc:	d901      	bls.n	8002cd2 <q_get+0x12>
        ptr -= 48;
 8002cce:	3830      	subs	r0, #48	@ 0x30
 8002cd0:	b2c0      	uxtb	r0, r0
    }
    return data_queue.data[ptr];
}
 8002cd2:	4b02      	ldr	r3, [pc, #8]	@ (8002cdc <q_get+0x1c>)
 8002cd4:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20001458 	.word	0x20001458

08002ce0 <q_save>:

void q_save(void){
 8002ce0:	b510      	push	{r4, lr}
    HAL_PWR_EnableBkUpAccess();
 8002ce2:	f002 fbd5 	bl	8005490 <HAL_PWR_EnableBkUpAccess>
    
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, KEY);
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <q_save+0x68>)
 8002ce8:	2106      	movs	r1, #6
 8002cea:	4818      	ldr	r0, [pc, #96]	@ (8002d4c <q_save+0x6c>)
 8002cec:	f003 fcc8 	bl	8006680 <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < 24; i++) {
 8002cf0:	2400      	movs	r4, #0
 8002cf2:	e00e      	b.n	8002d12 <q_save+0x32>
        HAL_RTCEx_BKUPWrite(&hrtc, 8+i, ((uint32_t)data_queue.data[2*i] << 16) | (uint32_t)data_queue.data[2*i + 1]);
 8002cf4:	0063      	lsls	r3, r4, #1
 8002cf6:	4916      	ldr	r1, [pc, #88]	@ (8002d50 <q_save+0x70>)
 8002cf8:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d02:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8002d06:	f104 0108 	add.w	r1, r4, #8
 8002d0a:	4810      	ldr	r0, [pc, #64]	@ (8002d4c <q_save+0x6c>)
 8002d0c:	f003 fcb8 	bl	8006680 <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < 24; i++) {
 8002d10:	3401      	adds	r4, #1
 8002d12:	2c17      	cmp	r4, #23
 8002d14:	ddee      	ble.n	8002cf4 <q_save+0x14>
    }
    
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((uint32_t)data_queue.length << 24) | \
 8002d16:	4a0e      	ldr	r2, [pc, #56]	@ (8002d50 <q_save+0x70>)
 8002d18:	f892 1063 	ldrb.w	r1, [r2, #99]	@ 0x63
    ((uint32_t)data_queue.start_ptr << 16) | ((uint32_t)data_queue.write_ptr << 8) | \
 8002d1c:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002d20:	041b      	lsls	r3, r3, #16
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((uint32_t)data_queue.length << 24) | \
 8002d22:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    ((uint32_t)data_queue.start_ptr << 16) | ((uint32_t)data_queue.write_ptr << 8) | \
 8002d26:	f892 1060 	ldrb.w	r1, [r2, #96]	@ 0x60
 8002d2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    (data_queue.is_first_writing ? 1 : 0));
 8002d2e:	f892 2062 	ldrb.w	r2, [r2, #98]	@ 0x62
 8002d32:	b132      	cbz	r2, 8002d42 <q_save+0x62>
 8002d34:	2201      	movs	r2, #1
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((uint32_t)data_queue.length << 24) | \
 8002d36:	431a      	orrs	r2, r3
 8002d38:	2107      	movs	r1, #7
 8002d3a:	4804      	ldr	r0, [pc, #16]	@ (8002d4c <q_save+0x6c>)
 8002d3c:	f003 fca0 	bl	8006680 <HAL_RTCEx_BKUPWrite>
}
 8002d40:	bd10      	pop	{r4, pc}
    (data_queue.is_first_writing ? 1 : 0));
 8002d42:	2200      	movs	r2, #0
 8002d44:	e7f7      	b.n	8002d36 <q_save+0x56>
 8002d46:	bf00      	nop
 8002d48:	aaff55ff 	.word	0xaaff55ff
 8002d4c:	2000137c 	.word	0x2000137c
 8002d50:	20001458 	.word	0x20001458

08002d54 <q_load>:
 
bool q_load(void){
 8002d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // REGs 6 - 31
    // KEY - REG6
    // SYS - REG7
    // DATA REG8 - 31
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6) != KEY){return false;}
 8002d58:	2106      	movs	r1, #6
 8002d5a:	4822      	ldr	r0, [pc, #136]	@ (8002de4 <q_load+0x90>)
 8002d5c:	f003 fc9f 	bl	800669e <HAL_RTCEx_BKUPRead>
 8002d60:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <q_load+0x94>)
 8002d62:	4298      	cmp	r0, r3
 8002d64:	d13b      	bne.n	8002dde <q_load+0x8a>
    for (int i = 0; i < 24; i++) {
 8002d66:	2400      	movs	r4, #0
 8002d68:	e013      	b.n	8002d92 <q_load+0x3e>
        data_queue.data[2*i] = (int16_t)(HAL_RTCEx_BKUPRead(&hrtc, 8+i) >> 16);       
 8002d6a:	f104 0808 	add.w	r8, r4, #8
 8002d6e:	4f1d      	ldr	r7, [pc, #116]	@ (8002de4 <q_load+0x90>)
 8002d70:	4641      	mov	r1, r8
 8002d72:	4638      	mov	r0, r7
 8002d74:	f003 fc93 	bl	800669e <HAL_RTCEx_BKUPRead>
 8002d78:	0065      	lsls	r5, r4, #1
 8002d7a:	0c00      	lsrs	r0, r0, #16
 8002d7c:	4e1b      	ldr	r6, [pc, #108]	@ (8002dec <q_load+0x98>)
 8002d7e:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
        data_queue.data[2*i + 1] = (int16_t)(HAL_RTCEx_BKUPRead(&hrtc, 8+i) & 0xFFFF);
 8002d82:	4641      	mov	r1, r8
 8002d84:	4638      	mov	r0, r7
 8002d86:	f003 fc8a 	bl	800669e <HAL_RTCEx_BKUPRead>
 8002d8a:	3501      	adds	r5, #1
 8002d8c:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
    for (int i = 0; i < 24; i++) {
 8002d90:	3401      	adds	r4, #1
 8002d92:	2c17      	cmp	r4, #23
 8002d94:	dde9      	ble.n	8002d6a <q_load+0x16>
    }
    data_queue.length = (uint8_t)(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 24);
 8002d96:	4d13      	ldr	r5, [pc, #76]	@ (8002de4 <q_load+0x90>)
 8002d98:	2107      	movs	r1, #7
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f003 fc7f 	bl	800669e <HAL_RTCEx_BKUPRead>
 8002da0:	0e00      	lsrs	r0, r0, #24
 8002da2:	4c12      	ldr	r4, [pc, #72]	@ (8002dec <q_load+0x98>)
 8002da4:	f884 0063 	strb.w	r0, [r4, #99]	@ 0x63
    data_queue.start_ptr = (uint8_t)(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 16);
 8002da8:	2107      	movs	r1, #7
 8002daa:	4628      	mov	r0, r5
 8002dac:	f003 fc77 	bl	800669e <HAL_RTCEx_BKUPRead>
 8002db0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002db4:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
    data_queue.write_ptr = (uint8_t)(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 8);
 8002db8:	2107      	movs	r1, #7
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f003 fc6f 	bl	800669e <HAL_RTCEx_BKUPRead>
 8002dc0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002dc4:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
    data_queue.is_first_writing = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) & 0x01) != 0;
 8002dc8:	2107      	movs	r1, #7
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f003 fc67 	bl	800669e <HAL_RTCEx_BKUPRead>
 8002dd0:	f000 0001 	and.w	r0, r0, #1
 8002dd4:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
    return true;
 8002dd8:	2001      	movs	r0, #1
}
 8002dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6) != KEY){return false;}
 8002dde:	2000      	movs	r0, #0
 8002de0:	e7fb      	b.n	8002dda <q_load+0x86>
 8002de2:	bf00      	nop
 8002de4:	2000137c 	.word	0x2000137c
 8002de8:	aaff55ff 	.word	0xaaff55ff
 8002dec:	20001458 	.word	0x20001458

08002df0 <q_len>:

uint16_t q_len(void){
    return data_queue.length;
 8002df0:	4b01      	ldr	r3, [pc, #4]	@ (8002df8 <q_len+0x8>)
 8002df2:	f893 0063 	ldrb.w	r0, [r3, #99]	@ 0x63
 8002df6:	4770      	bx	lr
 8002df8:	20001458 	.word	0x20001458

08002dfc <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002dfc:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <HAL_InitTick+0x44>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b90b      	cbnz	r3, 8002e06 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e02:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002e04:	4770      	bx	lr
{
 8002e06:	b510      	push	{r4, lr}
 8002e08:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e12:	4a0c      	ldr	r2, [pc, #48]	@ (8002e44 <HAL_InitTick+0x48>)
 8002e14:	6810      	ldr	r0, [r2, #0]
 8002e16:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e1a:	f000 ff47 	bl	8003cac <HAL_SYSTICK_Config>
 8002e1e:	b968      	cbnz	r0, 8002e3c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e20:	2c0f      	cmp	r4, #15
 8002e22:	d901      	bls.n	8002e28 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
 8002e26:	e00a      	b.n	8002e3e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f000 ff24 	bl	8003c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <HAL_InitTick+0x4c>)
 8002e36:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e38:	2000      	movs	r0, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
}
 8002e3e:	bd10      	pop	{r4, pc}
 8002e40:	200000b8 	.word	0x200000b8
 8002e44:	200000c4 	.word	0x200000c4
 8002e48:	200000bc 	.word	0x200000bc

08002e4c <HAL_Init>:
{
 8002e4c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e4e:	4a09      	ldr	r2, [pc, #36]	@ (8002e74 <HAL_Init+0x28>)
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e56:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e58:	2003      	movs	r0, #3
 8002e5a:	f000 fefd 	bl	8003c58 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e5e:	200f      	movs	r0, #15
 8002e60:	f7ff ffcc 	bl	8002dfc <HAL_InitTick>
 8002e64:	b110      	cbz	r0, 8002e6c <HAL_Init+0x20>
    status = HAL_ERROR;
 8002e66:	2401      	movs	r4, #1
}
 8002e68:	4620      	mov	r0, r4
 8002e6a:	bd10      	pop	{r4, pc}
 8002e6c:	4604      	mov	r4, r0
    HAL_MspInit();
 8002e6e:	f001 f9e1 	bl	8004234 <HAL_MspInit>
 8002e72:	e7f9      	b.n	8002e68 <HAL_Init+0x1c>
 8002e74:	40022000 	.word	0x40022000

08002e78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002e78:	4b03      	ldr	r3, [pc, #12]	@ (8002e88 <HAL_IncTick+0x10>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4a03      	ldr	r2, [pc, #12]	@ (8002e8c <HAL_IncTick+0x14>)
 8002e7e:	6811      	ldr	r1, [r2, #0]
 8002e80:	440b      	add	r3, r1
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	200000b8 	.word	0x200000b8
 8002e8c:	200014bc 	.word	0x200014bc

08002e90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e90:	4b01      	ldr	r3, [pc, #4]	@ (8002e98 <HAL_GetTick+0x8>)
 8002e92:	6818      	ldr	r0, [r3, #0]
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	200014bc 	.word	0x200014bc

08002e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff fff6 	bl	8002e90 <HAL_GetTick>
 8002ea4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002eaa:	d002      	beq.n	8002eb2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8002eac:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <HAL_Delay+0x24>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eb2:	f7ff ffed 	bl	8002e90 <HAL_GetTick>
 8002eb6:	1b40      	subs	r0, r0, r5
 8002eb8:	42a0      	cmp	r0, r4
 8002eba:	d3fa      	bcc.n	8002eb2 <HAL_Delay+0x16>
  {
  }
}
 8002ebc:	bd38      	pop	{r3, r4, r5, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200000b8 	.word	0x200000b8

08002ec4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002ec4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002ec8:	6913      	ldr	r3, [r2, #16]
 8002eca:	f023 0302 	bic.w	r3, r3, #2
 8002ece:	6113      	str	r3, [r2, #16]
}
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002ed2:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002ed6:	6913      	ldr	r3, [r2, #16]
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6113      	str	r3, [r2, #16]
}
 8002ede:	4770      	bx	lr

08002ee0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ee0:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ee2:	3030      	adds	r0, #48	@ 0x30
 8002ee4:	0a0b      	lsrs	r3, r1, #8
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002eec:	58c4      	ldr	r4, [r0, r3]
 8002eee:	f001 011f 	and.w	r1, r1, #31
 8002ef2:	f04f 0c1f 	mov.w	ip, #31
 8002ef6:	fa0c fc01 	lsl.w	ip, ip, r1
 8002efa:	ea24 0c0c 	bic.w	ip, r4, ip
 8002efe:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002f02:	408a      	lsls	r2, r1
 8002f04:	ea4c 0202 	orr.w	r2, ip, r2
 8002f08:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f10:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f12:	3014      	adds	r0, #20
 8002f14:	0e4b      	lsrs	r3, r1, #25
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f1c:	58c4      	ldr	r4, [r0, r3]
 8002f1e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002f22:	f04f 0c07 	mov.w	ip, #7
 8002f26:	fa0c fc01 	lsl.w	ip, ip, r1
 8002f2a:	ea24 0c0c 	bic.w	ip, r4, ip
 8002f2e:	408a      	lsls	r2, r1
 8002f30:	ea4c 0202 	orr.w	r2, ip, r2
 8002f34:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b530      	push	{r4, r5, lr}
 8002f3e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f44:	2800      	cmp	r0, #0
 8002f46:	f000 80d9 	beq.w	80030fc <HAL_ADC_Init+0x1c0>
 8002f4a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002f4e:	b313      	cbz	r3, 8002f96 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f50:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8002f58:	d005      	beq.n	8002f66 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8002f60:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002f64:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f66:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f68:	6893      	ldr	r3, [r2, #8]
 8002f6a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002f6e:	d11f      	bne.n	8002fb0 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8002f70:	6893      	ldr	r3, [r2, #8]
 8002f72:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f80:	4b5f      	ldr	r3, [pc, #380]	@ (8003100 <HAL_ADC_Init+0x1c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	4a5f      	ldr	r2, [pc, #380]	@ (8003104 <HAL_ADC_Init+0x1c8>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002f94:	e009      	b.n	8002faa <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8002f96:	f001 f965 	bl	8004264 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002f9e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8002fa2:	e7d5      	b.n	8002f50 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002fa4:	9b01      	ldr	r3, [sp, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002faa:	9b01      	ldr	r3, [sp, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f9      	bne.n	8002fa4 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fb0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fb2:	6893      	ldr	r3, [r2, #8]
 8002fb4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002fb8:	d179      	bne.n	80030ae <HAL_ADC_Init+0x172>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002fbc:	f043 0310 	orr.w	r3, r3, #16
 8002fc0:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fca:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fcc:	6893      	ldr	r3, [r2, #8]
 8002fce:	f013 0304 	ands.w	r3, r3, #4
 8002fd2:	d000      	beq.n	8002fd6 <HAL_ADC_Init+0x9a>
 8002fd4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fd6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002fd8:	f011 0f10 	tst.w	r1, #16
 8002fdc:	f040 8087 	bne.w	80030ee <HAL_ADC_Init+0x1b2>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 8084 	bne.w	80030ee <HAL_ADC_Init+0x1b2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002fe8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ff2:	6893      	ldr	r3, [r2, #8]
 8002ff4:	f013 0f01 	tst.w	r3, #1
 8002ff8:	d112      	bne.n	8003020 <HAL_ADC_Init+0xe4>
 8002ffa:	4b43      	ldr	r3, [pc, #268]	@ (8003108 <HAL_ADC_Init+0x1cc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f013 0301 	ands.w	r3, r3, #1
 8003002:	d000      	beq.n	8003006 <HAL_ADC_Init+0xca>
 8003004:	2301      	movs	r3, #1
 8003006:	4a41      	ldr	r2, [pc, #260]	@ (800310c <HAL_ADC_Init+0x1d0>)
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	f012 0f01 	tst.w	r2, #1
 800300e:	d107      	bne.n	8003020 <HAL_ADC_Init+0xe4>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003010:	b933      	cbnz	r3, 8003020 <HAL_ADC_Init+0xe4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003012:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003014:	493e      	ldr	r1, [pc, #248]	@ (8003110 <HAL_ADC_Init+0x1d4>)
 8003016:	688a      	ldr	r2, [r1, #8]
 8003018:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003020:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 8003022:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003024:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 8003028:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 800302a:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 800302c:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 800302e:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003030:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003038:	2a01      	cmp	r2, #1
 800303a:	d03a      	beq.n	80030b2 <HAL_ADC_Init+0x176>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800303e:	b122      	cbz	r2, 800304a <HAL_ADC_Init+0x10e>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003040:	f402 7270 	and.w	r2, r2, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003044:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003046:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003048:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800304a:	6821      	ldr	r1, [r4, #0]
 800304c:	68cd      	ldr	r5, [r1, #12]
 800304e:	4a31      	ldr	r2, [pc, #196]	@ (8003114 <HAL_ADC_Init+0x1d8>)
 8003050:	402a      	ands	r2, r5
 8003052:	431a      	orrs	r2, r3
 8003054:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003056:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003058:	6893      	ldr	r3, [r2, #8]
 800305a:	f013 0308 	ands.w	r3, r3, #8
 800305e:	d000      	beq.n	8003062 <HAL_ADC_Init+0x126>
 8003060:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003062:	b9ab      	cbnz	r3, 8003090 <HAL_ADC_Init+0x154>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003064:	7e23      	ldrb	r3, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003066:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800306a:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800306c:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003070:	68d3      	ldr	r3, [r2, #12]
 8003072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003076:	f023 0302 	bic.w	r3, r3, #2
 800307a:	430b      	orrs	r3, r1
 800307c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800307e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003082:	2b01      	cmp	r3, #1
 8003084:	d01a      	beq.n	80030bc <HAL_ADC_Init+0x180>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	6913      	ldr	r3, [r2, #16]
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003090:	6923      	ldr	r3, [r4, #16]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d022      	beq.n	80030dc <HAL_ADC_Init+0x1a0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800309a:	f023 030f 	bic.w	r3, r3, #15
 800309e:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6563      	str	r3, [r4, #84]	@ 0x54
 80030ac:	e024      	b.n	80030f8 <HAL_ADC_Init+0x1bc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ae:	2000      	movs	r0, #0
 80030b0:	e78c      	b.n	8002fcc <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80030b4:	3a01      	subs	r2, #1
 80030b6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80030ba:	e7bf      	b.n	800303c <HAL_ADC_Init+0x100>
        MODIFY_REG(hadc->Instance->CFGR2,
 80030bc:	6821      	ldr	r1, [r4, #0]
 80030be:	690b      	ldr	r3, [r1, #16]
 80030c0:	f36f 038a 	bfc	r3, #2, #9
 80030c4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80030c6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80030c8:	432a      	orrs	r2, r5
 80030ca:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80030cc:	432a      	orrs	r2, r5
 80030ce:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80030d0:	432a      	orrs	r2, r5
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	610b      	str	r3, [r1, #16]
 80030da:	e7d9      	b.n	8003090 <HAL_ADC_Init+0x154>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030dc:	6821      	ldr	r1, [r4, #0]
 80030de:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80030e0:	f023 030f 	bic.w	r3, r3, #15
 80030e4:	69e2      	ldr	r2, [r4, #28]
 80030e6:	3a01      	subs	r2, #1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	630b      	str	r3, [r1, #48]	@ 0x30
 80030ec:	e7d8      	b.n	80030a0 <HAL_ADC_Init+0x164>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80030f0:	f043 0310 	orr.w	r3, r3, #16
 80030f4:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030f6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80030f8:	b003      	add	sp, #12
 80030fa:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
 80030fe:	e7fb      	b.n	80030f8 <HAL_ADC_Init+0x1bc>
 8003100:	200000c4 	.word	0x200000c4
 8003104:	053e2d63 	.word	0x053e2d63
 8003108:	50040000 	.word	0x50040000
 800310c:	50040100 	.word	0x50040100
 8003110:	50040300 	.word	0x50040300
 8003114:	fff0c007 	.word	0xfff0c007

08003118 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003118:	4770      	bx	lr

0800311a <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800311a:	4770      	bx	lr

0800311c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800311c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800311e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003120:	f7ff fffb 	bl	800311a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003124:	bd08      	pop	{r3, pc}

08003126 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8003126:	4770      	bx	lr

08003128 <HAL_ADC_ErrorCallback>:
}
 8003128:	4770      	bx	lr
	...

0800312c <HAL_ADC_IRQHandler>:
{
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003130:	6803      	ldr	r3, [r0, #0]
 8003132:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003134:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003136:	4b9a      	ldr	r3, [pc, #616]	@ (80033a0 <HAL_ADC_IRQHandler+0x274>)
 8003138:	689e      	ldr	r6, [r3, #8]
 800313a:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800313e:	f017 0f02 	tst.w	r7, #2
 8003142:	d010      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3a>
 8003144:	f015 0f02 	tst.w	r5, #2
 8003148:	d00d      	beq.n	8003166 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800314a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800314c:	f013 0f10 	tst.w	r3, #16
 8003150:	d103      	bne.n	800315a <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003152:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003154:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003158:	6543      	str	r3, [r0, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800315a:	4620      	mov	r0, r4
 800315c:	f000 fc9a 	bl	8003a94 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	2202      	movs	r2, #2
 8003164:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003166:	f017 0f04 	tst.w	r7, #4
 800316a:	d002      	beq.n	8003172 <HAL_ADC_IRQHandler+0x46>
 800316c:	f015 0f04 	tst.w	r5, #4
 8003170:	d105      	bne.n	800317e <HAL_ADC_IRQHandler+0x52>
 8003172:	f017 0f08 	tst.w	r7, #8
 8003176:	d04d      	beq.n	8003214 <HAL_ADC_IRQHandler+0xe8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003178:	f015 0f08 	tst.w	r5, #8
 800317c:	d04a      	beq.n	8003214 <HAL_ADC_IRQHandler+0xe8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800317e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003180:	f013 0f10 	tst.w	r3, #16
 8003184:	d103      	bne.n	800318e <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003186:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003188:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800318c:	6563      	str	r3, [r4, #84]	@ 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800318e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8003196:	d137      	bne.n	8003208 <HAL_ADC_IRQHandler+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003198:	4a82      	ldr	r2, [pc, #520]	@ (80033a4 <HAL_ADC_IRQHandler+0x278>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_ADC_IRQHandler+0xc2>
 800319e:	461a      	mov	r2, r3
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <HAL_ADC_IRQHandler+0x88>
 80031a4:	2e09      	cmp	r6, #9
 80031a6:	d825      	bhi.n	80031f4 <HAL_ADC_IRQHandler+0xc8>
 80031a8:	f240 2121 	movw	r1, #545	@ 0x221
 80031ac:	40f1      	lsrs	r1, r6
 80031ae:	f011 0f01 	tst.w	r1, #1
 80031b2:	d01f      	beq.n	80031f4 <HAL_ADC_IRQHandler+0xc8>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031b4:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031b6:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 80031ba:	d125      	bne.n	8003208 <HAL_ADC_IRQHandler+0xdc>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	f012 0f08 	tst.w	r2, #8
 80031c2:	d021      	beq.n	8003208 <HAL_ADC_IRQHandler+0xdc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	f012 0f04 	tst.w	r2, #4
 80031ca:	d115      	bne.n	80031f8 <HAL_ADC_IRQHandler+0xcc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	f022 020c 	bic.w	r2, r2, #12
 80031d2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031da:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031de:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80031e2:	d111      	bne.n	8003208 <HAL_ADC_IRQHandler+0xdc>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6563      	str	r3, [r4, #84]	@ 0x54
 80031ec:	e00c      	b.n	8003208 <HAL_ADC_IRQHandler+0xdc>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031ee:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80031f2:	e7d5      	b.n	80031a0 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031f4:	68d2      	ldr	r2, [r2, #12]
 80031f6:	e7de      	b.n	80031b6 <HAL_ADC_IRQHandler+0x8a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003200:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ff85 	bl	8003118 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	220c      	movs	r2, #12
 8003212:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003214:	f017 0f20 	tst.w	r7, #32
 8003218:	d002      	beq.n	8003220 <HAL_ADC_IRQHandler+0xf4>
 800321a:	f015 0f20 	tst.w	r5, #32
 800321e:	d105      	bne.n	800322c <HAL_ADC_IRQHandler+0x100>
 8003220:	f017 0f40 	tst.w	r7, #64	@ 0x40
 8003224:	d05c      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003226:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800322a:	d059      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x1b4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800322c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800322e:	f013 0f10 	tst.w	r3, #16
 8003232:	d103      	bne.n	800323c <HAL_ADC_IRQHandler+0x110>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003234:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003236:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800323a:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800323c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800323e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003240:	f012 0fc0 	tst.w	r2, #192	@ 0xc0
 8003244:	d112      	bne.n	800326c <HAL_ADC_IRQHandler+0x140>
 8003246:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800324e:	d10f      	bne.n	8003270 <HAL_ADC_IRQHandler+0x144>
 8003250:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003252:	4a54      	ldr	r2, [pc, #336]	@ (80033a4 <HAL_ADC_IRQHandler+0x278>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00d      	beq.n	8003274 <HAL_ADC_IRQHandler+0x148>
 8003258:	461a      	mov	r2, r3
 800325a:	4293      	cmp	r3, r2
 800325c:	d00d      	beq.n	800327a <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325e:	b166      	cbz	r6, 800327a <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003260:	2e06      	cmp	r6, #6
 8003262:	d00a      	beq.n	800327a <HAL_ADC_IRQHandler+0x14e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003264:	2e07      	cmp	r6, #7
 8003266:	d008      	beq.n	800327a <HAL_ADC_IRQHandler+0x14e>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003268:	68d2      	ldr	r2, [r2, #12]
 800326a:	e007      	b.n	800327c <HAL_ADC_IRQHandler+0x150>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800326c:	2100      	movs	r1, #0
 800326e:	e7eb      	b.n	8003248 <HAL_ADC_IRQHandler+0x11c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003270:	2000      	movs	r0, #0
 8003272:	e7ee      	b.n	8003252 <HAL_ADC_IRQHandler+0x126>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003274:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003278:	e7ef      	b.n	800325a <HAL_ADC_IRQHandler+0x12e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800327a:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800327c:	b351      	cbz	r1, 80032d4 <HAL_ADC_IRQHandler+0x1a8>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800327e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003282:	d003      	beq.n	800328c <HAL_ADC_IRQHandler+0x160>
 8003284:	b330      	cbz	r0, 80032d4 <HAL_ADC_IRQHandler+0x1a8>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003286:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800328a:	d123      	bne.n	80032d4 <HAL_ADC_IRQHandler+0x1a8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800328c:	6819      	ldr	r1, [r3, #0]
 800328e:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8003292:	d01f      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x1a8>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003294:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
 8003298:	d11c      	bne.n	80032d4 <HAL_ADC_IRQHandler+0x1a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	f012 0f08 	tst.w	r2, #8
 80032a0:	d110      	bne.n	80032c4 <HAL_ADC_IRQHandler+0x198>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032a8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80032aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032b0:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80032b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032b4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80032b8:	d10c      	bne.n	80032d4 <HAL_ADC_IRQHandler+0x1a8>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6563      	str	r3, [r4, #84]	@ 0x54
 80032c2:	e007      	b.n	80032d4 <HAL_ADC_IRQHandler+0x1a8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032c6:	f043 0310 	orr.w	r3, r3, #16
 80032ca:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032d4:	4620      	mov	r0, r4
 80032d6:	f000 fbd9 	bl	8003a8c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	2260      	movs	r2, #96	@ 0x60
 80032de:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80032e0:	f017 0f80 	tst.w	r7, #128	@ 0x80
 80032e4:	d002      	beq.n	80032ec <HAL_ADC_IRQHandler+0x1c0>
 80032e6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80032ea:	d12f      	bne.n	800334c <HAL_ADC_IRQHandler+0x220>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80032ec:	f417 7f80 	tst.w	r7, #256	@ 0x100
 80032f0:	d002      	beq.n	80032f8 <HAL_ADC_IRQHandler+0x1cc>
 80032f2:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80032f6:	d134      	bne.n	8003362 <HAL_ADC_IRQHandler+0x236>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032f8:	f417 7f00 	tst.w	r7, #512	@ 0x200
 80032fc:	d002      	beq.n	8003304 <HAL_ADC_IRQHandler+0x1d8>
 80032fe:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003302:	d13a      	bne.n	800337a <HAL_ADC_IRQHandler+0x24e>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003304:	f017 0f10 	tst.w	r7, #16
 8003308:	d019      	beq.n	800333e <HAL_ADC_IRQHandler+0x212>
 800330a:	f015 0f10 	tst.w	r5, #16
 800330e:	d016      	beq.n	800333e <HAL_ADC_IRQHandler+0x212>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003312:	b133      	cbz	r3, 8003322 <HAL_ADC_IRQHandler+0x1f6>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003314:	2e00      	cmp	r6, #0
 8003316:	d03c      	beq.n	8003392 <HAL_ADC_IRQHandler+0x266>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <HAL_ADC_IRQHandler+0x274>)
 800331a:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800331c:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 8003320:	d00a      	beq.n	8003338 <HAL_ADC_IRQHandler+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003322:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003324:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003328:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800332a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 8003332:	4620      	mov	r0, r4
 8003334:	f7ff fef8 	bl	8003128 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	2210      	movs	r2, #16
 800333c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800333e:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 8003342:	d002      	beq.n	800334a <HAL_ADC_IRQHandler+0x21e>
 8003344:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003348:	d12e      	bne.n	80033a8 <HAL_ADC_IRQHandler+0x27c>
}
 800334a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800334c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800334e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003352:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff fee6 	bl	8003126 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	2280      	movs	r2, #128	@ 0x80
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e7c4      	b.n	80032ec <HAL_ADC_IRQHandler+0x1c0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003362:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003368:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800336a:	4620      	mov	r0, r4
 800336c:	f000 fb90 	bl	8003a90 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e7be      	b.n	80032f8 <HAL_ADC_IRQHandler+0x1cc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800337a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800337c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003380:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003382:	4620      	mov	r0, r4
 8003384:	f000 fb85 	bl	8003a92 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e7b8      	b.n	8003304 <HAL_ADC_IRQHandler+0x1d8>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f013 0f01 	tst.w	r3, #1
 800339a:	d0cd      	beq.n	8003338 <HAL_ADC_IRQHandler+0x20c>
 800339c:	e7c1      	b.n	8003322 <HAL_ADC_IRQHandler+0x1f6>
 800339e:	bf00      	nop
 80033a0:	50040300 	.word	0x50040300
 80033a4:	50040100 	.word	0x50040100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80033a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80033aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ae:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80033b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033b2:	f043 0308 	orr.w	r3, r3, #8
 80033b6:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033be:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80033c0:	4620      	mov	r0, r4
 80033c2:	f000 fb64 	bl	8003a8e <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80033c6:	e7c0      	b.n	800334a <HAL_ADC_IRQHandler+0x21e>

080033c8 <ADC_DMAConvCplt>:
{
 80033c8:	b508      	push	{r3, lr}
 80033ca:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033cc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033ce:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80033d0:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80033d4:	d130      	bne.n	8003438 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033d6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80033d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033dc:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033de:	6803      	ldr	r3, [r0, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f012 0f08 	tst.w	r2, #8
 80033e6:	d014      	beq.n	8003412 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80033ee:	d120      	bne.n	8003432 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80033f6:	d11c      	bne.n	8003432 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033f8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80033fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033fe:	6543      	str	r3, [r0, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003400:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003402:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003406:	d114      	bne.n	8003432 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003408:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6543      	str	r3, [r0, #84]	@ 0x54
 8003410:	e00f      	b.n	8003432 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f013 0f02 	tst.w	r3, #2
 8003418:	d10b      	bne.n	8003432 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800341a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800341c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003420:	6543      	str	r3, [r0, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003422:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003424:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003428:	d103      	bne.n	8003432 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800342a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6543      	str	r3, [r0, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8003432:	f7ff fe71 	bl	8003118 <HAL_ADC_ConvCpltCallback>
}
 8003436:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003438:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800343a:	f012 0f10 	tst.w	r2, #16
 800343e:	d104      	bne.n	800344a <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003440:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003442:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003444:	4618      	mov	r0, r3
 8003446:	4790      	blx	r2
}
 8003448:	e7f5      	b.n	8003436 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 800344a:	f7ff fe6d 	bl	8003128 <HAL_ADC_ErrorCallback>
 800344e:	e7f2      	b.n	8003436 <ADC_DMAConvCplt+0x6e>

08003450 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003450:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003452:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003454:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800345a:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800345c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800345e:	f043 0304 	orr.w	r3, r3, #4
 8003462:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003464:	f7ff fe60 	bl	8003128 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003468:	bd08      	pop	{r3, pc}
	...

0800346c <HAL_ADC_ConfigChannel>:
{
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003470:	2300      	movs	r3, #0
 8003472:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003474:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003478:	2b01      	cmp	r3, #1
 800347a:	f000 820b 	beq.w	8003894 <HAL_ADC_ConfigChannel+0x428>
 800347e:	4604      	mov	r4, r0
 8003480:	460d      	mov	r5, r1
 8003482:	2301      	movs	r3, #1
 8003484:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003488:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800348a:	6883      	ldr	r3, [r0, #8]
 800348c:	f013 0f04 	tst.w	r3, #4
 8003490:	d009      	beq.n	80034a6 <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003492:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003494:	f043 0320 	orr.w	r3, r3, #32
 8003498:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800349a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800349c:	2300      	movs	r3, #0
 800349e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80034a2:	b003      	add	sp, #12
 80034a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t config_rank = pConfig->Rank;
 80034a6:	6849      	ldr	r1, [r1, #4]
    if (pConfig->Rank <= 5U)
 80034a8:	2905      	cmp	r1, #5
 80034aa:	d807      	bhi.n	80034bc <HAL_ADC_ConfigChannel+0x50>
      switch (pConfig->Rank)
 80034ac:	3902      	subs	r1, #2
 80034ae:	2903      	cmp	r1, #3
 80034b0:	d871      	bhi.n	8003596 <HAL_ADC_ConfigChannel+0x12a>
 80034b2:	e8df f001 	tbb	[pc, r1]
 80034b6:	7202      	.short	0x7202
 80034b8:	6d6b      	.short	0x6d6b
 80034ba:	210c      	movs	r1, #12
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80034bc:	682a      	ldr	r2, [r5, #0]
 80034be:	f7ff fd0f 	bl	8002ee0 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c2:	6820      	ldr	r0, [r4, #0]
 80034c4:	6883      	ldr	r3, [r0, #8]
 80034c6:	f013 0304 	ands.w	r3, r3, #4
 80034ca:	d000      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x62>
 80034cc:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034ce:	6882      	ldr	r2, [r0, #8]
 80034d0:	f012 0208 	ands.w	r2, r2, #8
 80034d4:	d000      	beq.n	80034d8 <HAL_ADC_ConfigChannel+0x6c>
 80034d6:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034d8:	bb23      	cbnz	r3, 8003524 <HAL_ADC_ConfigChannel+0xb8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034da:	bb1a      	cbnz	r2, 8003524 <HAL_ADC_ConfigChannel+0xb8>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034dc:	68aa      	ldr	r2, [r5, #8]
 80034de:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80034e2:	d05c      	beq.n	800359e <HAL_ADC_ConfigChannel+0x132>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034e4:	6829      	ldr	r1, [r5, #0]
 80034e6:	f7ff fd13 	bl	8002f10 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034ea:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80034ec:	6953      	ldr	r3, [r2, #20]
 80034ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034f2:	6153      	str	r3, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034f4:	6969      	ldr	r1, [r5, #20]
 80034f6:	6822      	ldr	r2, [r4, #0]
 80034f8:	68d3      	ldr	r3, [r2, #12]
 80034fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003502:	6928      	ldr	r0, [r5, #16]
 8003504:	2804      	cmp	r0, #4
 8003506:	d054      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003508:	682e      	ldr	r6, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350a:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 800350c:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 8003510:	4ba7      	ldr	r3, [pc, #668]	@ (80037b0 <HAL_ADC_ConfigChannel+0x344>)
 8003512:	403b      	ands	r3, r7
 8003514:	f006 46f8 	and.w	r6, r6, #2080374784	@ 0x7c000000
 8003518:	4331      	orrs	r1, r6
 800351a:	430b      	orrs	r3, r1
 800351c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003520:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003524:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003526:	6893      	ldr	r3, [r2, #8]
 8003528:	f013 0f01 	tst.w	r3, #1
 800352c:	d117      	bne.n	800355e <HAL_ADC_ConfigChannel+0xf2>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800352e:	682b      	ldr	r3, [r5, #0]
 8003530:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003532:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8003536:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800353a:	ea21 0106 	bic.w	r1, r1, r6
 800353e:	f000 0c18 	and.w	ip, r0, #24
 8003542:	489c      	ldr	r0, [pc, #624]	@ (80037b4 <HAL_ADC_ConfigChannel+0x348>)
 8003544:	fa20 f00c 	lsr.w	r0, r0, ip
 8003548:	4003      	ands	r3, r0
 800354a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354e:	430b      	orrs	r3, r1
 8003550:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003554:	68ea      	ldr	r2, [r5, #12]
 8003556:	4b98      	ldr	r3, [pc, #608]	@ (80037b8 <HAL_ADC_ConfigChannel+0x34c>)
 8003558:	429a      	cmp	r2, r3
 800355a:	f000 8091 	beq.w	8003680 <HAL_ADC_ConfigChannel+0x214>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800355e:	682b      	ldr	r3, [r5, #0]
 8003560:	4a96      	ldr	r2, [pc, #600]	@ (80037bc <HAL_ADC_ConfigChannel+0x350>)
 8003562:	4213      	tst	r3, r2
 8003564:	f000 8192 	beq.w	800388c <HAL_ADC_ConfigChannel+0x420>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003568:	4a95      	ldr	r2, [pc, #596]	@ (80037c0 <HAL_ADC_ConfigChannel+0x354>)
 800356a:	6892      	ldr	r2, [r2, #8]
 800356c:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003570:	4994      	ldr	r1, [pc, #592]	@ (80037c4 <HAL_ADC_ConfigChannel+0x358>)
 8003572:	428b      	cmp	r3, r1
 8003574:	f000 813d 	beq.w	80037f2 <HAL_ADC_ConfigChannel+0x386>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003578:	4993      	ldr	r1, [pc, #588]	@ (80037c8 <HAL_ADC_ConfigChannel+0x35c>)
 800357a:	428b      	cmp	r3, r1
 800357c:	f000 815f 	beq.w	800383e <HAL_ADC_ConfigChannel+0x3d2>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003580:	4992      	ldr	r1, [pc, #584]	@ (80037cc <HAL_ADC_ConfigChannel+0x360>)
 8003582:	428b      	cmp	r3, r1
 8003584:	f000 816f 	beq.w	8003866 <HAL_ADC_ConfigChannel+0x3fa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003588:	2000      	movs	r0, #0
 800358a:	e787      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
          config_rank = ADC_REGULAR_RANK_4;
 800358c:	2118      	movs	r1, #24
          break;
 800358e:	e795      	b.n	80034bc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_5;
 8003590:	f44f 7180 	mov.w	r1, #256	@ 0x100
          break;
 8003594:	e792      	b.n	80034bc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_1;
 8003596:	2106      	movs	r1, #6
          break;
 8003598:	e790      	b.n	80034bc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_3;
 800359a:	2112      	movs	r1, #18
 800359c:	e78e      	b.n	80034bc <HAL_ADC_ConfigChannel+0x50>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800359e:	2200      	movs	r2, #0
 80035a0:	6829      	ldr	r1, [r5, #0]
 80035a2:	f7ff fcb5 	bl	8002f10 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035a6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035a8:	6953      	ldr	r3, [r2, #20]
 80035aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035ae:	6153      	str	r3, [r2, #20]
}
 80035b0:	e7a0      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x88>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035b2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80035b4:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035b6:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80035c0:	bb78      	cbnz	r0, 8003622 <HAL_ADC_ConfigChannel+0x1b6>
 80035c2:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035c6:	4299      	cmp	r1, r3
 80035c8:	d033      	beq.n	8003632 <HAL_ADC_ConfigChannel+0x1c6>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035ca:	6821      	ldr	r1, [r4, #0]
 80035cc:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80035ce:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 80035d0:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80035da:	bb78      	cbnz	r0, 800363c <HAL_ADC_ConfigChannel+0x1d0>
 80035dc:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d033      	beq.n	800364c <HAL_ADC_ConfigChannel+0x1e0>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035e4:	6821      	ldr	r1, [r4, #0]
 80035e6:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 80035e8:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 80035ea:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80035f4:	bb78      	cbnz	r0, 8003656 <HAL_ADC_ConfigChannel+0x1ea>
 80035f6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d033      	beq.n	8003666 <HAL_ADC_ConfigChannel+0x1fa>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035fe:	6821      	ldr	r1, [r4, #0]
 8003600:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 8003602:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 8003604:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800360e:	bb78      	cbnz	r0, 8003670 <HAL_ADC_ConfigChannel+0x204>
 8003610:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003614:	429a      	cmp	r2, r3
 8003616:	d185      	bne.n	8003524 <HAL_ADC_ConfigChannel+0xb8>
  MODIFY_REG(*preg,
 8003618:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800361a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800361e:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 8003620:	e780      	b.n	8003524 <HAL_ADC_ConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003626:	b113      	cbz	r3, 800362e <HAL_ADC_ConfigChannel+0x1c2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	e7cb      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x15a>
    return 32U;
 800362e:	2320      	movs	r3, #32
 8003630:	e7c9      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x15a>
  MODIFY_REG(*preg,
 8003632:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003638:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800363a:	e7c6      	b.n	80035ca <HAL_ADC_ConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003640:	b113      	cbz	r3, 8003648 <HAL_ADC_ConfigChannel+0x1dc>
  return __builtin_clz(value);
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	e7cb      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x174>
    return 32U;
 8003648:	2320      	movs	r3, #32
 800364a:	e7c9      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 800364c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800364e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003652:	664b      	str	r3, [r1, #100]	@ 0x64
}
 8003654:	e7c6      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x178>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800365a:	b113      	cbz	r3, 8003662 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	e7cb      	b.n	80035fa <HAL_ADC_ConfigChannel+0x18e>
    return 32U;
 8003662:	2320      	movs	r3, #32
 8003664:	e7c9      	b.n	80035fa <HAL_ADC_ConfigChannel+0x18e>
  MODIFY_REG(*preg,
 8003666:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8003668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800366c:	668b      	str	r3, [r1, #104]	@ 0x68
}
 800366e:	e7c6      	b.n	80035fe <HAL_ADC_ConfigChannel+0x192>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003674:	b113      	cbz	r3, 800367c <HAL_ADC_ConfigChannel+0x210>
  return __builtin_clz(value);
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	e7cb      	b.n	8003614 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e7c9      	b.n	8003614 <HAL_ADC_ConfigChannel+0x1a8>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003680:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003682:	682b      	ldr	r3, [r5, #0]
 8003684:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003688:	bb26      	cbnz	r6, 80036d4 <HAL_ADC_ConfigChannel+0x268>
 800368a:	0e9a      	lsrs	r2, r3, #26
 800368c:	3201      	adds	r2, #1
 800368e:	f002 021f 	and.w	r2, r2, #31
 8003692:	2a09      	cmp	r2, #9
 8003694:	bf8c      	ite	hi
 8003696:	2200      	movhi	r2, #0
 8003698:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800369a:	2a00      	cmp	r2, #0
 800369c:	d052      	beq.n	8003744 <HAL_ADC_ConfigChannel+0x2d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800369e:	bb46      	cbnz	r6, 80036f2 <HAL_ADC_ConfigChannel+0x286>
 80036a0:	0e99      	lsrs	r1, r3, #26
 80036a2:	3101      	adds	r1, #1
 80036a4:	0689      	lsls	r1, r1, #26
 80036a6:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80036aa:	bb76      	cbnz	r6, 800370a <HAL_ADC_ConfigChannel+0x29e>
 80036ac:	0e9f      	lsrs	r7, r3, #26
 80036ae:	3701      	adds	r7, #1
 80036b0:	f007 071f 	and.w	r7, r7, #31
 80036b4:	2201      	movs	r2, #1
 80036b6:	40ba      	lsls	r2, r7
 80036b8:	4311      	orrs	r1, r2
 80036ba:	bbae      	cbnz	r6, 8003728 <HAL_ADC_ConfigChannel+0x2bc>
 80036bc:	0e9b      	lsrs	r3, r3, #26
 80036be:	3301      	adds	r3, #1
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80036c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ca:	4319      	orrs	r1, r3
 80036cc:	68aa      	ldr	r2, [r5, #8]
 80036ce:	f7ff fc1f 	bl	8002f10 <LL_ADC_SetChannelSamplingTime>
 80036d2:	e744      	b.n	800355e <HAL_ADC_ConfigChannel+0xf2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80036d8:	b14a      	cbz	r2, 80036ee <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 80036da:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036de:	3201      	adds	r2, #1
 80036e0:	f002 021f 	and.w	r2, r2, #31
 80036e4:	2a09      	cmp	r2, #9
 80036e6:	bf8c      	ite	hi
 80036e8:	2200      	movhi	r2, #0
 80036ea:	2201      	movls	r2, #1
 80036ec:	e7d5      	b.n	800369a <HAL_ADC_ConfigChannel+0x22e>
    return 32U;
 80036ee:	2220      	movs	r2, #32
 80036f0:	e7f5      	b.n	80036de <HAL_ADC_ConfigChannel+0x272>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 80036f6:	b131      	cbz	r1, 8003706 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 80036f8:	fab1 f181 	clz	r1, r1
 80036fc:	3101      	adds	r1, #1
 80036fe:	0689      	lsls	r1, r1, #26
 8003700:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003704:	e7d1      	b.n	80036aa <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8003706:	2120      	movs	r1, #32
 8003708:	e7f8      	b.n	80036fc <HAL_ADC_ConfigChannel+0x290>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800370e:	b14a      	cbz	r2, 8003724 <HAL_ADC_ConfigChannel+0x2b8>
  return __builtin_clz(value);
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	3201      	adds	r2, #1
 8003716:	f002 021f 	and.w	r2, r2, #31
 800371a:	f04f 0c01 	mov.w	ip, #1
 800371e:	fa0c f202 	lsl.w	r2, ip, r2
 8003722:	e7c9      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x24c>
    return 32U;
 8003724:	2220      	movs	r2, #32
 8003726:	e7f5      	b.n	8003714 <HAL_ADC_ConfigChannel+0x2a8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800372c:	b143      	cbz	r3, 8003740 <HAL_ADC_ConfigChannel+0x2d4>
  return __builtin_clz(value);
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800373c:	051b      	lsls	r3, r3, #20
 800373e:	e7c4      	b.n	80036ca <HAL_ADC_ConfigChannel+0x25e>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e7f6      	b.n	8003732 <HAL_ADC_ConfigChannel+0x2c6>
 8003744:	b9ce      	cbnz	r6, 800377a <HAL_ADC_ConfigChannel+0x30e>
 8003746:	0e99      	lsrs	r1, r3, #26
 8003748:	3101      	adds	r1, #1
 800374a:	0689      	lsls	r1, r1, #26
 800374c:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003750:	b9fe      	cbnz	r6, 8003792 <HAL_ADC_ConfigChannel+0x326>
 8003752:	0e9f      	lsrs	r7, r3, #26
 8003754:	3701      	adds	r7, #1
 8003756:	f007 071f 	and.w	r7, r7, #31
 800375a:	2201      	movs	r2, #1
 800375c:	40ba      	lsls	r2, r7
 800375e:	4311      	orrs	r1, r2
 8003760:	bbb6      	cbnz	r6, 80037d0 <HAL_ADC_ConfigChannel+0x364>
 8003762:	0e9b      	lsrs	r3, r3, #26
 8003764:	3301      	adds	r3, #1
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800376e:	3b1e      	subs	r3, #30
 8003770:	051b      	lsls	r3, r3, #20
 8003772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003776:	4319      	orrs	r1, r3
 8003778:	e7a8      	b.n	80036cc <HAL_ADC_ConfigChannel+0x260>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800377e:	b131      	cbz	r1, 800378e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003780:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003784:	3101      	adds	r1, #1
 8003786:	0689      	lsls	r1, r1, #26
 8003788:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800378c:	e7e0      	b.n	8003750 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 800378e:	2120      	movs	r1, #32
 8003790:	e7f8      	b.n	8003784 <HAL_ADC_ConfigChannel+0x318>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003796:	b14a      	cbz	r2, 80037ac <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	3201      	adds	r2, #1
 800379e:	f002 021f 	and.w	r2, r2, #31
 80037a2:	f04f 0c01 	mov.w	ip, #1
 80037a6:	fa0c f202 	lsl.w	r2, ip, r2
 80037aa:	e7d8      	b.n	800375e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80037ac:	2220      	movs	r2, #32
 80037ae:	e7f5      	b.n	800379c <HAL_ADC_ConfigChannel+0x330>
 80037b0:	03fff000 	.word	0x03fff000
 80037b4:	0007ffff 	.word	0x0007ffff
 80037b8:	407f0000 	.word	0x407f0000
 80037bc:	80080000 	.word	0x80080000
 80037c0:	50040300 	.word	0x50040300
 80037c4:	c7520000 	.word	0xc7520000
 80037c8:	cb840000 	.word	0xcb840000
 80037cc:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80037d4:	b15b      	cbz	r3, 80037ee <HAL_ADC_ConfigChannel+0x382>
  return __builtin_clz(value);
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037e4:	3b1e      	subs	r3, #30
 80037e6:	051b      	lsls	r3, r3, #20
 80037e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037ec:	e7c3      	b.n	8003776 <HAL_ADC_ConfigChannel+0x30a>
    return 32U;
 80037ee:	2320      	movs	r3, #32
 80037f0:	e7f3      	b.n	80037da <HAL_ADC_ConfigChannel+0x36e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037f2:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 80037f6:	f47f aebf 	bne.w	8003578 <HAL_ADC_ConfigChannel+0x10c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	4b26      	ldr	r3, [pc, #152]	@ (8003898 <HAL_ADC_ConfigChannel+0x42c>)
 80037fe:	429a      	cmp	r2, r3
 8003800:	d001      	beq.n	8003806 <HAL_ADC_ConfigChannel+0x39a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003802:	2000      	movs	r0, #0
 8003804:	e64a      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003806:	f440 0300 	orr.w	r3, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800380a:	4924      	ldr	r1, [pc, #144]	@ (800389c <HAL_ADC_ConfigChannel+0x430>)
 800380c:	688a      	ldr	r2, [r1, #8]
 800380e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003816:	4b22      	ldr	r3, [pc, #136]	@ (80038a0 <HAL_ADC_ConfigChannel+0x434>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	4a21      	ldr	r2, [pc, #132]	@ (80038a4 <HAL_ADC_ConfigChannel+0x438>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	3301      	adds	r3, #1
 8003826:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800382e:	9b01      	ldr	r3, [sp, #4]
 8003830:	b11b      	cbz	r3, 800383a <HAL_ADC_ConfigChannel+0x3ce>
            wait_loop_index--;
 8003832:	9b01      	ldr	r3, [sp, #4]
 8003834:	3b01      	subs	r3, #1
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	e7f9      	b.n	800382e <HAL_ADC_ConfigChannel+0x3c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800383a:	2000      	movs	r0, #0
 800383c:	e62e      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800383e:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8003842:	f47f ae9d 	bne.w	8003580 <HAL_ADC_ConfigChannel+0x114>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003846:	6822      	ldr	r2, [r4, #0]
 8003848:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <HAL_ADC_ConfigChannel+0x42c>)
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x3e6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384e:	2000      	movs	r0, #0
 8003850:	e624      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003852:	f040 7380 	orr.w	r3, r0, #16777216	@ 0x1000000
 8003856:	4911      	ldr	r1, [pc, #68]	@ (800389c <HAL_ADC_ConfigChannel+0x430>)
 8003858:	688a      	ldr	r2, [r1, #8]
 800385a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003862:	2000      	movs	r0, #0
}
 8003864:	e61a      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003866:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800386a:	d111      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x424>
        if (ADC_VREFINT_INSTANCE(hadc))
 800386c:	6822      	ldr	r2, [r4, #0]
 800386e:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <HAL_ADC_ConfigChannel+0x42c>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x40c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003874:	2000      	movs	r0, #0
 8003876:	e611      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003878:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800387c:	4907      	ldr	r1, [pc, #28]	@ (800389c <HAL_ADC_ConfigChannel+0x430>)
 800387e:	688a      	ldr	r2, [r1, #8]
 8003880:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003888:	2000      	movs	r0, #0
}
 800388a:	e607      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
 800388c:	2000      	movs	r0, #0
 800388e:	e605      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
 8003890:	2000      	movs	r0, #0
 8003892:	e603      	b.n	800349c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003894:	2002      	movs	r0, #2
 8003896:	e604      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x36>
 8003898:	50040000 	.word	0x50040000
 800389c:	50040300 	.word	0x50040300
 80038a0:	200000c4 	.word	0x200000c4
 80038a4:	053e2d63 	.word	0x053e2d63

080038a8 <ADC_Enable>:
{
 80038a8:	b530      	push	{r4, r5, lr}
 80038aa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038b0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	f012 0f01 	tst.w	r2, #1
 80038b8:	d158      	bne.n	800396c <ADC_Enable+0xc4>
 80038ba:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038bc:	6899      	ldr	r1, [r3, #8]
 80038be:	4a2d      	ldr	r2, [pc, #180]	@ (8003974 <ADC_Enable+0xcc>)
 80038c0:	4211      	tst	r1, r2
 80038c2:	d119      	bne.n	80038f8 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ca:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038d4:	4b28      	ldr	r3, [pc, #160]	@ (8003978 <ADC_Enable+0xd0>)
 80038d6:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038d8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80038dc:	d01c      	beq.n	8003918 <ADC_Enable+0x70>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038de:	4b27      	ldr	r3, [pc, #156]	@ (800397c <ADC_Enable+0xd4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <ADC_Enable+0xd8>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	099b      	lsrs	r3, r3, #6
 80038ec:	3301      	adds	r3, #1
 80038ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80038f6:	e00c      	b.n	8003912 <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80038fa:	f043 0310 	orr.w	r3, r3, #16
 80038fe:	6543      	str	r3, [r0, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003900:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8003908:	2001      	movs	r0, #1
 800390a:	e030      	b.n	800396e <ADC_Enable+0xc6>
        wait_loop_index--;
 800390c:	9b01      	ldr	r3, [sp, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003912:	9b01      	ldr	r3, [sp, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f9      	bne.n	800390c <ADC_Enable+0x64>
    tickstart = HAL_GetTick();
 8003918:	f7ff faba 	bl	8002e90 <HAL_GetTick>
 800391c:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f012 0f01 	tst.w	r2, #1
 8003926:	d11f      	bne.n	8003968 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	f012 0f01 	tst.w	r2, #1
 800392e:	d107      	bne.n	8003940 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003936:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003940:	f7ff faa6 	bl	8002e90 <HAL_GetTick>
 8003944:	1b43      	subs	r3, r0, r5
 8003946:	2b02      	cmp	r3, #2
 8003948:	d9e9      	bls.n	800391e <ADC_Enable+0x76>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f013 0f01 	tst.w	r3, #1
 8003952:	d1e4      	bne.n	800391e <ADC_Enable+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003954:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003956:	f043 0310 	orr.w	r3, r3, #16
 800395a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8003964:	2001      	movs	r0, #1
 8003966:	e002      	b.n	800396e <ADC_Enable+0xc6>
  return HAL_OK;
 8003968:	2000      	movs	r0, #0
 800396a:	e000      	b.n	800396e <ADC_Enable+0xc6>
 800396c:	2000      	movs	r0, #0
}
 800396e:	b003      	add	sp, #12
 8003970:	bd30      	pop	{r4, r5, pc}
 8003972:	bf00      	nop
 8003974:	8000003f 	.word	0x8000003f
 8003978:	50040300 	.word	0x50040300
 800397c:	200000c4 	.word	0x200000c4
 8003980:	053e2d63 	.word	0x053e2d63

08003984 <HAL_ADC_Start_DMA>:
{
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003988:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_ADC_Start_DMA+0xf4>)
 800398a:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800398c:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800398e:	6880      	ldr	r0, [r0, #8]
 8003990:	f010 0f04 	tst.w	r0, #4
 8003994:	d16c      	bne.n	8003a70 <HAL_ADC_Start_DMA+0xec>
 8003996:	460e      	mov	r6, r1
 8003998:	4617      	mov	r7, r2
 800399a:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 800399e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d066      	beq.n	8003a74 <HAL_ADC_Start_DMA+0xf0>
 80039a6:	2301      	movs	r3, #1
 80039a8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80039ac:	2d09      	cmp	r5, #9
 80039ae:	d805      	bhi.n	80039bc <HAL_ADC_Start_DMA+0x38>
 80039b0:	f240 2321 	movw	r3, #545	@ 0x221
 80039b4:	40eb      	lsrs	r3, r5
 80039b6:	f013 0f01 	tst.w	r3, #1
 80039ba:	d104      	bne.n	80039c6 <HAL_ADC_Start_DMA+0x42>
      __HAL_UNLOCK(hadc);
 80039bc:	2300      	movs	r3, #0
 80039be:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      tmp_hal_status = HAL_ERROR;
 80039c2:	2001      	movs	r0, #1
 80039c4:	e055      	b.n	8003a72 <HAL_ADC_Start_DMA+0xee>
      tmp_hal_status = ADC_Enable(hadc);
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7ff ff6e 	bl	80038a8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d14b      	bne.n	8003a68 <HAL_ADC_Start_DMA+0xe4>
        ADC_STATE_CLR_SET(hadc->State,
 80039d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039de:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	4a26      	ldr	r2, [pc, #152]	@ (8003a7c <HAL_ADC_Start_DMA+0xf8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d039      	beq.n	8003a5c <HAL_ADC_Start_DMA+0xd8>
 80039e8:	461a      	mov	r2, r3
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d000      	beq.n	80039f0 <HAL_ADC_Start_DMA+0x6c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ee:	b91d      	cbnz	r5, 80039f8 <HAL_ADC_Start_DMA+0x74>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039f6:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039fa:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80039fe:	d030      	beq.n	8003a62 <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a02:	f023 0306 	bic.w	r3, r3, #6
 8003a06:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a08:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <HAL_ADC_Start_DMA+0xfc>)
 8003a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a0e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003a10:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <HAL_ADC_Start_DMA+0x100>)
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a14:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003a16:	4a1c      	ldr	r2, [pc, #112]	@ (8003a88 <HAL_ADC_Start_DMA+0x104>)
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	221c      	movs	r2, #28
 8003a1e:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8003a20:	2300      	movs	r3, #0
 8003a22:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	6853      	ldr	r3, [r2, #4]
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
 8003a2e:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	68d3      	ldr	r3, [r2, #12]
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a3a:	6821      	ldr	r1, [r4, #0]
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	4632      	mov	r2, r6
 8003a40:	3140      	adds	r1, #64	@ 0x40
 8003a42:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003a44:	f000 f9e2 	bl	8003e0c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a48:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003a4a:	6893      	ldr	r3, [r2, #8]
 8003a4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	6093      	str	r3, [r2, #8]
}
 8003a5a:	e00a      	b.n	8003a72 <HAL_ADC_Start_DMA+0xee>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a5c:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003a60:	e7c3      	b.n	80039ea <HAL_ADC_Start_DMA+0x66>
          ADC_CLEAR_ERRORCODE(hadc);
 8003a62:	2300      	movs	r3, #0
 8003a64:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a66:	e7cf      	b.n	8003a08 <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8003a6e:	e000      	b.n	8003a72 <HAL_ADC_Start_DMA+0xee>
    tmp_hal_status = HAL_BUSY;
 8003a70:	2002      	movs	r0, #2
}
 8003a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8003a74:	2002      	movs	r0, #2
 8003a76:	e7fc      	b.n	8003a72 <HAL_ADC_Start_DMA+0xee>
 8003a78:	50040300 	.word	0x50040300
 8003a7c:	50040100 	.word	0x50040100
 8003a80:	080033c9 	.word	0x080033c9
 8003a84:	0800311d 	.word	0x0800311d
 8003a88:	08003451 	.word	0x08003451

08003a8c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003a8c:	4770      	bx	lr

08003a8e <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a90:	4770      	bx	lr

08003a92 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a92:	4770      	bx	lr

08003a94 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a98:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8003a9c:	2a01      	cmp	r2, #1
 8003a9e:	d07f      	beq.n	8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
{
 8003aa0:	b410      	push	{r4}
 8003aa2:	b09b      	sub	sp, #108	@ 0x6c
 8003aa4:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003aac:	2200      	movs	r2, #0
 8003aae:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ab0:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ab2:	6800      	ldr	r0, [r0, #0]
 8003ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003ab6:	4290      	cmp	r0, r2
 8003ab8:	d037      	beq.n	8003b2a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003aba:	2200      	movs	r2, #0
 8003abc:	9201      	str	r2, [sp, #4]

  if (tmp_hadc_slave.Instance == NULL)
 8003abe:	9a01      	ldr	r2, [sp, #4]
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	d036      	beq.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ac4:	6892      	ldr	r2, [r2, #8]
 8003ac6:	f012 0204 	ands.w	r2, r2, #4
 8003aca:	d000      	beq.n	8003ace <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003acc:	2201      	movs	r2, #1
 8003ace:	6880      	ldr	r0, [r0, #8]
 8003ad0:	f010 0f04 	tst.w	r0, #4
 8003ad4:	d150      	bne.n	8003b78 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d14e      	bne.n	8003b78 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ada:	680a      	ldr	r2, [r1, #0]
 8003adc:	2a00      	cmp	r2, #0
 8003ade:	d031      	beq.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0xac>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ae0:	4c31      	ldr	r4, [pc, #196]	@ (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003ae2:	68a2      	ldr	r2, [r4, #8]
 8003ae4:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ae8:	6848      	ldr	r0, [r1, #4]
 8003aea:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 8003aee:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8003af2:	4302      	orrs	r2, r0
 8003af4:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003af6:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	f012 0201 	ands.w	r2, r2, #1
 8003afe:	d000      	beq.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8003b00:	2201      	movs	r2, #1
 8003b02:	482a      	ldr	r0, [pc, #168]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8003b04:	6880      	ldr	r0, [r0, #8]
 8003b06:	f010 0f01 	tst.w	r0, #1
 8003b0a:	d141      	bne.n	8003b90 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b0c:	2a00      	cmp	r2, #0
 8003b0e:	d141      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b10:	4c25      	ldr	r4, [pc, #148]	@ (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003b12:	68a2      	ldr	r2, [r4, #8]
 8003b14:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003b18:	f022 020f 	bic.w	r2, r2, #15
 8003b1c:	6808      	ldr	r0, [r1, #0]
 8003b1e:	6889      	ldr	r1, [r1, #8]
 8003b20:	4301      	orrs	r1, r0
 8003b22:	430a      	orrs	r2, r1
 8003b24:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b26:	2000      	movs	r0, #0
 8003b28:	e02b      	b.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xea>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b2a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003b2e:	9201      	str	r2, [sp, #4]
 8003b30:	e7c5      	b.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b34:	f042 0220 	orr.w	r2, r2, #32
 8003b38:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
 8003b42:	e021      	b.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b44:	4918      	ldr	r1, [pc, #96]	@ (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003b46:	688a      	ldr	r2, [r1, #8]
 8003b48:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b4c:	608a      	str	r2, [r1, #8]
 8003b4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003b50:	6892      	ldr	r2, [r2, #8]
 8003b52:	f012 0201 	ands.w	r2, r2, #1
 8003b56:	d000      	beq.n	8003b5a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4914      	ldr	r1, [pc, #80]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8003b5c:	6889      	ldr	r1, [r1, #8]
 8003b5e:	f011 0f01 	tst.w	r1, #1
 8003b62:	d119      	bne.n	8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x100>

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b64:	b9d2      	cbnz	r2, 8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x104>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b66:	4910      	ldr	r1, [pc, #64]	@ (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8003b68:	688a      	ldr	r2, [r1, #8]
 8003b6a:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003b6e:	f022 020f 	bic.w	r2, r2, #15
 8003b72:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b74:	2000      	movs	r0, #0
 8003b76:	e004      	b.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xea>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003b88:	b01b      	add	sp, #108	@ 0x6c
 8003b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b8e:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b90:	2000      	movs	r0, #0
 8003b92:	e7f6      	b.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8003b94:	2000      	movs	r0, #0
 8003b96:	e7f4      	b.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8003b98:	2000      	movs	r0, #0
 8003b9a:	e7f2      	b.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e7f0      	b.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xea>
  __HAL_LOCK(hadc);
 8003ba0:	2002      	movs	r0, #2
}
 8003ba2:	4770      	bx	lr
 8003ba4:	50040000 	.word	0x50040000
 8003ba8:	50040300 	.word	0x50040300
 8003bac:	50040100 	.word	0x50040100

08003bb0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	db07      	blt.n	8003bc4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb4:	f000 021f 	and.w	r2, r0, #31
 8003bb8:	0940      	lsrs	r0, r0, #5
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	4a02      	ldr	r2, [pc, #8]	@ (8003bc8 <__NVIC_EnableIRQ+0x18>)
 8003bc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	db0c      	blt.n	8003bea <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd0:	f000 021f 	and.w	r2, r0, #31
 8003bd4:	0940      	lsrs	r0, r0, #5
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4093      	lsls	r3, r2
 8003bda:	3020      	adds	r0, #32
 8003bdc:	4a03      	ldr	r2, [pc, #12]	@ (8003bec <__NVIC_DisableIRQ+0x20>)
 8003bde:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003be6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	db08      	blt.n	8003c06 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf4:	0109      	lsls	r1, r1, #4
 8003bf6:	b2c9      	uxtb	r1, r1
 8003bf8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003bfc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003c00:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003c04:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c06:	f000 000f 	and.w	r0, r0, #15
 8003c0a:	0109      	lsls	r1, r1, #4
 8003c0c:	b2c9      	uxtb	r1, r1
 8003c0e:	4b01      	ldr	r3, [pc, #4]	@ (8003c14 <__NVIC_SetPriority+0x24>)
 8003c10:	5419      	strb	r1, [r3, r0]
  }
}
 8003c12:	4770      	bx	lr
 8003c14:	e000ed14 	.word	0xe000ed14

08003c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c18:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c1a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c1e:	f1c0 0c07 	rsb	ip, r0, #7
 8003c22:	f1bc 0f04 	cmp.w	ip, #4
 8003c26:	bf28      	it	cs
 8003c28:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2c:	1d03      	adds	r3, r0, #4
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d90f      	bls.n	8003c52 <NVIC_EncodePriority+0x3a>
 8003c32:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	f04f 3eff 	mov.w	lr, #4294967295
 8003c38:	fa0e f00c 	lsl.w	r0, lr, ip
 8003c3c:	ea21 0100 	bic.w	r1, r1, r0
 8003c40:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c42:	fa0e fe03 	lsl.w	lr, lr, r3
 8003c46:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8003c4a:	ea41 0002 	orr.w	r0, r1, r2
 8003c4e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c52:	2300      	movs	r3, #0
 8003c54:	e7ee      	b.n	8003c34 <NVIC_EncodePriority+0x1c>
	...

08003c58 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c58:	4a07      	ldr	r2, [pc, #28]	@ (8003c78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003c5a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c64:	0200      	lsls	r0, r0, #8
 8003c66:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c6a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003c6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003c74:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_NVIC_SetPriority+0x1c>)
 8003c82:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c84:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003c88:	f7ff ffc6 	bl	8003c18 <NVIC_EncodePriority>
 8003c8c:	4601      	mov	r1, r0
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f7ff ffae 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	bf00      	nop
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c9e:	f7ff ff87 	bl	8003bb0 <__NVIC_EnableIRQ>
}
 8003ca2:	bd08      	pop	{r3, pc}

08003ca4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ca4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ca6:	f7ff ff91 	bl	8003bcc <__NVIC_DisableIRQ>
}
 8003caa:	bd08      	pop	{r3, pc}

08003cac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cac:	3801      	subs	r0, #1
 8003cae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003cb2:	d20b      	bcs.n	8003ccc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cb4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003cb8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cba:	4a05      	ldr	r2, [pc, #20]	@ (8003cd0 <HAL_SYSTICK_Config+0x24>)
 8003cbc:	21f0      	movs	r1, #240	@ 0xf0
 8003cbe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc6:	2207      	movs	r2, #7
 8003cc8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003ccc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd4:	b430      	push	{r4, r5}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cd6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003cd8:	f004 0c1c 	and.w	ip, r4, #28
 8003cdc:	2401      	movs	r4, #1
 8003cde:	fa04 f40c 	lsl.w	r4, r4, ip
 8003ce2:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003ce4:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ce6:	6804      	ldr	r4, [r0, #0]
 8003ce8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cea:	6883      	ldr	r3, [r0, #8]
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d005      	beq.n	8003cfc <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003cf0:	6803      	ldr	r3, [r0, #0]
 8003cf2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003cf4:	6803      	ldr	r3, [r0, #0]
 8003cf6:	60da      	str	r2, [r3, #12]
  }
}
 8003cf8:	bc30      	pop	{r4, r5}
 8003cfa:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003cfc:	6803      	ldr	r3, [r0, #0]
 8003cfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003d00:	6803      	ldr	r3, [r0, #0]
 8003d02:	60d9      	str	r1, [r3, #12]
 8003d04:	e7f8      	b.n	8003cf8 <DMA_SetConfig+0x24>
	...

08003d08 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d071      	beq.n	8003df0 <HAL_DMA_Init+0xe8>
{
 8003d0c:	b410      	push	{r4}
 8003d0e:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d10:	6801      	ldr	r1, [r0, #0]
 8003d12:	4a38      	ldr	r2, [pc, #224]	@ (8003df4 <HAL_DMA_Init+0xec>)
 8003d14:	4291      	cmp	r1, r2
 8003d16:	d848      	bhi.n	8003daa <HAL_DMA_Init+0xa2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d18:	4a37      	ldr	r2, [pc, #220]	@ (8003df8 <HAL_DMA_Init+0xf0>)
 8003d1a:	440a      	add	r2, r1
 8003d1c:	4837      	ldr	r0, [pc, #220]	@ (8003dfc <HAL_DMA_Init+0xf4>)
 8003d1e:	fba0 0202 	umull	r0, r2, r0, r2
 8003d22:	0912      	lsrs	r2, r2, #4
 8003d24:	0092      	lsls	r2, r2, #2
 8003d26:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d28:	4a35      	ldr	r2, [pc, #212]	@ (8003e00 <HAL_DMA_Init+0xf8>)
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp = hdma->Instance->CCR;
 8003d32:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d34:	f36f 100e 	bfc	r0, #4, #11
  tmp |=  hdma->Init.Direction        |
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68dc      	ldr	r4, [r3, #12]
 8003d3c:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3e:	691c      	ldr	r4, [r3, #16]
 8003d40:	4322      	orrs	r2, r4
 8003d42:	695c      	ldr	r4, [r3, #20]
 8003d44:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d46:	699c      	ldr	r4, [r3, #24]
 8003d48:	4322      	orrs	r2, r4
 8003d4a:	69dc      	ldr	r4, [r3, #28]
 8003d4c:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4e:	6a1c      	ldr	r4, [r3, #32]
 8003d50:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8003d52:	4302      	orrs	r2, r0
  hdma->Instance->CCR = tmp;
 8003d54:	600a      	str	r2, [r1, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003d5c:	d01b      	beq.n	8003d96 <HAL_DMA_Init+0x8e>
    if (DMA1 == hdma->DmaBaseAddress)
 8003d5e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003d60:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <HAL_DMA_Init+0xf8>)
 8003d62:	4291      	cmp	r1, r2
 8003d64:	d02c      	beq.n	8003dc0 <HAL_DMA_Init+0xb8>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d66:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <HAL_DMA_Init+0xf8>)
 8003d68:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 8003d6c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003d6e:	f000 0c1c 	and.w	ip, r0, #28
 8003d72:	200f      	movs	r0, #15
 8003d74:	fa00 f00c 	lsl.w	r0, r0, ip
 8003d78:	ea21 0100 	bic.w	r1, r1, r0
 8003d7c:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d80:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 8003d84:	6858      	ldr	r0, [r3, #4]
 8003d86:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003d88:	f004 0c1c 	and.w	ip, r4, #28
 8003d8c:	fa00 f00c 	lsl.w	r0, r0, ip
 8003d90:	4301      	orrs	r1, r0
 8003d92:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d96:	2000      	movs	r0, #0
 8003d98:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  hdma->Lock = HAL_UNLOCKED;
 8003da0:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
}
 8003da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003da8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003daa:	4a16      	ldr	r2, [pc, #88]	@ (8003e04 <HAL_DMA_Init+0xfc>)
 8003dac:	440a      	add	r2, r1
 8003dae:	4813      	ldr	r0, [pc, #76]	@ (8003dfc <HAL_DMA_Init+0xf4>)
 8003db0:	fba0 0202 	umull	r0, r2, r0, r2
 8003db4:	0912      	lsrs	r2, r2, #4
 8003db6:	0092      	lsls	r2, r2, #2
 8003db8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dba:	4a13      	ldr	r2, [pc, #76]	@ (8003e08 <HAL_DMA_Init+0x100>)
 8003dbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dbe:	e7b5      	b.n	8003d2c <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003dc0:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
 8003dc4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003dc6:	f000 0c1c 	and.w	ip, r0, #28
 8003dca:	200f      	movs	r0, #15
 8003dcc:	fa00 f00c 	lsl.w	r0, r0, ip
 8003dd0:	ea21 0100 	bic.w	r1, r1, r0
 8003dd4:	f8c2 10a8 	str.w	r1, [r2, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003dd8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
 8003ddc:	6858      	ldr	r0, [r3, #4]
 8003dde:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003de0:	f004 0c1c 	and.w	ip, r4, #28
 8003de4:	fa00 f00c 	lsl.w	r0, r0, ip
 8003de8:	4301      	orrs	r1, r0
 8003dea:	f8c2 10a8 	str.w	r1, [r2, #168]	@ 0xa8
 8003dee:	e7d2      	b.n	8003d96 <HAL_DMA_Init+0x8e>
    return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
}
 8003df2:	4770      	bx	lr
 8003df4:	40020407 	.word	0x40020407
 8003df8:	bffdfff8 	.word	0xbffdfff8
 8003dfc:	cccccccd 	.word	0xcccccccd
 8003e00:	40020000 	.word	0x40020000
 8003e04:	bffdfbf8 	.word	0xbffdfbf8
 8003e08:	40020400 	.word	0x40020400

08003e0c <HAL_DMA_Start_IT>:
{
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003e10:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8003e14:	2801      	cmp	r0, #1
 8003e16:	d031      	beq.n	8003e7c <HAL_DMA_Start_IT+0x70>
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003e1e:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8003e22:	2801      	cmp	r0, #1
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8003e26:	2300      	movs	r3, #0
 8003e28:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 8003e2c:	2002      	movs	r0, #2
}
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e30:	2002      	movs	r0, #2
 8003e32:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e36:	2000      	movs	r0, #0
 8003e38:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003e3a:	6825      	ldr	r5, [r4, #0]
 8003e3c:	6828      	ldr	r0, [r5, #0]
 8003e3e:	f020 0001 	bic.w	r0, r0, #1
 8003e42:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7ff ff45 	bl	8003cd4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003e4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e4c:	b15b      	cbz	r3, 8003e66 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	6813      	ldr	r3, [r2, #0]
 8003e52:	f043 030e 	orr.w	r3, r3, #14
 8003e56:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003e58:	6822      	ldr	r2, [r4, #0]
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2000      	movs	r0, #0
 8003e64:	e7e3      	b.n	8003e2e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	f023 0304 	bic.w	r3, r3, #4
 8003e6e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e70:	6822      	ldr	r2, [r4, #0]
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f043 030a 	orr.w	r3, r3, #10
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e7ed      	b.n	8003e58 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8003e7c:	2002      	movs	r0, #2
 8003e7e:	e7d6      	b.n	8003e2e <HAL_DMA_Start_IT+0x22>

08003e80 <HAL_DMA_IRQHandler>:
{
 8003e80:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e82:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003e84:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003e86:	6804      	ldr	r4, [r0, #0]
 8003e88:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e8a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003e8c:	f003 031c 	and.w	r3, r3, #28
 8003e90:	2204      	movs	r2, #4
 8003e92:	409a      	lsls	r2, r3
 8003e94:	420a      	tst	r2, r1
 8003e96:	d015      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x44>
 8003e98:	f015 0f04 	tst.w	r5, #4
 8003e9c:	d012      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	f013 0f20 	tst.w	r3, #32
 8003ea4:	d103      	bne.n	8003eae <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003eae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003eb0:	f003 021c 	and.w	r2, r3, #28
 8003eb4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	4093      	lsls	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003ebc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003ebe:	b103      	cbz	r3, 8003ec2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8003ec0:	4798      	blx	r3
}
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	420a      	tst	r2, r1
 8003eca:	d01c      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x86>
 8003ecc:	f015 0f02 	tst.w	r5, #2
 8003ed0:	d019      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f013 0f20 	tst.w	r3, #32
 8003ed8:	d106      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f023 030a 	bic.w	r3, r3, #10
 8003ee0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ee8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003eea:	f003 021c 	and.w	r2, r3, #28
 8003eee:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	4093      	lsls	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8003efc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0df      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8003f02:	4798      	blx	r3
 8003f04:	e7dd      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f06:	2208      	movs	r2, #8
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	420b      	tst	r3, r1
 8003f0e:	d0d8      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x42>
 8003f10:	f015 0f08 	tst.w	r5, #8
 8003f14:	d0d5      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f023 030e 	bic.w	r3, r3, #14
 8003f1c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f1e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003f20:	f003 031c 	and.w	r3, r3, #28
 8003f24:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003f26:	2201      	movs	r2, #1
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f2e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003f30:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003f34:	2300      	movs	r3, #0
 8003f36:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8003f3a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0c0      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003f40:	4798      	blx	r3
  return;
 8003f42:	e7be      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x42>

08003f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f46:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8003f48:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4a:	e062      	b.n	8004012 <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f4c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f4e:	005e      	lsls	r6, r3, #1
 8003f50:	2403      	movs	r4, #3
 8003f52:	40b4      	lsls	r4, r6
 8003f54:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f58:	68cc      	ldr	r4, [r1, #12]
 8003f5a:	40b4      	lsls	r4, r6
 8003f5c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003f5e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f60:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f62:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f66:	684c      	ldr	r4, [r1, #4]
 8003f68:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003f6c:	409c      	lsls	r4, r3
 8003f6e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003f70:	6044      	str	r4, [r0, #4]
 8003f72:	e05f      	b.n	8004034 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f74:	08dd      	lsrs	r5, r3, #3
 8003f76:	3508      	adds	r5, #8
 8003f78:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f7c:	f003 0c07 	and.w	ip, r3, #7
 8003f80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f84:	f04f 0e0f 	mov.w	lr, #15
 8003f88:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003f8c:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f90:	690c      	ldr	r4, [r1, #16]
 8003f92:	fa04 f40c 	lsl.w	r4, r4, ip
 8003f96:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003f9a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003f9e:	e060      	b.n	8004062 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fa0:	2403      	movs	r4, #3
 8003fa2:	e000      	b.n	8003fa6 <HAL_GPIO_Init+0x62>
 8003fa4:	2400      	movs	r4, #0
 8003fa6:	fa04 f40e 	lsl.w	r4, r4, lr
 8003faa:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fac:	f10c 0c02 	add.w	ip, ip, #2
 8003fb0:	4d4f      	ldr	r5, [pc, #316]	@ (80040f0 <HAL_GPIO_Init+0x1ac>)
 8003fb2:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fb6:	4c4f      	ldr	r4, [pc, #316]	@ (80040f4 <HAL_GPIO_Init+0x1b0>)
 8003fb8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003fba:	43d4      	mvns	r4, r2
 8003fbc:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fc0:	684f      	ldr	r7, [r1, #4]
 8003fc2:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8003fc6:	d001      	beq.n	8003fcc <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003fc8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003fcc:	4d49      	ldr	r5, [pc, #292]	@ (80040f4 <HAL_GPIO_Init+0x1b0>)
 8003fce:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003fd0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003fd2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fd6:	684f      	ldr	r7, [r1, #4]
 8003fd8:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8003fdc:	d001      	beq.n	8003fe2 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003fde:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003fe2:	4d44      	ldr	r5, [pc, #272]	@ (80040f4 <HAL_GPIO_Init+0x1b0>)
 8003fe4:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fe6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003fe8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fec:	684f      	ldr	r7, [r1, #4]
 8003fee:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8003ff2:	d001      	beq.n	8003ff8 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8003ff4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003ff8:	4d3e      	ldr	r5, [pc, #248]	@ (80040f4 <HAL_GPIO_Init+0x1b0>)
 8003ffa:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8003ffc:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003ffe:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004000:	684e      	ldr	r6, [r1, #4]
 8004002:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8004006:	d001      	beq.n	800400c <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8004008:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800400c:	4a39      	ldr	r2, [pc, #228]	@ (80040f4 <HAL_GPIO_Init+0x1b0>)
 800400e:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8004010:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004012:	680a      	ldr	r2, [r1, #0]
 8004014:	fa32 f403 	lsrs.w	r4, r2, r3
 8004018:	d068      	beq.n	80040ec <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800401a:	f04f 0c01 	mov.w	ip, #1
 800401e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004022:	ea1c 0202 	ands.w	r2, ip, r2
 8004026:	d0f3      	beq.n	8004010 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004028:	684c      	ldr	r4, [r1, #4]
 800402a:	f004 0403 	and.w	r4, r4, #3
 800402e:	3c01      	subs	r4, #1
 8004030:	2c01      	cmp	r4, #1
 8004032:	d98b      	bls.n	8003f4c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004034:	684c      	ldr	r4, [r1, #4]
 8004036:	f004 0403 	and.w	r4, r4, #3
 800403a:	2c03      	cmp	r4, #3
 800403c:	d00c      	beq.n	8004058 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800403e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004040:	005d      	lsls	r5, r3, #1
 8004042:	f04f 0c03 	mov.w	ip, #3
 8004046:	fa0c fc05 	lsl.w	ip, ip, r5
 800404a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800404e:	688c      	ldr	r4, [r1, #8]
 8004050:	40ac      	lsls	r4, r5
 8004052:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004056:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004058:	684c      	ldr	r4, [r1, #4]
 800405a:	f004 0403 	and.w	r4, r4, #3
 800405e:	2c02      	cmp	r4, #2
 8004060:	d088      	beq.n	8003f74 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8004062:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004064:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004068:	f04f 0c03 	mov.w	ip, #3
 800406c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004070:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004074:	684c      	ldr	r4, [r1, #4]
 8004076:	f004 0403 	and.w	r4, r4, #3
 800407a:	fa04 f40e 	lsl.w	r4, r4, lr
 800407e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004082:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004084:	684c      	ldr	r4, [r1, #4]
 8004086:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800408a:	d0c1      	beq.n	8004010 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800408c:	4c1a      	ldr	r4, [pc, #104]	@ (80040f8 <HAL_GPIO_Init+0x1b4>)
 800408e:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8004090:	f045 0501 	orr.w	r5, r5, #1
 8004094:	6625      	str	r5, [r4, #96]	@ 0x60
 8004096:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8004098:	f004 0401 	and.w	r4, r4, #1
 800409c:	9401      	str	r4, [sp, #4]
 800409e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80040a0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80040a4:	f10c 0502 	add.w	r5, ip, #2
 80040a8:	4c11      	ldr	r4, [pc, #68]	@ (80040f0 <HAL_GPIO_Init+0x1ac>)
 80040aa:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040ae:	f003 0e03 	and.w	lr, r3, #3
 80040b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80040b6:	240f      	movs	r4, #15
 80040b8:	fa04 f40e 	lsl.w	r4, r4, lr
 80040bc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040c0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80040c4:	f43f af6e 	beq.w	8003fa4 <HAL_GPIO_Init+0x60>
 80040c8:	4c0c      	ldr	r4, [pc, #48]	@ (80040fc <HAL_GPIO_Init+0x1b8>)
 80040ca:	42a0      	cmp	r0, r4
 80040cc:	d00a      	beq.n	80040e4 <HAL_GPIO_Init+0x1a0>
 80040ce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80040d2:	42a0      	cmp	r0, r4
 80040d4:	d008      	beq.n	80040e8 <HAL_GPIO_Init+0x1a4>
 80040d6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80040da:	42a0      	cmp	r0, r4
 80040dc:	f43f af60 	beq.w	8003fa0 <HAL_GPIO_Init+0x5c>
 80040e0:	2407      	movs	r4, #7
 80040e2:	e760      	b.n	8003fa6 <HAL_GPIO_Init+0x62>
 80040e4:	2401      	movs	r4, #1
 80040e6:	e75e      	b.n	8003fa6 <HAL_GPIO_Init+0x62>
 80040e8:	2402      	movs	r4, #2
 80040ea:	e75c      	b.n	8003fa6 <HAL_GPIO_Init+0x62>
  }
}
 80040ec:	b003      	add	sp, #12
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40021000 	.word	0x40021000
 80040fc:	48000400 	.word	0x48000400

08004100 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004100:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004102:	fa31 f203 	lsrs.w	r2, r1, r3
 8004106:	d074      	beq.n	80041f2 <HAL_GPIO_DeInit+0xf2>
{
 8004108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410a:	e02e      	b.n	800416a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800410c:	2503      	movs	r5, #3
 800410e:	e000      	b.n	8004112 <HAL_GPIO_DeInit+0x12>
 8004110:	2500      	movs	r5, #0
 8004112:	fa05 f50c 	lsl.w	r5, r5, ip
 8004116:	42a5      	cmp	r5, r4
 8004118:	d04f      	beq.n	80041ba <HAL_GPIO_DeInit+0xba>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800411a:	6804      	ldr	r4, [r0, #0]
 800411c:	005d      	lsls	r5, r3, #1
 800411e:	f04f 0c03 	mov.w	ip, #3
 8004122:	fa0c fc05 	lsl.w	ip, ip, r5
 8004126:	ea44 040c 	orr.w	r4, r4, ip
 800412a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800412c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004130:	f10e 0e08 	add.w	lr, lr, #8
 8004134:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004138:	f003 0607 	and.w	r6, r3, #7
 800413c:	00b6      	lsls	r6, r6, #2
 800413e:	250f      	movs	r5, #15
 8004140:	40b5      	lsls	r5, r6
 8004142:	ea24 0405 	bic.w	r4, r4, r5
 8004146:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800414a:	6884      	ldr	r4, [r0, #8]
 800414c:	ea24 040c 	bic.w	r4, r4, ip
 8004150:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004152:	6844      	ldr	r4, [r0, #4]
 8004154:	ea24 0202 	bic.w	r2, r4, r2
 8004158:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800415a:	68c2      	ldr	r2, [r0, #12]
 800415c:	ea22 020c 	bic.w	r2, r2, ip
 8004160:	60c2      	str	r2, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004162:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004164:	fa31 f203 	lsrs.w	r2, r1, r3
 8004168:	d042      	beq.n	80041f0 <HAL_GPIO_DeInit+0xf0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800416a:	2201      	movs	r2, #1
 800416c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800416e:	ea12 0701 	ands.w	r7, r2, r1
 8004172:	d0f6      	beq.n	8004162 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004174:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8004178:	f10e 0502 	add.w	r5, lr, #2
 800417c:	4c1d      	ldr	r4, [pc, #116]	@ (80041f4 <HAL_GPIO_DeInit+0xf4>)
 800417e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004182:	f003 0c03 	and.w	ip, r3, #3
 8004186:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800418a:	250f      	movs	r5, #15
 800418c:	fa05 f60c 	lsl.w	r6, r5, ip
 8004190:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004192:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8004196:	d0bb      	beq.n	8004110 <HAL_GPIO_DeInit+0x10>
 8004198:	4d17      	ldr	r5, [pc, #92]	@ (80041f8 <HAL_GPIO_DeInit+0xf8>)
 800419a:	42a8      	cmp	r0, r5
 800419c:	d009      	beq.n	80041b2 <HAL_GPIO_DeInit+0xb2>
 800419e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80041a2:	42a8      	cmp	r0, r5
 80041a4:	d007      	beq.n	80041b6 <HAL_GPIO_DeInit+0xb6>
 80041a6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80041aa:	42a8      	cmp	r0, r5
 80041ac:	d0ae      	beq.n	800410c <HAL_GPIO_DeInit+0xc>
 80041ae:	2507      	movs	r5, #7
 80041b0:	e7af      	b.n	8004112 <HAL_GPIO_DeInit+0x12>
 80041b2:	2501      	movs	r5, #1
 80041b4:	e7ad      	b.n	8004112 <HAL_GPIO_DeInit+0x12>
 80041b6:	2502      	movs	r5, #2
 80041b8:	e7ab      	b.n	8004112 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80041ba:	4c10      	ldr	r4, [pc, #64]	@ (80041fc <HAL_GPIO_DeInit+0xfc>)
 80041bc:	6825      	ldr	r5, [r4, #0]
 80041be:	ea25 0507 	bic.w	r5, r5, r7
 80041c2:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80041c4:	6865      	ldr	r5, [r4, #4]
 80041c6:	ea25 0507 	bic.w	r5, r5, r7
 80041ca:	6065      	str	r5, [r4, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 80041cc:	68e5      	ldr	r5, [r4, #12]
 80041ce:	ea25 0507 	bic.w	r5, r5, r7
 80041d2:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80041d4:	68a5      	ldr	r5, [r4, #8]
 80041d6:	ea25 0507 	bic.w	r5, r5, r7
 80041da:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80041dc:	4f05      	ldr	r7, [pc, #20]	@ (80041f4 <HAL_GPIO_DeInit+0xf4>)
 80041de:	f10e 0402 	add.w	r4, lr, #2
 80041e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80041e6:	ea25 0506 	bic.w	r5, r5, r6
 80041ea:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80041ee:	e794      	b.n	800411a <HAL_GPIO_DeInit+0x1a>
  }
}
 80041f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f2:	4770      	bx	lr
 80041f4:	40010000 	.word	0x40010000
 80041f8:	48000400 	.word	0x48000400
 80041fc:	40010400 	.word	0x40010400

08004200 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004200:	6903      	ldr	r3, [r0, #16]
 8004202:	4219      	tst	r1, r3
 8004204:	d001      	beq.n	800420a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004206:	2001      	movs	r0, #1
 8004208:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800420a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800420c:	4770      	bx	lr

0800420e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800420e:	b10a      	cbz	r2, 8004214 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004210:	6181      	str	r1, [r0, #24]
 8004212:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004214:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004216:	4770      	bx	lr

08004218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004218:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800421a:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4203      	tst	r3, r0
 8004220:	d100      	bne.n	8004224 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004222:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004224:	4b02      	ldr	r3, [pc, #8]	@ (8004230 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004226:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004228:	f7fe f9a0 	bl	800256c <HAL_GPIO_EXTI_Callback>
}
 800422c:	e7f9      	b.n	8004222 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800422e:	bf00      	nop
 8004230:	40010400 	.word	0x40010400

08004234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004234:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004236:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <HAL_MspInit+0x2c>)
 8004238:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004240:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004242:	f002 0201 	and.w	r2, r2, #1
 8004246:	9200      	str	r2, [sp, #0]
 8004248:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800424c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004250:	659a      	str	r2, [r3, #88]	@ 0x58
 8004252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800425c:	b002      	add	sp, #8
 800425e:	4770      	bx	lr
 8004260:	40021000 	.word	0x40021000

08004264 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8004264:	6802      	ldr	r2, [r0, #0]
 8004266:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <HAL_ADC_MspInit+0x74>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d000      	beq.n	800426e <HAL_ADC_MspInit+0xa>
 800426c:	4770      	bx	lr
{
 800426e:	b510      	push	{r4, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004274:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8004278:	f5a3 33f8 	sub.w	r3, r3, #126976	@ 0x1f000
 800427c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800427e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004282:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	9b01      	ldr	r3, [sp, #4]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800428e:	4813      	ldr	r0, [pc, #76]	@ (80042dc <HAL_ADC_MspInit+0x78>)
 8004290:	4b13      	ldr	r3, [pc, #76]	@ (80042e0 <HAL_ADC_MspInit+0x7c>)
 8004292:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004294:	2300      	movs	r3, #0
 8004296:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004298:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800429a:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800429c:	2280      	movs	r2, #128	@ 0x80
 800429e:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042a4:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042aa:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80042ac:	2220      	movs	r2, #32
 80042ae:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80042b0:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80042b2:	f7ff fd29 	bl	8003d08 <HAL_DMA_Init>
 80042b6:	b960      	cbnz	r0, 80042d2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80042b8:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <HAL_ADC_MspInit+0x78>)
 80042ba:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80042bc:	629c      	str	r4, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	4611      	mov	r1, r2
 80042c2:	2012      	movs	r0, #18
 80042c4:	f7ff fcda 	bl	8003c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80042c8:	2012      	movs	r0, #18
 80042ca:	f7ff fce7 	bl	8003c9c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80042ce:	b002      	add	sp, #8
 80042d0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80042d2:	f7fe f96f 	bl	80025b4 <Error_Handler>
 80042d6:	e7ef      	b.n	80042b8 <HAL_ADC_MspInit+0x54>
 80042d8:	50040000 	.word	0x50040000
 80042dc:	200013a8 	.word	0x200013a8
 80042e0:	40020008 	.word	0x40020008

080042e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80042e4:	b510      	push	{r4, lr}
 80042e6:	b08e      	sub	sp, #56	@ 0x38
 80042e8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042ea:	2234      	movs	r2, #52	@ 0x34
 80042ec:	2100      	movs	r1, #0
 80042ee:	a801      	add	r0, sp, #4
 80042f0:	f005 fb26 	bl	8009940 <memset>
  if(hrtc->Instance==RTC)
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	4b11      	ldr	r3, [pc, #68]	@ (800433c <HAL_RTC_MspInit+0x58>)
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80042fc:	b00e      	add	sp, #56	@ 0x38
 80042fe:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004300:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004304:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800430a:	930d      	str	r3, [sp, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800430c:	a801      	add	r0, sp, #4
 800430e:	f001 fe3d 	bl	8005f8c <HAL_RCCEx_PeriphCLKConfig>
 8004312:	b978      	cbnz	r0, 8004334 <HAL_RTC_MspInit+0x50>
    __HAL_RCC_RTC_ENABLE();
 8004314:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <HAL_RTC_MspInit+0x5c>)
 8004316:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800431a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800431e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004322:	2200      	movs	r2, #0
 8004324:	4611      	mov	r1, r2
 8004326:	2003      	movs	r0, #3
 8004328:	f7ff fca8 	bl	8003c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800432c:	2003      	movs	r0, #3
 800432e:	f7ff fcb5 	bl	8003c9c <HAL_NVIC_EnableIRQ>
}
 8004332:	e7e3      	b.n	80042fc <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8004334:	f7fe f93e 	bl	80025b4 <Error_Handler>
 8004338:	e7ec      	b.n	8004314 <HAL_RTC_MspInit+0x30>
 800433a:	bf00      	nop
 800433c:	40002800 	.word	0x40002800
 8004340:	40021000 	.word	0x40021000

08004344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004344:	b500      	push	{lr}
 8004346:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004348:	2300      	movs	r3, #0
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	9305      	str	r3, [sp, #20]
 8004350:	9306      	str	r3, [sp, #24]
 8004352:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8004354:	6802      	ldr	r2, [r0, #0]
 8004356:	4b13      	ldr	r3, [pc, #76]	@ (80043a4 <HAL_SPI_MspInit+0x60>)
 8004358:	429a      	cmp	r2, r3
 800435a:	d002      	beq.n	8004362 <HAL_SPI_MspInit+0x1e>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800435c:	b009      	add	sp, #36	@ 0x24
 800435e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004362:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8004366:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004368:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800436c:	661a      	str	r2, [r3, #96]	@ 0x60
 800436e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004370:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004374:	9201      	str	r2, [sp, #4]
 8004376:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004378:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	9302      	str	r3, [sp, #8]
 8004388:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800438a:	2382      	movs	r3, #130	@ 0x82
 800438c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438e:	2302      	movs	r3, #2
 8004390:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004392:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004394:	2305      	movs	r3, #5
 8004396:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004398:	a903      	add	r1, sp, #12
 800439a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800439e:	f7ff fdd1 	bl	8003f44 <HAL_GPIO_Init>
}
 80043a2:	e7db      	b.n	800435c <HAL_SPI_MspInit+0x18>
 80043a4:	40013000 	.word	0x40013000

080043a8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80043a8:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI1)
 80043aa:	6802      	ldr	r2, [r0, #0]
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <HAL_SPI_MspDeInit+0x24>)
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d000      	beq.n	80043b4 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80043b2:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI1_CLK_DISABLE();
 80043b4:	4a06      	ldr	r2, [pc, #24]	@ (80043d0 <HAL_SPI_MspDeInit+0x28>)
 80043b6:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80043b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043bc:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_7);
 80043be:	2182      	movs	r1, #130	@ 0x82
 80043c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043c4:	f7ff fe9c 	bl	8004100 <HAL_GPIO_DeInit>
}
 80043c8:	e7f3      	b.n	80043b2 <HAL_SPI_MspDeInit+0xa>
 80043ca:	bf00      	nop
 80043cc:	40013000 	.word	0x40013000
 80043d0:	40021000 	.word	0x40021000

080043d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043d4:	b510      	push	{r4, lr}
 80043d6:	b094      	sub	sp, #80	@ 0x50
 80043d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043da:	2100      	movs	r1, #0
 80043dc:	910f      	str	r1, [sp, #60]	@ 0x3c
 80043de:	9110      	str	r1, [sp, #64]	@ 0x40
 80043e0:	9111      	str	r1, [sp, #68]	@ 0x44
 80043e2:	9112      	str	r1, [sp, #72]	@ 0x48
 80043e4:	9113      	str	r1, [sp, #76]	@ 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043e6:	2234      	movs	r2, #52	@ 0x34
 80043e8:	a802      	add	r0, sp, #8
 80043ea:	f005 faa9 	bl	8009940 <memset>
  if(huart->Instance==USART2)
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	4b18      	ldr	r3, [pc, #96]	@ (8004454 <HAL_UART_MspInit+0x80>)
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d001      	beq.n	80043fa <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80043f6:	b014      	add	sp, #80	@ 0x50
 80043f8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80043fa:	2302      	movs	r3, #2
 80043fc:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043fe:	a802      	add	r0, sp, #8
 8004400:	f001 fdc4 	bl	8005f8c <HAL_RCCEx_PeriphCLKConfig>
 8004404:	bb10      	cbnz	r0, 800444c <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004406:	4b14      	ldr	r3, [pc, #80]	@ (8004458 <HAL_UART_MspInit+0x84>)
 8004408:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800440a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800440e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004410:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004412:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004416:	9200      	str	r2, [sp, #0]
 8004418:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800441a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800442c:	2304      	movs	r3, #4
 800442e:	930f      	str	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004430:	2312      	movs	r3, #18
 8004432:	9310      	str	r3, [sp, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004434:	2301      	movs	r3, #1
 8004436:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004438:	2303      	movs	r3, #3
 800443a:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800443c:	2307      	movs	r3, #7
 800443e:	9313      	str	r3, [sp, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004440:	a90f      	add	r1, sp, #60	@ 0x3c
 8004442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004446:	f7ff fd7d 	bl	8003f44 <HAL_GPIO_Init>
}
 800444a:	e7d4      	b.n	80043f6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800444c:	f7fe f8b2 	bl	80025b4 <Error_Handler>
 8004450:	e7d9      	b.n	8004406 <HAL_UART_MspInit+0x32>
 8004452:	bf00      	nop
 8004454:	40004400 	.word	0x40004400
 8004458:	40021000 	.word	0x40021000

0800445c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800445c:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800445e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004462:	d043      	beq.n	80044ec <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004464:	6804      	ldr	r4, [r0, #0]
 8004466:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 800446a:	f891 c000 	ldrb.w	ip, [r1]
 800446e:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8004472:	fa1e f383 	uxtah	r3, lr, r3
 8004476:	4423      	add	r3, r4
 8004478:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	@ 0x402
 800447c:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8004480:	698b      	ldr	r3, [r1, #24]
 8004482:	42a3      	cmp	r3, r4
 8004484:	d328      	bcc.n	80044d8 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8004486:	1b1b      	subs	r3, r3, r4
 8004488:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800448a:	698b      	ldr	r3, [r1, #24]
 800448c:	b97b      	cbnz	r3, 80044ae <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800448e:	6805      	ldr	r5, [r0, #0]
 8004490:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800449a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044aa:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044ae:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80044b2:	d00e      	beq.n	80044d2 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044b4:	6802      	ldr	r2, [r0, #0]
 80044b6:	780d      	ldrb	r5, [r1, #0]
 80044b8:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044ce:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80044d2:	b924      	cbnz	r4, 80044de <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80044d4:	4620      	mov	r0, r4
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	618b      	str	r3, [r1, #24]
 80044dc:	e7d5      	b.n	800448a <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044de:	4623      	mov	r3, r4
 80044e0:	890a      	ldrh	r2, [r1, #8]
 80044e2:	6949      	ldr	r1, [r1, #20]
 80044e4:	6800      	ldr	r0, [r0, #0]
 80044e6:	f003 fe75 	bl	80081d4 <USB_ReadPMA>
 80044ea:	e7f3      	b.n	80044d4 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044ec:	6804      	ldr	r4, [r0, #0]
 80044ee:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 80044f2:	f891 c000 	ldrb.w	ip, [r1]
 80044f6:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80044fa:	fa1e f383 	uxtah	r3, lr, r3
 80044fe:	4423      	add	r3, r4
 8004500:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	@ 0x406
 8004504:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8004508:	698b      	ldr	r3, [r1, #24]
 800450a:	42a3      	cmp	r3, r4
 800450c:	d32f      	bcc.n	800456e <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 800450e:	1b1b      	subs	r3, r3, r4
 8004510:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8004512:	698b      	ldr	r3, [r1, #24]
 8004514:	b97b      	cbnz	r3, 8004536 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004516:	6805      	ldr	r5, [r0, #0]
 8004518:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004526:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800452a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004532:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004536:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800453a:	d10f      	bne.n	800455c <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800453c:	6802      	ldr	r2, [r0, #0]
 800453e:	f891 c000 	ldrb.w	ip, [r1]
 8004542:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800454c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004554:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004558:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 800455c:	2c00      	cmp	r4, #0
 800455e:	d0b9      	beq.n	80044d4 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004560:	4623      	mov	r3, r4
 8004562:	894a      	ldrh	r2, [r1, #10]
 8004564:	6949      	ldr	r1, [r1, #20]
 8004566:	6800      	ldr	r0, [r0, #0]
 8004568:	f003 fe34 	bl	80081d4 <USB_ReadPMA>
 800456c:	e7b2      	b.n	80044d4 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	618b      	str	r3, [r1, #24]
 8004572:	e7ce      	b.n	8004512 <HAL_PCD_EP_DB_Receive+0xb6>

08004574 <HAL_PCD_Init>:
{
 8004574:	b538      	push	{r3, r4, r5, lr}
  if (hpcd == NULL)
 8004576:	2800      	cmp	r0, #0
 8004578:	d075      	beq.n	8004666 <HAL_PCD_Init+0xf2>
 800457a:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800457c:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8004580:	b1a3      	cbz	r3, 80045ac <HAL_PCD_Init+0x38>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004582:	2303      	movs	r3, #3
 8004584:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  hpcd->Init.dma_enable = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 800458c:	6820      	ldr	r0, [r4, #0]
 800458e:	f002 ff23 	bl	80073d8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004592:	4623      	mov	r3, r4
 8004594:	f853 0b04 	ldr.w	r0, [r3], #4
 8004598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800459a:	f002 ff0d 	bl	80073b8 <USB_CoreInit>
 800459e:	b150      	cbz	r0, 80045b6 <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045a0:	2302      	movs	r3, #2
 80045a2:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 80045a6:	2501      	movs	r5, #1
}
 80045a8:	4628      	mov	r0, r5
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80045ac:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
    HAL_PCD_MspInit(hpcd);
 80045b0:	f004 f944 	bl	800883c <HAL_PCD_MspInit>
 80045b4:	e7e5      	b.n	8004582 <HAL_PCD_Init+0xe>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80045b6:	2100      	movs	r1, #0
 80045b8:	6820      	ldr	r0, [r4, #0]
 80045ba:	f002 ff17 	bl	80073ec <USB_SetCurrentMode>
 80045be:	4603      	mov	r3, r0
 80045c0:	b9a8      	cbnz	r0, 80045ee <HAL_PCD_Init+0x7a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c2:	4602      	mov	r2, r0
 80045c4:	7920      	ldrb	r0, [r4, #4]
 80045c6:	4290      	cmp	r0, r2
 80045c8:	d916      	bls.n	80045f8 <HAL_PCD_Init+0x84>
    hpcd->IN_ep[i].is_in = 1U;
 80045ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80045ce:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80045d2:	2001      	movs	r0, #1
 80045d4:	7448      	strb	r0, [r1, #17]
    hpcd->IN_ep[i].num = i;
 80045d6:	740a      	strb	r2, [r1, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045d8:	2000      	movs	r0, #0
 80045da:	74c8      	strb	r0, [r1, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045dc:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045de:	6248      	str	r0, [r1, #36]	@ 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 80045e0:	3201      	adds	r2, #1
 80045e2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80045e6:	00c9      	lsls	r1, r1, #3
 80045e8:	5060      	str	r0, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	e7ea      	b.n	80045c4 <HAL_PCD_Init+0x50>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045ee:	2302      	movs	r3, #2
 80045f0:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 80045f4:	2501      	movs	r5, #1
 80045f6:	e7d7      	b.n	80045a8 <HAL_PCD_Init+0x34>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f8:	4298      	cmp	r0, r3
 80045fa:	d917      	bls.n	800462c <HAL_PCD_Init+0xb8>
    hpcd->OUT_ep[i].is_in = 0U;
 80045fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004600:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8004604:	2100      	movs	r1, #0
 8004606:	f882 1151 	strb.w	r1, [r2, #337]	@ 0x151
    hpcd->OUT_ep[i].num = i;
 800460a:	f882 3150 	strb.w	r3, [r2, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800460e:	f882 1153 	strb.w	r1, [r2, #339]	@ 0x153
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004612:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004616:	f8c2 1164 	str.w	r1, [r2, #356]	@ 0x164
    hpcd->OUT_ep[i].xfer_len = 0U;
 800461a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800461e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8004622:	f8c2 1168 	str.w	r1, [r2, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004626:	3301      	adds	r3, #1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e7e5      	b.n	80045f8 <HAL_PCD_Init+0x84>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800462c:	4623      	mov	r3, r4
 800462e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004634:	f002 fedc 	bl	80073f0 <USB_DevInit>
 8004638:	4605      	mov	r5, r0
 800463a:	b958      	cbnz	r0, 8004654 <HAL_PCD_Init+0xe0>
  hpcd->USB_Address = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	7363      	strb	r3, [r4, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004640:	2301      	movs	r3, #1
 8004642:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  if (hpcd->Init.lpm_enable == 1U)
 8004646:	7ae3      	ldrb	r3, [r4, #11]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d008      	beq.n	800465e <HAL_PCD_Init+0xea>
  (void)USB_DevDisconnect(hpcd->Instance);
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	f003 fadc 	bl	8007c0a <USB_DevDisconnect>
  return HAL_OK;
 8004652:	e7a9      	b.n	80045a8 <HAL_PCD_Init+0x34>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004654:	2302      	movs	r3, #2
 8004656:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 800465a:	2501      	movs	r5, #1
 800465c:	e7a4      	b.n	80045a8 <HAL_PCD_Init+0x34>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800465e:	4620      	mov	r0, r4
 8004660:	f000 feff 	bl	8005462 <HAL_PCDEx_ActivateLPM>
 8004664:	e7f2      	b.n	800464c <HAL_PCD_Init+0xd8>
    return HAL_ERROR;
 8004666:	2501      	movs	r5, #1
 8004668:	e79e      	b.n	80045a8 <HAL_PCD_Init+0x34>

0800466a <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 800466a:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 800466e:	2b01      	cmp	r3, #1
 8004670:	d00e      	beq.n	8004690 <HAL_PCD_Start+0x26>
{
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004676:	2301      	movs	r3, #1
 8004678:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800467c:	6800      	ldr	r0, [r0, #0]
 800467e:	f002 fea2 	bl	80073c6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004682:	6820      	ldr	r0, [r4, #0]
 8004684:	f003 fab6 	bl	8007bf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004688:	2000      	movs	r0, #0
 800468a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800468e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004690:	2002      	movs	r0, #2
}
 8004692:	4770      	bx	lr

08004694 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	4605      	mov	r5, r0
 8004698:	460c      	mov	r4, r1
 800469a:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800469c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80046a0:	f000 8120 	beq.w	80048e4 <HAL_PCD_EP_DB_Transmit+0x250>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046a4:	6802      	ldr	r2, [r0, #0]
 80046a6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80046aa:	7809      	ldrb	r1, [r1, #0]
 80046ac:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80046b0:	fa1c f383 	uxtah	r3, ip, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80046ba:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 80046be:	69a3      	ldr	r3, [r4, #24]
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d92c      	bls.n	800471e <HAL_PCD_EP_DB_Transmit+0x8a>
    {
      ep->xfer_len -= TxPctSize;
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046c8:	69a0      	ldr	r0, [r4, #24]
 80046ca:	b358      	cbz	r0, 8004724 <HAL_PCD_EP_DB_Transmit+0x90>
      return HAL_OK;
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046cc:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80046d0:	d00d      	beq.n	80046ee <HAL_PCD_EP_DB_Transmit+0x5a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046d2:	6828      	ldr	r0, [r5, #0]
 80046d4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ea:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046ee:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	f000 808d 	beq.w	8004812 <HAL_PCD_EP_DB_Transmit+0x17e>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80046f8:	682a      	ldr	r2, [r5, #0]
 80046fa:	7821      	ldrb	r1, [r4, #0]
 80046fc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800470a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800470e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004716:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800471a:	2000      	movs	r0, #0
 800471c:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	61a3      	str	r3, [r4, #24]
 8004722:	e7d1      	b.n	80046c8 <HAL_PCD_EP_DB_Transmit+0x34>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004724:	7863      	ldrb	r3, [r4, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d148      	bne.n	80047bc <HAL_PCD_EP_DB_Transmit+0x128>
 800472a:	682a      	ldr	r2, [r5, #0]
 800472c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004730:	fa12 f383 	uxtah	r3, r2, r3
 8004734:	4463      	add	r3, ip
 8004736:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 800473a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800473e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004742:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004746:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800474a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800474e:	b292      	uxth	r2, r2
 8004750:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004754:	682a      	ldr	r2, [r5, #0]
 8004756:	7863      	ldrb	r3, [r4, #1]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d13b      	bne.n	80047d4 <HAL_PCD_EP_DB_Transmit+0x140>
 800475c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004760:	fa12 f383 	uxtah	r3, r2, r3
 8004764:	7822      	ldrb	r2, [r4, #0]
 8004766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800476a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800476e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004772:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004776:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 800477a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800477e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004782:	b292      	uxth	r2, r2
 8004784:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
      if (ep->type == EP_TYPE_BULK)
 8004788:	78e3      	ldrb	r3, [r4, #3]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d02f      	beq.n	80047ee <HAL_PCD_EP_DB_Transmit+0x15a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800478e:	7821      	ldrb	r1, [r4, #0]
 8004790:	4628      	mov	r0, r5
 8004792:	f004 f8b5 	bl	8008900 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004796:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 800479a:	d0be      	beq.n	800471a <HAL_PCD_EP_DB_Transmit+0x86>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800479c:	682a      	ldr	r2, [r5, #0]
 800479e:	7821      	ldrb	r1, [r4, #0]
 80047a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      return HAL_OK;
 80047ba:	e7ae      	b.n	800471a <HAL_PCD_EP_DB_Transmit+0x86>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d1c9      	bne.n	8004754 <HAL_PCD_EP_DB_Transmit+0xc0>
 80047c0:	682a      	ldr	r2, [r5, #0]
 80047c2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80047c6:	fa12 f383 	uxtah	r3, r2, r3
 80047ca:	4463      	add	r3, ip
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80047d2:	e7bf      	b.n	8004754 <HAL_PCD_EP_DB_Transmit+0xc0>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d1d7      	bne.n	8004788 <HAL_PCD_EP_DB_Transmit+0xf4>
 80047d8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80047dc:	fa12 f383 	uxtah	r3, r2, r3
 80047e0:	7822      	ldrb	r2, [r4, #0]
 80047e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80047ec:	e7cc      	b.n	8004788 <HAL_PCD_EP_DB_Transmit+0xf4>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80047ee:	682a      	ldr	r2, [r5, #0]
 80047f0:	7821      	ldrb	r1, [r4, #0]
 80047f2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004800:	f083 0320 	eor.w	r3, r3, #32
 8004804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800480c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004810:	e7bd      	b.n	800478e <HAL_PCD_EP_DB_Transmit+0xfa>
        ep->xfer_buff += TxPctSize;
 8004812:	6963      	ldr	r3, [r4, #20]
 8004814:	4413      	add	r3, r2
 8004816:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8004818:	69e3      	ldr	r3, [r4, #28]
 800481a:	4413      	add	r3, r2
 800481c:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800481e:	6a21      	ldr	r1, [r4, #32]
 8004820:	6923      	ldr	r3, [r4, #16]
 8004822:	4299      	cmp	r1, r3
 8004824:	d31d      	bcc.n	8004862 <HAL_PCD_EP_DB_Transmit+0x1ce>
          ep->xfer_len_db -= len;
 8004826:	1ac9      	subs	r1, r1, r3
 8004828:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800482a:	7862      	ldrb	r2, [r4, #1]
 800482c:	2a00      	cmp	r2, #0
 800482e:	d144      	bne.n	80048ba <HAL_PCD_EP_DB_Transmit+0x226>
 8004830:	6829      	ldr	r1, [r5, #0]
 8004832:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004836:	fa11 f282 	uxtah	r2, r1, r2
 800483a:	7821      	ldrb	r1, [r4, #0]
 800483c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004840:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 8004844:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004848:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 800484c:	b9ab      	cbnz	r3, 800487a <HAL_PCD_EP_DB_Transmit+0x1e6>
 800484e:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 8004852:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004856:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800485a:	b289      	uxth	r1, r1
 800485c:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8004860:	e02d      	b.n	80048be <HAL_PCD_EP_DB_Transmit+0x22a>
        else if (ep->xfer_len_db == 0U)
 8004862:	b921      	cbnz	r1, 800486e <HAL_PCD_EP_DB_Transmit+0x1da>
          ep->xfer_fill_db = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 800486a:	4613      	mov	r3, r2
 800486c:	e7dd      	b.n	800482a <HAL_PCD_EP_DB_Transmit+0x196>
          ep->xfer_fill_db = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004874:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8004876:	460b      	mov	r3, r1
 8004878:	e7d7      	b.n	800482a <HAL_PCD_EP_DB_Transmit+0x196>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800487a:	2b3e      	cmp	r3, #62	@ 0x3e
 800487c:	d80d      	bhi.n	800489a <HAL_PCD_EP_DB_Transmit+0x206>
 800487e:	0859      	lsrs	r1, r3, #1
 8004880:	f013 0f01 	tst.w	r3, #1
 8004884:	d000      	beq.n	8004888 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8004886:	3101      	adds	r1, #1
 8004888:	f8b2 0402 	ldrh.w	r0, [r2, #1026]	@ 0x402
 800488c:	b280      	uxth	r0, r0
 800488e:	0289      	lsls	r1, r1, #10
 8004890:	b289      	uxth	r1, r1
 8004892:	4301      	orrs	r1, r0
 8004894:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8004898:	e011      	b.n	80048be <HAL_PCD_EP_DB_Transmit+0x22a>
 800489a:	0958      	lsrs	r0, r3, #5
 800489c:	f013 0f1f 	tst.w	r3, #31
 80048a0:	d100      	bne.n	80048a4 <HAL_PCD_EP_DB_Transmit+0x210>
 80048a2:	3801      	subs	r0, #1
 80048a4:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 80048a8:	b289      	uxth	r1, r1
 80048aa:	0280      	lsls	r0, r0, #10
 80048ac:	b280      	uxth	r0, r0
 80048ae:	4301      	orrs	r1, r0
 80048b0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80048b4:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 80048b8:	e001      	b.n	80048be <HAL_PCD_EP_DB_Transmit+0x22a>
 80048ba:	2a01      	cmp	r2, #1
 80048bc:	d006      	beq.n	80048cc <HAL_PCD_EP_DB_Transmit+0x238>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8922      	ldrh	r2, [r4, #8]
 80048c2:	6961      	ldr	r1, [r4, #20]
 80048c4:	6828      	ldr	r0, [r5, #0]
 80048c6:	f003 f9ae 	bl	8007c26 <USB_WritePMA>
 80048ca:	e715      	b.n	80046f8 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048cc:	6829      	ldr	r1, [r5, #0]
 80048ce:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 80048d2:	fa11 f282 	uxtah	r2, r1, r2
 80048d6:	7821      	ldrb	r1, [r4, #0]
 80048d8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80048dc:	b299      	uxth	r1, r3
 80048de:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 80048e2:	e7ec      	b.n	80048be <HAL_PCD_EP_DB_Transmit+0x22a>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048e4:	6802      	ldr	r2, [r0, #0]
 80048e6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80048ea:	7809      	ldrb	r1, [r1, #0]
 80048ec:	00c8      	lsls	r0, r1, #3
 80048ee:	fa10 f383 	uxtah	r3, r0, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80048f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 80048fc:	69a3      	ldr	r3, [r4, #24]
 80048fe:	4293      	cmp	r3, r2
 8004900:	d346      	bcc.n	8004990 <HAL_PCD_EP_DB_Transmit+0x2fc>
      ep->xfer_len -= TxPctSize;
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8004906:	69a3      	ldr	r3, [r4, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d044      	beq.n	8004996 <HAL_PCD_EP_DB_Transmit+0x302>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800490c:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004910:	d10d      	bne.n	800492e <HAL_PCD_EP_DB_Transmit+0x29a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004912:	6828      	ldr	r0, [r5, #0]
 8004914:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800491e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004922:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800492a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800492e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8004932:	2b01      	cmp	r3, #1
 8004934:	f47f aee0 	bne.w	80046f8 <HAL_PCD_EP_DB_Transmit+0x64>
        ep->xfer_buff += TxPctSize;
 8004938:	6963      	ldr	r3, [r4, #20]
 800493a:	4413      	add	r3, r2
 800493c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 800493e:	69e3      	ldr	r3, [r4, #28]
 8004940:	4413      	add	r3, r2
 8004942:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8004944:	6a21      	ldr	r1, [r4, #32]
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	4299      	cmp	r1, r3
 800494a:	f0c0 809c 	bcc.w	8004a86 <HAL_PCD_EP_DB_Transmit+0x3f2>
          ep->xfer_len_db -= len;
 800494e:	1ac9      	subs	r1, r1, r3
 8004950:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004952:	6829      	ldr	r1, [r5, #0]
 8004954:	7862      	ldrb	r2, [r4, #1]
 8004956:	2a00      	cmp	r2, #0
 8004958:	f040 80c1 	bne.w	8004ade <HAL_PCD_EP_DB_Transmit+0x44a>
 800495c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004960:	fa11 f282 	uxtah	r2, r1, r2
 8004964:	7821      	ldrb	r1, [r4, #0]
 8004966:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800496a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 800496e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004972:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 8091 	bne.w	8004a9e <HAL_PCD_EP_DB_Transmit+0x40a>
 800497c:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8004980:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004984:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004988:	b289      	uxth	r1, r1
 800498a:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 800498e:	e0a8      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x44e>
      ep->xfer_len = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	61a3      	str	r3, [r4, #24]
 8004994:	e7b7      	b.n	8004906 <HAL_PCD_EP_DB_Transmit+0x272>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004996:	7863      	ldrb	r3, [r4, #1]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d149      	bne.n	8004a30 <HAL_PCD_EP_DB_Transmit+0x39c>
 800499c:	682a      	ldr	r2, [r5, #0]
 800499e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80049a2:	fa12 f383 	uxtah	r3, r2, r3
 80049a6:	4403      	add	r3, r0
 80049a8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80049ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80049b0:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 80049b4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 80049b8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80049bc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80049c0:	b292      	uxth	r2, r2
 80049c2:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049c6:	682a      	ldr	r2, [r5, #0]
 80049c8:	7863      	ldrb	r3, [r4, #1]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d13c      	bne.n	8004a48 <HAL_PCD_EP_DB_Transmit+0x3b4>
 80049ce:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80049d2:	fa12 f383 	uxtah	r3, r2, r3
 80049d6:	7822      	ldrb	r2, [r4, #0]
 80049d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049dc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80049e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80049e4:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 80049e8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 80049ec:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80049f0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80049f4:	b292      	uxth	r2, r2
 80049f6:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
      if (ep->type == EP_TYPE_BULK)
 80049fa:	78e3      	ldrb	r3, [r4, #3]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d030      	beq.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3ce>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a00:	7821      	ldrb	r1, [r4, #0]
 8004a02:	4628      	mov	r0, r5
 8004a04:	f003 ff7c 	bl	8008900 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a08:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004a0c:	f47f ae85 	bne.w	800471a <HAL_PCD_EP_DB_Transmit+0x86>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a10:	682a      	ldr	r2, [r5, #0]
 8004a12:	7821      	ldrb	r1, [r4, #0]
 8004a14:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a2a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      return HAL_OK;
 8004a2e:	e674      	b.n	800471a <HAL_PCD_EP_DB_Transmit+0x86>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d1c8      	bne.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x332>
 8004a34:	682a      	ldr	r2, [r5, #0]
 8004a36:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004a3a:	fa12 f383 	uxtah	r3, r2, r3
 8004a3e:	4403      	add	r3, r0
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004a46:	e7be      	b.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x332>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d1d6      	bne.n	80049fa <HAL_PCD_EP_DB_Transmit+0x366>
 8004a4c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004a50:	fa12 f383 	uxtah	r3, r2, r3
 8004a54:	7822      	ldrb	r2, [r4, #0]
 8004a56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004a60:	e7cb      	b.n	80049fa <HAL_PCD_EP_DB_Transmit+0x366>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004a62:	682a      	ldr	r2, [r5, #0]
 8004a64:	7821      	ldrb	r1, [r4, #0]
 8004a66:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a74:	f083 0320 	eor.w	r3, r3, #32
 8004a78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a80:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004a84:	e7bc      	b.n	8004a00 <HAL_PCD_EP_DB_Transmit+0x36c>
        else if (ep->xfer_len_db == 0U)
 8004a86:	b921      	cbnz	r1, 8004a92 <HAL_PCD_EP_DB_Transmit+0x3fe>
          ep->xfer_fill_db = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8004a8e:	4613      	mov	r3, r2
 8004a90:	e75f      	b.n	8004952 <HAL_PCD_EP_DB_Transmit+0x2be>
          ep->xfer_len_db = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8004a96:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	e759      	b.n	8004952 <HAL_PCD_EP_DB_Transmit+0x2be>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004aa0:	d80d      	bhi.n	8004abe <HAL_PCD_EP_DB_Transmit+0x42a>
 8004aa2:	0859      	lsrs	r1, r3, #1
 8004aa4:	f013 0f01 	tst.w	r3, #1
 8004aa8:	d000      	beq.n	8004aac <HAL_PCD_EP_DB_Transmit+0x418>
 8004aaa:	3101      	adds	r1, #1
 8004aac:	f8b2 0406 	ldrh.w	r0, [r2, #1030]	@ 0x406
 8004ab0:	b280      	uxth	r0, r0
 8004ab2:	0289      	lsls	r1, r1, #10
 8004ab4:	b289      	uxth	r1, r1
 8004ab6:	4301      	orrs	r1, r0
 8004ab8:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8004abc:	e011      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004abe:	0958      	lsrs	r0, r3, #5
 8004ac0:	f013 0f1f 	tst.w	r3, #31
 8004ac4:	d100      	bne.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x434>
 8004ac6:	3801      	subs	r0, #1
 8004ac8:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8004acc:	b289      	uxth	r1, r1
 8004ace:	0280      	lsls	r0, r0, #10
 8004ad0:	b280      	uxth	r0, r0
 8004ad2:	4301      	orrs	r1, r0
 8004ad4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004ad8:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8004adc:	e001      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004ade:	2a01      	cmp	r2, #1
 8004ae0:	d006      	beq.n	8004af0 <HAL_PCD_EP_DB_Transmit+0x45c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	8962      	ldrh	r2, [r4, #10]
 8004ae6:	6961      	ldr	r1, [r4, #20]
 8004ae8:	6828      	ldr	r0, [r5, #0]
 8004aea:	f003 f89c 	bl	8007c26 <USB_WritePMA>
 8004aee:	e603      	b.n	80046f8 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004af0:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004af4:	fa11 f282 	uxtah	r2, r1, r2
 8004af8:	7821      	ldrb	r1, [r4, #0]
 8004afa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004afe:	b299      	uxth	r1, r3
 8004b00:	f8a2 1406 	strh.w	r1, [r2, #1030]	@ 0x406
 8004b04:	e7ed      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x44e>

08004b06 <PCD_EP_ISR_Handler>:
{
 8004b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0a:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b0c:	6828      	ldr	r0, [r5, #0]
 8004b0e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8004b12:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004b16:	f000 8255 	beq.w	8004fc4 <PCD_EP_ISR_Handler+0x4be>
    wIstr = hpcd->Instance->ISTR;
 8004b1a:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 8004b1e:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8004b20:	f014 040f 	ands.w	r4, r4, #15
 8004b24:	f040 809f 	bne.w	8004c66 <PCD_EP_ISR_Handler+0x160>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004b28:	f013 0f10 	tst.w	r3, #16
 8004b2c:	d04a      	beq.n	8004bc4 <PCD_EP_ISR_Handler+0xbe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b2e:	8803      	ldrh	r3, [r0, #0]
 8004b30:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b32:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004b36:	d175      	bne.n	8004c24 <PCD_EP_ISR_Handler+0x11e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b38:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004b3c:	d0e6      	beq.n	8004b0c <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b3e:	8803      	ldrh	r3, [r0, #0]
 8004b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b44:	051b      	lsls	r3, r3, #20
 8004b46:	0d1b      	lsrs	r3, r3, #20
 8004b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b4e:	6828      	ldr	r0, [r5, #0]
 8004b50:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004b54:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8004b58:	00d2      	lsls	r2, r2, #3
 8004b5a:	fa12 f383 	uxtah	r3, r2, r3
 8004b5e:	4403      	add	r3, r0
 8004b60:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8004b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b68:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b6c:	b18b      	cbz	r3, 8004b92 <PCD_EP_ISR_Handler+0x8c>
 8004b6e:	f8d5 1164 	ldr.w	r1, [r5, #356]	@ 0x164
 8004b72:	b171      	cbz	r1, 8004b92 <PCD_EP_ISR_Handler+0x8c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b74:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8004b78:	f003 fb2c 	bl	80081d4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004b7c:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
 8004b80:	f8d5 216c 	ldr.w	r2, [r5, #364]	@ 0x16c
 8004b84:	4413      	add	r3, r2
 8004b86:	f8c5 3164 	str.w	r3, [r5, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f003 feab 	bl	80088e8 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b92:	682a      	ldr	r2, [r5, #0]
 8004b94:	8813      	ldrh	r3, [r2, #0]
 8004b96:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004b98:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004b9c:	d1b6      	bne.n	8004b0c <PCD_EP_ISR_Handler+0x6>
 8004b9e:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 8004ba2:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004ba6:	d0b1      	beq.n	8004b0c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ba8:	8813      	ldrh	r3, [r2, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc0:	8013      	strh	r3, [r2, #0]
 8004bc2:	e7a3      	b.n	8004b0c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bc4:	8803      	ldrh	r3, [r0, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bdc:	6829      	ldr	r1, [r5, #0]
 8004bde:	f8b1 3050 	ldrh.w	r3, [r1, #80]	@ 0x50
 8004be2:	7c2a      	ldrb	r2, [r5, #16]
 8004be4:	00d2      	lsls	r2, r2, #3
 8004be6:	fa12 f383 	uxtah	r3, r2, r3
 8004bea:	440b      	add	r3, r1
 8004bec:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8004bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8004bf6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8004bf8:	441a      	add	r2, r3
 8004bfa:	626a      	str	r2, [r5, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f003 fe7e 	bl	8008900 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004c04:	7b6b      	ldrb	r3, [r5, #13]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d080      	beq.n	8004b0c <PCD_EP_ISR_Handler+0x6>
 8004c0a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f47f af7d 	bne.w	8004b0c <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004c12:	7b6b      	ldrb	r3, [r5, #13]
 8004c14:	682a      	ldr	r2, [r5, #0]
 8004c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1a:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	736b      	strb	r3, [r5, #13]
 8004c22:	e773      	b.n	8004b0c <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c24:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004c28:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8004c2c:	00d2      	lsls	r2, r2, #3
 8004c2e:	fa12 f383 	uxtah	r3, r2, r3
 8004c32:	4403      	add	r3, r0
 8004c34:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	@ 0x406
 8004c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c3c:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c40:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8004c44:	f505 7126 	add.w	r1, r5, #664	@ 0x298
 8004c48:	f003 fac4 	bl	80081d4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c4c:	682a      	ldr	r2, [r5, #0]
 8004c4e:	8813      	ldrh	r3, [r2, #0]
 8004c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c54:	051b      	lsls	r3, r3, #20
 8004c56:	0d1b      	lsrs	r3, r3, #20
 8004c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f003 fe3a 	bl	80088d8 <HAL_PCD_SetupStageCallback>
 8004c64:	e752      	b.n	8004b0c <PCD_EP_ISR_Handler+0x6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c66:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004c6a:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c6c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004c70:	d14e      	bne.n	8004d10 <PCD_EP_ISR_Handler+0x20a>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c72:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004c76:	f43f af49 	beq.w	8004b0c <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8004c7a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004c7e:	00c9      	lsls	r1, r1, #3
 8004c80:	3110      	adds	r1, #16
 8004c82:	4429      	add	r1, r5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c84:	682a      	ldr	r2, [r5, #0]
 8004c86:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8004ca2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004ca6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004caa:	7cdb      	ldrb	r3, [r3, #19]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	f000 80e9 	beq.w	8004e84 <PCD_EP_ISR_Handler+0x37e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004cb2:	f416 7f80 	tst.w	r6, #256	@ 0x100
 8004cb6:	f040 8180 	bne.w	8004fba <PCD_EP_ISR_Handler+0x4b4>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cba:	6828      	ldr	r0, [r5, #0]
 8004cbc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004cc0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004cc4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004cc8:	7c16      	ldrb	r6, [r2, #16]
 8004cca:	00f2      	lsls	r2, r6, #3
 8004ccc:	fa12 f383 	uxtah	r3, r2, r3
 8004cd0:	4403      	add	r3, r0
 8004cd2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8004cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8004cda:	1c62      	adds	r2, r4, #1
 8004cdc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004ce0:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	f240 814b 	bls.w	8004f80 <PCD_EP_ISR_Handler+0x47a>
              ep->xfer_len -= TxPctSize;
 8004cea:	1c67      	adds	r7, r4, #1
 8004cec:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004cf0:	1ad2      	subs	r2, r2, r3
 8004cf2:	f845 2037 	str.w	r2, [r5, r7, lsl #3]
            if (ep->xfer_len == 0U)
 8004cf6:	1c62      	adds	r2, r4, #1
 8004cf8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004cfc:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	f040 8144 	bne.w	8004f8e <PCD_EP_ISR_Handler+0x488>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f003 fdf9 	bl	8008900 <HAL_PCD_DataInStageCallback>
 8004d0e:	e6fd      	b.n	8004b0c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d10:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d18:	051b      	lsls	r3, r3, #20
 8004d1a:	0d1b      	lsrs	r3, r3, #20
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d20:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8004d24:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004d28:	00c9      	lsls	r1, r1, #3
 8004d2a:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004d2e:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8004d32:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004d36:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004d3a:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d140      	bne.n	8004dc4 <PCD_EP_ISR_Handler+0x2be>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d42:	6828      	ldr	r0, [r5, #0]
 8004d44:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004d48:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004d4c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004d50:	f892 2150 	ldrb.w	r2, [r2, #336]	@ 0x150
 8004d54:	00d2      	lsls	r2, r2, #3
 8004d56:	fa12 f383 	uxtah	r3, r2, r3
 8004d5a:	4403      	add	r3, r0
 8004d5c:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	@ 0x406
 8004d60:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8004d64:	bb17      	cbnz	r7, 8004dac <PCD_EP_ISR_Handler+0x2a6>
        ep->xfer_count += count;
 8004d66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004d6a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004d6e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8004d72:	443a      	add	r2, r7
 8004d74:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8004d78:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8004d7c:	443a      	add	r2, r7
 8004d7e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d82:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8004d86:	b13b      	cbz	r3, 8004d98 <PCD_EP_ISR_Handler+0x292>
 8004d88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004d8c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004d90:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004d94:	429f      	cmp	r7, r3
 8004d96:	d270      	bcs.n	8004e7a <PCD_EP_ISR_Handler+0x374>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d98:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004d9c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004da0:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8004da4:	4628      	mov	r0, r5
 8004da6:	f003 fd9f 	bl	80088e8 <HAL_PCD_DataOutStageCallback>
 8004daa:	e762      	b.n	8004c72 <PCD_EP_ISR_Handler+0x16c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004dac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004db0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004db4:	463b      	mov	r3, r7
 8004db6:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
 8004dba:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004dbe:	f003 fa09 	bl	80081d4 <USB_ReadPMA>
 8004dc2:	e7d0      	b.n	8004d66 <PCD_EP_ISR_Handler+0x260>
          if (ep->type == EP_TYPE_BULK)
 8004dc4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004dc8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004dcc:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d033      	beq.n	8004e3c <PCD_EP_ISR_Handler+0x336>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dd4:	6829      	ldr	r1, [r5, #0]
 8004dd6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004dda:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004dde:	f892 0150 	ldrb.w	r0, [r2, #336]	@ 0x150
 8004de2:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004df8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004dfc:	6828      	ldr	r0, [r5, #0]
 8004dfe:	f892 3150 	ldrb.w	r3, [r2, #336]	@ 0x150
 8004e02:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e06:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004e0a:	d01e      	beq.n	8004e4a <PCD_EP_ISR_Handler+0x344>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e0c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	fa13 f382 	uxtah	r3, r3, r2
 8004e16:	4403      	add	r3, r0
 8004e18:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	@ 0x402
 8004e1c:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	d0a0      	beq.n	8004d66 <PCD_EP_ISR_Handler+0x260>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e24:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004e28:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8004e32:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004e36:	f003 f9cd 	bl	80081d4 <USB_ReadPMA>
 8004e3a:	e794      	b.n	8004d66 <PCD_EP_ISR_Handler+0x260>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004e3c:	4632      	mov	r2, r6
 8004e3e:	4641      	mov	r1, r8
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7ff fb0b 	bl	800445c <HAL_PCD_EP_DB_Receive>
 8004e46:	4607      	mov	r7, r0
 8004e48:	e78d      	b.n	8004d66 <PCD_EP_ISR_Handler+0x260>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e4a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	fa13 f382 	uxtah	r3, r3, r2
 8004e54:	4403      	add	r3, r0
 8004e56:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	@ 0x406
 8004e5a:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8004e5e:	2f00      	cmp	r7, #0
 8004e60:	d081      	beq.n	8004d66 <PCD_EP_ISR_Handler+0x260>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e62:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004e66:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8004e70:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004e74:	f003 f9ae 	bl	80081d4 <USB_ReadPMA>
 8004e78:	e775      	b.n	8004d66 <PCD_EP_ISR_Handler+0x260>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	6828      	ldr	r0, [r5, #0]
 8004e7e:	f002 fee4 	bl	8007c4a <USB_EPStartXfer>
 8004e82:	e6f6      	b.n	8004c72 <PCD_EP_ISR_Handler+0x16c>
          ep->xfer_len = 0U;
 8004e84:	1c63      	adds	r3, r4, #1
 8004e86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	50ea      	str	r2, [r5, r3]
          if (ep->doublebuffer != 0U)
 8004e90:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004e94:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004e98:	7f1b      	ldrb	r3, [r3, #28]
 8004e9a:	b31b      	cbz	r3, 8004ee4 <PCD_EP_ISR_Handler+0x3de>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e9c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004ea0:	d03b      	beq.n	8004f1a <PCD_EP_ISR_Handler+0x414>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ea2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004ea6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004eaa:	7c5b      	ldrb	r3, [r3, #17]
 8004eac:	bb1b      	cbnz	r3, 8004ef6 <PCD_EP_ISR_Handler+0x3f0>
 8004eae:	682a      	ldr	r2, [r5, #0]
 8004eb0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004eb4:	fa12 f383 	uxtah	r3, r2, r3
 8004eb8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004ebc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004ec0:	7c12      	ldrb	r2, [r2, #16]
 8004ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ec6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004eca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004ece:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004ed2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8004ed6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004eda:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ee4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004ee8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8004eec:	7c21      	ldrb	r1, [r4, #16]
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f003 fd06 	bl	8008900 <HAL_PCD_DataInStageCallback>
 8004ef4:	e60a      	b.n	8004b0c <PCD_EP_ISR_Handler+0x6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d1f4      	bne.n	8004ee4 <PCD_EP_ISR_Handler+0x3de>
 8004efa:	682a      	ldr	r2, [r5, #0]
 8004efc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004f00:	fa12 f383 	uxtah	r3, r2, r3
 8004f04:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004f08:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004f0c:	7c12      	ldrb	r2, [r2, #16]
 8004f0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8004f18:	e7e4      	b.n	8004ee4 <PCD_EP_ISR_Handler+0x3de>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f1a:	682a      	ldr	r2, [r5, #0]
 8004f1c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004f20:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004f24:	7c5b      	ldrb	r3, [r3, #17]
 8004f26:	b9d3      	cbnz	r3, 8004f5e <PCD_EP_ISR_Handler+0x458>
 8004f28:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004f2c:	fa12 f383 	uxtah	r3, r2, r3
 8004f30:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004f34:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004f38:	7c12      	ldrb	r2, [r2, #16]
 8004f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f3e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004f42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004f46:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004f4a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8004f4e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004f52:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004f56:	b292      	uxth	r2, r2
 8004f58:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004f5c:	e7c2      	b.n	8004ee4 <PCD_EP_ISR_Handler+0x3de>
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d1c0      	bne.n	8004ee4 <PCD_EP_ISR_Handler+0x3de>
 8004f62:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8004f66:	fa12 f383 	uxtah	r3, r2, r3
 8004f6a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004f6e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004f72:	7c12      	ldrb	r2, [r2, #16]
 8004f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8004f7e:	e7b1      	b.n	8004ee4 <PCD_EP_ISR_Handler+0x3de>
              ep->xfer_len = 0U;
 8004f80:	1c62      	adds	r2, r4, #1
 8004f82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004f86:	00d2      	lsls	r2, r2, #3
 8004f88:	2700      	movs	r7, #0
 8004f8a:	50af      	str	r7, [r5, r2]
 8004f8c:	e6b3      	b.n	8004cf6 <PCD_EP_ISR_Handler+0x1f0>
              ep->xfer_buff += TxPctSize;
 8004f8e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004f92:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004f96:	6a56      	ldr	r6, [r2, #36]	@ 0x24
 8004f98:	441e      	add	r6, r3
 8004f9a:	6256      	str	r6, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8004f9c:	3401      	adds	r4, #1
 8004f9e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004fa2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004fa6:	6852      	ldr	r2, [r2, #4]
 8004fa8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004fac:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	6063      	str	r3, [r4, #4]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fb4:	f002 fe49 	bl	8007c4a <USB_EPStartXfer>
 8004fb8:	e5a8      	b.n	8004b0c <PCD_EP_ISR_Handler+0x6>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004fba:	4632      	mov	r2, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f7ff fb69 	bl	8004694 <HAL_PCD_EP_DB_Transmit>
 8004fc2:	e5a3      	b.n	8004b0c <PCD_EP_ISR_Handler+0x6>
}
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fca <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8004fca:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d00c      	beq.n	8004fec <HAL_PCD_SetAddress+0x22>
{
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004fdc:	7341      	strb	r1, [r0, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	f002 fe02 	bl	8007be8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8004fea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004fec:	2002      	movs	r0, #2
}
 8004fee:	4770      	bx	lr

08004ff0 <HAL_PCD_IRQHandler>:
{
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ff4:	6800      	ldr	r0, [r0, #0]
 8004ff6:	f002 fe10 	bl	8007c1a <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004ffa:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8004ffe:	d123      	bne.n	8005048 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005000:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8005004:	d124      	bne.n	8005050 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005006:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 800500a:	d132      	bne.n	8005072 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800500c:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8005010:	d139      	bne.n	8005086 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005012:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8005016:	d140      	bne.n	800509a <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005018:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800501c:	d167      	bne.n	80050ee <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800501e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005022:	f040 8081 	bne.w	8005128 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005026:	f410 7f00 	tst.w	r0, #512	@ 0x200
 800502a:	f040 80ad 	bne.w	8005188 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800502e:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8005032:	d027      	beq.n	8005084 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005040:	b29b      	uxth	r3, r3
 8005042:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8005046:	e01d      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8005048:	4620      	mov	r0, r4
 800504a:	f7ff fd5c 	bl	8004b06 <PCD_EP_ISR_Handler>
    return;
 800504e:	e019      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800505c:	b29b      	uxth	r3, r3
 800505e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005062:	4620      	mov	r0, r4
 8005064:	f003 fc5d 	bl	8008922 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005068:	2100      	movs	r1, #0
 800506a:	4620      	mov	r0, r4
 800506c:	f7ff ffad 	bl	8004fca <HAL_PCD_SetAddress>
    return;
 8005070:	e008      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005078:	b29b      	uxth	r3, r3
 800507a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800507e:	b29b      	uxth	r3, r3
 8005080:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8005084:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005086:	6822      	ldr	r2, [r4, #0]
 8005088:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005092:	b29b      	uxth	r3, r3
 8005094:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8005098:	e7f4      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f023 0304 	bic.w	r3, r3, #4
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f023 0308 	bic.w	r3, r3, #8
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    if (hpcd->LPM_State == LPM_L1)
 80050be:	f894 32c8 	ldrb.w	r3, [r4, #712]	@ 0x2c8
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d00c      	beq.n	80050e0 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 80050c6:	4620      	mov	r0, r4
 80050c8:	f003 fc4e 	bl	8008968 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80050de:	e7d1      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 80050e0:	2100      	movs	r1, #0
 80050e2:	f884 12c8 	strb.w	r1, [r4, #712]	@ 0x2c8
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050e6:	4620      	mov	r0, r4
 80050e8:	f003 fd30 	bl	8008b4c <HAL_PCDEx_LPM_Callback>
 80050ec:	e7eb      	b.n	80050c6 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f043 0308 	orr.w	r3, r3, #8
 80050fa:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80050fe:	6822      	ldr	r2, [r4, #0]
 8005100:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800510a:	b29b      	uxth	r3, r3
 800510c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005110:	6822      	ldr	r2, [r4, #0]
 8005112:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005116:	b29b      	uxth	r3, r3
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005120:	4620      	mov	r0, r4
 8005122:	f003 fc11 	bl	8008948 <HAL_PCD_SuspendCallback>
    return;
 8005126:	e7ad      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005128:	6822      	ldr	r2, [r4, #0]
 800512a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800512e:	b29b      	uxth	r3, r3
 8005130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005134:	b29b      	uxth	r3, r3
 8005136:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800513a:	f894 32c8 	ldrb.w	r3, [r4, #712]	@ 0x2c8
 800513e:	b9fb      	cbnz	r3, 8005180 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005146:	b29b      	uxth	r3, r3
 8005148:	f043 0304 	orr.w	r3, r3, #4
 800514c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005156:	b29b      	uxth	r3, r3
 8005158:	f043 0308 	orr.w	r3, r3, #8
 800515c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      hpcd->LPM_State = LPM_L1;
 8005160:	2101      	movs	r1, #1
 8005162:	f884 12c8 	strb.w	r1, [r4, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800516c:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8005170:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8005174:	f8c4 32cc 	str.w	r3, [r4, #716]	@ 0x2cc
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005178:	4620      	mov	r0, r4
 800517a:	f003 fce7 	bl	8008b4c <HAL_PCDEx_LPM_Callback>
 800517e:	e781      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8005180:	4620      	mov	r0, r4
 8005182:	f003 fbe1 	bl	8008948 <HAL_PCD_SuspendCallback>
    return;
 8005186:	e77d      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005188:	6822      	ldr	r2, [r4, #0]
 800518a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005194:	b29b      	uxth	r3, r3
 8005196:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 800519a:	4620      	mov	r0, r4
 800519c:	f003 fbbb 	bl	8008916 <HAL_PCD_SOFCallback>
    return;
 80051a0:	e770      	b.n	8005084 <HAL_PCD_IRQHandler+0x94>

080051a2 <HAL_PCD_EP_Open>:
{
 80051a2:	b510      	push	{r4, lr}
 80051a4:	4604      	mov	r4, r0
 80051a6:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80051a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80051ac:	d127      	bne.n	80051fe <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ae:	f001 0c07 	and.w	ip, r1, #7
 80051b2:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80051b6:	00c9      	lsls	r1, r1, #3
 80051b8:	f501 7ea8 	add.w	lr, r1, #336	@ 0x150
 80051bc:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 80051c0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80051c4:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80051c8:	f04f 0e00 	mov.w	lr, #0
 80051cc:	f88c e151 	strb.w	lr, [ip, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80051d0:	f000 0007 	and.w	r0, r0, #7
 80051d4:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80051d6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80051da:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80051dc:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d01d      	beq.n	800521e <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 80051e2:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d01c      	beq.n	8005224 <HAL_PCD_EP_Open+0x82>
 80051ea:	2301      	movs	r3, #1
 80051ec:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	f002 f90e 	bl	8007412 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051f6:	2000      	movs	r0, #0
 80051f8:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80051fc:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051fe:	f001 0c07 	and.w	ip, r1, #7
 8005202:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8005206:	00c9      	lsls	r1, r1, #3
 8005208:	3110      	adds	r1, #16
 800520a:	4421      	add	r1, r4
    ep->is_in = 1U;
 800520c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005210:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8005214:	f04f 0e01 	mov.w	lr, #1
 8005218:	f88c e011 	strb.w	lr, [ip, #17]
 800521c:	e7d8      	b.n	80051d0 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	710b      	strb	r3, [r1, #4]
 8005222:	e7de      	b.n	80051e2 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8005224:	2002      	movs	r0, #2
 8005226:	e7e9      	b.n	80051fc <HAL_PCD_EP_Open+0x5a>

08005228 <HAL_PCD_EP_Close>:
{
 8005228:	b510      	push	{r4, lr}
 800522a:	4604      	mov	r4, r0
 800522c:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800522e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005232:	d11f      	bne.n	8005274 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005234:	f001 0007 	and.w	r0, r1, #7
 8005238:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005242:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8005244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005248:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800524c:	2300      	movs	r3, #0
 800524e:	f880 3151 	strb.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8005252:	f002 0207 	and.w	r2, r2, #7
 8005256:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005258:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800525c:	2b01      	cmp	r3, #1
 800525e:	d017      	beq.n	8005290 <HAL_PCD_EP_Close+0x68>
 8005260:	2301      	movs	r3, #1
 8005262:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005266:	6820      	ldr	r0, [r4, #0]
 8005268:	f002 fb60 	bl	800792c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800526c:	2000      	movs	r0, #0
 800526e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8005272:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005274:	f001 0007 	and.w	r0, r1, #7
 8005278:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	3310      	adds	r3, #16
 8005280:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8005282:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005286:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800528a:	2301      	movs	r3, #1
 800528c:	7443      	strb	r3, [r0, #17]
 800528e:	e7e0      	b.n	8005252 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8005290:	2002      	movs	r0, #2
 8005292:	e7ee      	b.n	8005272 <HAL_PCD_EP_Close+0x4a>

08005294 <HAL_PCD_EP_Receive>:
{
 8005294:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005296:	f001 0c07 	and.w	ip, r1, #7
 800529a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800529e:	00c9      	lsls	r1, r1, #3
 80052a0:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
  ep->xfer_buff = pBuf;
 80052a4:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80052a8:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80052ac:	f8ce 2164 	str.w	r2, [lr, #356]	@ 0x164
  ep->xfer_len = len;
 80052b0:	f8ce 3168 	str.w	r3, [lr, #360]	@ 0x168
  ep->xfer_count = 0U;
 80052b4:	2400      	movs	r4, #0
 80052b6:	f8ce 416c 	str.w	r4, [lr, #364]	@ 0x16c
  ep->is_in = 0U;
 80052ba:	f88e 4151 	strb.w	r4, [lr, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80052be:	f88e c150 	strb.w	ip, [lr, #336]	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052c2:	4401      	add	r1, r0
 80052c4:	6800      	ldr	r0, [r0, #0]
 80052c6:	f002 fcc0 	bl	8007c4a <USB_EPStartXfer>
}
 80052ca:	4620      	mov	r0, r4
 80052cc:	bd10      	pop	{r4, pc}

080052ce <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052ce:	f001 0107 	and.w	r1, r1, #7
 80052d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80052d6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 80052da:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 80052de:	4770      	bx	lr

080052e0 <HAL_PCD_EP_Transmit>:
{
 80052e0:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e2:	f001 0c07 	and.w	ip, r1, #7
 80052e6:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80052ea:	00c9      	lsls	r1, r1, #3
 80052ec:	3110      	adds	r1, #16
  ep->xfer_buff = pBuf;
 80052ee:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80052f2:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80052f6:	f8ce 2024 	str.w	r2, [lr, #36]	@ 0x24
  ep->xfer_len = len;
 80052fa:	f10c 0201 	add.w	r2, ip, #1
 80052fe:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8005302:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
  ep->xfer_fill_db = 1U;
 8005306:	2501      	movs	r5, #1
 8005308:	f88e 5034 	strb.w	r5, [lr, #52]	@ 0x34
  ep->xfer_len_db = len;
 800530c:	f8ce 3030 	str.w	r3, [lr, #48]	@ 0x30
  ep->xfer_count = 0U;
 8005310:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 8005314:	2400      	movs	r4, #0
 8005316:	6054      	str	r4, [r2, #4]
  ep->is_in = 1U;
 8005318:	f88e 5011 	strb.w	r5, [lr, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 800531c:	f88e c010 	strb.w	ip, [lr, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005320:	4401      	add	r1, r0
 8005322:	6800      	ldr	r0, [r0, #0]
 8005324:	f002 fc91 	bl	8007c4a <USB_EPStartXfer>
}
 8005328:	4620      	mov	r0, r4
 800532a:	bd38      	pop	{r3, r4, r5, pc}

0800532c <HAL_PCD_EP_SetStall>:
{
 800532c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800532e:	f001 0507 	and.w	r5, r1, #7
 8005332:	7902      	ldrb	r2, [r0, #4]
 8005334:	42aa      	cmp	r2, r5
 8005336:	d335      	bcc.n	80053a4 <HAL_PCD_EP_SetStall+0x78>
 8005338:	4604      	mov	r4, r0
 800533a:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800533c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005340:	d11e      	bne.n	8005380 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8005342:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005346:	00c9      	lsls	r1, r1, #3
 8005348:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800534c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800534e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005352:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
  ep->is_stall = 1U;
 800535c:	2301      	movs	r3, #1
 800535e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005360:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8005362:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8005366:	2b01      	cmp	r3, #1
 8005368:	d01e      	beq.n	80053a8 <HAL_PCD_EP_SetStall+0x7c>
 800536a:	2301      	movs	r3, #1
 800536c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	f002 fbc6 	bl	8007b02 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005376:	b17d      	cbz	r5, 8005398 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8005378:	2000      	movs	r0, #0
 800537a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800537e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005380:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8005384:	00c9      	lsls	r1, r1, #3
 8005386:	3110      	adds	r1, #16
 8005388:	4401      	add	r1, r0
    ep->is_in = 1U;
 800538a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800538e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005392:	2201      	movs	r2, #1
 8005394:	745a      	strb	r2, [r3, #17]
 8005396:	e7e1      	b.n	800535c <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005398:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 800539c:	6820      	ldr	r0, [r4, #0]
 800539e:	f002 fc40 	bl	8007c22 <USB_EP0_OutStart>
 80053a2:	e7e9      	b.n	8005378 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80053a4:	2001      	movs	r0, #1
 80053a6:	e7ea      	b.n	800537e <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80053a8:	2002      	movs	r0, #2
 80053aa:	e7e8      	b.n	800537e <HAL_PCD_EP_SetStall+0x52>

080053ac <HAL_PCD_EP_ClrStall>:
{
 80053ac:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053ae:	7901      	ldrb	r1, [r0, #4]
 80053b0:	f003 020f 	and.w	r2, r3, #15
 80053b4:	4291      	cmp	r1, r2
 80053b6:	d334      	bcc.n	8005422 <HAL_PCD_EP_ClrStall+0x76>
{
 80053b8:	b510      	push	{r4, lr}
 80053ba:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80053bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053c0:	d121      	bne.n	8005406 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053c2:	f003 0207 	and.w	r2, r3, #7
 80053c6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80053ca:	00c9      	lsls	r1, r1, #3
 80053cc:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 80053d0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80053d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80053d6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80053da:	2000      	movs	r0, #0
 80053dc:	f882 0151 	strb.w	r0, [r2, #337]	@ 0x151
  ep->is_stall = 0U;
 80053e0:	2200      	movs	r2, #0
 80053e2:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80053ea:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d019      	beq.n	8005426 <HAL_PCD_EP_ClrStall+0x7a>
 80053f2:	2301      	movs	r3, #1
 80053f4:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	f002 fba7 	bl	8007b4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053fe:	2000      	movs	r0, #0
 8005400:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8005404:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005406:	f003 0207 	and.w	r2, r3, #7
 800540a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800540e:	00c9      	lsls	r1, r1, #3
 8005410:	3110      	adds	r1, #16
 8005412:	4401      	add	r1, r0
    ep->is_in = 1U;
 8005414:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005418:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800541c:	2001      	movs	r0, #1
 800541e:	7450      	strb	r0, [r2, #17]
 8005420:	e7de      	b.n	80053e0 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8005422:	2001      	movs	r0, #1
}
 8005424:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005426:	2002      	movs	r0, #2
 8005428:	e7ec      	b.n	8005404 <HAL_PCD_EP_ClrStall+0x58>

0800542a <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800542a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800542e:	d00b      	beq.n	8005448 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005430:	f001 0107 	and.w	r1, r1, #7
 8005434:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005438:	00c9      	lsls	r1, r1, #3
 800543a:	3110      	adds	r1, #16
 800543c:	4408      	add	r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800543e:	b952      	cbnz	r2, 8005456 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005440:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005442:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005444:	2000      	movs	r0, #0
 8005446:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8005448:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800544c:	00c9      	lsls	r1, r1, #3
 800544e:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8005452:	4408      	add	r0, r1
 8005454:	e7f3      	b.n	800543e <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8005456:	2201      	movs	r2, #1
 8005458:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800545a:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800545c:	0c1b      	lsrs	r3, r3, #16
 800545e:	8143      	strh	r3, [r0, #10]
 8005460:	e7f0      	b.n	8005444 <HAL_PCDEx_PMAConfig+0x1a>

08005462 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005462:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 8005464:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8005466:	2101      	movs	r1, #1
 8005468:	f8c0 12d4 	str.w	r1, [r0, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 800546c:	2000      	movs	r0, #0
 800546e:	f883 02c8 	strb.w	r0, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005472:	f8b2 3054 	ldrh.w	r3, [r2, #84]	@ 0x54
 8005476:	b29b      	uxth	r3, r3
 8005478:	430b      	orrs	r3, r1
 800547a:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800547e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	@ 0x54
 8005482:	b29b      	uxth	r3, r3
 8005484:	f043 0302 	orr.w	r3, r3, #2
 8005488:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 800548c:	4770      	bx	lr
	...

08005490 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005490:	4a02      	ldr	r2, [pc, #8]	@ (800549c <HAL_PWR_EnableBkUpAccess+0xc>)
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005498:	6013      	str	r3, [r2, #0]
}
 800549a:	4770      	bx	lr
 800549c:	40007000 	.word	0x40007000

080054a0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80054a0:	4b02      	ldr	r3, [pc, #8]	@ (80054ac <HAL_PWREx_GetVoltageRange+0xc>)
 80054a2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80054a4:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40007000 	.word	0x40007000

080054b0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80054b4:	d00f      	beq.n	80054d6 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005534 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c2:	d034      	beq.n	800552e <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005534 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80054d2:	2000      	movs	r0, #0
 80054d4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054d6:	4b17      	ldr	r3, [pc, #92]	@ (8005534 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e2:	d020      	beq.n	8005526 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054e4:	4a13      	ldr	r2, [pc, #76]	@ (8005534 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054f0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054f2:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2232      	movs	r2, #50	@ 0x32
 80054f8:	fb02 f303 	mul.w	r3, r2, r3
 80054fc:	4a0f      	ldr	r2, [pc, #60]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	0c9b      	lsrs	r3, r3, #18
 8005504:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005506:	e000      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8005508:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800550a:	4a0a      	ldr	r2, [pc, #40]	@ (8005534 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800550c:	6952      	ldr	r2, [r2, #20]
 800550e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8005512:	d001      	beq.n	8005518 <HAL_PWREx_ControlVoltageScaling+0x68>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f7      	bne.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005520:	d103      	bne.n	800552a <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8005522:	2000      	movs	r0, #0
 8005524:	4770      	bx	lr
 8005526:	2000      	movs	r0, #0
 8005528:	4770      	bx	lr
        return HAL_TIMEOUT;
 800552a:	2003      	movs	r0, #3
 800552c:	4770      	bx	lr
  return HAL_OK;
 800552e:	2000      	movs	r0, #0
}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40007000 	.word	0x40007000
 8005538:	200000c4 	.word	0x200000c4
 800553c:	431bde83 	.word	0x431bde83

08005540 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005540:	4a02      	ldr	r2, [pc, #8]	@ (800554c <HAL_PWREx_EnableVddUSB+0xc>)
 8005542:	6853      	ldr	r3, [r2, #4]
 8005544:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005548:	6053      	str	r3, [r2, #4]
}
 800554a:	4770      	bx	lr
 800554c:	40007000 	.word	0x40007000

08005550 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005550:	4a02      	ldr	r2, [pc, #8]	@ (800555c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005558:	6013      	str	r3, [r2, #0]
}
 800555a:	4770      	bx	lr
 800555c:	40007000 	.word	0x40007000

08005560 <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8005560:	4a0c      	ldr	r2, [pc, #48]	@ (8005594 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005562:	6813      	ldr	r3, [r2, #0]
 8005564:	f023 0307 	bic.w	r3, r3, #7
 8005568:	f043 0302 	orr.w	r3, r3, #2
 800556c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800556e:	4a0a      	ldr	r2, [pc, #40]	@ (8005598 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005570:	6913      	ldr	r3, [r2, #16]
 8005572:	f043 0304 	orr.w	r3, r3, #4
 8005576:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005578:	2801      	cmp	r0, #1
 800557a:	d008      	beq.n	800558e <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800557c:	bf40      	sev
    __WFE();
 800557e:	bf20      	wfe
    __WFE();
 8005580:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005582:	4a05      	ldr	r2, [pc, #20]	@ (8005598 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005584:	6913      	ldr	r3, [r2, #16]
 8005586:	f023 0304 	bic.w	r3, r3, #4
 800558a:	6113      	str	r3, [r2, #16]
}
 800558c:	4770      	bx	lr
    __WFI();
 800558e:	bf30      	wfi
 8005590:	e7f7      	b.n	8005582 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005592:	bf00      	nop
 8005594:	40007000 	.word	0x40007000
 8005598:	e000ed00 	.word	0xe000ed00

0800559c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800559c:	b530      	push	{r4, r5, lr}
 800559e:	b083      	sub	sp, #12
 80055a0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055a2:	4b20      	ldr	r3, [pc, #128]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80055aa:	d00b      	beq.n	80055c4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055ac:	f7ff ff78 	bl	80054a0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055b0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80055b4:	d017      	beq.n	80055e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055b6:	2c80      	cmp	r4, #128	@ 0x80
 80055b8:	d81f      	bhi.n	80055fa <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80055ba:	d02d      	beq.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055bc:	2c70      	cmp	r4, #112	@ 0x70
 80055be:	d02d      	beq.n	800561c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055c0:	2100      	movs	r1, #0
 80055c2:	e01b      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80055c4:	4d17      	ldr	r5, [pc, #92]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80055c6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80055c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055cc:	65ab      	str	r3, [r5, #88]	@ 0x58
 80055ce:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80055d8:	f7ff ff62 	bl	80054a0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80055dc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80055de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80055e4:	e7e4      	b.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80055e6:	2c80      	cmp	r4, #128	@ 0x80
 80055e8:	d903      	bls.n	80055f2 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80055ea:	2ca0      	cmp	r4, #160	@ 0xa0
 80055ec:	d903      	bls.n	80055f6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80055ee:	2102      	movs	r1, #2
 80055f0:	e004      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055f2:	2100      	movs	r1, #0
 80055f4:	e002      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80055f6:	2101      	movs	r1, #1
 80055f8:	e000      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80055fa:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005628 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	f023 0307 	bic.w	r3, r3, #7
 8005604:	430b      	orrs	r3, r1
 8005606:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005608:	6813      	ldr	r3, [r2, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	428b      	cmp	r3, r1
 8005610:	d106      	bne.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005612:	2000      	movs	r0, #0
}
 8005614:	b003      	add	sp, #12
 8005616:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8005618:	2102      	movs	r1, #2
 800561a:	e7ef      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800561c:	2101      	movs	r1, #1
 800561e:	e7ed      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8005620:	2001      	movs	r0, #1
 8005622:	e7f7      	b.n	8005614 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8005624:	40021000 	.word	0x40021000
 8005628:	40022000 	.word	0x40022000

0800562c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562c:	4a25      	ldr	r2, [pc, #148]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800562e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005630:	68d2      	ldr	r2, [r2, #12]
 8005632:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005636:	f013 030c 	ands.w	r3, r3, #12
 800563a:	d009      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x24>
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d005      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005640:	2b04      	cmp	r3, #4
 8005642:	d03b      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005644:	2b08      	cmp	r3, #8
 8005646:	d03b      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005648:	2000      	movs	r0, #0
 800564a:	e00f      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800564c:	2a01      	cmp	r2, #1
 800564e:	d1f7      	bne.n	8005640 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005650:	4a1c      	ldr	r2, [pc, #112]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	f012 0f08 	tst.w	r2, #8
 8005658:	d10c      	bne.n	8005674 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800565a:	4a1a      	ldr	r2, [pc, #104]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800565c:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8005660:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8005664:	4918      	ldr	r1, [pc, #96]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005666:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800566a:	b113      	cbz	r3, 8005672 <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800566c:	2b0c      	cmp	r3, #12
 800566e:	d006      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0x52>
 8005670:	2000      	movs	r0, #0
}
 8005672:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005674:	4a13      	ldr	r2, [pc, #76]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800567c:	e7f2      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800567e:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005686:	2b02      	cmp	r3, #2
 8005688:	d016      	beq.n	80056b8 <HAL_RCC_GetSysClockFreq+0x8c>
 800568a:	2b03      	cmp	r3, #3
 800568c:	d100      	bne.n	8005690 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 800568e:	480f      	ldr	r0, [pc, #60]	@ (80056cc <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005690:	490c      	ldr	r1, [pc, #48]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005692:	68ca      	ldr	r2, [r1, #12]
 8005694:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005698:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800569a:	68cb      	ldr	r3, [r1, #12]
 800569c:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80056a0:	fb00 f303 	mul.w	r3, r0, r3
 80056a4:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056a8:	68c8      	ldr	r0, [r1, #12]
 80056aa:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80056ae:	3001      	adds	r0, #1
 80056b0:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80056b2:	fbb3 f0f0 	udiv	r0, r3, r0
 80056b6:	4770      	bx	lr
    switch (pllsource)
 80056b8:	4805      	ldr	r0, [pc, #20]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056ba:	e7e9      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 80056bc:	4804      	ldr	r0, [pc, #16]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056be:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80056c0:	4802      	ldr	r0, [pc, #8]	@ (80056cc <HAL_RCC_GetSysClockFreq+0xa0>)
 80056c2:	4770      	bx	lr
 80056c4:	40021000 	.word	0x40021000
 80056c8:	0800d01c 	.word	0x0800d01c
 80056cc:	007a1200 	.word	0x007a1200
 80056d0:	00f42400 	.word	0x00f42400

080056d4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f000 8353 	beq.w	8005d80 <HAL_RCC_OscConfig+0x6ac>
{
 80056da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056dc:	b083      	sub	sp, #12
 80056de:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e0:	4b96      	ldr	r3, [pc, #600]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 80056e2:	689d      	ldr	r5, [r3, #8]
 80056e4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e8:	68de      	ldr	r6, [r3, #12]
 80056ea:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056ee:	6803      	ldr	r3, [r0, #0]
 80056f0:	f013 0f10 	tst.w	r3, #16
 80056f4:	d05a      	beq.n	80057ac <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056f6:	b1e5      	cbz	r5, 8005732 <HAL_RCC_OscConfig+0x5e>
 80056f8:	2d0c      	cmp	r5, #12
 80056fa:	d018      	beq.n	800572e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056fc:	69e3      	ldr	r3, [r4, #28]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 80bb 	beq.w	800587a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8005704:	4a8d      	ldr	r2, [pc, #564]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 8005706:	6813      	ldr	r3, [r2, #0]
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800570e:	f7fd fbbf 	bl	8002e90 <HAL_GetTick>
 8005712:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005714:	4b89      	ldr	r3, [pc, #548]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f013 0f02 	tst.w	r3, #2
 800571c:	f040 809a 	bne.w	8005854 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005720:	f7fd fbb6 	bl	8002e90 <HAL_GetTick>
 8005724:	1bc0      	subs	r0, r0, r7
 8005726:	2802      	cmp	r0, #2
 8005728:	d9f4      	bls.n	8005714 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800572a:	2003      	movs	r0, #3
 800572c:	e335      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800572e:	2e01      	cmp	r6, #1
 8005730:	d1e4      	bne.n	80056fc <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005732:	4b82      	ldr	r3, [pc, #520]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f013 0f02 	tst.w	r3, #2
 800573a:	d003      	beq.n	8005744 <HAL_RCC_OscConfig+0x70>
 800573c:	69e3      	ldr	r3, [r4, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8320 	beq.w	8005d84 <HAL_RCC_OscConfig+0x6b0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005744:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005746:	4b7d      	ldr	r3, [pc, #500]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f013 0f08 	tst.w	r3, #8
 800574e:	d05b      	beq.n	8005808 <HAL_RCC_OscConfig+0x134>
 8005750:	4b7a      	ldr	r3, [pc, #488]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005758:	4298      	cmp	r0, r3
 800575a:	d85c      	bhi.n	8005816 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800575c:	4b77      	ldr	r3, [pc, #476]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	f042 0208 	orr.w	r2, r2, #8
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800576c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800576e:	430a      	orrs	r2, r1
 8005770:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005778:	6a21      	ldr	r1, [r4, #32]
 800577a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800577e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005780:	2d00      	cmp	r5, #0
 8005782:	d060      	beq.n	8005846 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005784:	f7ff ff52 	bl	800562c <HAL_RCC_GetSysClockFreq>
 8005788:	4b6c      	ldr	r3, [pc, #432]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005790:	4a6b      	ldr	r2, [pc, #428]	@ (8005940 <HAL_RCC_OscConfig+0x26c>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	40d8      	lsrs	r0, r3
 800579a:	4b6a      	ldr	r3, [pc, #424]	@ (8005944 <HAL_RCC_OscConfig+0x270>)
 800579c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800579e:	4b6a      	ldr	r3, [pc, #424]	@ (8005948 <HAL_RCC_OscConfig+0x274>)
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	f7fd fb2b 	bl	8002dfc <HAL_InitTick>
        if(status != HAL_OK)
 80057a6:	2800      	cmp	r0, #0
 80057a8:	f040 82f7 	bne.w	8005d9a <HAL_RCC_OscConfig+0x6c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	f013 0f01 	tst.w	r3, #1
 80057b2:	f000 8081 	beq.w	80058b8 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057b6:	2d08      	cmp	r5, #8
 80057b8:	d075      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1d2>
 80057ba:	2d0c      	cmp	r5, #12
 80057bc:	d071      	beq.n	80058a2 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057be:	6863      	ldr	r3, [r4, #4]
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c4:	f000 8098 	beq.w	80058f8 <HAL_RCC_OscConfig+0x224>
 80057c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057cc:	f000 809a 	beq.w	8005904 <HAL_RCC_OscConfig+0x230>
 80057d0:	4b5a      	ldr	r3, [pc, #360]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057e0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 809a 	beq.w	800591e <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 80057ea:	f7fd fb51 	bl	8002e90 <HAL_GetTick>
 80057ee:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057f0:	4b52      	ldr	r3, [pc, #328]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80057f8:	d15e      	bne.n	80058b8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fa:	f7fd fb49 	bl	8002e90 <HAL_GetTick>
 80057fe:	1bc0      	subs	r0, r0, r7
 8005800:	2864      	cmp	r0, #100	@ 0x64
 8005802:	d9f5      	bls.n	80057f0 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8005804:	2003      	movs	r0, #3
 8005806:	e2c8      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005808:	4b4c      	ldr	r3, [pc, #304]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 800580a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800580e:	091b      	lsrs	r3, r3, #4
 8005810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005814:	e7a0      	b.n	8005758 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005816:	f7ff fec1 	bl	800559c <RCC_SetFlashLatencyFromMSIRange>
 800581a:	2800      	cmp	r0, #0
 800581c:	f040 82b4 	bne.w	8005d88 <HAL_RCC_OscConfig+0x6b4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005820:	4b46      	ldr	r3, [pc, #280]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	f042 0208 	orr.w	r2, r2, #8
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005830:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005832:	430a      	orrs	r2, r1
 8005834:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800583c:	6a21      	ldr	r1, [r4, #32]
 800583e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005842:	605a      	str	r2, [r3, #4]
 8005844:	e79e      	b.n	8005784 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005846:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005848:	f7ff fea8 	bl	800559c <RCC_SetFlashLatencyFromMSIRange>
 800584c:	2800      	cmp	r0, #0
 800584e:	d099      	beq.n	8005784 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8005850:	2001      	movs	r0, #1
 8005852:	e2a2      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005854:	4b39      	ldr	r3, [pc, #228]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	f042 0208 	orr.w	r2, r2, #8
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005864:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005866:	430a      	orrs	r2, r1
 8005868:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005870:	6a21      	ldr	r1, [r4, #32]
 8005872:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	e798      	b.n	80057ac <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800587a:	4a30      	ldr	r2, [pc, #192]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 800587c:	6813      	ldr	r3, [r2, #0]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005884:	f7fd fb04 	bl	8002e90 <HAL_GetTick>
 8005888:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800588a:	4b2c      	ldr	r3, [pc, #176]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f013 0f02 	tst.w	r3, #2
 8005892:	d08b      	beq.n	80057ac <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005894:	f7fd fafc 	bl	8002e90 <HAL_GetTick>
 8005898:	1bc0      	subs	r0, r0, r7
 800589a:	2802      	cmp	r0, #2
 800589c:	d9f5      	bls.n	800588a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800589e:	2003      	movs	r0, #3
 80058a0:	e27b      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058a2:	2e03      	cmp	r6, #3
 80058a4:	d18b      	bne.n	80057be <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a6:	4b25      	ldr	r3, [pc, #148]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80058ae:	d003      	beq.n	80058b8 <HAL_RCC_OscConfig+0x1e4>
 80058b0:	6863      	ldr	r3, [r4, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 826a 	beq.w	8005d8c <HAL_RCC_OscConfig+0x6b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	f013 0f02 	tst.w	r3, #2
 80058be:	d058      	beq.n	8005972 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058c0:	2d04      	cmp	r5, #4
 80058c2:	d045      	beq.n	8005950 <HAL_RCC_OscConfig+0x27c>
 80058c4:	2d0c      	cmp	r5, #12
 80058c6:	d041      	beq.n	800594c <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058c8:	68e3      	ldr	r3, [r4, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8091 	beq.w	80059f2 <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_HSI_ENABLE();
 80058d0:	4a1a      	ldr	r2, [pc, #104]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80058da:	f7fd fad9 	bl	8002e90 <HAL_GetTick>
 80058de:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058e0:	4b16      	ldr	r3, [pc, #88]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80058e8:	d17a      	bne.n	80059e0 <HAL_RCC_OscConfig+0x30c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ea:	f7fd fad1 	bl	8002e90 <HAL_GetTick>
 80058ee:	1b80      	subs	r0, r0, r6
 80058f0:	2802      	cmp	r0, #2
 80058f2:	d9f5      	bls.n	80058e0 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 80058f4:	2003      	movs	r0, #3
 80058f6:	e250      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f8:	4a10      	ldr	r2, [pc, #64]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 80058fa:	6813      	ldr	r3, [r2, #0]
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e76e      	b.n	80057e2 <HAL_RCC_OscConfig+0x10e>
 8005904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005908:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	e761      	b.n	80057e2 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800591e:	f7fd fab7 	bl	8002e90 <HAL_GetTick>
 8005922:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005924:	4b05      	ldr	r3, [pc, #20]	@ (800593c <HAL_RCC_OscConfig+0x268>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800592c:	d0c4      	beq.n	80058b8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800592e:	f7fd faaf 	bl	8002e90 <HAL_GetTick>
 8005932:	1bc0      	subs	r0, r0, r7
 8005934:	2864      	cmp	r0, #100	@ 0x64
 8005936:	d9f5      	bls.n	8005924 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8005938:	2003      	movs	r0, #3
 800593a:	e22e      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
 800593c:	40021000 	.word	0x40021000
 8005940:	0800d054 	.word	0x0800d054
 8005944:	200000c4 	.word	0x200000c4
 8005948:	200000bc 	.word	0x200000bc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800594c:	2e02      	cmp	r6, #2
 800594e:	d1bb      	bne.n	80058c8 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005950:	4baf      	ldr	r3, [pc, #700]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005958:	d003      	beq.n	8005962 <HAL_RCC_OscConfig+0x28e>
 800595a:	68e3      	ldr	r3, [r4, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8217 	beq.w	8005d90 <HAL_RCC_OscConfig+0x6bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005962:	4aab      	ldr	r2, [pc, #684]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005964:	6853      	ldr	r3, [r2, #4]
 8005966:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800596a:	6921      	ldr	r1, [r4, #16]
 800596c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005970:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	f013 0f08 	tst.w	r3, #8
 8005978:	d07d      	beq.n	8005a76 <HAL_RCC_OscConfig+0x3a2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800597a:	6963      	ldr	r3, [r4, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d063      	beq.n	8005a48 <HAL_RCC_OscConfig+0x374>
      uint32_t csr_temp = RCC->CSR;
 8005980:	4ba3      	ldr	r3, [pc, #652]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005986:	69a1      	ldr	r1, [r4, #24]
 8005988:	f003 0210 	and.w	r2, r3, #16
 800598c:	4291      	cmp	r1, r2
 800598e:	d010      	beq.n	80059b2 <HAL_RCC_OscConfig+0x2de>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005990:	f003 0203 	and.w	r2, r3, #3
 8005994:	2a02      	cmp	r2, #2
 8005996:	f000 81fd 	beq.w	8005d94 <HAL_RCC_OscConfig+0x6c0>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800599a:	f013 0f01 	tst.w	r3, #1
 800599e:	d13c      	bne.n	8005a1a <HAL_RCC_OscConfig+0x346>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80059a0:	4a9b      	ldr	r2, [pc, #620]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 80059a2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80059a6:	f023 0310 	bic.w	r3, r3, #16
 80059aa:	69a1      	ldr	r1, [r4, #24]
 80059ac:	430b      	orrs	r3, r1
 80059ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      __HAL_RCC_LSI_ENABLE();
 80059b2:	4a97      	ldr	r2, [pc, #604]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 80059b4:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80059c0:	f7fd fa66 	bl	8002e90 <HAL_GetTick>
 80059c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059c6:	4b92      	ldr	r3, [pc, #584]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 80059c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059cc:	f013 0f02 	tst.w	r3, #2
 80059d0:	d151      	bne.n	8005a76 <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d2:	f7fd fa5d 	bl	8002e90 <HAL_GetTick>
 80059d6:	1b80      	subs	r0, r0, r6
 80059d8:	2811      	cmp	r0, #17
 80059da:	d9f4      	bls.n	80059c6 <HAL_RCC_OscConfig+0x2f2>
          return HAL_TIMEOUT;
 80059dc:	2003      	movs	r0, #3
 80059de:	e1dc      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e0:	4a8b      	ldr	r2, [pc, #556]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 80059e2:	6853      	ldr	r3, [r2, #4]
 80059e4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059e8:	6921      	ldr	r1, [r4, #16]
 80059ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80059ee:	6053      	str	r3, [r2, #4]
 80059f0:	e7bf      	b.n	8005972 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80059f2:	4a87      	ldr	r2, [pc, #540]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80059fc:	f7fd fa48 	bl	8002e90 <HAL_GetTick>
 8005a00:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a02:	4b83      	ldr	r3, [pc, #524]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005a0a:	d0b2      	beq.n	8005972 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0c:	f7fd fa40 	bl	8002e90 <HAL_GetTick>
 8005a10:	1b80      	subs	r0, r0, r6
 8005a12:	2802      	cmp	r0, #2
 8005a14:	d9f5      	bls.n	8005a02 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8005a16:	2003      	movs	r0, #3
 8005a18:	e1bf      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
          __HAL_RCC_LSI_DISABLE();
 8005a1a:	4a7d      	ldr	r2, [pc, #500]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005a1c:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8005a28:	f7fd fa32 	bl	8002e90 <HAL_GetTick>
 8005a2c:	4606      	mov	r6, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a2e:	4b78      	ldr	r3, [pc, #480]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a34:	f013 0f02 	tst.w	r3, #2
 8005a38:	d0b2      	beq.n	80059a0 <HAL_RCC_OscConfig+0x2cc>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3a:	f7fd fa29 	bl	8002e90 <HAL_GetTick>
 8005a3e:	1b80      	subs	r0, r0, r6
 8005a40:	2811      	cmp	r0, #17
 8005a42:	d9f4      	bls.n	8005a2e <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8005a44:	2003      	movs	r0, #3
 8005a46:	e1a8      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_LSI_DISABLE();
 8005a48:	4a71      	ldr	r2, [pc, #452]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005a4a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005a56:	f7fd fa1b 	bl	8002e90 <HAL_GetTick>
 8005a5a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a62:	f013 0f02 	tst.w	r3, #2
 8005a66:	d006      	beq.n	8005a76 <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a68:	f7fd fa12 	bl	8002e90 <HAL_GetTick>
 8005a6c:	1b80      	subs	r0, r0, r6
 8005a6e:	2811      	cmp	r0, #17
 8005a70:	d9f4      	bls.n	8005a5c <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 8005a72:	2003      	movs	r0, #3
 8005a74:	e191      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	f013 0f04 	tst.w	r3, #4
 8005a7c:	f000 808d 	beq.w	8005b9a <HAL_RCC_OscConfig+0x4c6>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a80:	4b63      	ldr	r3, [pc, #396]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a84:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005a88:	d12e      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x414>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	4b61      	ldr	r3, [pc, #388]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005a8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a8e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005a92:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005a9e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aa0:	4b5c      	ldr	r3, [pc, #368]	@ (8005c14 <HAL_RCC_OscConfig+0x540>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005aa8:	d020      	beq.n	8005aec <HAL_RCC_OscConfig+0x418>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005aaa:	68a3      	ldr	r3, [r4, #8]
 8005aac:	f013 0f01 	tst.w	r3, #1
 8005ab0:	d038      	beq.n	8005b24 <HAL_RCC_OscConfig+0x450>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005ab2:	4957      	ldr	r1, [pc, #348]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005ab4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005ac6:	68a3      	ldr	r3, [r4, #8]
 8005ac8:	f013 0f04 	tst.w	r3, #4
 8005acc:	d022      	beq.n	8005b14 <HAL_RCC_OscConfig+0x440>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ace:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005ad2:	f042 0204 	orr.w	r2, r2, #4
 8005ad6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ada:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
 8005ae6:	e02a      	b.n	8005b3e <HAL_RCC_OscConfig+0x46a>
    FlagStatus       pwrclkchanged = RESET;
 8005ae8:	2600      	movs	r6, #0
 8005aea:	e7d9      	b.n	8005aa0 <HAL_RCC_OscConfig+0x3cc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aec:	4a49      	ldr	r2, [pc, #292]	@ (8005c14 <HAL_RCC_OscConfig+0x540>)
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005af4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005af6:	f7fd f9cb 	bl	8002e90 <HAL_GetTick>
 8005afa:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005afc:	4b45      	ldr	r3, [pc, #276]	@ (8005c14 <HAL_RCC_OscConfig+0x540>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005b04:	d1d1      	bne.n	8005aaa <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b06:	f7fd f9c3 	bl	8002e90 <HAL_GetTick>
 8005b0a:	1bc0      	subs	r0, r0, r7
 8005b0c:	2802      	cmp	r0, #2
 8005b0e:	d9f5      	bls.n	8005afc <HAL_RCC_OscConfig+0x428>
          return HAL_TIMEOUT;
 8005b10:	2003      	movs	r0, #3
 8005b12:	e142      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b14:	4a3e      	ldr	r2, [pc, #248]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005b16:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b22:	e00c      	b.n	8005b3e <HAL_RCC_OscConfig+0x46a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b24:	4b3a      	ldr	r3, [pc, #232]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005b26:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b32:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005b36:	f022 0204 	bic.w	r2, r2, #4
 8005b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	b18b      	cbz	r3, 8005b66 <HAL_RCC_OscConfig+0x492>
      tickstart = HAL_GetTick();
 8005b42:	f7fd f9a5 	bl	8002e90 <HAL_GetTick>
 8005b46:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b48:	4b31      	ldr	r3, [pc, #196]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	f013 0f02 	tst.w	r3, #2
 8005b52:	d121      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4c4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b54:	f7fd f99c 	bl	8002e90 <HAL_GetTick>
 8005b58:	1bc0      	subs	r0, r0, r7
 8005b5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b5e:	4298      	cmp	r0, r3
 8005b60:	d9f2      	bls.n	8005b48 <HAL_RCC_OscConfig+0x474>
          return HAL_TIMEOUT;
 8005b62:	2003      	movs	r0, #3
 8005b64:	e119      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
      tickstart = HAL_GetTick();
 8005b66:	f7fd f993 	bl	8002e90 <HAL_GetTick>
 8005b6a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b6c:	4b28      	ldr	r3, [pc, #160]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b72:	f013 0f02 	tst.w	r3, #2
 8005b76:	d008      	beq.n	8005b8a <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b78:	f7fd f98a 	bl	8002e90 <HAL_GetTick>
 8005b7c:	1bc0      	subs	r0, r0, r7
 8005b7e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b82:	4298      	cmp	r0, r3
 8005b84:	d9f2      	bls.n	8005b6c <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8005b86:	2003      	movs	r0, #3
 8005b88:	e107      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005b8a:	4a21      	ldr	r2, [pc, #132]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005b8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if(pwrclkchanged == SET)
 8005b98:	b9e6      	cbnz	r6, 8005bd4 <HAL_RCC_OscConfig+0x500>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	f013 0f20 	tst.w	r3, #32
 8005ba0:	d03a      	beq.n	8005c18 <HAL_RCC_OscConfig+0x544>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ba2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ba4:	b1e3      	cbz	r3, 8005be0 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI48_ENABLE();
 8005ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005ba8:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005bb4:	f7fd f96c 	bl	8002e90 <HAL_GetTick>
 8005bb8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bba:	4b15      	ldr	r3, [pc, #84]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bc0:	f013 0f02 	tst.w	r3, #2
 8005bc4:	d128      	bne.n	8005c18 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bc6:	f7fd f963 	bl	8002e90 <HAL_GetTick>
 8005bca:	1b80      	subs	r0, r0, r6
 8005bcc:	2802      	cmp	r0, #2
 8005bce:	d9f4      	bls.n	8005bba <HAL_RCC_OscConfig+0x4e6>
          return HAL_TIMEOUT;
 8005bd0:	2003      	movs	r0, #3
 8005bd2:	e0e2      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005bd6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bde:	e7dc      	b.n	8005b9a <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSI48_DISABLE();
 8005be0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005be2:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005bee:	f7fd f94f 	bl	8002e90 <HAL_GetTick>
 8005bf2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bf4:	4b06      	ldr	r3, [pc, #24]	@ (8005c10 <HAL_RCC_OscConfig+0x53c>)
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bfa:	f013 0f02 	tst.w	r3, #2
 8005bfe:	d00b      	beq.n	8005c18 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c00:	f7fd f946 	bl	8002e90 <HAL_GetTick>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	2802      	cmp	r0, #2
 8005c08:	d9f4      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x520>
          return HAL_TIMEOUT;
 8005c0a:	2003      	movs	r0, #3
 8005c0c:	e0c5      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
 8005c0e:	bf00      	nop
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40007000 	.word	0x40007000
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80bc 	beq.w	8005d98 <HAL_RCC_OscConfig+0x6c4>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d017      	beq.n	8005c54 <HAL_RCC_OscConfig+0x580>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c24:	2d0c      	cmp	r5, #12
 8005c26:	f000 80bc 	beq.w	8005da2 <HAL_RCC_OscConfig+0x6ce>
        __HAL_RCC_PLL_DISABLE();
 8005c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005c2c:	6813      	ldr	r3, [r2, #0]
 8005c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c34:	f7fd f92c 	bl	8002e90 <HAL_GetTick>
 8005c38:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005c42:	f000 8094 	beq.w	8005d6e <HAL_RCC_OscConfig+0x69a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c46:	f7fd f923 	bl	8002e90 <HAL_GetTick>
 8005c4a:	1b00      	subs	r0, r0, r4
 8005c4c:	2802      	cmp	r0, #2
 8005c4e:	d9f4      	bls.n	8005c3a <HAL_RCC_OscConfig+0x566>
            return HAL_TIMEOUT;
 8005c50:	2003      	movs	r0, #3
 8005c52:	e0a2      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
      pll_config = RCC->PLLCFGR;
 8005c54:	4b54      	ldr	r3, [pc, #336]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005c56:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c58:	f003 0103 	and.w	r1, r3, #3
 8005c5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005c5e:	4291      	cmp	r1, r2
 8005c60:	d016      	beq.n	8005c90 <HAL_RCC_OscConfig+0x5bc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c62:	2d0c      	cmp	r5, #12
 8005c64:	f000 809b 	beq.w	8005d9e <HAL_RCC_OscConfig+0x6ca>
            __HAL_RCC_PLL_DISABLE();
 8005c68:	4a4f      	ldr	r2, [pc, #316]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c70:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8005c72:	f7fd f90d 	bl	8002e90 <HAL_GetTick>
 8005c76:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c78:	4b4b      	ldr	r3, [pc, #300]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005c80:	d02a      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x604>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fd f905 	bl	8002e90 <HAL_GetTick>
 8005c86:	1b40      	subs	r0, r0, r5
 8005c88:	2802      	cmp	r0, #2
 8005c8a:	d9f5      	bls.n	8005c78 <HAL_RCC_OscConfig+0x5a4>
                return HAL_TIMEOUT;
 8005c8c:	2003      	movs	r0, #3
 8005c8e:	e084      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c96:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c98:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005c9c:	d1e1      	bne.n	8005c62 <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c9e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ca2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ca4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005ca8:	d1db      	bne.n	8005c62 <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005caa:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8005cae:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005cb0:	0852      	lsrs	r2, r2, #1
 8005cb2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cb4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005cb8:	d1d3      	bne.n	8005c62 <HAL_RCC_OscConfig+0x58e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cba:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005cbe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005cc0:	0852      	lsrs	r2, r2, #1
 8005cc2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cc4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005cc8:	d1cb      	bne.n	8005c62 <HAL_RCC_OscConfig+0x58e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cca:	4b37      	ldr	r3, [pc, #220]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005cd2:	d032      	beq.n	8005d3a <HAL_RCC_OscConfig+0x666>
  return HAL_OK;
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e060      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cd8:	4a33      	ldr	r2, [pc, #204]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005cda:	68d3      	ldr	r3, [r2, #12]
 8005cdc:	4933      	ldr	r1, [pc, #204]	@ (8005dac <HAL_RCC_OscConfig+0x6d8>)
 8005cde:	4019      	ands	r1, r3
 8005ce0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005ce2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005ce4:	3801      	subs	r0, #1
 8005ce6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005cea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005cec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005cf0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005cf2:	0840      	lsrs	r0, r0, #1
 8005cf4:	3801      	subs	r0, #1
 8005cf6:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8005cfa:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005cfc:	0840      	lsrs	r0, r0, #1
 8005cfe:	3801      	subs	r0, #1
 8005d00:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8005d04:	4319      	orrs	r1, r3
 8005d06:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8005d08:	6813      	ldr	r3, [r2, #0]
 8005d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d0e:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d10:	68d3      	ldr	r3, [r2, #12]
 8005d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8005d18:	f7fd f8ba 	bl	8002e90 <HAL_GetTick>
 8005d1c:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d1e:	4b22      	ldr	r3, [pc, #136]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d26:	d106      	bne.n	8005d36 <HAL_RCC_OscConfig+0x662>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d28:	f7fd f8b2 	bl	8002e90 <HAL_GetTick>
 8005d2c:	1b00      	subs	r0, r0, r4
 8005d2e:	2802      	cmp	r0, #2
 8005d30:	d9f5      	bls.n	8005d1e <HAL_RCC_OscConfig+0x64a>
                return HAL_TIMEOUT;
 8005d32:	2003      	movs	r0, #3
 8005d34:	e031      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8005d36:	2000      	movs	r0, #0
 8005d38:	e02f      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
          __HAL_RCC_PLL_ENABLE();
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005d42:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005d4a:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8005d4c:	f7fd f8a0 	bl	8002e90 <HAL_GetTick>
 8005d50:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d52:	4b15      	ldr	r3, [pc, #84]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d5a:	d106      	bne.n	8005d6a <HAL_RCC_OscConfig+0x696>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d5c:	f7fd f898 	bl	8002e90 <HAL_GetTick>
 8005d60:	1b03      	subs	r3, r0, r4
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d9f5      	bls.n	8005d52 <HAL_RCC_OscConfig+0x67e>
              return HAL_TIMEOUT;
 8005d66:	2003      	movs	r0, #3
 8005d68:	e017      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	e015      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8005da8 <HAL_RCC_OscConfig+0x6d4>)
 8005d70:	68d3      	ldr	r3, [r2, #12]
 8005d72:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e00c      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
    return HAL_ERROR;
 8005d80:	2001      	movs	r0, #1
}
 8005d82:	4770      	bx	lr
        return HAL_ERROR;
 8005d84:	2001      	movs	r0, #1
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
            return HAL_ERROR;
 8005d88:	2001      	movs	r0, #1
 8005d8a:	e006      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	e004      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8005d90:	2001      	movs	r0, #1
 8005d92:	e002      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
          return HAL_ERROR;
 8005d94:	2001      	movs	r0, #1
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8005d98:	2000      	movs	r0, #0
}
 8005d9a:	b003      	add	sp, #12
 8005d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8005d9e:	2001      	movs	r0, #1
 8005da0:	e7fb      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
        return HAL_ERROR;
 8005da2:	2001      	movs	r0, #1
 8005da4:	e7f9      	b.n	8005d9a <HAL_RCC_OscConfig+0x6c6>
 8005da6:	bf00      	nop
 8005da8:	40021000 	.word	0x40021000
 8005dac:	f99f808c 	.word	0xf99f808c

08005db0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f000 80af 	beq.w	8005f14 <HAL_RCC_ClockConfig+0x164>
{
 8005db6:	b570      	push	{r4, r5, r6, lr}
 8005db8:	460d      	mov	r5, r1
 8005dba:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b59      	ldr	r3, [pc, #356]	@ (8005f24 <HAL_RCC_ClockConfig+0x174>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	d20b      	bcs.n	8005de0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc8:	4a56      	ldr	r2, [pc, #344]	@ (8005f24 <HAL_RCC_ClockConfig+0x174>)
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd4:	6813      	ldr	r3, [r2, #0]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	428b      	cmp	r3, r1
 8005ddc:	f040 809c 	bne.w	8005f18 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	f013 0f02 	tst.w	r3, #2
 8005de6:	d00c      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005de8:	68a2      	ldr	r2, [r4, #8]
 8005dea:	4b4f      	ldr	r3, [pc, #316]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d905      	bls.n	8005e02 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df6:	494c      	ldr	r1, [pc, #304]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005df8:	688b      	ldr	r3, [r1, #8]
 8005dfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	f013 0f01 	tst.w	r3, #1
 8005e08:	d039      	beq.n	8005e7e <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d009      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d026      	beq.n	8005e62 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e14:	bb63      	cbnz	r3, 8005e70 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e16:	4a44      	ldr	r2, [pc, #272]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	f012 0f02 	tst.w	r2, #2
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8005e20:	2001      	movs	r0, #1
 8005e22:	e076      	b.n	8005f12 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e24:	4a40      	ldr	r2, [pc, #256]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005e2c:	d076      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e2e:	493e      	ldr	r1, [pc, #248]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005e30:	688a      	ldr	r2, [r1, #8]
 8005e32:	f022 0203 	bic.w	r2, r2, #3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005e3a:	f7fd f829 	bl	8002e90 <HAL_GetTick>
 8005e3e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e40:	4b39      	ldr	r3, [pc, #228]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	6862      	ldr	r2, [r4, #4]
 8005e4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005e4e:	d016      	beq.n	8005e7e <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e50:	f7fd f81e 	bl	8002e90 <HAL_GetTick>
 8005e54:	1b80      	subs	r0, r0, r6
 8005e56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e5a:	4298      	cmp	r0, r3
 8005e5c:	d9f0      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8005e5e:	2003      	movs	r0, #3
 8005e60:	e057      	b.n	8005f12 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e62:	4a31      	ldr	r2, [pc, #196]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005e6a:	d1e0      	bne.n	8005e2e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	e050      	b.n	8005f12 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e70:	4a2d      	ldr	r2, [pc, #180]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8005e78:	d1d9      	bne.n	8005e2e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	e049      	b.n	8005f12 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	f013 0f02 	tst.w	r3, #2
 8005e84:	d00c      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e86:	68a2      	ldr	r2, [r4, #8]
 8005e88:	4b27      	ldr	r3, [pc, #156]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d205      	bcs.n	8005ea0 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e94:	4924      	ldr	r1, [pc, #144]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005e96:	688b      	ldr	r3, [r1, #8]
 8005e98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea0:	4b20      	ldr	r3, [pc, #128]	@ (8005f24 <HAL_RCC_ClockConfig+0x174>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	d90a      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eac:	4a1d      	ldr	r2, [pc, #116]	@ (8005f24 <HAL_RCC_ClockConfig+0x174>)
 8005eae:	6813      	ldr	r3, [r2, #0]
 8005eb0:	f023 0307 	bic.w	r3, r3, #7
 8005eb4:	432b      	orrs	r3, r5
 8005eb6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	d12e      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f013 0f04 	tst.w	r3, #4
 8005ec8:	d006      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eca:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005ecc:	6893      	ldr	r3, [r2, #8]
 8005ece:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ed2:	68e1      	ldr	r1, [r4, #12]
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	f013 0f08 	tst.w	r3, #8
 8005ede:	d007      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ee0:	4a11      	ldr	r2, [pc, #68]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005ee2:	6893      	ldr	r3, [r2, #8]
 8005ee4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005ee8:	6921      	ldr	r1, [r4, #16]
 8005eea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005eee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ef0:	f7ff fb9c 	bl	800562c <HAL_RCC_GetSysClockFreq>
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <HAL_RCC_ClockConfig+0x178>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005efc:	4a0b      	ldr	r2, [pc, #44]	@ (8005f2c <HAL_RCC_ClockConfig+0x17c>)
 8005efe:	5cd3      	ldrb	r3, [r2, r3]
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	40d8      	lsrs	r0, r3
 8005f06:	4b0a      	ldr	r3, [pc, #40]	@ (8005f30 <HAL_RCC_ClockConfig+0x180>)
 8005f08:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f34 <HAL_RCC_ClockConfig+0x184>)
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	f7fc ff75 	bl	8002dfc <HAL_InitTick>
}
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005f14:	2001      	movs	r0, #1
}
 8005f16:	4770      	bx	lr
      return HAL_ERROR;
 8005f18:	2001      	movs	r0, #1
 8005f1a:	e7fa      	b.n	8005f12 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	e7f8      	b.n	8005f12 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8005f20:	2001      	movs	r0, #1
 8005f22:	e7f6      	b.n	8005f12 <HAL_RCC_ClockConfig+0x162>
 8005f24:	40022000 	.word	0x40022000
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	0800d054 	.word	0x0800d054
 8005f30:	200000c4 	.word	0x200000c4
 8005f34:	200000bc 	.word	0x200000bc

08005f38 <HAL_RCC_GetHCLKFreq>:
}
 8005f38:	4b01      	ldr	r3, [pc, #4]	@ (8005f40 <HAL_RCC_GetHCLKFreq+0x8>)
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	200000c4 	.word	0x200000c4

08005f44 <HAL_RCC_GetPCLK1Freq>:
{
 8005f44:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f46:	f7ff fff7 	bl	8005f38 <HAL_RCC_GetHCLKFreq>
 8005f4a:	4b05      	ldr	r3, [pc, #20]	@ (8005f60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005f52:	4a04      	ldr	r2, [pc, #16]	@ (8005f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f54:	5cd3      	ldrb	r3, [r2, r3]
 8005f56:	f003 031f 	and.w	r3, r3, #31
}
 8005f5a:	40d8      	lsrs	r0, r3
 8005f5c:	bd08      	pop	{r3, pc}
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000
 8005f64:	0800d04c 	.word	0x0800d04c

08005f68 <HAL_RCC_GetPCLK2Freq>:
{
 8005f68:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f6a:	f7ff ffe5 	bl	8005f38 <HAL_RCC_GetHCLKFreq>
 8005f6e:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005f76:	4a04      	ldr	r2, [pc, #16]	@ (8005f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f78:	5cd3      	ldrb	r3, [r2, r3]
 8005f7a:	f003 031f 	and.w	r3, r3, #31
}
 8005f7e:	40d8      	lsrs	r0, r3
 8005f80:	bd08      	pop	{r3, pc}
 8005f82:	bf00      	nop
 8005f84:	40021000 	.word	0x40021000
 8005f88:	0800d04c 	.word	0x0800d04c

08005f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f92:	6803      	ldr	r3, [r0, #0]
 8005f94:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005f98:	d069      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xe2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f9a:	4b87      	ldr	r3, [pc, #540]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005fa2:	d11e      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa4:	4b84      	ldr	r3, [pc, #528]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fa6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005fa8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005fac:	659a      	str	r2, [r3, #88]	@ 0x58
 8005fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005fb8:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fba:	4a80      	ldr	r2, [pc, #512]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005fbc:	6813      	ldr	r3, [r2, #0]
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fc4:	f7fc ff64 	bl	8002e90 <HAL_GetTick>
 8005fc8:	4605      	mov	r5, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fca:	4b7c      	ldr	r3, [pc, #496]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005fd2:	d108      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd4:	f7fc ff5c 	bl	8002e90 <HAL_GetTick>
 8005fd8:	1b40      	subs	r0, r0, r5
 8005fda:	2802      	cmp	r0, #2
 8005fdc:	d9f5      	bls.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8005fde:	2503      	movs	r5, #3
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8005fe2:	2600      	movs	r6, #0
 8005fe4:	e7e9      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe6:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8005fe8:	bb45      	cbnz	r5, 800603c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fea:	4b73      	ldr	r3, [pc, #460]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ff0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005ff4:	d018      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005ff6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d012      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ffe:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006006:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800600a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800600e:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006012:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8006016:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800601a:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800601e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006022:	f013 0f01 	tst.w	r3, #1
 8006026:	d110      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }

      if(ret == HAL_OK)
 8006028:	b945      	cbnz	r5, 800603c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800602a:	4a63      	ldr	r2, [pc, #396]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800602c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006034:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006036:	430b      	orrs	r3, r1
 8006038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800603c:	b1c6      	cbz	r6, 8006070 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603e:	4a5e      	ldr	r2, [pc, #376]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006040:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006046:	6593      	str	r3, [r2, #88]	@ 0x58
 8006048:	e012      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 800604a:	f7fc ff21 	bl	8002e90 <HAL_GetTick>
 800604e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006050:	4b59      	ldr	r3, [pc, #356]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006056:	f013 0f02 	tst.w	r3, #2
 800605a:	d1e5      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605c:	f7fc ff18 	bl	8002e90 <HAL_GetTick>
 8006060:	1bc0      	subs	r0, r0, r7
 8006062:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006066:	4298      	cmp	r0, r3
 8006068:	d9f2      	bls.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 800606a:	2503      	movs	r5, #3
 800606c:	e7dc      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800606e:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	f013 0f01 	tst.w	r3, #1
 8006076:	d008      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006078:	4a4f      	ldr	r2, [pc, #316]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800607a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800607e:	f023 0303 	bic.w	r3, r3, #3
 8006082:	6861      	ldr	r1, [r4, #4]
 8006084:	430b      	orrs	r3, r1
 8006086:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f013 0f02 	tst.w	r3, #2
 8006090:	d008      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006092:	4a49      	ldr	r2, [pc, #292]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006094:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006098:	f023 030c 	bic.w	r3, r3, #12
 800609c:	68a1      	ldr	r1, [r4, #8]
 800609e:	430b      	orrs	r3, r1
 80060a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	f013 0f04 	tst.w	r3, #4
 80060aa:	d008      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060ac:	4a42      	ldr	r2, [pc, #264]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80060ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80060b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80060b6:	68e1      	ldr	r1, [r4, #12]
 80060b8:	430b      	orrs	r3, r1
 80060ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f013 0f20 	tst.w	r3, #32
 80060c4:	d008      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060c6:	4a3c      	ldr	r2, [pc, #240]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80060c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80060cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80060d0:	6921      	ldr	r1, [r4, #16]
 80060d2:	430b      	orrs	r3, r1
 80060d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80060de:	d008      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060e0:	4a35      	ldr	r2, [pc, #212]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80060e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80060e6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80060ea:	6a21      	ldr	r1, [r4, #32]
 80060ec:	430b      	orrs	r3, r1
 80060ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80060f8:	d008      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060fa:	4a2f      	ldr	r2, [pc, #188]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80060fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006100:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006104:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006106:	430b      	orrs	r3, r1
 8006108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006112:	d008      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006114:	4a28      	ldr	r2, [pc, #160]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006116:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800611a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800611e:	6961      	ldr	r1, [r4, #20]
 8006120:	430b      	orrs	r3, r1
 8006122:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800612c:	d008      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800612e:	4a22      	ldr	r2, [pc, #136]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006130:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006134:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006138:	69a1      	ldr	r1, [r4, #24]
 800613a:	430b      	orrs	r3, r1
 800613c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006146:	d008      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006148:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800614a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800614e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006152:	69e1      	ldr	r1, [r4, #28]
 8006154:	430b      	orrs	r3, r1
 8006156:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006160:	d00c      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006162:	4a15      	ldr	r2, [pc, #84]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006164:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006168:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800616c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800616e:	430b      	orrs	r3, r1
 8006170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006174:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800617a:	d013      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006182:	d00c      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006184:	4a0c      	ldr	r2, [pc, #48]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006186:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800618a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800618e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006190:	430b      	orrs	r3, r1
 8006192:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006196:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800619c:	d007      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 800619e:	4628      	mov	r0, r5
 80061a0:	b003      	add	sp, #12
 80061a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061a4:	68d3      	ldr	r3, [r2, #12]
 80061a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061aa:	60d3      	str	r3, [r2, #12]
 80061ac:	e7e6      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ae:	68d3      	ldr	r3, [r2, #12]
 80061b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061b4:	60d3      	str	r3, [r2, #12]
 80061b6:	e7f2      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40007000 	.word	0x40007000

080061c0 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80061c0:	4a02      	ldr	r2, [pc, #8]	@ (80061cc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80061c2:	6813      	ldr	r3, [r2, #0]
 80061c4:	f043 0304 	orr.w	r3, r3, #4
 80061c8:	6013      	str	r3, [r2, #0]
}
 80061ca:	4770      	bx	lr
 80061cc:	40021000 	.word	0x40021000

080061d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4604      	mov	r4, r0
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80061d4:	6803      	ldr	r3, [r0, #0]
 80061d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006200 <HAL_RTC_WaitForSynchro+0x30>)
 80061d8:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 80061da:	f7fc fe59 	bl	8002e90 <HAL_GetTick>
 80061de:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f013 0f20 	tst.w	r3, #32
 80061e8:	d107      	bne.n	80061fa <HAL_RTC_WaitForSynchro+0x2a>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061ea:	f7fc fe51 	bl	8002e90 <HAL_GetTick>
 80061ee:	1b40      	subs	r0, r0, r5
 80061f0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80061f4:	d9f4      	bls.n	80061e0 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 80061f6:	2003      	movs	r0, #3
 80061f8:	e000      	b.n	80061fc <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 80061fa:	2000      	movs	r0, #0
}
 80061fc:	bd38      	pop	{r3, r4, r5, pc}
 80061fe:	bf00      	nop
 8006200:	0001005c 	.word	0x0001005c

08006204 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006204:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006206:	6803      	ldr	r3, [r0, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800620e:	d002      	beq.n	8006216 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006210:	2500      	movs	r5, #0
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 8006212:	4628      	mov	r0, r5
 8006214:	bd70      	pop	{r4, r5, r6, pc}
 8006216:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800621e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006220:	f7fc fe36 	bl	8002e90 <HAL_GetTick>
 8006224:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006226:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006230:	d1ef      	bne.n	8006212 <RTC_EnterInitMode+0xe>
 8006232:	2d03      	cmp	r5, #3
 8006234:	d0ed      	beq.n	8006212 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006236:	f7fc fe2b 	bl	8002e90 <HAL_GetTick>
 800623a:	1b83      	subs	r3, r0, r6
 800623c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006240:	d9f2      	bls.n	8006228 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006242:	2503      	movs	r5, #3
 8006244:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8006248:	e7ee      	b.n	8006228 <RTC_EnterInitMode+0x24>
	...

0800624c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800624c:	b510      	push	{r4, lr}
 800624e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006250:	4b10      	ldr	r3, [pc, #64]	@ (8006294 <RTC_ExitInitMode+0x48>)
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006258:	60da      	str	r2, [r3, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f013 0f20 	tst.w	r3, #32
 8006260:	d106      	bne.n	8006270 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006262:	f7ff ffb5 	bl	80061d0 <HAL_RTC_WaitForSynchro>
 8006266:	b198      	cbz	r0, 8006290 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006268:	2003      	movs	r0, #3
 800626a:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
      status = HAL_TIMEOUT;
 800626e:	e00f      	b.n	8006290 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006270:	4a08      	ldr	r2, [pc, #32]	@ (8006294 <RTC_ExitInitMode+0x48>)
 8006272:	6993      	ldr	r3, [r2, #24]
 8006274:	f023 0320 	bic.w	r3, r3, #32
 8006278:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800627a:	f7ff ffa9 	bl	80061d0 <HAL_RTC_WaitForSynchro>
 800627e:	b110      	cbz	r0, 8006286 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006280:	2003      	movs	r0, #3
 8006282:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006286:	4a03      	ldr	r2, [pc, #12]	@ (8006294 <RTC_ExitInitMode+0x48>)
 8006288:	6993      	ldr	r3, [r2, #24]
 800628a:	f043 0320 	orr.w	r3, r3, #32
 800628e:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006290:	bd10      	pop	{r4, pc}
 8006292:	bf00      	nop
 8006294:	40002800 	.word	0x40002800

08006298 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006298:	2800      	cmp	r0, #0
 800629a:	d054      	beq.n	8006346 <HAL_RTC_Init+0xae>
{
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80062a0:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80062a4:	b17b      	cbz	r3, 80062c6 <HAL_RTC_Init+0x2e>
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80062a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80062aa:	6063      	str	r3, [r4, #4]
    hrtc->State = HAL_RTC_STATE_BUSY;
 80062ac:	2302      	movs	r3, #2
 80062ae:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80062b2:	4b26      	ldr	r3, [pc, #152]	@ (800634c <HAL_RTC_Init+0xb4>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f013 0f10 	tst.w	r3, #16
 80062ba:	d009      	beq.n	80062d0 <HAL_RTC_Init+0x38>
      status = HAL_OK;
 80062bc:	2000      	movs	r0, #0
        hrtc->State = HAL_RTC_STATE_READY;
 80062be:	2301      	movs	r3, #1
 80062c0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
}
 80062c4:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80062c6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
      HAL_RTC_MspInit(hrtc);
 80062ca:	f7fe f80b 	bl	80042e4 <HAL_RTC_MspInit>
 80062ce:	e7ea      	b.n	80062a6 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	22ca      	movs	r2, #202	@ 0xca
 80062d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	2253      	movs	r2, #83	@ 0x53
 80062da:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 80062dc:	4620      	mov	r0, r4
 80062de:	f7ff ff91 	bl	8006204 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80062e2:	b9c0      	cbnz	r0, 8006316 <HAL_RTC_Init+0x7e>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	6993      	ldr	r3, [r2, #24]
 80062e8:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80062ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f0:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062f2:	6821      	ldr	r1, [r4, #0]
 80062f4:	698a      	ldr	r2, [r1, #24]
 80062f6:	68a3      	ldr	r3, [r4, #8]
 80062f8:	6960      	ldr	r0, [r4, #20]
 80062fa:	4303      	orrs	r3, r0
 80062fc:	69e0      	ldr	r0, [r4, #28]
 80062fe:	4303      	orrs	r3, r0
 8006300:	4313      	orrs	r3, r2
 8006302:	618b      	str	r3, [r1, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	6922      	ldr	r2, [r4, #16]
 8006308:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	6913      	ldr	r3, [r2, #16]
 800630e:	68e1      	ldr	r1, [r4, #12]
 8006310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006314:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8006316:	4620      	mov	r0, r4
 8006318:	f7ff ff98 	bl	800624c <RTC_ExitInitMode>
      if (status == HAL_OK)
 800631c:	b968      	cbnz	r0, 800633a <HAL_RTC_Init+0xa2>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800631e:	6822      	ldr	r2, [r4, #0]
 8006320:	6993      	ldr	r3, [r2, #24]
 8006322:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8006326:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006328:	6821      	ldr	r1, [r4, #0]
 800632a:	698a      	ldr	r2, [r1, #24]
 800632c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800632e:	6a25      	ldr	r5, [r4, #32]
 8006330:	432b      	orrs	r3, r5
 8006332:	69a5      	ldr	r5, [r4, #24]
 8006334:	432b      	orrs	r3, r5
 8006336:	4313      	orrs	r3, r2
 8006338:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	22ff      	movs	r2, #255	@ 0xff
 800633e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006340:	2800      	cmp	r0, #0
 8006342:	d1bf      	bne.n	80062c4 <HAL_RTC_Init+0x2c>
 8006344:	e7bb      	b.n	80062be <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006346:	2001      	movs	r0, #1
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40002800 	.word	0x40002800

08006350 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006350:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 8006352:	e002      	b.n	800635a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006354:	3301      	adds	r3, #1
    temp -= 10U;
 8006356:	380a      	subs	r0, #10
 8006358:	b2c0      	uxtb	r0, r0
  while (temp >= 10U)
 800635a:	2809      	cmp	r0, #9
 800635c:	d8fa      	bhi.n	8006354 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	b2db      	uxtb	r3, r3
}
 8006362:	4318      	orrs	r0, r3
 8006364:	4770      	bx	lr

08006366 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8006366:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 800636a:	2b01      	cmp	r3, #1
 800636c:	d05f      	beq.n	800642e <HAL_RTC_SetTime+0xc8>
{
 800636e:	b570      	push	{r4, r5, r6, lr}
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 8006376:	2301      	movs	r3, #1
 8006378:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
  hrtc->State = HAL_RTC_STATE_BUSY;
 800637c:	2302      	movs	r3, #2
 800637e:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006382:	6803      	ldr	r3, [r0, #0]
 8006384:	22ca      	movs	r2, #202	@ 0xca
 8006386:	625a      	str	r2, [r3, #36]	@ 0x24
 8006388:	6803      	ldr	r3, [r0, #0]
 800638a:	2253      	movs	r2, #83	@ 0x53
 800638c:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800638e:	f7ff ff39 	bl	8006204 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006392:	2800      	cmp	r0, #0
 8006394:	d12e      	bne.n	80063f4 <HAL_RTC_SetTime+0x8e>
    if (Format == RTC_FORMAT_BIN)
 8006396:	2e00      	cmp	r6, #0
 8006398:	d137      	bne.n	800640a <HAL_RTC_SetTime+0xa4>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80063a2:	d101      	bne.n	80063a8 <HAL_RTC_SetTime+0x42>
        sTime->TimeFormat = 0x00U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	70eb      	strb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063a8:	7828      	ldrb	r0, [r5, #0]
 80063aa:	f7ff ffd1 	bl	8006350 <RTC_ByteToBcd2>
 80063ae:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063b0:	7868      	ldrb	r0, [r5, #1]
 80063b2:	f7ff ffcd 	bl	8006350 <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063b6:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80063ba:	78a8      	ldrb	r0, [r5, #2]
 80063bc:	f7ff ffc8 	bl	8006350 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063c0:	ea46 0300 	orr.w	r3, r6, r0
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80063c4:	78ea      	ldrb	r2, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063c6:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80063d0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80063d4:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	6993      	ldr	r3, [r2, #24]
 80063da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063de:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063e0:	6821      	ldr	r1, [r4, #0]
 80063e2:	698b      	ldr	r3, [r1, #24]
 80063e4:	68ea      	ldr	r2, [r5, #12]
 80063e6:	6928      	ldr	r0, [r5, #16]
 80063e8:	4302      	orrs	r2, r0
 80063ea:	4313      	orrs	r3, r2
 80063ec:	618b      	str	r3, [r1, #24]
    status = RTC_ExitInitMode(hrtc);
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff ff2c 	bl	800624c <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	22ff      	movs	r2, #255	@ 0xff
 80063f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80063fa:	b910      	cbnz	r0, 8006402 <HAL_RTC_SetTime+0x9c>
    hrtc->State = HAL_RTC_STATE_READY;
 80063fc:	2301      	movs	r3, #1
 80063fe:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
  __HAL_UNLOCK(hrtc);
 8006402:	2300      	movs	r3, #0
 8006404:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 8006408:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006412:	d101      	bne.n	8006418 <HAL_RTC_SetTime+0xb2>
        sTime->TimeFormat = 0x00U;
 8006414:	2300      	movs	r3, #0
 8006416:	70eb      	strb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006418:	782a      	ldrb	r2, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800641a:	786b      	ldrb	r3, [r5, #1]
 800641c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800641e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006422:	78aa      	ldrb	r2, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006424:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006426:	78ea      	ldrb	r2, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006428:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800642c:	e7cd      	b.n	80063ca <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 800642e:	2002      	movs	r0, #2
}
 8006430:	4770      	bx	lr

08006432 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8006432:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8006436:	2b01      	cmp	r3, #1
 8006438:	d04b      	beq.n	80064d2 <HAL_RTC_SetDate+0xa0>
{
 800643a:	b570      	push	{r4, r5, r6, lr}
 800643c:	4604      	mov	r4, r0
 800643e:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8006440:	2301      	movs	r3, #1
 8006442:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006446:	2302      	movs	r3, #2
 8006448:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800644c:	b1f2      	cbz	r2, 800648c <HAL_RTC_SetDate+0x5a>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800644e:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006450:	784d      	ldrb	r5, [r1, #1]
 8006452:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006454:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006458:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800645a:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800645c:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800645e:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	22ca      	movs	r2, #202	@ 0xca
 8006466:	625a      	str	r2, [r3, #36]	@ 0x24
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	2253      	movs	r2, #83	@ 0x53
 800646c:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800646e:	4620      	mov	r0, r4
 8006470:	f7ff fec8 	bl	8006204 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006474:	b318      	cbz	r0, 80064be <HAL_RTC_SetDate+0x8c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	22ff      	movs	r2, #255	@ 0xff
 800647a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800647c:	b910      	cbnz	r0, 8006484 <HAL_RTC_SetDate+0x52>
    hrtc->State = HAL_RTC_STATE_READY ;
 800647e:	2301      	movs	r3, #1
 8006480:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
  __HAL_UNLOCK(hrtc);
 8006484:	2300      	movs	r3, #0
 8006486:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 800648a:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800648c:	784b      	ldrb	r3, [r1, #1]
 800648e:	f013 0f10 	tst.w	r3, #16
 8006492:	d003      	beq.n	800649c <HAL_RTC_SetDate+0x6a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006494:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8006498:	330a      	adds	r3, #10
 800649a:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800649c:	78f0      	ldrb	r0, [r6, #3]
 800649e:	f7ff ff57 	bl	8006350 <RTC_ByteToBcd2>
 80064a2:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064a4:	7870      	ldrb	r0, [r6, #1]
 80064a6:	f7ff ff53 	bl	8006350 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064aa:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80064ae:	78b0      	ldrb	r0, [r6, #2]
 80064b0:	f7ff ff4e 	bl	8006350 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064b4:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80064b6:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064b8:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 80064bc:	e7d1      	b.n	8006462 <HAL_RTC_SetDate+0x30>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 80064c4:	f025 05c0 	bic.w	r5, r5, #192	@ 0xc0
 80064c8:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80064ca:	4620      	mov	r0, r4
 80064cc:	f7ff febe 	bl	800624c <RTC_ExitInitMode>
 80064d0:	e7d1      	b.n	8006476 <HAL_RTC_SetDate+0x44>
  __HAL_LOCK(hrtc);
 80064d2:	2002      	movs	r0, #2
}
 80064d4:	4770      	bx	lr

080064d6 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80064d6:	0903      	lsrs	r3, r0, #4
 80064d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 80064dc:	f000 000f 	and.w	r0, r0, #15
 80064e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80064e4:	b2c0      	uxtb	r0, r0
 80064e6:	4770      	bx	lr

080064e8 <HAL_RTC_GetTime>:
{
 80064e8:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80064ea:	6803      	ldr	r3, [r0, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80064f0:	6803      	ldr	r3, [r0, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80064f8:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80064fa:	6803      	ldr	r3, [r0, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80064fe:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8006502:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006504:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8006508:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800650a:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 800650e:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006510:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8006514:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8006516:	b95a      	cbnz	r2, 8006530 <HAL_RTC_GetTime+0x48>
 8006518:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800651a:	f7ff ffdc 	bl	80064d6 <RTC_Bcd2ToByte>
 800651e:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff ffd8 	bl	80064d6 <RTC_Bcd2ToByte>
 8006526:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006528:	4628      	mov	r0, r5
 800652a:	f7ff ffd4 	bl	80064d6 <RTC_Bcd2ToByte>
 800652e:	70a0      	strb	r0, [r4, #2]
}
 8006530:	2000      	movs	r0, #0
 8006532:	bd70      	pop	{r4, r5, r6, pc}

08006534 <HAL_RTC_GetDate>:
{
 8006534:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006536:	6803      	ldr	r3, [r0, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800653a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800653e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006540:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8006544:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006546:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 800654a:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800654c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006550:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006552:	b95a      	cbnz	r2, 800656c <HAL_RTC_GetDate+0x38>
 8006554:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006556:	f7ff ffbe 	bl	80064d6 <RTC_Bcd2ToByte>
 800655a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800655c:	4630      	mov	r0, r6
 800655e:	f7ff ffba 	bl	80064d6 <RTC_Bcd2ToByte>
 8006562:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006564:	4628      	mov	r0, r5
 8006566:	f7ff ffb6 	bl	80064d6 <RTC_Bcd2ToByte>
 800656a:	70a0      	strb	r0, [r4, #2]
}
 800656c:	2000      	movs	r0, #0
 800656e:	bd70      	pop	{r4, r5, r6, pc}

08006570 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8006570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006574:	461f      	mov	r7, r3
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006576:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 800657a:	2b01      	cmp	r3, #1
 800657c:	d066      	beq.n	800664c <HAL_RTCEx_SetWakeUpTimer_IT+0xdc>
 800657e:	4604      	mov	r4, r0
 8006580:	460e      	mov	r6, r1
 8006582:	4690      	mov	r8, r2
 8006584:	2301      	movs	r3, #1
 8006586:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800658a:	2302      	movs	r3, #2
 800658c:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006590:	6803      	ldr	r3, [r0, #0]
 8006592:	22ca      	movs	r2, #202	@ 0xca
 8006594:	625a      	str	r2, [r3, #36]	@ 0x24
 8006596:	6803      	ldr	r3, [r0, #0]
 8006598:	2253      	movs	r2, #83	@ 0x53
 800659a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800659c:	6802      	ldr	r2, [r0, #0]
 800659e:	6993      	ldr	r3, [r2, #24]
 80065a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065a4:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80065a6:	6803      	ldr	r3, [r0, #0]
 80065a8:	2204      	movs	r2, #4
 80065aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80065ac:	6803      	ldr	r3, [r0, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80065b4:	d02b      	beq.n	800660e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 80065bc:	615e      	str	r6, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	6993      	ldr	r3, [r2, #24]
 80065c2:	f023 0307 	bic.w	r3, r3, #7
 80065c6:	ea43 0308 	orr.w	r3, r3, r8
 80065ca:	6193      	str	r3, [r2, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	d037      	beq.n	8006640 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 80065d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006650 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>)
 80065d2:	6853      	ldr	r3, [r2, #4]
 80065d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065d8:	6053      	str	r3, [r2, #4]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80065da:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>)
 80065dc:	6893      	ldr	r3, [r2, #8]
 80065de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	6993      	ldr	r3, [r2, #24]
 80065e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065ec:	6193      	str	r3, [r2, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80065ee:	6822      	ldr	r2, [r4, #0]
 80065f0:	6993      	ldr	r3, [r2, #24]
 80065f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065f6:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	22ff      	movs	r2, #255	@ 0xff
 80065fc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80065fe:	2301      	movs	r3, #1
 8006600:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006604:	2000      	movs	r0, #0
 8006606:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28

  return HAL_OK;
}
 800660a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    tickstart = HAL_GetTick();
 800660e:	f7fc fc3f 	bl	8002e90 <HAL_GetTick>
 8006612:	4681      	mov	r9, r0
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	68dd      	ldr	r5, [r3, #12]
 8006618:	f015 0f04 	tst.w	r5, #4
 800661c:	d1cb      	bne.n	80065b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x46>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800661e:	f7fc fc37 	bl	8002e90 <HAL_GetTick>
 8006622:	eba0 0009 	sub.w	r0, r0, r9
 8006626:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800662a:	d9f3      	bls.n	8006614 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	22ff      	movs	r2, #255	@ 0xff
 8006630:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006632:	2003      	movs	r0, #3
 8006634:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
        __HAL_UNLOCK(hrtc);
 8006638:	2300      	movs	r3, #0
 800663a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        return HAL_TIMEOUT;
 800663e:	e7e4      	b.n	800660a <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006640:	4a03      	ldr	r2, [pc, #12]	@ (8006650 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>)
 8006642:	6813      	ldr	r3, [r2, #0]
 8006644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e7c6      	b.n	80065da <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
  __HAL_LOCK(hrtc);
 800664c:	2002      	movs	r0, #2
 800664e:	e7dc      	b.n	800660a <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
 8006650:	40010400 	.word	0x40010400

08006654 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006654:	b510      	push	{r4, lr}
 8006656:	4604      	mov	r4, r0
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006658:	4b08      	ldr	r3, [pc, #32]	@ (800667c <HAL_RTCEx_WakeUpTimerIRQHandler+0x28>)
 800665a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800665e:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 8006660:	6803      	ldr	r3, [r0, #0]
 8006662:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006664:	f012 0f04 	tst.w	r2, #4
 8006668:	d103      	bne.n	8006672 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1e>
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800666a:	2301      	movs	r3, #1
 800666c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
}
 8006670:	bd10      	pop	{r4, pc}
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 8006672:	2204      	movs	r2, #4
 8006674:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006676:	f7fb ff8f 	bl	8002598 <HAL_RTCEx_WakeUpTimerEventCallback>
 800667a:	e7f6      	b.n	800666a <HAL_RTCEx_WakeUpTimerIRQHandler+0x16>
 800667c:	40010400 	.word	0x40010400

08006680 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006680:	b082      	sub	sp, #8
  uint32_t __IO tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006682:	6803      	ldr	r3, [r0, #0]
 8006684:	6840      	ldr	r0, [r0, #4]
 8006686:	4403      	add	r3, r0

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 8006688:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800668c:	9301      	str	r3, [sp, #4]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 800668e:	9b01      	ldr	r3, [sp, #4]
 8006690:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006694:	9301      	str	r3, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	601a      	str	r2, [r3, #0]
}
 800669a:	b002      	add	sp, #8
 800669c:	4770      	bx	lr

0800669e <HAL_RTCEx_BKUPRead>:
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
  uint32_t tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800669e:	6803      	ldr	r3, [r0, #0]
 80066a0:	6842      	ldr	r2, [r0, #4]
 80066a2:	4413      	add	r3, r2

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 80066a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80066a8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80066ac:	4770      	bx	lr
	...

080066b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	4605      	mov	r5, r0
 80066b8:	4688      	mov	r8, r1
 80066ba:	4617      	mov	r7, r2
 80066bc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066be:	f7fc fbe7 	bl	8002e90 <HAL_GetTick>
 80066c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066c4:	1a1b      	subs	r3, r3, r0
 80066c6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80066ca:	f7fc fbe1 	bl	8002e90 <HAL_GetTick>
 80066ce:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066d0:	4b28      	ldr	r3, [pc, #160]	@ (8006774 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80066d8:	fb09 f303 	mul.w	r3, r9, r3
 80066dc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	689c      	ldr	r4, [r3, #8]
 80066e2:	ea38 0404 	bics.w	r4, r8, r4
 80066e6:	bf0c      	ite	eq
 80066e8:	2301      	moveq	r3, #1
 80066ea:	2300      	movne	r3, #0
 80066ec:	42bb      	cmp	r3, r7
 80066ee:	d03d      	beq.n	800676c <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80066f4:	d0f3      	beq.n	80066de <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066f6:	f7fc fbcb 	bl	8002e90 <HAL_GetTick>
 80066fa:	eba0 000a 	sub.w	r0, r0, sl
 80066fe:	4548      	cmp	r0, r9
 8006700:	d207      	bcs.n	8006712 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006702:	9a01      	ldr	r2, [sp, #4]
 8006704:	b102      	cbz	r2, 8006708 <SPI_WaitFlagStateUntilTimeout+0x58>
 8006706:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8006708:	9b01      	ldr	r3, [sp, #4]
 800670a:	3b01      	subs	r3, #1
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	4691      	mov	r9, r2
 8006710:	e7e5      	b.n	80066de <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006712:	682a      	ldr	r2, [r5, #0]
 8006714:	6853      	ldr	r3, [r2, #4]
 8006716:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800671a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800671c:	686b      	ldr	r3, [r5, #4]
 800671e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006722:	d00b      	beq.n	800673c <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006724:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672a:	d014      	beq.n	8006756 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 800672c:	2301      	movs	r3, #1
 800672e:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006732:	2300      	movs	r3, #0
 8006734:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006738:	2003      	movs	r0, #3
 800673a:	e018      	b.n	800676e <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800673c:	68ab      	ldr	r3, [r5, #8]
 800673e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006742:	d002      	beq.n	800674a <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006748:	d1ec      	bne.n	8006724 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 800674a:	682a      	ldr	r2, [r5, #0]
 800674c:	6813      	ldr	r3, [r2, #0]
 800674e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	e7e6      	b.n	8006724 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8006756:	682a      	ldr	r2, [r5, #0]
 8006758:	6813      	ldr	r3, [r2, #0]
 800675a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	682a      	ldr	r2, [r5, #0]
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	e7df      	b.n	800672c <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 800676c:	2000      	movs	r0, #0
}
 800676e:	b002      	add	sp, #8
 8006770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006774:	200000c4 	.word	0x200000c4

08006778 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	4606      	mov	r6, r0
 8006780:	460c      	mov	r4, r1
 8006782:	4615      	mov	r5, r2
 8006784:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800678c:	f7fc fb80 	bl	8002e90 <HAL_GetTick>
 8006790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006792:	1a1b      	subs	r3, r3, r0
 8006794:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8006798:	f7fc fb7a 	bl	8002e90 <HAL_GetTick>
 800679c:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800679e:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80067a2:	4b30      	ldr	r3, [pc, #192]	@ (8006864 <SPI_WaitFifoStateUntilTimeout+0xec>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80067ae:	0d1b      	lsrs	r3, r3, #20
 80067b0:	fb08 f303 	mul.w	r3, r8, r3
 80067b4:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80067b6:	e002      	b.n	80067be <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80067b8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80067bc:	d112      	bne.n	80067e4 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80067be:	6833      	ldr	r3, [r6, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	ea03 0c04 	and.w	ip, r3, r4
 80067c6:	45ac      	cmp	ip, r5
 80067c8:	d047      	beq.n	800685a <SPI_WaitFifoStateUntilTimeout+0xe2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067ca:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
 80067ce:	d1f3      	bne.n	80067b8 <SPI_WaitFifoStateUntilTimeout+0x40>
 80067d0:	2d00      	cmp	r5, #0
 80067d2:	d1f1      	bne.n	80067b8 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 80067d4:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80067de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067e2:	e7e9      	b.n	80067b8 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067e4:	f7fc fb54 	bl	8002e90 <HAL_GetTick>
 80067e8:	eba0 0009 	sub.w	r0, r0, r9
 80067ec:	4540      	cmp	r0, r8
 80067ee:	d207      	bcs.n	8006800 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067f0:	9a01      	ldr	r2, [sp, #4]
 80067f2:	b102      	cbz	r2, 80067f6 <SPI_WaitFifoStateUntilTimeout+0x7e>
 80067f4:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 80067f6:	9b01      	ldr	r3, [sp, #4]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	4690      	mov	r8, r2
 80067fe:	e7de      	b.n	80067be <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006800:	6832      	ldr	r2, [r6, #0]
 8006802:	6853      	ldr	r3, [r2, #4]
 8006804:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8006808:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800680a:	6873      	ldr	r3, [r6, #4]
 800680c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006810:	d00b      	beq.n	800682a <SPI_WaitFifoStateUntilTimeout+0xb2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006812:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8006814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006818:	d014      	beq.n	8006844 <SPI_WaitFifoStateUntilTimeout+0xcc>
        hspi->State = HAL_SPI_STATE_READY;
 800681a:	2301      	movs	r3, #1
 800681c:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006820:	2300      	movs	r3, #0
 8006822:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006826:	2003      	movs	r0, #3
 8006828:	e018      	b.n	800685c <SPI_WaitFifoStateUntilTimeout+0xe4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682a:	68b3      	ldr	r3, [r6, #8]
 800682c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006830:	d002      	beq.n	8006838 <SPI_WaitFifoStateUntilTimeout+0xc0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006836:	d1ec      	bne.n	8006812 <SPI_WaitFifoStateUntilTimeout+0x9a>
          __HAL_SPI_DISABLE(hspi);
 8006838:	6832      	ldr	r2, [r6, #0]
 800683a:	6813      	ldr	r3, [r2, #0]
 800683c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e7e6      	b.n	8006812 <SPI_WaitFifoStateUntilTimeout+0x9a>
          SPI_RESET_CRC(hspi);
 8006844:	6832      	ldr	r2, [r6, #0]
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	6832      	ldr	r2, [r6, #0]
 8006850:	6813      	ldr	r3, [r2, #0]
 8006852:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	e7df      	b.n	800681a <SPI_WaitFifoStateUntilTimeout+0xa2>
    }
  }

  return HAL_OK;
 800685a:	2000      	movs	r0, #0
}
 800685c:	b002      	add	sp, #8
 800685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006862:	bf00      	nop
 8006864:	200000c4 	.word	0x200000c4

08006868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006872:	9200      	str	r2, [sp, #0]
 8006874:	460b      	mov	r3, r1
 8006876:	2200      	movs	r2, #0
 8006878:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800687c:	f7ff ff7c 	bl	8006778 <SPI_WaitFifoStateUntilTimeout>
 8006880:	b9b0      	cbnz	r0, 80068b0 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006882:	9600      	str	r6, [sp, #0]
 8006884:	462b      	mov	r3, r5
 8006886:	2200      	movs	r2, #0
 8006888:	2180      	movs	r1, #128	@ 0x80
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff ff10 	bl	80066b0 <SPI_WaitFlagStateUntilTimeout>
 8006890:	b9a8      	cbnz	r0, 80068be <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006892:	9600      	str	r6, [sp, #0]
 8006894:	462b      	mov	r3, r5
 8006896:	2200      	movs	r2, #0
 8006898:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800689c:	4620      	mov	r0, r4
 800689e:	f7ff ff6b 	bl	8006778 <SPI_WaitFifoStateUntilTimeout>
 80068a2:	b150      	cbz	r0, 80068ba <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80068a6:	f043 0320 	orr.w	r3, r3, #32
 80068aa:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068ac:	2003      	movs	r0, #3
 80068ae:	e004      	b.n	80068ba <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80068b2:	f043 0320 	orr.w	r3, r3, #32
 80068b6:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068b8:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80068ba:	b002      	add	sp, #8
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068be:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80068c0:	f043 0320 	orr.w	r3, r3, #32
 80068c4:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068c6:	2003      	movs	r0, #3
 80068c8:	e7f7      	b.n	80068ba <SPI_EndRxTxTransaction+0x52>

080068ca <HAL_SPI_Init>:
  if (hspi == NULL)
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d06a      	beq.n	80069a4 <HAL_SPI_Init+0xda>
{
 80068ce:	b510      	push	{r4, lr}
 80068d0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80068d4:	b933      	cbnz	r3, 80068e4 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068d6:	6843      	ldr	r3, [r0, #4]
 80068d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068dc:	d005      	beq.n	80068ea <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068de:	2300      	movs	r3, #0
 80068e0:	61c3      	str	r3, [r0, #28]
 80068e2:	e002      	b.n	80068ea <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068e4:	2300      	movs	r3, #0
 80068e6:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068e8:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80068ee:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04d      	beq.n	8006992 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 80068f6:	2302      	movs	r3, #2
 80068f8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80068fc:	6822      	ldr	r2, [r4, #0]
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006904:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800690c:	d947      	bls.n	800699e <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800690e:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006910:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006914:	d004      	beq.n	8006920 <HAL_SPI_Init+0x56>
 8006916:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800691a:	d001      	beq.n	8006920 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800691c:	2300      	movs	r3, #0
 800691e:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006926:	68a1      	ldr	r1, [r4, #8]
 8006928:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 800692c:	430b      	orrs	r3, r1
 800692e:	6921      	ldr	r1, [r4, #16]
 8006930:	f001 0102 	and.w	r1, r1, #2
 8006934:	430b      	orrs	r3, r1
 8006936:	6961      	ldr	r1, [r4, #20]
 8006938:	f001 0101 	and.w	r1, r1, #1
 800693c:	430b      	orrs	r3, r1
 800693e:	69a1      	ldr	r1, [r4, #24]
 8006940:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8006944:	430b      	orrs	r3, r1
 8006946:	69e1      	ldr	r1, [r4, #28]
 8006948:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 800694c:	430b      	orrs	r3, r1
 800694e:	6a21      	ldr	r1, [r4, #32]
 8006950:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8006954:	430b      	orrs	r3, r1
 8006956:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006958:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 800695c:	6820      	ldr	r0, [r4, #0]
 800695e:	430b      	orrs	r3, r1
 8006960:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006962:	8b63      	ldrh	r3, [r4, #26]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800696a:	f001 0110 	and.w	r1, r1, #16
 800696e:	430b      	orrs	r3, r1
 8006970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006972:	f001 0108 	and.w	r1, r1, #8
 8006976:	430b      	orrs	r3, r1
 8006978:	68e1      	ldr	r1, [r4, #12]
 800697a:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800697e:	430b      	orrs	r3, r1
 8006980:	6821      	ldr	r1, [r4, #0]
 8006982:	4313      	orrs	r3, r2
 8006984:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006986:	2000      	movs	r0, #0
 8006988:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800698a:	2301      	movs	r3, #1
 800698c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8006990:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006992:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006996:	4620      	mov	r0, r4
 8006998:	f7fd fcd4 	bl	8004344 <HAL_SPI_MspInit>
 800699c:	e7ab      	b.n	80068f6 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800699e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80069a2:	e7b5      	b.n	8006910 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80069a4:	2001      	movs	r0, #1
}
 80069a6:	4770      	bx	lr

080069a8 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 80069a8:	b190      	cbz	r0, 80069d0 <HAL_SPI_DeInit+0x28>
{
 80069aa:	b510      	push	{r4, lr}
 80069ac:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 80069ae:	2302      	movs	r3, #2
 80069b0:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80069b4:	6802      	ldr	r2, [r0, #0]
 80069b6:	6813      	ldr	r3, [r2, #0]
 80069b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069bc:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80069be:	f7fd fcf3 	bl	80043a8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069c2:	2000      	movs	r0, #0
 80069c4:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80069c6:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80069ca:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
}
 80069ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80069d0:	2001      	movs	r0, #1
}
 80069d2:	4770      	bx	lr

080069d4 <HAL_SPI_Transmit>:
{
 80069d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069d8:	b083      	sub	sp, #12
 80069da:	4604      	mov	r4, r0
 80069dc:	4689      	mov	r9, r1
 80069de:	4690      	mov	r8, r2
 80069e0:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 80069e2:	f7fc fa55 	bl	8002e90 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80069e6:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	f040 80f0 	bne.w	8006bd0 <HAL_SPI_Transmit+0x1fc>
 80069f0:	4606      	mov	r6, r0
 80069f2:	b2df      	uxtb	r7, r3
  if ((pData == NULL) || (Size == 0U))
 80069f4:	f1b9 0f00 	cmp.w	r9, #0
 80069f8:	f000 80eb 	beq.w	8006bd2 <HAL_SPI_Transmit+0x1fe>
 80069fc:	f1b8 0f00 	cmp.w	r8, #0
 8006a00:	f000 80e7 	beq.w	8006bd2 <HAL_SPI_Transmit+0x1fe>
  __HAL_LOCK(hspi);
 8006a04:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	f000 80e6 	beq.w	8006bda <HAL_SPI_Transmit+0x206>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a14:	2303      	movs	r3, #3
 8006a16:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a1e:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006a22:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006a26:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a2a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006a2c:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006a30:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006a34:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006a36:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a38:	68a3      	ldr	r3, [r4, #8]
 8006a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a3e:	d01e      	beq.n	8006a7e <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8006a48:	d103      	bne.n	8006a52 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a50:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a52:	68e3      	ldr	r3, [r4, #12]
 8006a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a58:	d947      	bls.n	8006aea <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a5a:	6863      	ldr	r3, [r4, #4]
 8006a5c:	b113      	cbz	r3, 8006a64 <HAL_SPI_Transmit+0x90>
 8006a5e:	f1b8 0f01 	cmp.w	r8, #1
 8006a62:	d120      	bne.n	8006aa6 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	8812      	ldrh	r2, [r2, #0]
 8006a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a6e:	3302      	adds	r3, #2
 8006a70:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a72:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006a7c:	e013      	b.n	8006aa6 <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	6813      	ldr	r3, [r2, #0]
 8006a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a86:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	6813      	ldr	r3, [r2, #0]
 8006a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e7d5      	b.n	8006a40 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a94:	f7fc f9fc 	bl	8002e90 <HAL_GetTick>
 8006a98:	1b80      	subs	r0, r0, r6
 8006a9a:	42a8      	cmp	r0, r5
 8006a9c:	d302      	bcc.n	8006aa4 <HAL_SPI_Transmit+0xd0>
 8006a9e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006aa2:	d11a      	bne.n	8006ada <HAL_SPI_Transmit+0x106>
 8006aa4:	b1cd      	cbz	r5, 8006ada <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0U)
 8006aa6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d075      	beq.n	8006b9a <HAL_SPI_Transmit+0x1c6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	f012 0f02 	tst.w	r2, #2
 8006ab6:	d0ed      	beq.n	8006a94 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ab8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006aba:	8812      	ldrh	r2, [r2, #0]
 8006abc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006abe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ac4:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8006ac8:	fa1f fc8c 	uxth.w	ip, ip
 8006acc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ad0:	fa1f fc8c 	uxth.w	ip, ip
 8006ad4:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8006ad8:	e7e5      	b.n	8006aa6 <HAL_SPI_Transmit+0xd2>
          hspi->State = HAL_SPI_STATE_READY;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006ae6:	2703      	movs	r7, #3
 8006ae8:	e073      	b.n	8006bd2 <HAL_SPI_Transmit+0x1fe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aea:	6863      	ldr	r3, [r4, #4]
 8006aec:	b113      	cbz	r3, 8006af4 <HAL_SPI_Transmit+0x120>
 8006aee:	f1b8 0f01 	cmp.w	r8, #1
 8006af2:	d128      	bne.n	8006b46 <HAL_SPI_Transmit+0x172>
      if (hspi->TxXferCount > 1U)
 8006af4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d90c      	bls.n	8006b16 <HAL_SPI_Transmit+0x142>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006afc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	8812      	ldrh	r2, [r2, #0]
 8006b02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b04:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b06:	3302      	adds	r3, #2
 8006b08:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006b0a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b02      	subs	r3, #2
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006b14:	e017      	b.n	8006b46 <HAL_SPI_Transmit+0x172>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b16:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	7812      	ldrb	r2, [r2, #0]
 8006b1c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8006b1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b20:	3301      	adds	r3, #1
 8006b22:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b24:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006b2e:	e00a      	b.n	8006b46 <HAL_SPI_Transmit+0x172>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b36:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b38:	3302      	adds	r3, #2
 8006b3a:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b3c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b02      	subs	r3, #2
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006b46:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	b333      	cbz	r3, 8006b9a <HAL_SPI_Transmit+0x1c6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	6893      	ldr	r3, [r2, #8]
 8006b50:	f013 0f02 	tst.w	r3, #2
 8006b54:	d00f      	beq.n	8006b76 <HAL_SPI_Transmit+0x1a2>
        if (hspi->TxXferCount > 1U)
 8006b56:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d8e8      	bhi.n	8006b30 <HAL_SPI_Transmit+0x15c>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006b64:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b66:	3301      	adds	r3, #1
 8006b68:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b6a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006b74:	e7e7      	b.n	8006b46 <HAL_SPI_Transmit+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b76:	f7fc f98b 	bl	8002e90 <HAL_GetTick>
 8006b7a:	1b80      	subs	r0, r0, r6
 8006b7c:	42a8      	cmp	r0, r5
 8006b7e:	d302      	bcc.n	8006b86 <HAL_SPI_Transmit+0x1b2>
 8006b80:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006b84:	d101      	bne.n	8006b8a <HAL_SPI_Transmit+0x1b6>
 8006b86:	2d00      	cmp	r5, #0
 8006b88:	d1dd      	bne.n	8006b46 <HAL_SPI_Transmit+0x172>
          hspi->State = HAL_SPI_STATE_READY;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006b90:	2300      	movs	r3, #0
 8006b92:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006b96:	2703      	movs	r7, #3
 8006b98:	e01b      	b.n	8006bd2 <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b9a:	4632      	mov	r2, r6
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f7ff fe62 	bl	8006868 <SPI_EndRxTxTransaction>
 8006ba4:	b108      	cbz	r0, 8006baa <HAL_SPI_Transmit+0x1d6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba6:	2320      	movs	r3, #32
 8006ba8:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006baa:	68a3      	ldr	r3, [r4, #8]
 8006bac:	b933      	cbnz	r3, 8006bbc <HAL_SPI_Transmit+0x1e8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	9201      	str	r2, [sp, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006bca:	b913      	cbnz	r3, 8006bd2 <HAL_SPI_Transmit+0x1fe>
    return HAL_OK;
 8006bcc:	2700      	movs	r7, #0
 8006bce:	e000      	b.n	8006bd2 <HAL_SPI_Transmit+0x1fe>
    return HAL_BUSY;
 8006bd0:	2702      	movs	r7, #2
}
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	b003      	add	sp, #12
 8006bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006bda:	2702      	movs	r7, #2
 8006bdc:	e7f9      	b.n	8006bd2 <HAL_SPI_Transmit+0x1fe>

08006bde <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bde:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	e852 3f00 	ldrex	r3, [r2]
 8006be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	e842 3100 	strex	r1, r3, [r2]
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d1f6      	bne.n	8006bde <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	f102 0308 	add.w	r3, r2, #8
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	3208      	adds	r2, #8
 8006c00:	e842 3100 	strex	r1, r3, [r2]
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d1f3      	bne.n	8006bf0 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c08:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d006      	beq.n	8006c1c <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c0e:	2320      	movs	r3, #32
 8006c10:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c14:	2300      	movs	r3, #0
 8006c16:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c18:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8006c1a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	e852 3f00 	ldrex	r3, [r2]
 8006c22:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	e842 3100 	strex	r1, r3, [r2]
 8006c2a:	2900      	cmp	r1, #0
 8006c2c:	d1f6      	bne.n	8006c1c <UART_EndRxTransfer+0x3e>
 8006c2e:	e7ee      	b.n	8006c0e <UART_EndRxTransfer+0x30>

08006c30 <UART_SetConfig>:
{
 8006c30:	b510      	push	{r4, lr}
 8006c32:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c34:	6883      	ldr	r3, [r0, #8]
 8006c36:	6902      	ldr	r2, [r0, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	6942      	ldr	r2, [r0, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	69c2      	ldr	r2, [r0, #28]
 8006c40:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c42:	6801      	ldr	r1, [r0, #0]
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	4a94      	ldr	r2, [pc, #592]	@ (8006e98 <UART_SetConfig+0x268>)
 8006c48:	4002      	ands	r2, r0
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	6853      	ldr	r3, [r2, #4]
 8006c52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006c56:	68e1      	ldr	r1, [r4, #12]
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c5c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	4b8e      	ldr	r3, [pc, #568]	@ (8006e9c <UART_SetConfig+0x26c>)
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d001      	beq.n	8006c6a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8006c66:	6a23      	ldr	r3, [r4, #32]
 8006c68:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c6a:	6893      	ldr	r3, [r2, #8]
 8006c6c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	4a8a      	ldr	r2, [pc, #552]	@ (8006ea0 <UART_SetConfig+0x270>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d01f      	beq.n	8006cbc <UART_SetConfig+0x8c>
 8006c7c:	4a89      	ldr	r2, [pc, #548]	@ (8006ea4 <UART_SetConfig+0x274>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d030      	beq.n	8006ce4 <UART_SetConfig+0xb4>
 8006c82:	4a89      	ldr	r2, [pc, #548]	@ (8006ea8 <UART_SetConfig+0x278>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d046      	beq.n	8006d16 <UART_SetConfig+0xe6>
 8006c88:	4a84      	ldr	r2, [pc, #528]	@ (8006e9c <UART_SetConfig+0x26c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d055      	beq.n	8006d3a <UART_SetConfig+0x10a>
 8006c8e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c90:	4982      	ldr	r1, [pc, #520]	@ (8006e9c <UART_SetConfig+0x26c>)
 8006c92:	428b      	cmp	r3, r1
 8006c94:	d07a      	beq.n	8006d8c <UART_SetConfig+0x15c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c96:	69e0      	ldr	r0, [r4, #28]
 8006c98:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006c9c:	f000 80a6 	beq.w	8006dec <UART_SetConfig+0x1bc>
    switch (clocksource)
 8006ca0:	2a08      	cmp	r2, #8
 8006ca2:	f200 8109 	bhi.w	8006eb8 <UART_SetConfig+0x288>
 8006ca6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006caa:	00ce      	.short	0x00ce
 8006cac:	00cc00e2 	.word	0x00cc00e2
 8006cb0:	00e50107 	.word	0x00e50107
 8006cb4:	01070107 	.word	0x01070107
 8006cb8:	00e80107 	.word	0x00e80107
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cbc:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8006cc0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006cc4:	f002 0203 	and.w	r2, r2, #3
 8006cc8:	2a03      	cmp	r2, #3
 8006cca:	d809      	bhi.n	8006ce0 <UART_SetConfig+0xb0>
 8006ccc:	e8df f002 	tbb	[pc, r2]
 8006cd0:	064a0402 	.word	0x064a0402
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	e7db      	b.n	8006c90 <UART_SetConfig+0x60>
 8006cd8:	2204      	movs	r2, #4
 8006cda:	e7d9      	b.n	8006c90 <UART_SetConfig+0x60>
 8006cdc:	2208      	movs	r2, #8
 8006cde:	e7d7      	b.n	8006c90 <UART_SetConfig+0x60>
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	e7d5      	b.n	8006c90 <UART_SetConfig+0x60>
 8006ce4:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8006ce8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006cec:	f002 020c 	and.w	r2, r2, #12
 8006cf0:	2a0c      	cmp	r2, #12
 8006cf2:	d80e      	bhi.n	8006d12 <UART_SetConfig+0xe2>
 8006cf4:	e8df f002 	tbb	[pc, r2]
 8006cf8:	0d0d0d07 	.word	0x0d0d0d07
 8006cfc:	0d0d0d09 	.word	0x0d0d0d09
 8006d00:	0d0d0d38 	.word	0x0d0d0d38
 8006d04:	0b          	.byte	0x0b
 8006d05:	00          	.byte	0x00
 8006d06:	2200      	movs	r2, #0
 8006d08:	e7c2      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	e7c0      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d0e:	2208      	movs	r2, #8
 8006d10:	e7be      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d12:	2210      	movs	r2, #16
 8006d14:	e7bc      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d16:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8006d1a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006d1e:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8006d22:	2a20      	cmp	r2, #32
 8006d24:	d022      	beq.n	8006d6c <UART_SetConfig+0x13c>
 8006d26:	d804      	bhi.n	8006d32 <UART_SetConfig+0x102>
 8006d28:	b312      	cbz	r2, 8006d70 <UART_SetConfig+0x140>
 8006d2a:	2a10      	cmp	r2, #16
 8006d2c:	d122      	bne.n	8006d74 <UART_SetConfig+0x144>
 8006d2e:	2204      	movs	r2, #4
 8006d30:	e7ae      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d32:	2a30      	cmp	r2, #48	@ 0x30
 8006d34:	d120      	bne.n	8006d78 <UART_SetConfig+0x148>
 8006d36:	2208      	movs	r2, #8
 8006d38:	e7aa      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d3a:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8006d3e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006d42:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8006d46:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8006d4a:	d017      	beq.n	8006d7c <UART_SetConfig+0x14c>
 8006d4c:	d805      	bhi.n	8006d5a <UART_SetConfig+0x12a>
 8006d4e:	b1ba      	cbz	r2, 8006d80 <UART_SetConfig+0x150>
 8006d50:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006d54:	d116      	bne.n	8006d84 <UART_SetConfig+0x154>
 8006d56:	2204      	movs	r2, #4
 8006d58:	e79a      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d5a:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8006d5e:	d113      	bne.n	8006d88 <UART_SetConfig+0x158>
 8006d60:	2208      	movs	r2, #8
 8006d62:	e795      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d64:	2202      	movs	r2, #2
 8006d66:	e793      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d68:	2202      	movs	r2, #2
 8006d6a:	e791      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	e78f      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d70:	2200      	movs	r2, #0
 8006d72:	e78d      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d74:	2210      	movs	r2, #16
 8006d76:	e78b      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d78:	2210      	movs	r2, #16
 8006d7a:	e789      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	e787      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d80:	2200      	movs	r2, #0
 8006d82:	e785      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d84:	2210      	movs	r2, #16
 8006d86:	e783      	b.n	8006c90 <UART_SetConfig+0x60>
 8006d88:	2210      	movs	r2, #16
 8006d8a:	e781      	b.n	8006c90 <UART_SetConfig+0x60>
    switch (clocksource)
 8006d8c:	2a08      	cmp	r2, #8
 8006d8e:	d877      	bhi.n	8006e80 <UART_SetConfig+0x250>
 8006d90:	e8df f002 	tbb	[pc, r2]
 8006d94:	76107608 	.word	0x76107608
 8006d98:	7676760d 	.word	0x7676760d
 8006d9c:	05          	.byte	0x05
 8006d9d:	00          	.byte	0x00
 8006d9e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006da2:	e008      	b.n	8006db6 <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da4:	f7ff f8ce 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006da8:	b928      	cbnz	r0, 8006db6 <UART_SetConfig+0x186>
 8006daa:	2000      	movs	r0, #0
 8006dac:	e085      	b.n	8006eba <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006dae:	f7fe fc3d 	bl	800562c <HAL_RCC_GetSysClockFreq>
        break;
 8006db2:	e7f9      	b.n	8006da8 <UART_SetConfig+0x178>
        pclk = (uint32_t) HSI_VALUE;
 8006db4:	483d      	ldr	r0, [pc, #244]	@ (8006eac <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006db6:	6862      	ldr	r2, [r4, #4]
 8006db8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006dbc:	4283      	cmp	r3, r0
 8006dbe:	d861      	bhi.n	8006e84 <UART_SetConfig+0x254>
 8006dc0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006dc4:	d860      	bhi.n	8006e88 <UART_SetConfig+0x258>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dc6:	0e01      	lsrs	r1, r0, #24
 8006dc8:	0200      	lsls	r0, r0, #8
 8006dca:	0853      	lsrs	r3, r2, #1
 8006dcc:	18c0      	adds	r0, r0, r3
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	f141 0100 	adc.w	r1, r1, #0
 8006dd6:	f7f9 fe61 	bl	8000a9c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dda:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006dde:	4b34      	ldr	r3, [pc, #208]	@ (8006eb0 <UART_SetConfig+0x280>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d853      	bhi.n	8006e8c <UART_SetConfig+0x25c>
          huart->Instance->BRR = usartdiv;
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	60d8      	str	r0, [r3, #12]
 8006de8:	2000      	movs	r0, #0
 8006dea:	e066      	b.n	8006eba <UART_SetConfig+0x28a>
    switch (clocksource)
 8006dec:	2a08      	cmp	r2, #8
 8006dee:	d84f      	bhi.n	8006e90 <UART_SetConfig+0x260>
 8006df0:	e8df f002 	tbb	[pc, r2]
 8006df4:	4e052107 	.word	0x4e052107
 8006df8:	4e4e4e24 	.word	0x4e4e4e24
 8006dfc:	0b          	.byte	0x0b
 8006dfd:	00          	.byte	0x00
 8006dfe:	482b      	ldr	r0, [pc, #172]	@ (8006eac <UART_SetConfig+0x27c>)
 8006e00:	e003      	b.n	8006e0a <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e02:	f7ff f89f 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d044      	beq.n	8006e94 <UART_SetConfig+0x264>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e0a:	6862      	ldr	r2, [r4, #4]
 8006e0c:	0853      	lsrs	r3, r2, #1
 8006e0e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006e12:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e16:	f1a3 0110 	sub.w	r1, r3, #16
 8006e1a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006e1e:	4291      	cmp	r1, r2
 8006e20:	d848      	bhi.n	8006eb4 <UART_SetConfig+0x284>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e28:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006e2c:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	60d3      	str	r3, [r2, #12]
 8006e32:	2000      	movs	r0, #0
 8006e34:	e041      	b.n	8006eba <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e36:	f7ff f897 	bl	8005f68 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e3a:	e7e4      	b.n	8006e06 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3c:	f7fe fbf6 	bl	800562c <HAL_RCC_GetSysClockFreq>
        break;
 8006e40:	e7e1      	b.n	8006e06 <UART_SetConfig+0x1d6>
    switch (clocksource)
 8006e42:	481a      	ldr	r0, [pc, #104]	@ (8006eac <UART_SetConfig+0x27c>)
 8006e44:	e003      	b.n	8006e4e <UART_SetConfig+0x21e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e46:	f7ff f87d 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d039      	beq.n	8006ec2 <UART_SetConfig+0x292>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e4e:	6863      	ldr	r3, [r4, #4]
 8006e50:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006e54:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e58:	f1a0 0210 	sub.w	r2, r0, #16
 8006e5c:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d830      	bhi.n	8006ec6 <UART_SetConfig+0x296>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	b280      	uxth	r0, r0
 8006e68:	60d8      	str	r0, [r3, #12]
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	e025      	b.n	8006eba <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e6e:	f7ff f87b 	bl	8005f68 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e72:	e7ea      	b.n	8006e4a <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e74:	f7fe fbda 	bl	800562c <HAL_RCC_GetSysClockFreq>
        break;
 8006e78:	e7e7      	b.n	8006e4a <UART_SetConfig+0x21a>
        pclk = (uint32_t) LSE_VALUE;
 8006e7a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006e7e:	e7e6      	b.n	8006e4e <UART_SetConfig+0x21e>
    switch (clocksource)
 8006e80:	2001      	movs	r0, #1
 8006e82:	e01a      	b.n	8006eba <UART_SetConfig+0x28a>
        ret = HAL_ERROR;
 8006e84:	2001      	movs	r0, #1
 8006e86:	e018      	b.n	8006eba <UART_SetConfig+0x28a>
 8006e88:	2001      	movs	r0, #1
 8006e8a:	e016      	b.n	8006eba <UART_SetConfig+0x28a>
          ret = HAL_ERROR;
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	e014      	b.n	8006eba <UART_SetConfig+0x28a>
    switch (clocksource)
 8006e90:	2001      	movs	r0, #1
 8006e92:	e012      	b.n	8006eba <UART_SetConfig+0x28a>
 8006e94:	2000      	movs	r0, #0
 8006e96:	e010      	b.n	8006eba <UART_SetConfig+0x28a>
 8006e98:	efff69f3 	.word	0xefff69f3
 8006e9c:	40008000 	.word	0x40008000
 8006ea0:	40013800 	.word	0x40013800
 8006ea4:	40004400 	.word	0x40004400
 8006ea8:	40004800 	.word	0x40004800
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	000ffcff 	.word	0x000ffcff
        ret = HAL_ERROR;
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	e000      	b.n	8006eba <UART_SetConfig+0x28a>
    switch (clocksource)
 8006eb8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8006ebe:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e7f9      	b.n	8006eba <UART_SetConfig+0x28a>
        ret = HAL_ERROR;
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	e7f7      	b.n	8006eba <UART_SetConfig+0x28a>
 8006eca:	bf00      	nop

08006ecc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ecc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006ece:	f013 0f08 	tst.w	r3, #8
 8006ed2:	d006      	beq.n	8006ee2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed4:	6802      	ldr	r2, [r0, #0]
 8006ed6:	6853      	ldr	r3, [r2, #4]
 8006ed8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006edc:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ee2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006ee4:	f013 0f01 	tst.w	r3, #1
 8006ee8:	d006      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eea:	6802      	ldr	r2, [r0, #0]
 8006eec:	6853      	ldr	r3, [r2, #4]
 8006eee:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ef2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ef8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006efa:	f013 0f02 	tst.w	r3, #2
 8006efe:	d006      	beq.n	8006f0e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f00:	6802      	ldr	r2, [r0, #0]
 8006f02:	6853      	ldr	r3, [r2, #4]
 8006f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f08:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f0e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006f10:	f013 0f04 	tst.w	r3, #4
 8006f14:	d006      	beq.n	8006f24 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f16:	6802      	ldr	r2, [r0, #0]
 8006f18:	6853      	ldr	r3, [r2, #4]
 8006f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f1e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8006f20:	430b      	orrs	r3, r1
 8006f22:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f24:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006f26:	f013 0f10 	tst.w	r3, #16
 8006f2a:	d006      	beq.n	8006f3a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f2c:	6802      	ldr	r2, [r0, #0]
 8006f2e:	6893      	ldr	r3, [r2, #8]
 8006f30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f34:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006f36:	430b      	orrs	r3, r1
 8006f38:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f3a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006f3c:	f013 0f20 	tst.w	r3, #32
 8006f40:	d006      	beq.n	8006f50 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f42:	6802      	ldr	r2, [r0, #0]
 8006f44:	6893      	ldr	r3, [r2, #8]
 8006f46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f4a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006f52:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006f56:	d00a      	beq.n	8006f6e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f58:	6802      	ldr	r2, [r0, #0]
 8006f5a:	6853      	ldr	r3, [r2, #4]
 8006f5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f60:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006f62:	430b      	orrs	r3, r1
 8006f64:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f66:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006f68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f6c:	d00b      	beq.n	8006f86 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006f70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f74:	d006      	beq.n	8006f84 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f76:	6802      	ldr	r2, [r0, #0]
 8006f78:	6853      	ldr	r3, [r2, #4]
 8006f7a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006f7e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6053      	str	r3, [r2, #4]
}
 8006f84:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f86:	6802      	ldr	r2, [r0, #0]
 8006f88:	6853      	ldr	r3, [r2, #4]
 8006f8a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006f8e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006f90:	430b      	orrs	r3, r1
 8006f92:	6053      	str	r3, [r2, #4]
 8006f94:	e7eb      	b.n	8006f6e <UART_AdvFeatureConfig+0xa2>

08006f96 <UART_WaitOnFlagUntilTimeout>:
{
 8006f96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	4617      	mov	r7, r2
 8006fa0:	4699      	mov	r9, r3
 8006fa2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	69dc      	ldr	r4, [r3, #28]
 8006faa:	ea36 0404 	bics.w	r4, r6, r4
 8006fae:	bf0c      	ite	eq
 8006fb0:	2401      	moveq	r4, #1
 8006fb2:	2400      	movne	r4, #0
 8006fb4:	42bc      	cmp	r4, r7
 8006fb6:	d136      	bne.n	8007026 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8006fb8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006fbc:	d0f3      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fbe:	f7fb ff67 	bl	8002e90 <HAL_GetTick>
 8006fc2:	eba0 0009 	sub.w	r0, r0, r9
 8006fc6:	4540      	cmp	r0, r8
 8006fc8:	d830      	bhi.n	800702c <UART_WaitOnFlagUntilTimeout+0x96>
 8006fca:	f1b8 0f00 	cmp.w	r8, #0
 8006fce:	d02f      	beq.n	8007030 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	f012 0f04 	tst.w	r2, #4
 8006fd8:	d0e5      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x10>
 8006fda:	2e80      	cmp	r6, #128	@ 0x80
 8006fdc:	d0e3      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x10>
 8006fde:	2e40      	cmp	r6, #64	@ 0x40
 8006fe0:	d0e1      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	f012 0f08 	tst.w	r2, #8
 8006fe8:	d111      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006ff0:	d0d9      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ff6:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f7ff fdf0 	bl	8006bde <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ffe:	2320      	movs	r3, #32
 8007000:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8007004:	2300      	movs	r3, #0
 8007006:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 800700a:	2003      	movs	r0, #3
 800700c:	e00c      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800700e:	2408      	movs	r4, #8
 8007010:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8007012:	4628      	mov	r0, r5
 8007014:	f7ff fde3 	bl	8006bde <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007018:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800701c:	2300      	movs	r3, #0
 800701e:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 8007022:	2001      	movs	r0, #1
 8007024:	e000      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 8007026:	2000      	movs	r0, #0
}
 8007028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800702c:	2003      	movs	r0, #3
 800702e:	e7fb      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0x92>
 8007030:	2003      	movs	r0, #3
 8007032:	e7f9      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0x92>

08007034 <HAL_UART_Transmit>:
{
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800703c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800703e:	2b20      	cmp	r3, #32
 8007040:	d156      	bne.n	80070f0 <HAL_UART_Transmit+0xbc>
 8007042:	4604      	mov	r4, r0
 8007044:	460d      	mov	r5, r1
 8007046:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007048:	2900      	cmp	r1, #0
 800704a:	d055      	beq.n	80070f8 <HAL_UART_Transmit+0xc4>
 800704c:	b90a      	cbnz	r2, 8007052 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 800704e:	2001      	movs	r0, #1
 8007050:	e04f      	b.n	80070f2 <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007052:	2300      	movs	r3, #0
 8007054:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007058:	2321      	movs	r3, #33	@ 0x21
 800705a:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800705c:	f7fb ff18 	bl	8002e90 <HAL_GetTick>
 8007060:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8007062:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007066:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007070:	d002      	beq.n	8007078 <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	e015      	b.n	80070a4 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	b33b      	cbz	r3, 80070cc <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800707c:	f04f 0800 	mov.w	r8, #0
 8007080:	e010      	b.n	80070a4 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 8007082:	2320      	movs	r3, #32
 8007084:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8007086:	2003      	movs	r0, #3
 8007088:	e033      	b.n	80070f2 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800708a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800708e:	6822      	ldr	r2, [r4, #0]
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8007096:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800709a:	b292      	uxth	r2, r2
 800709c:	3a01      	subs	r2, #1
 800709e:	b292      	uxth	r2, r2
 80070a0:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070a4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	b193      	cbz	r3, 80070d2 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ac:	9600      	str	r6, [sp, #0]
 80070ae:	463b      	mov	r3, r7
 80070b0:	2200      	movs	r2, #0
 80070b2:	2180      	movs	r1, #128	@ 0x80
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7ff ff6e 	bl	8006f96 <UART_WaitOnFlagUntilTimeout>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d1e1      	bne.n	8007082 <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 80070be:	2d00      	cmp	r5, #0
 80070c0:	d0e3      	beq.n	800708a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070c2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070ca:	e7e4      	b.n	8007096 <HAL_UART_Transmit+0x62>
      pdata16bits = (const uint16_t *) pData;
 80070cc:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80070ce:	2500      	movs	r5, #0
 80070d0:	e7e8      	b.n	80070a4 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070d2:	9600      	str	r6, [sp, #0]
 80070d4:	463b      	mov	r3, r7
 80070d6:	2200      	movs	r2, #0
 80070d8:	2140      	movs	r1, #64	@ 0x40
 80070da:	4620      	mov	r0, r4
 80070dc:	f7ff ff5b 	bl	8006f96 <UART_WaitOnFlagUntilTimeout>
 80070e0:	b910      	cbnz	r0, 80070e8 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 80070e2:	2320      	movs	r3, #32
 80070e4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80070e6:	e004      	b.n	80070f2 <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 80070e8:	2320      	movs	r3, #32
 80070ea:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80070ec:	2003      	movs	r0, #3
 80070ee:	e000      	b.n	80070f2 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80070f0:	2002      	movs	r0, #2
}
 80070f2:	b002      	add	sp, #8
 80070f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80070f8:	2001      	movs	r0, #1
 80070fa:	e7fa      	b.n	80070f2 <HAL_UART_Transmit+0xbe>

080070fc <HAL_UART_Receive>:
{
 80070fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007100:	b083      	sub	sp, #12
 8007102:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8007104:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8007108:	2b20      	cmp	r3, #32
 800710a:	d17d      	bne.n	8007208 <HAL_UART_Receive+0x10c>
 800710c:	4604      	mov	r4, r0
 800710e:	460d      	mov	r5, r1
 8007110:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007112:	2900      	cmp	r1, #0
 8007114:	d07c      	beq.n	8007210 <HAL_UART_Receive+0x114>
 8007116:	b90a      	cbnz	r2, 800711c <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 8007118:	2001      	movs	r0, #1
 800711a:	e076      	b.n	800720a <HAL_UART_Receive+0x10e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711c:	2300      	movs	r3, #0
 800711e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007122:	2222      	movs	r2, #34	@ 0x22
 8007124:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007128:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 800712a:	f7fb feb1 	bl	8002e90 <HAL_GetTick>
 800712e:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8007130:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007134:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8007138:	68a3      	ldr	r3, [r4, #8]
 800713a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713e:	d006      	beq.n	800714e <HAL_UART_Receive+0x52>
 8007140:	b9a3      	cbnz	r3, 800716c <HAL_UART_Receive+0x70>
 8007142:	6922      	ldr	r2, [r4, #16]
 8007144:	b972      	cbnz	r2, 8007164 <HAL_UART_Receive+0x68>
 8007146:	22ff      	movs	r2, #255	@ 0xff
 8007148:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800714c:	e014      	b.n	8007178 <HAL_UART_Receive+0x7c>
 800714e:	6922      	ldr	r2, [r4, #16]
 8007150:	b922      	cbnz	r2, 800715c <HAL_UART_Receive+0x60>
 8007152:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007156:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800715a:	e00d      	b.n	8007178 <HAL_UART_Receive+0x7c>
 800715c:	22ff      	movs	r2, #255	@ 0xff
 800715e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8007162:	e009      	b.n	8007178 <HAL_UART_Receive+0x7c>
 8007164:	227f      	movs	r2, #127	@ 0x7f
 8007166:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800716a:	e005      	b.n	8007178 <HAL_UART_Receive+0x7c>
 800716c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007170:	d00a      	beq.n	8007188 <HAL_UART_Receive+0x8c>
 8007172:	2200      	movs	r2, #0
 8007174:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007178:	f8b4 805c 	ldrh.w	r8, [r4, #92]	@ 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800717c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007180:	d00c      	beq.n	800719c <HAL_UART_Receive+0xa0>
      pdata16bits = NULL;
 8007182:	f04f 0900 	mov.w	r9, #0
 8007186:	e020      	b.n	80071ca <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 8007188:	6922      	ldr	r2, [r4, #16]
 800718a:	b91a      	cbnz	r2, 8007194 <HAL_UART_Receive+0x98>
 800718c:	227f      	movs	r2, #127	@ 0x7f
 800718e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8007192:	e7f1      	b.n	8007178 <HAL_UART_Receive+0x7c>
 8007194:	223f      	movs	r2, #63	@ 0x3f
 8007196:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800719a:	e7ed      	b.n	8007178 <HAL_UART_Receive+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719c:	6923      	ldr	r3, [r4, #16]
 800719e:	b35b      	cbz	r3, 80071f8 <HAL_UART_Receive+0xfc>
      pdata16bits = NULL;
 80071a0:	f04f 0900 	mov.w	r9, #0
 80071a4:	e011      	b.n	80071ca <HAL_UART_Receive+0xce>
        huart->RxState = HAL_UART_STATE_READY;
 80071a6:	2320      	movs	r3, #32
 80071a8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 80071ac:	2003      	movs	r0, #3
 80071ae:	e02c      	b.n	800720a <HAL_UART_Receive+0x10e>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80071b4:	ea08 0303 	and.w	r3, r8, r3
 80071b8:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 80071bc:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 80071c0:	b292      	uxth	r2, r2
 80071c2:	3a01      	subs	r2, #1
 80071c4:	b292      	uxth	r2, r2
 80071c6:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80071ca:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b1ab      	cbz	r3, 80071fe <HAL_UART_Receive+0x102>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80071d2:	9600      	str	r6, [sp, #0]
 80071d4:	463b      	mov	r3, r7
 80071d6:	2200      	movs	r2, #0
 80071d8:	2120      	movs	r1, #32
 80071da:	4620      	mov	r0, r4
 80071dc:	f7ff fedb 	bl	8006f96 <UART_WaitOnFlagUntilTimeout>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d1e0      	bne.n	80071a6 <HAL_UART_Receive+0xaa>
      if (pdata8bits == NULL)
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	d0e3      	beq.n	80071b0 <HAL_UART_Receive+0xb4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80071ec:	fa5f f388 	uxtb.w	r3, r8
 80071f0:	4013      	ands	r3, r2
 80071f2:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 80071f6:	e7e1      	b.n	80071bc <HAL_UART_Receive+0xc0>
      pdata16bits = (uint16_t *) pData;
 80071f8:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80071fa:	2500      	movs	r5, #0
 80071fc:	e7e5      	b.n	80071ca <HAL_UART_Receive+0xce>
    huart->RxState = HAL_UART_STATE_READY;
 80071fe:	2320      	movs	r3, #32
 8007200:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8007204:	2000      	movs	r0, #0
 8007206:	e000      	b.n	800720a <HAL_UART_Receive+0x10e>
    return HAL_BUSY;
 8007208:	2002      	movs	r0, #2
}
 800720a:	b003      	add	sp, #12
 800720c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8007210:	2001      	movs	r0, #1
 8007212:	e7fa      	b.n	800720a <HAL_UART_Receive+0x10e>

08007214 <UART_CheckIdleState>:
{
 8007214:	b530      	push	{r4, r5, lr}
 8007216:	b083      	sub	sp, #12
 8007218:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721a:	2300      	movs	r3, #0
 800721c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8007220:	f7fb fe36 	bl	8002e90 <HAL_GetTick>
 8007224:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	f012 0f08 	tst.w	r2, #8
 800722e:	d10f      	bne.n	8007250 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f013 0f04 	tst.w	r3, #4
 8007238:	d126      	bne.n	8007288 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 800723a:	2320      	movs	r3, #32
 800723c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800723e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	2000      	movs	r0, #0
 8007244:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007246:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8007248:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 800724c:	b003      	add	sp, #12
 800724e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4603      	mov	r3, r0
 8007258:	2200      	movs	r2, #0
 800725a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800725e:	4620      	mov	r0, r4
 8007260:	f7ff fe99 	bl	8006f96 <UART_WaitOnFlagUntilTimeout>
 8007264:	2800      	cmp	r0, #0
 8007266:	d0e3      	beq.n	8007230 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007268:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	e852 3f00 	ldrex	r3, [r2]
 800726e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	e842 3100 	strex	r1, r3, [r2]
 8007276:	2900      	cmp	r1, #0
 8007278:	d1f6      	bne.n	8007268 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 800727a:	2320      	movs	r3, #32
 800727c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 800727e:	2300      	movs	r3, #0
 8007280:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8007284:	2003      	movs	r0, #3
 8007286:	e7e1      	b.n	800724c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462b      	mov	r3, r5
 8007290:	2200      	movs	r2, #0
 8007292:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007296:	4620      	mov	r0, r4
 8007298:	f7ff fe7d 	bl	8006f96 <UART_WaitOnFlagUntilTimeout>
 800729c:	2800      	cmp	r0, #0
 800729e:	d0cc      	beq.n	800723a <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	e852 3f00 	ldrex	r3, [r2]
 80072a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	e842 3100 	strex	r1, r3, [r2]
 80072ae:	2900      	cmp	r1, #0
 80072b0:	d1f6      	bne.n	80072a0 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	f102 0308 	add.w	r3, r2, #8
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	3208      	adds	r2, #8
 80072c2:	e842 3100 	strex	r1, r3, [r2]
 80072c6:	2900      	cmp	r1, #0
 80072c8:	d1f3      	bne.n	80072b2 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 80072ca:	2320      	movs	r3, #32
 80072cc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 80072d0:	2300      	movs	r3, #0
 80072d2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 80072d6:	2003      	movs	r0, #3
 80072d8:	e7b8      	b.n	800724c <UART_CheckIdleState+0x38>

080072da <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 80072da:	2800      	cmp	r0, #0
 80072dc:	d032      	beq.n	8007344 <HAL_HalfDuplex_Init+0x6a>
{
 80072de:	b510      	push	{r4, lr}
 80072e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80072e2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80072e4:	b32b      	cbz	r3, 8007332 <HAL_HalfDuplex_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 80072e6:	2324      	movs	r3, #36	@ 0x24
 80072e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	6813      	ldr	r3, [r2, #0]
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80072f6:	bb0b      	cbnz	r3, 800733c <HAL_HalfDuplex_Init+0x62>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7ff fc99 	bl	8006c30 <UART_SetConfig>
 80072fe:	2801      	cmp	r0, #1
 8007300:	d016      	beq.n	8007330 <HAL_HalfDuplex_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	6853      	ldr	r3, [r2, #4]
 8007306:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800730a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	6893      	ldr	r3, [r2, #8]
 8007310:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007314:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007316:	6822      	ldr	r2, [r4, #0]
 8007318:	6893      	ldr	r3, [r2, #8]
 800731a:	f043 0308 	orr.w	r3, r3, #8
 800731e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007320:	6822      	ldr	r2, [r4, #0]
 8007322:	6813      	ldr	r3, [r2, #0]
 8007324:	f043 0301 	orr.w	r3, r3, #1
 8007328:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800732a:	4620      	mov	r0, r4
 800732c:	f7ff ff72 	bl	8007214 <UART_CheckIdleState>
}
 8007330:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007332:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8007336:	f7fd f84d 	bl	80043d4 <HAL_UART_MspInit>
 800733a:	e7d4      	b.n	80072e6 <HAL_HalfDuplex_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800733c:	4620      	mov	r0, r4
 800733e:	f7ff fdc5 	bl	8006ecc <UART_AdvFeatureConfig>
 8007342:	e7d9      	b.n	80072f8 <HAL_HalfDuplex_Init+0x1e>
    return HAL_ERROR;
 8007344:	2001      	movs	r0, #1
}
 8007346:	4770      	bx	lr

08007348 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007348:	e7fe      	b.n	8007348 <NMI_Handler>

0800734a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800734a:	e7fe      	b.n	800734a <HardFault_Handler>

0800734c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800734c:	e7fe      	b.n	800734c <MemManage_Handler>

0800734e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800734e:	e7fe      	b.n	800734e <BusFault_Handler>

08007350 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007350:	e7fe      	b.n	8007350 <UsageFault_Handler>

08007352 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007352:	4770      	bx	lr

08007354 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007354:	4770      	bx	lr

08007356 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007356:	4770      	bx	lr

08007358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007358:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800735a:	f7fb fd8d 	bl	8002e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800735e:	bd08      	pop	{r3, pc}

08007360 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8007360:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8007362:	4802      	ldr	r0, [pc, #8]	@ (800736c <RTC_WKUP_IRQHandler+0xc>)
 8007364:	f7ff f976 	bl	8006654 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8007368:	bd08      	pop	{r3, pc}
 800736a:	bf00      	nop
 800736c:	2000137c 	.word	0x2000137c

08007370 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OK_Pin);
 8007372:	2001      	movs	r0, #1
 8007374:	f7fc ff50 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007378:	bd08      	pop	{r3, pc}
	...

0800737c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800737c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800737e:	4802      	ldr	r0, [pc, #8]	@ (8007388 <DMA1_Channel1_IRQHandler+0xc>)
 8007380:	f7fc fd7e 	bl	8003e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007384:	bd08      	pop	{r3, pc}
 8007386:	bf00      	nop
 8007388:	200013a8 	.word	0x200013a8

0800738c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800738c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800738e:	4802      	ldr	r0, [pc, #8]	@ (8007398 <ADC1_2_IRQHandler+0xc>)
 8007390:	f7fb fecc 	bl	800312c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8007394:	bd08      	pop	{r3, pc}
 8007396:	bf00      	nop
 8007398:	200013f0 	.word	0x200013f0

0800739c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800739c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_WKUP_Pin);
 800739e:	2020      	movs	r0, #32
 80073a0:	f7fc ff3a 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80073a4:	bd08      	pop	{r3, pc}
	...

080073a8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80073a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80073aa:	4802      	ldr	r0, [pc, #8]	@ (80073b4 <USB_IRQHandler+0xc>)
 80073ac:	f7fd fe20 	bl	8004ff0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80073b0:	bd08      	pop	{r3, pc}
 80073b2:	bf00      	nop
 80073b4:	200021c4 	.word	0x200021c4

080073b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80073b8:	b084      	sub	sp, #16
 80073ba:	a804      	add	r0, sp, #16
 80073bc:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80073c0:	2000      	movs	r0, #0
 80073c2:	b004      	add	sp, #16
 80073c4:	4770      	bx	lr

080073c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80073c6:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073c8:	2000      	movs	r0, #0
 80073ca:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80073ce:	f64b 7280 	movw	r2, #49024	@ 0xbf80
 80073d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80073d6:	4770      	bx	lr

080073d8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80073d8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80073dc:	f423 537e 	bic.w	r3, r3, #16256	@ 0x3f80
 80073e0:	045b      	lsls	r3, r3, #17
 80073e2:	0c5b      	lsrs	r3, r3, #17
 80073e4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80073e8:	2000      	movs	r0, #0
 80073ea:	4770      	bx	lr

080073ec <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80073ec:	2000      	movs	r0, #0
 80073ee:	4770      	bx	lr

080073f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80073f0:	b084      	sub	sp, #16
 80073f2:	4684      	mov	ip, r0
 80073f4:	a804      	add	r0, sp, #16
 80073f6:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f8ac 3040 	strh.w	r3, [ip, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007400:	2000      	movs	r0, #0
 8007402:	f8ac 0040 	strh.w	r0, [ip, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007406:	f8ac 0044 	strh.w	r0, [ip, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800740a:	f8ac 0050 	strh.w	r0, [ip, #80]	@ 0x50

  return HAL_OK;
}
 800740e:	b004      	add	sp, #16
 8007410:	4770      	bx	lr

08007412 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007412:	b510      	push	{r4, lr}
 8007414:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007416:	f891 c000 	ldrb.w	ip, [r1]
 800741a:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800741e:	b292      	uxth	r2, r2
 8007420:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 8007424:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007428:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 800742a:	78c8      	ldrb	r0, [r1, #3]
 800742c:	2803      	cmp	r0, #3
 800742e:	d861      	bhi.n	80074f4 <USB_ActivateEndpoint+0xe2>
 8007430:	e8df f000 	tbb	[pc, r0]
 8007434:	58025c55 	.word	0x58025c55
 8007438:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800743a:	f248 0e80 	movw	lr, #32896	@ 0x8080
 800743e:	ea42 020e 	orr.w	r2, r2, lr
 8007442:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007446:	f891 c000 	ldrb.w	ip, [r1]
 800744a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800744e:	b292      	uxth	r2, r2
 8007450:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007454:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007458:	ea4c 0202 	orr.w	r2, ip, r2
 800745c:	ea42 020e 	orr.w	r2, r2, lr
 8007460:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8007464:	7b0a      	ldrb	r2, [r1, #12]
 8007466:	2a00      	cmp	r2, #0
 8007468:	f040 80dc 	bne.w	8007624 <USB_ActivateEndpoint+0x212>
  {
    if (ep->is_in != 0U)
 800746c:	784a      	ldrb	r2, [r1, #1]
 800746e:	2a00      	cmp	r2, #0
 8007470:	d051      	beq.n	8007516 <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007472:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007476:	fa13 f282 	uxtah	r2, r3, r2
 800747a:	780c      	ldrb	r4, [r1, #0]
 800747c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007480:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8007484:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007488:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800748c:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007490:	780c      	ldrb	r4, [r1, #0]
 8007492:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007496:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800749a:	d00c      	beq.n	80074b6 <USB_ActivateEndpoint+0xa4>
 800749c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80074a0:	b292      	uxth	r2, r2
 80074a2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80074a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80074aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ae:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80074b2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80074b6:	78ca      	ldrb	r2, [r1, #3]
 80074b8:	2a01      	cmp	r2, #1
 80074ba:	d01d      	beq.n	80074f8 <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074bc:	7809      	ldrb	r1, [r1, #0]
 80074be:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80074c2:	b292      	uxth	r2, r2
 80074c4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80074c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074cc:	f082 0220 	eor.w	r2, r2, #32
 80074d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80074d8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80074dc:	e1c3      	b.n	8007866 <USB_ActivateEndpoint+0x454>
      wEpRegVal |= USB_EP_CONTROL;
 80074de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 80074e2:	e7aa      	b.n	800743a <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 80074e4:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80074e8:	2000      	movs	r0, #0
      break;
 80074ea:	e7a6      	b.n	800743a <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80074ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80074f0:	2000      	movs	r0, #0
      break;
 80074f2:	e7a2      	b.n	800743a <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80074f4:	2001      	movs	r0, #1
 80074f6:	e7a0      	b.n	800743a <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074f8:	7809      	ldrb	r1, [r1, #0]
 80074fa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80074fe:	b292      	uxth	r2, r2
 8007500:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007508:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800750c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007510:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007514:	e1a7      	b.n	8007866 <USB_ActivateEndpoint+0x454>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007516:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800751a:	fa13 f282 	uxtah	r2, r3, r2
 800751e:	780c      	ldrb	r4, [r1, #0]
 8007520:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007524:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8007528:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800752c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007530:	f8a2 c404 	strh.w	ip, [r2, #1028]	@ 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007534:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007538:	fa13 f282 	uxtah	r2, r3, r2
 800753c:	780c      	ldrb	r4, [r1, #0]
 800753e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007542:	f8b2 c406 	ldrh.w	ip, [r2, #1030]	@ 0x406
 8007546:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800754a:	f8a2 c406 	strh.w	ip, [r2, #1030]	@ 0x406
 800754e:	690c      	ldr	r4, [r1, #16]
 8007550:	bb74      	cbnz	r4, 80075b0 <USB_ActivateEndpoint+0x19e>
 8007552:	f8b2 c406 	ldrh.w	ip, [r2, #1030]	@ 0x406
 8007556:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 800755a:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 800755e:	fa1f fc8c 	uxth.w	ip, ip
 8007562:	f8a2 c406 	strh.w	ip, [r2, #1030]	@ 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007566:	780c      	ldrb	r4, [r1, #0]
 8007568:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800756c:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8007570:	d00c      	beq.n	800758c <USB_ActivateEndpoint+0x17a>
 8007572:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007576:	b292      	uxth	r2, r2
 8007578:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800757c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007580:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007584:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007588:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->num == 0U)
 800758c:	7809      	ldrb	r1, [r1, #0]
 800758e:	bbc9      	cbnz	r1, 8007604 <USB_ActivateEndpoint+0x1f2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007590:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007594:	b292      	uxth	r2, r2
 8007596:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800759a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800759e:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 80075a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80075aa:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80075ae:	e15a      	b.n	8007866 <USB_ActivateEndpoint+0x454>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80075b0:	2c3e      	cmp	r4, #62	@ 0x3e
 80075b2:	d812      	bhi.n	80075da <USB_ActivateEndpoint+0x1c8>
 80075b4:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80075b8:	f014 0f01 	tst.w	r4, #1
 80075bc:	d001      	beq.n	80075c2 <USB_ActivateEndpoint+0x1b0>
 80075be:	f10c 0c01 	add.w	ip, ip, #1
 80075c2:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 80075c6:	b2a4      	uxth	r4, r4
 80075c8:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80075cc:	fa1f fc8c 	uxth.w	ip, ip
 80075d0:	ea44 040c 	orr.w	r4, r4, ip
 80075d4:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 80075d8:	e7c5      	b.n	8007566 <USB_ActivateEndpoint+0x154>
 80075da:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 80075de:	f014 0f1f 	tst.w	r4, #31
 80075e2:	d101      	bne.n	80075e8 <USB_ActivateEndpoint+0x1d6>
 80075e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80075e8:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 80075ec:	b2a4      	uxth	r4, r4
 80075ee:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80075f2:	fa1f fc8c 	uxth.w	ip, ip
 80075f6:	ea44 040c 	orr.w	r4, r4, ip
 80075fa:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 80075fe:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 8007602:	e7b0      	b.n	8007566 <USB_ActivateEndpoint+0x154>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007604:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007608:	b292      	uxth	r2, r2
 800760a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800760e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007612:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8007616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800761a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800761e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007622:	e120      	b.n	8007866 <USB_ActivateEndpoint+0x454>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007624:	78ca      	ldrb	r2, [r1, #3]
 8007626:	2a02      	cmp	r2, #2
 8007628:	d074      	beq.n	8007714 <USB_ActivateEndpoint+0x302>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800762a:	f891 c000 	ldrb.w	ip, [r1]
 800762e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8007632:	b292      	uxth	r2, r2
 8007634:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8007638:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800763c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007640:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007644:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007648:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800764c:	fa13 f282 	uxtah	r2, r3, r2
 8007650:	f891 c000 	ldrb.w	ip, [r1]
 8007654:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8007658:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800765c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007660:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007664:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
 8007668:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800766c:	fa13 f282 	uxtah	r2, r3, r2
 8007670:	f891 c000 	ldrb.w	ip, [r1]
 8007674:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8007678:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800767c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007680:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007684:	f8a2 c404 	strh.w	ip, [r2, #1028]	@ 0x404

    if (ep->is_in == 0U)
 8007688:	784a      	ldrb	r2, [r1, #1]
 800768a:	2a00      	cmp	r2, #0
 800768c:	f040 80f7 	bne.w	800787e <USB_ActivateEndpoint+0x46c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007690:	780c      	ldrb	r4, [r1, #0]
 8007692:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007696:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800769a:	d00c      	beq.n	80076b6 <USB_ActivateEndpoint+0x2a4>
 800769c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80076a0:	b292      	uxth	r2, r2
 80076a2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80076a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80076aa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80076ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076b2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076b6:	780c      	ldrb	r4, [r1, #0]
 80076b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80076bc:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80076c0:	d00c      	beq.n	80076dc <USB_ActivateEndpoint+0x2ca>
 80076c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80076c6:	b292      	uxth	r2, r2
 80076c8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80076cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80076d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076d4:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80076d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80076dc:	784a      	ldrb	r2, [r1, #1]
 80076de:	2a00      	cmp	r2, #0
 80076e0:	d151      	bne.n	8007786 <USB_ActivateEndpoint+0x374>
 80076e2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80076e6:	fa13 f282 	uxtah	r2, r3, r2
 80076ea:	780c      	ldrb	r4, [r1, #0]
 80076ec:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80076f0:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	@ 0x402
 80076f4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80076f8:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 80076fc:	690c      	ldr	r4, [r1, #16]
 80076fe:	b9c4      	cbnz	r4, 8007732 <USB_ActivateEndpoint+0x320>
 8007700:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	@ 0x402
 8007704:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007708:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800770c:	b2a4      	uxth	r4, r4
 800770e:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 8007712:	e03a      	b.n	800778a <USB_ActivateEndpoint+0x378>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007714:	780c      	ldrb	r4, [r1, #0]
 8007716:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800771a:	b292      	uxth	r2, r2
 800771c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007720:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007724:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8007728:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800772c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007730:	e78a      	b.n	8007648 <USB_ActivateEndpoint+0x236>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007732:	2c3e      	cmp	r4, #62	@ 0x3e
 8007734:	d812      	bhi.n	800775c <USB_ActivateEndpoint+0x34a>
 8007736:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 800773a:	f014 0f01 	tst.w	r4, #1
 800773e:	d001      	beq.n	8007744 <USB_ActivateEndpoint+0x332>
 8007740:	f10c 0c01 	add.w	ip, ip, #1
 8007744:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	@ 0x402
 8007748:	b2a4      	uxth	r4, r4
 800774a:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800774e:	fa1f fc8c 	uxth.w	ip, ip
 8007752:	ea44 040c 	orr.w	r4, r4, ip
 8007756:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 800775a:	e016      	b.n	800778a <USB_ActivateEndpoint+0x378>
 800775c:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8007760:	f014 0f1f 	tst.w	r4, #31
 8007764:	d101      	bne.n	800776a <USB_ActivateEndpoint+0x358>
 8007766:	f10c 3cff 	add.w	ip, ip, #4294967295
 800776a:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	@ 0x402
 800776e:	b2a4      	uxth	r4, r4
 8007770:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8007774:	fa1f fc8c 	uxth.w	ip, ip
 8007778:	ea44 040c 	orr.w	r4, r4, ip
 800777c:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8007780:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 8007784:	e001      	b.n	800778a <USB_ActivateEndpoint+0x378>
 8007786:	2a01      	cmp	r2, #1
 8007788:	d01b      	beq.n	80077c2 <USB_ActivateEndpoint+0x3b0>
 800778a:	784a      	ldrb	r2, [r1, #1]
 800778c:	2a00      	cmp	r2, #0
 800778e:	d14d      	bne.n	800782c <USB_ActivateEndpoint+0x41a>
 8007790:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8007794:	fa13 f282 	uxtah	r2, r3, r2
 8007798:	780c      	ldrb	r4, [r1, #0]
 800779a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800779e:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 80077a2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80077a6:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 80077aa:	690c      	ldr	r4, [r1, #16]
 80077ac:	b9a4      	cbnz	r4, 80077d8 <USB_ActivateEndpoint+0x3c6>
 80077ae:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 80077b2:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80077b6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80077ba:	b2a4      	uxth	r4, r4
 80077bc:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 80077c0:	e036      	b.n	8007830 <USB_ActivateEndpoint+0x41e>
 80077c2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80077c6:	fa13 f282 	uxtah	r2, r3, r2
 80077ca:	780c      	ldrb	r4, [r1, #0]
 80077cc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80077d0:	8a0c      	ldrh	r4, [r1, #16]
 80077d2:	f8a2 4402 	strh.w	r4, [r2, #1026]	@ 0x402
 80077d6:	e7d8      	b.n	800778a <USB_ActivateEndpoint+0x378>
 80077d8:	2c3e      	cmp	r4, #62	@ 0x3e
 80077da:	d812      	bhi.n	8007802 <USB_ActivateEndpoint+0x3f0>
 80077dc:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80077e0:	f014 0f01 	tst.w	r4, #1
 80077e4:	d001      	beq.n	80077ea <USB_ActivateEndpoint+0x3d8>
 80077e6:	f10c 0c01 	add.w	ip, ip, #1
 80077ea:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 80077ee:	b2a4      	uxth	r4, r4
 80077f0:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80077f4:	fa1f fc8c 	uxth.w	ip, ip
 80077f8:	ea44 040c 	orr.w	r4, r4, ip
 80077fc:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 8007800:	e016      	b.n	8007830 <USB_ActivateEndpoint+0x41e>
 8007802:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8007806:	f014 0f1f 	tst.w	r4, #31
 800780a:	d101      	bne.n	8007810 <USB_ActivateEndpoint+0x3fe>
 800780c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007810:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	@ 0x406
 8007814:	b2a4      	uxth	r4, r4
 8007816:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800781a:	fa1f fc8c 	uxth.w	ip, ip
 800781e:	ea44 040c 	orr.w	r4, r4, ip
 8007822:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8007826:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 800782a:	e001      	b.n	8007830 <USB_ActivateEndpoint+0x41e>
 800782c:	2a01      	cmp	r2, #1
 800782e:	d01b      	beq.n	8007868 <USB_ActivateEndpoint+0x456>

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007830:	f891 c000 	ldrb.w	ip, [r1]
 8007834:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8007838:	b292      	uxth	r2, r2
 800783a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800783e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007842:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8007846:	f248 0480 	movw	r4, #32896	@ 0x8080
 800784a:	4322      	orrs	r2, r4
 800784c:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007850:	7809      	ldrb	r1, [r1, #0]
 8007852:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007856:	b292      	uxth	r2, r2
 8007858:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800785c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007860:	4322      	orrs	r2, r4
 8007862:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8007866:	bd10      	pop	{r4, pc}
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007868:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800786c:	fa13 f282 	uxtah	r2, r3, r2
 8007870:	780c      	ldrb	r4, [r1, #0]
 8007872:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007876:	8a0c      	ldrh	r4, [r1, #16]
 8007878:	f8a2 4406 	strh.w	r4, [r2, #1030]	@ 0x406
 800787c:	e7d8      	b.n	8007830 <USB_ActivateEndpoint+0x41e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800787e:	780c      	ldrb	r4, [r1, #0]
 8007880:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007884:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8007888:	d00c      	beq.n	80078a4 <USB_ActivateEndpoint+0x492>
 800788a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800788e:	b292      	uxth	r2, r2
 8007890:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007894:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007898:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800789c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078a0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078a4:	780c      	ldrb	r4, [r1, #0]
 80078a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80078aa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80078ae:	d00c      	beq.n	80078ca <USB_ActivateEndpoint+0x4b8>
 80078b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80078b4:	b292      	uxth	r2, r2
 80078b6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80078ba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80078be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078c2:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80078c6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80078ca:	78ca      	ldrb	r2, [r1, #3]
 80078cc:	2a01      	cmp	r2, #1
 80078ce:	d01e      	beq.n	800790e <USB_ActivateEndpoint+0x4fc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078d0:	780c      	ldrb	r4, [r1, #0]
 80078d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80078d6:	b292      	uxth	r2, r2
 80078d8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80078dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078e0:	f082 0220 	eor.w	r2, r2, #32
 80078e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078ec:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078f0:	7809      	ldrb	r1, [r1, #0]
 80078f2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80078f6:	b292      	uxth	r2, r2
 80078f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007900:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007904:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007908:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800790c:	e7ab      	b.n	8007866 <USB_ActivateEndpoint+0x454>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800790e:	780c      	ldrb	r4, [r1, #0]
 8007910:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007914:	b292      	uxth	r2, r2
 8007916:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800791a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800791e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007922:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007926:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800792a:	e7e1      	b.n	80078f0 <USB_ActivateEndpoint+0x4de>

0800792c <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800792c:	7b0b      	ldrb	r3, [r1, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d146      	bne.n	80079c0 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8007932:	784b      	ldrb	r3, [r1, #1]
 8007934:	b313      	cbz	r3, 800797c <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007936:	780a      	ldrb	r2, [r1, #0]
 8007938:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800793c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007940:	d00c      	beq.n	800795c <USB_DeactivateEndpoint+0x30>
 8007942:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800794c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007954:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007958:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800795c:	780a      	ldrb	r2, [r1, #0]
 800795e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800796c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007974:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8007978:	2000      	movs	r0, #0
 800797a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800797c:	780a      	ldrb	r2, [r1, #0]
 800797e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007982:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007986:	d00c      	beq.n	80079a2 <USB_DeactivateEndpoint+0x76>
 8007988:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800799a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800799e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079a2:	780a      	ldrb	r2, [r1, #0]
 80079a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80079be:	e7db      	b.n	8007978 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 80079c0:	784b      	ldrb	r3, [r1, #1]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d14e      	bne.n	8007a64 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079c6:	780a      	ldrb	r2, [r1, #0]
 80079c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80079cc:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80079d0:	d00c      	beq.n	80079ec <USB_DeactivateEndpoint+0xc0>
 80079d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079ec:	780a      	ldrb	r2, [r1, #0]
 80079ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80079f2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80079f6:	d00c      	beq.n	8007a12 <USB_DeactivateEndpoint+0xe6>
 80079f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8007a12:	780a      	ldrb	r2, [r1, #0]
 8007a14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a2a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a2e:	780a      	ldrb	r2, [r1, #0]
 8007a30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a3e:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8007a42:	ea43 030c 	orr.w	r3, r3, ip
 8007a46:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a4a:	780a      	ldrb	r2, [r1, #0]
 8007a4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a5a:	ea43 030c 	orr.w	r3, r3, ip
 8007a5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007a62:	e789      	b.n	8007978 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a64:	780a      	ldrb	r2, [r1, #0]
 8007a66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007a6a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007a6e:	d00c      	beq.n	8007a8a <USB_DeactivateEndpoint+0x15e>
 8007a70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a8a:	780a      	ldrb	r2, [r1, #0]
 8007a8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007a90:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007a94:	d00c      	beq.n	8007ab0 <USB_DeactivateEndpoint+0x184>
 8007a96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aa8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007aac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8007ab0:	780a      	ldrb	r2, [r1, #0]
 8007ab2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007acc:	780a      	ldrb	r2, [r1, #0]
 8007ace:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007adc:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8007ae0:	ea43 030c 	orr.w	r3, r3, ip
 8007ae4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ae8:	780a      	ldrb	r2, [r1, #0]
 8007aea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007af4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af8:	ea43 030c 	orr.w	r3, r3, ip
 8007afc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007b00:	e73a      	b.n	8007978 <USB_DeactivateEndpoint+0x4c>

08007b02 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8007b02:	784b      	ldrb	r3, [r1, #1]
 8007b04:	b18b      	cbz	r3, 8007b2a <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b06:	780a      	ldrb	r2, [r1, #0]
 8007b08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b16:	f083 0310 	eor.w	r3, r3, #16
 8007b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8007b26:	2000      	movs	r0, #0
 8007b28:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b2a:	780a      	ldrb	r2, [r1, #0]
 8007b2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b3a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b46:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007b4a:	e7ec      	b.n	8007b26 <USB_EPSetStall+0x24>

08007b4c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8007b4c:	784b      	ldrb	r3, [r1, #1]
 8007b4e:	b333      	cbz	r3, 8007b9e <USB_EPClearStall+0x52>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b50:	780a      	ldrb	r2, [r1, #0]
 8007b52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b56:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007b5a:	d00c      	beq.n	8007b76 <USB_EPClearStall+0x2a>
 8007b5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b72:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

    if (ep->type != EP_TYPE_ISOC)
 8007b76:	78cb      	ldrb	r3, [r1, #3]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d033      	beq.n	8007be4 <USB_EPClearStall+0x98>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b7c:	780a      	ldrb	r2, [r1, #0]
 8007b7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b8c:	f083 0320 	eor.w	r3, r3, #32
 8007b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007b9c:	e022      	b.n	8007be4 <USB_EPClearStall+0x98>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b9e:	780a      	ldrb	r2, [r1, #0]
 8007ba0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007ba4:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007ba8:	d00c      	beq.n	8007bc4 <USB_EPClearStall+0x78>
 8007baa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bc4:	780a      	ldrb	r2, [r1, #0]
 8007bc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8007bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8007be4:	2000      	movs	r0, #0
 8007be6:	4770      	bx	lr

08007be8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8007be8:	b911      	cbnz	r1, 8007bf0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007bea:	2380      	movs	r3, #128	@ 0x80
 8007bec:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	4770      	bx	lr

08007bf4 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007bf4:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8007bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8007c06:	2000      	movs	r0, #0
 8007c08:	4770      	bx	lr

08007c0a <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007c0a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8007c0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c12:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8007c16:	2000      	movs	r0, #0
 8007c18:	4770      	bx	lr

08007c1a <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c1a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8007c1e:	b280      	uxth	r0, r0
 8007c20:	4770      	bx	lr

08007c22 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007c22:	2000      	movs	r0, #0
 8007c24:	4770      	bx	lr

08007c26 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c26:	3301      	adds	r3, #1
 8007c28:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c2a:	4402      	add	r2, r0
 8007c2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 8007c30:	e008      	b.n	8007c44 <USB_WritePMA+0x1e>
  {
    WrVal = pBuf[0];
 8007c32:	7808      	ldrb	r0, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007c34:	f891 c001 	ldrb.w	ip, [r1, #1]
 8007c38:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8007c3c:	f822 0b02 	strh.w	r0, [r2], #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8007c40:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8007c42:	3b01      	subs	r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1f4      	bne.n	8007c32 <USB_WritePMA+0xc>
  }
}
 8007c48:	4770      	bx	lr

08007c4a <USB_EPStartXfer>:
{
 8007c4a:	b570      	push	{r4, r5, r6, lr}
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8007c50:	784b      	ldrb	r3, [r1, #1]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d01a      	beq.n	8007c8c <USB_EPStartXfer+0x42>
    if (ep->doublebuffer == 0U)
 8007c56:	7b0b      	ldrb	r3, [r1, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f040 8292 	bne.w	8008182 <USB_EPStartXfer+0x538>
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007c5e:	698b      	ldr	r3, [r1, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 8265 	bne.w	8008130 <USB_EPStartXfer+0x4e6>
 8007c66:	78cb      	ldrb	r3, [r1, #3]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f040 8261 	bne.w	8008130 <USB_EPStartXfer+0x4e6>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007c6e:	780a      	ldrb	r2, [r1, #0]
 8007c70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c7e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007c8a:	e25f      	b.n	800814c <USB_EPStartXfer+0x502>
    if (ep->xfer_len > ep->maxpacket)
 8007c8c:	698e      	ldr	r6, [r1, #24]
 8007c8e:	690a      	ldr	r2, [r1, #16]
 8007c90:	4296      	cmp	r6, r2
 8007c92:	d900      	bls.n	8007c96 <USB_EPStartXfer+0x4c>
      len = ep->maxpacket;
 8007c94:	4616      	mov	r6, r2
    if (ep->doublebuffer == 0U)
 8007c96:	7b21      	ldrb	r1, [r4, #12]
 8007c98:	b341      	cbz	r1, 8007cec <USB_EPStartXfer+0xa2>
      if (ep->type == EP_TYPE_BULK)
 8007c9a:	78e1      	ldrb	r1, [r4, #3]
 8007c9c:	2902      	cmp	r1, #2
 8007c9e:	d047      	beq.n	8007d30 <USB_EPStartXfer+0xe6>
        ep->xfer_len_db -= len;
 8007ca0:	6a22      	ldr	r2, [r4, #32]
 8007ca2:	1b92      	subs	r2, r2, r6
 8007ca4:	6222      	str	r2, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ca6:	7822      	ldrb	r2, [r4, #0]
 8007ca8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8007cac:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8007cb0:	f000 81f6 	beq.w	80080a0 <USB_EPStartXfer+0x456>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 81e3 	bne.w	8008080 <USB_EPStartXfer+0x436>
 8007cba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007cbe:	fa15 f383 	uxtah	r3, r5, r3
 8007cc2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007cc6:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 8007cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cce:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	f040 81b4 	bne.w	8008040 <USB_EPStartXfer+0x3f6>
 8007cd8:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 8007cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 8007cea:	e1d2      	b.n	8008092 <USB_EPStartXfer+0x448>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007cec:	b2b6      	uxth	r6, r6
 8007cee:	4633      	mov	r3, r6
 8007cf0:	88e2      	ldrh	r2, [r4, #6]
 8007cf2:	6961      	ldr	r1, [r4, #20]
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f7ff ff96 	bl	8007c26 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cfa:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007cfe:	fa15 f383 	uxtah	r3, r5, r3
 8007d02:	7822      	ldrb	r2, [r4, #0]
 8007d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d08:	f8a3 6402 	strh.w	r6, [r3, #1026]	@ 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d0c:	7822      	ldrb	r2, [r4, #0]
 8007d0e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d1c:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8007d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d28:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e224      	b.n	800817a <USB_EPStartXfer+0x530>
        if (ep->xfer_len_db > ep->maxpacket)
 8007d30:	6a23      	ldr	r3, [r4, #32]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	f080 8166 	bcs.w	8008004 <USB_EPStartXfer+0x3ba>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007d38:	7822      	ldrb	r2, [r4, #0]
 8007d3a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d48:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d50:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8007d54:	6a23      	ldr	r3, [r4, #32]
 8007d56:	1b9b      	subs	r3, r3, r6
 8007d58:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d5a:	7823      	ldrb	r3, [r4, #0]
 8007d5c:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8007d60:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8007d64:	f000 80a7 	beq.w	8007eb6 <USB_EPStartXfer+0x26c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d68:	7862      	ldrb	r2, [r4, #1]
 8007d6a:	bbb2      	cbnz	r2, 8007dda <USB_EPStartXfer+0x190>
 8007d6c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8007d70:	fa15 f282 	uxtah	r2, r5, r2
 8007d74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d78:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007d7c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007d80:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007d84:	b94e      	cbnz	r6, 8007d9a <USB_EPStartXfer+0x150>
 8007d86:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007d8a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007d8e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007d92:	b292      	uxth	r2, r2
 8007d94:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007d98:	e021      	b.n	8007dde <USB_EPStartXfer+0x194>
 8007d9a:	2e3e      	cmp	r6, #62	@ 0x3e
 8007d9c:	d80d      	bhi.n	8007dba <USB_EPStartXfer+0x170>
 8007d9e:	0872      	lsrs	r2, r6, #1
 8007da0:	f016 0f01 	tst.w	r6, #1
 8007da4:	d000      	beq.n	8007da8 <USB_EPStartXfer+0x15e>
 8007da6:	3201      	adds	r2, #1
 8007da8:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	@ 0x406
 8007dac:	b289      	uxth	r1, r1
 8007dae:	0292      	lsls	r2, r2, #10
 8007db0:	b292      	uxth	r2, r2
 8007db2:	430a      	orrs	r2, r1
 8007db4:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007db8:	e011      	b.n	8007dde <USB_EPStartXfer+0x194>
 8007dba:	0971      	lsrs	r1, r6, #5
 8007dbc:	f016 0f1f 	tst.w	r6, #31
 8007dc0:	d100      	bne.n	8007dc4 <USB_EPStartXfer+0x17a>
 8007dc2:	3901      	subs	r1, #1
 8007dc4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007dc8:	b292      	uxth	r2, r2
 8007dca:	0289      	lsls	r1, r1, #10
 8007dcc:	b289      	uxth	r1, r1
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dd4:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007dd8:	e001      	b.n	8007dde <USB_EPStartXfer+0x194>
 8007dda:	2a01      	cmp	r2, #1
 8007ddc:	d029      	beq.n	8007e32 <USB_EPStartXfer+0x1e8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dde:	b2b3      	uxth	r3, r6
 8007de0:	8962      	ldrh	r2, [r4, #10]
 8007de2:	6961      	ldr	r1, [r4, #20]
 8007de4:	4628      	mov	r0, r5
 8007de6:	f7ff ff1e 	bl	8007c26 <USB_WritePMA>
            ep->xfer_buff += len;
 8007dea:	6963      	ldr	r3, [r4, #20]
 8007dec:	4433      	add	r3, r6
 8007dee:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007df0:	6a23      	ldr	r3, [r4, #32]
 8007df2:	6922      	ldr	r2, [r4, #16]
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d926      	bls.n	8007e46 <USB_EPStartXfer+0x1fc>
              ep->xfer_len_db -= len;
 8007df8:	1b9b      	subs	r3, r3, r6
 8007dfa:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dfc:	7863      	ldrb	r3, [r4, #1]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d145      	bne.n	8007e8e <USB_EPStartXfer+0x244>
 8007e02:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007e06:	fa15 f383 	uxtah	r3, r5, r3
 8007e0a:	7822      	ldrb	r2, [r4, #0]
 8007e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e10:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8007e14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007e18:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007e1c:	b9be      	cbnz	r6, 8007e4e <USB_EPStartXfer+0x204>
 8007e1e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8007e22:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007e26:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007e2a:	b292      	uxth	r2, r2
 8007e2c:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007e30:	e02f      	b.n	8007e92 <USB_EPStartXfer+0x248>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e32:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8007e36:	fa15 f282 	uxtah	r2, r5, r2
 8007e3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e3e:	b2b2      	uxth	r2, r6
 8007e40:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007e44:	e7cb      	b.n	8007dde <USB_EPStartXfer+0x194>
              ep->xfer_len_db = 0U;
 8007e46:	2200      	movs	r2, #0
 8007e48:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	e7d6      	b.n	8007dfc <USB_EPStartXfer+0x1b2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e4e:	2e3e      	cmp	r6, #62	@ 0x3e
 8007e50:	d80d      	bhi.n	8007e6e <USB_EPStartXfer+0x224>
 8007e52:	0872      	lsrs	r2, r6, #1
 8007e54:	f016 0f01 	tst.w	r6, #1
 8007e58:	d000      	beq.n	8007e5c <USB_EPStartXfer+0x212>
 8007e5a:	3201      	adds	r2, #1
 8007e5c:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	@ 0x402
 8007e60:	b289      	uxth	r1, r1
 8007e62:	0292      	lsls	r2, r2, #10
 8007e64:	b292      	uxth	r2, r2
 8007e66:	430a      	orrs	r2, r1
 8007e68:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007e6c:	e011      	b.n	8007e92 <USB_EPStartXfer+0x248>
 8007e6e:	0971      	lsrs	r1, r6, #5
 8007e70:	f016 0f1f 	tst.w	r6, #31
 8007e74:	d100      	bne.n	8007e78 <USB_EPStartXfer+0x22e>
 8007e76:	3901      	subs	r1, #1
 8007e78:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8007e7c:	b292      	uxth	r2, r2
 8007e7e:	0289      	lsls	r1, r1, #10
 8007e80:	b289      	uxth	r1, r1
 8007e82:	430a      	orrs	r2, r1
 8007e84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e88:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007e8c:	e001      	b.n	8007e92 <USB_EPStartXfer+0x248>
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d006      	beq.n	8007ea0 <USB_EPStartXfer+0x256>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e92:	b2b3      	uxth	r3, r6
 8007e94:	8922      	ldrh	r2, [r4, #8]
 8007e96:	6961      	ldr	r1, [r4, #20]
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f7ff fec4 	bl	8007c26 <USB_WritePMA>
 8007e9e:	e735      	b.n	8007d0c <USB_EPStartXfer+0xc2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ea0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007ea4:	fa15 f383 	uxtah	r3, r5, r3
 8007ea8:	7822      	ldrb	r2, [r4, #0]
 8007eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eae:	b2b2      	uxth	r2, r6
 8007eb0:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007eb4:	e7ed      	b.n	8007e92 <USB_EPStartXfer+0x248>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007eb6:	7862      	ldrb	r2, [r4, #1]
 8007eb8:	bbb2      	cbnz	r2, 8007f28 <USB_EPStartXfer+0x2de>
 8007eba:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8007ebe:	fa15 f282 	uxtah	r2, r5, r2
 8007ec2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ec6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8007eca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007ece:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007ed2:	b94e      	cbnz	r6, 8007ee8 <USB_EPStartXfer+0x29e>
 8007ed4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8007ed8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007edc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007ee6:	e021      	b.n	8007f2c <USB_EPStartXfer+0x2e2>
 8007ee8:	2e3e      	cmp	r6, #62	@ 0x3e
 8007eea:	d80d      	bhi.n	8007f08 <USB_EPStartXfer+0x2be>
 8007eec:	0872      	lsrs	r2, r6, #1
 8007eee:	f016 0f01 	tst.w	r6, #1
 8007ef2:	d000      	beq.n	8007ef6 <USB_EPStartXfer+0x2ac>
 8007ef4:	3201      	adds	r2, #1
 8007ef6:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	@ 0x402
 8007efa:	b289      	uxth	r1, r1
 8007efc:	0292      	lsls	r2, r2, #10
 8007efe:	b292      	uxth	r2, r2
 8007f00:	430a      	orrs	r2, r1
 8007f02:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007f06:	e011      	b.n	8007f2c <USB_EPStartXfer+0x2e2>
 8007f08:	0971      	lsrs	r1, r6, #5
 8007f0a:	f016 0f1f 	tst.w	r6, #31
 8007f0e:	d100      	bne.n	8007f12 <USB_EPStartXfer+0x2c8>
 8007f10:	3901      	subs	r1, #1
 8007f12:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	@ 0x402
 8007f16:	b292      	uxth	r2, r2
 8007f18:	0289      	lsls	r1, r1, #10
 8007f1a:	b289      	uxth	r1, r1
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f22:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007f26:	e001      	b.n	8007f2c <USB_EPStartXfer+0x2e2>
 8007f28:	2a01      	cmp	r2, #1
 8007f2a:	d029      	beq.n	8007f80 <USB_EPStartXfer+0x336>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f2c:	b2b3      	uxth	r3, r6
 8007f2e:	8922      	ldrh	r2, [r4, #8]
 8007f30:	6961      	ldr	r1, [r4, #20]
 8007f32:	4628      	mov	r0, r5
 8007f34:	f7ff fe77 	bl	8007c26 <USB_WritePMA>
            ep->xfer_buff += len;
 8007f38:	6963      	ldr	r3, [r4, #20]
 8007f3a:	4433      	add	r3, r6
 8007f3c:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007f3e:	6a23      	ldr	r3, [r4, #32]
 8007f40:	6922      	ldr	r2, [r4, #16]
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d926      	bls.n	8007f94 <USB_EPStartXfer+0x34a>
              ep->xfer_len_db -= len;
 8007f46:	1b9b      	subs	r3, r3, r6
 8007f48:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f4a:	7863      	ldrb	r3, [r4, #1]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d145      	bne.n	8007fdc <USB_EPStartXfer+0x392>
 8007f50:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007f54:	fa15 f383 	uxtah	r3, r5, r3
 8007f58:	7822      	ldrb	r2, [r4, #0]
 8007f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f5e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007f62:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007f66:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007f6a:	b9be      	cbnz	r6, 8007f9c <USB_EPStartXfer+0x352>
 8007f6c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007f70:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007f74:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007f78:	b292      	uxth	r2, r2
 8007f7a:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007f7e:	e02f      	b.n	8007fe0 <USB_EPStartXfer+0x396>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f80:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8007f84:	fa15 f282 	uxtah	r2, r5, r2
 8007f88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f8c:	b2b2      	uxth	r2, r6
 8007f8e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
 8007f92:	e7cb      	b.n	8007f2c <USB_EPStartXfer+0x2e2>
              ep->xfer_len_db = 0U;
 8007f94:	2200      	movs	r2, #0
 8007f96:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8007f98:	461e      	mov	r6, r3
 8007f9a:	e7d6      	b.n	8007f4a <USB_EPStartXfer+0x300>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f9c:	2e3e      	cmp	r6, #62	@ 0x3e
 8007f9e:	d80d      	bhi.n	8007fbc <USB_EPStartXfer+0x372>
 8007fa0:	0872      	lsrs	r2, r6, #1
 8007fa2:	f016 0f01 	tst.w	r6, #1
 8007fa6:	d000      	beq.n	8007faa <USB_EPStartXfer+0x360>
 8007fa8:	3201      	adds	r2, #1
 8007faa:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	@ 0x406
 8007fae:	b289      	uxth	r1, r1
 8007fb0:	0292      	lsls	r2, r2, #10
 8007fb2:	b292      	uxth	r2, r2
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007fba:	e011      	b.n	8007fe0 <USB_EPStartXfer+0x396>
 8007fbc:	0971      	lsrs	r1, r6, #5
 8007fbe:	f016 0f1f 	tst.w	r6, #31
 8007fc2:	d100      	bne.n	8007fc6 <USB_EPStartXfer+0x37c>
 8007fc4:	3901      	subs	r1, #1
 8007fc6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	@ 0x406
 8007fca:	b292      	uxth	r2, r2
 8007fcc:	0289      	lsls	r1, r1, #10
 8007fce:	b289      	uxth	r1, r1
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fd6:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8007fda:	e001      	b.n	8007fe0 <USB_EPStartXfer+0x396>
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d006      	beq.n	8007fee <USB_EPStartXfer+0x3a4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fe0:	b2b3      	uxth	r3, r6
 8007fe2:	8962      	ldrh	r2, [r4, #10]
 8007fe4:	6961      	ldr	r1, [r4, #20]
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7ff fe1d 	bl	8007c26 <USB_WritePMA>
 8007fec:	e68e      	b.n	8007d0c <USB_EPStartXfer+0xc2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fee:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8007ff2:	fa15 f383 	uxtah	r3, r5, r3
 8007ff6:	7822      	ldrb	r2, [r4, #0]
 8007ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ffc:	b2b2      	uxth	r2, r6
 8007ffe:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
 8008002:	e7ed      	b.n	8007fe0 <USB_EPStartXfer+0x396>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008004:	7821      	ldrb	r1, [r4, #0]
 8008006:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 800800a:	b292      	uxth	r2, r2
 800800c:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8008010:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008014:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008018:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800801c:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008020:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8008024:	fa15 f282 	uxtah	r2, r5, r2
 8008028:	7821      	ldrb	r1, [r4, #0]
 800802a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800802e:	b29b      	uxth	r3, r3
 8008030:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008034:	8922      	ldrh	r2, [r4, #8]
 8008036:	6961      	ldr	r1, [r4, #20]
 8008038:	4628      	mov	r0, r5
 800803a:	f7ff fdf4 	bl	8007c26 <USB_WritePMA>
 800803e:	e665      	b.n	8007d0c <USB_EPStartXfer+0xc2>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008040:	2e3e      	cmp	r6, #62	@ 0x3e
 8008042:	d80d      	bhi.n	8008060 <USB_EPStartXfer+0x416>
 8008044:	0873      	lsrs	r3, r6, #1
 8008046:	f016 0f01 	tst.w	r6, #1
 800804a:	d000      	beq.n	800804e <USB_EPStartXfer+0x404>
 800804c:	3301      	adds	r3, #1
 800804e:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	@ 0x406
 8008052:	b289      	uxth	r1, r1
 8008054:	029b      	lsls	r3, r3, #10
 8008056:	b29b      	uxth	r3, r3
 8008058:	430b      	orrs	r3, r1
 800805a:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 800805e:	e018      	b.n	8008092 <USB_EPStartXfer+0x448>
 8008060:	0971      	lsrs	r1, r6, #5
 8008062:	f016 0f1f 	tst.w	r6, #31
 8008066:	d100      	bne.n	800806a <USB_EPStartXfer+0x420>
 8008068:	3901      	subs	r1, #1
 800806a:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	@ 0x406
 800806e:	b29b      	uxth	r3, r3
 8008070:	0289      	lsls	r1, r1, #10
 8008072:	b289      	uxth	r1, r1
 8008074:	430b      	orrs	r3, r1
 8008076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800807a:	f8a2 3406 	strh.w	r3, [r2, #1030]	@ 0x406
 800807e:	e008      	b.n	8008092 <USB_EPStartXfer+0x448>
 8008080:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8008084:	fa15 f383 	uxtah	r3, r5, r3
 8008088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800808c:	b2b2      	uxth	r2, r6
 800808e:	f8a3 2406 	strh.w	r2, [r3, #1030]	@ 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008092:	b2b3      	uxth	r3, r6
 8008094:	8962      	ldrh	r2, [r4, #10]
 8008096:	6961      	ldr	r1, [r4, #20]
 8008098:	4628      	mov	r0, r5
 800809a:	f7ff fdc4 	bl	8007c26 <USB_WritePMA>
 800809e:	e635      	b.n	8007d0c <USB_EPStartXfer+0xc2>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080a0:	bbb3      	cbnz	r3, 8008110 <USB_EPStartXfer+0x4c6>
 80080a2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80080a6:	fa15 f383 	uxtah	r3, r5, r3
 80080aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80080ae:	f8b2 3402 	ldrh.w	r3, [r2, #1026]	@ 0x402
 80080b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080b6:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
 80080ba:	b94e      	cbnz	r6, 80080d0 <USB_EPStartXfer+0x486>
 80080bc:	f8b2 3402 	ldrh.w	r3, [r2, #1026]	@ 0x402
 80080c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
 80080ce:	e028      	b.n	8008122 <USB_EPStartXfer+0x4d8>
 80080d0:	2e3e      	cmp	r6, #62	@ 0x3e
 80080d2:	d80d      	bhi.n	80080f0 <USB_EPStartXfer+0x4a6>
 80080d4:	0873      	lsrs	r3, r6, #1
 80080d6:	f016 0f01 	tst.w	r6, #1
 80080da:	d000      	beq.n	80080de <USB_EPStartXfer+0x494>
 80080dc:	3301      	adds	r3, #1
 80080de:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	@ 0x402
 80080e2:	b289      	uxth	r1, r1
 80080e4:	029b      	lsls	r3, r3, #10
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	430b      	orrs	r3, r1
 80080ea:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
 80080ee:	e018      	b.n	8008122 <USB_EPStartXfer+0x4d8>
 80080f0:	0971      	lsrs	r1, r6, #5
 80080f2:	f016 0f1f 	tst.w	r6, #31
 80080f6:	d100      	bne.n	80080fa <USB_EPStartXfer+0x4b0>
 80080f8:	3901      	subs	r1, #1
 80080fa:	f8b2 3402 	ldrh.w	r3, [r2, #1026]	@ 0x402
 80080fe:	b29b      	uxth	r3, r3
 8008100:	0289      	lsls	r1, r1, #10
 8008102:	b289      	uxth	r1, r1
 8008104:	430b      	orrs	r3, r1
 8008106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800810a:	f8a2 3402 	strh.w	r3, [r2, #1026]	@ 0x402
 800810e:	e008      	b.n	8008122 <USB_EPStartXfer+0x4d8>
 8008110:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8008114:	fa15 f383 	uxtah	r3, r5, r3
 8008118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800811c:	b2b2      	uxth	r2, r6
 800811e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008122:	b2b3      	uxth	r3, r6
 8008124:	8922      	ldrh	r2, [r4, #8]
 8008126:	6961      	ldr	r1, [r4, #20]
 8008128:	4628      	mov	r0, r5
 800812a:	f7ff fd7c 	bl	8007c26 <USB_WritePMA>
 800812e:	e5ed      	b.n	8007d0c <USB_EPStartXfer+0xc2>
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008130:	7822      	ldrb	r2, [r4, #0]
 8008132:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800813c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008148:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
      if (ep->xfer_len > ep->maxpacket)
 800814c:	69a3      	ldr	r3, [r4, #24]
 800814e:	6922      	ldr	r2, [r4, #16]
 8008150:	4293      	cmp	r3, r2
 8008152:	d913      	bls.n	800817c <USB_EPStartXfer+0x532>
        ep->xfer_len -= ep->maxpacket;
 8008154:	1a9b      	subs	r3, r3, r2
 8008156:	61a3      	str	r3, [r4, #24]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008158:	7822      	ldrb	r2, [r4, #0]
 800815a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008168:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800816c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008174:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8008178:	2000      	movs	r0, #0
}
 800817a:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_len = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	61a3      	str	r3, [r4, #24]
 8008180:	e7ea      	b.n	8008158 <USB_EPStartXfer+0x50e>
      if (ep->type == EP_TYPE_BULK)
 8008182:	78cb      	ldrb	r3, [r1, #3]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d004      	beq.n	8008192 <USB_EPStartXfer+0x548>
      else if (ep->type == EP_TYPE_ISOC)
 8008188:	2b01      	cmp	r3, #1
 800818a:	d121      	bne.n	80081d0 <USB_EPStartXfer+0x586>
        ep->xfer_len = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	618b      	str	r3, [r1, #24]
 8008190:	e7e2      	b.n	8008158 <USB_EPStartXfer+0x50e>
        if (ep->xfer_count != 0U)
 8008192:	69cb      	ldr	r3, [r1, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0df      	beq.n	8008158 <USB_EPStartXfer+0x50e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008198:	780a      	ldrb	r2, [r1, #0]
 800819a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800819e:	b299      	uxth	r1, r3
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081a0:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80081a4:	d010      	beq.n	80081c8 <USB_EPStartXfer+0x57e>
 80081a6:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80081aa:	d0d5      	beq.n	8008158 <USB_EPStartXfer+0x50e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80081ac:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081c2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80081c6:	e7c7      	b.n	8008158 <USB_EPStartXfer+0x50e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80081c8:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80081cc:	d1c4      	bne.n	8008158 <USB_EPStartXfer+0x50e>
 80081ce:	e7ed      	b.n	80081ac <USB_EPStartXfer+0x562>
        return HAL_ERROR;
 80081d0:	2001      	movs	r0, #1
 80081d2:	e7d2      	b.n	800817a <USB_EPStartXfer+0x530>

080081d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081d4:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081d6:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081d8:	4402      	add	r2, r0
 80081da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 80081de:	e007      	b.n	80081f0 <USB_ReadPMA+0x1c>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80081e0:	f832 0b02 	ldrh.w	r0, [r2], #2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80081e4:	7008      	strb	r0, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80081e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80081ea:	7048      	strb	r0, [r1, #1]
    pBuf++;
 80081ec:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 80081ee:	3c01      	subs	r4, #1
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	d1f5      	bne.n	80081e0 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80081f4:	f013 0f01 	tst.w	r3, #1
 80081f8:	d001      	beq.n	80081fe <USB_ReadPMA+0x2a>
  {
    RdVal = *pdwVal;
 80081fa:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80081fc:	700b      	strb	r3, [r1, #0]
  }
}
 80081fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008202:	4770      	bx	lr

08008204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008204:	b510      	push	{r4, lr}
 8008206:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008208:	4a0c      	ldr	r2, [pc, #48]	@ (800823c <_sbrk+0x38>)
 800820a:	490d      	ldr	r1, [pc, #52]	@ (8008240 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800820c:	480d      	ldr	r0, [pc, #52]	@ (8008244 <_sbrk+0x40>)
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	b140      	cbz	r0, 8008224 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008212:	480c      	ldr	r0, [pc, #48]	@ (8008244 <_sbrk+0x40>)
 8008214:	6800      	ldr	r0, [r0, #0]
 8008216:	4403      	add	r3, r0
 8008218:	1a52      	subs	r2, r2, r1
 800821a:	4293      	cmp	r3, r2
 800821c:	d806      	bhi.n	800822c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800821e:	4a09      	ldr	r2, [pc, #36]	@ (8008244 <_sbrk+0x40>)
 8008220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8008222:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8008224:	4807      	ldr	r0, [pc, #28]	@ (8008244 <_sbrk+0x40>)
 8008226:	4c08      	ldr	r4, [pc, #32]	@ (8008248 <_sbrk+0x44>)
 8008228:	6004      	str	r4, [r0, #0]
 800822a:	e7f2      	b.n	8008212 <_sbrk+0xe>
    errno = ENOMEM;
 800822c:	f002 f906 	bl	800a43c <__errno>
 8008230:	230c      	movs	r3, #12
 8008232:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e7f3      	b.n	8008222 <_sbrk+0x1e>
 800823a:	bf00      	nop
 800823c:	20008000 	.word	0x20008000
 8008240:	00000600 	.word	0x00000600
 8008244:	200014c4 	.word	0x200014c4
 8008248:	20002818 	.word	0x20002818

0800824c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800824c:	4a03      	ldr	r2, [pc, #12]	@ (800825c <SystemInit+0x10>)
 800824e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8008252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008256:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800825a:	4770      	bx	lr
 800825c:	e000ed00 	.word	0xe000ed00

08008260 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008260:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008262:	2200      	movs	r2, #0
 8008264:	490f      	ldr	r1, [pc, #60]	@ (80082a4 <MX_USB_DEVICE_Init+0x44>)
 8008266:	4810      	ldr	r0, [pc, #64]	@ (80082a8 <MX_USB_DEVICE_Init+0x48>)
 8008268:	f000 fc97 	bl	8008b9a <USBD_Init>
 800826c:	b970      	cbnz	r0, 800828c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800826e:	490f      	ldr	r1, [pc, #60]	@ (80082ac <MX_USB_DEVICE_Init+0x4c>)
 8008270:	480d      	ldr	r0, [pc, #52]	@ (80082a8 <MX_USB_DEVICE_Init+0x48>)
 8008272:	f000 fca9 	bl	8008bc8 <USBD_RegisterClass>
 8008276:	b960      	cbnz	r0, 8008292 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008278:	490d      	ldr	r1, [pc, #52]	@ (80082b0 <MX_USB_DEVICE_Init+0x50>)
 800827a:	480b      	ldr	r0, [pc, #44]	@ (80082a8 <MX_USB_DEVICE_Init+0x48>)
 800827c:	f000 fa39 	bl	80086f2 <USBD_CDC_RegisterInterface>
 8008280:	b950      	cbnz	r0, 8008298 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008282:	4809      	ldr	r0, [pc, #36]	@ (80082a8 <MX_USB_DEVICE_Init+0x48>)
 8008284:	f000 fcc0 	bl	8008c08 <USBD_Start>
 8008288:	b948      	cbnz	r0, 800829e <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800828a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800828c:	f7fa f992 	bl	80025b4 <Error_Handler>
 8008290:	e7ed      	b.n	800826e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8008292:	f7fa f98f 	bl	80025b4 <Error_Handler>
 8008296:	e7ef      	b.n	8008278 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8008298:	f7fa f98c 	bl	80025b4 <Error_Handler>
 800829c:	e7f1      	b.n	8008282 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800829e:	f7fa f989 	bl	80025b4 <Error_Handler>
}
 80082a2:	e7f2      	b.n	800828a <MX_USB_DEVICE_Init+0x2a>
 80082a4:	200001a4 	.word	0x200001a4
 80082a8:	200014c8 	.word	0x200014c8
 80082ac:	2000010c 	.word	0x2000010c
 80082b0:	20000150 	.word	0x20000150

080082b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082b4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082b6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80082ba:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80082be:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 80082c2:	b18c      	cbz	r4, 80082e8 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082c4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80082c8:	6843      	ldr	r3, [r0, #4]
 80082ca:	b17b      	cbz	r3, 80082ec <USBD_CDC_EP0_RxReady+0x38>
 80082cc:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80082d0:	28ff      	cmp	r0, #255	@ 0xff
 80082d2:	d00d      	beq.n	80082f0 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80082da:	4621      	mov	r1, r4
 80082dc:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80082de:	23ff      	movs	r3, #255	@ 0xff
 80082e0:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80082e4:	2000      	movs	r0, #0
}
 80082e6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80082e8:	2003      	movs	r0, #3
 80082ea:	e7fc      	b.n	80082e6 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 80082ec:	2000      	movs	r0, #0
 80082ee:	e7fa      	b.n	80082e6 <USBD_CDC_EP0_RxReady+0x32>
 80082f0:	2000      	movs	r0, #0
 80082f2:	e7f8      	b.n	80082e6 <USBD_CDC_EP0_RxReady+0x32>

080082f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082f4:	230a      	movs	r3, #10
 80082f6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80082f8:	4800      	ldr	r0, [pc, #0]	@ (80082fc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80082fa:	4770      	bx	lr
 80082fc:	20000144 	.word	0x20000144

08008300 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008304:	4f0f      	ldr	r7, [pc, #60]	@ (8008344 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8008306:	2182      	movs	r1, #130	@ 0x82
 8008308:	4638      	mov	r0, r7
 800830a:	f000 fdf2 	bl	8008ef2 <USBD_GetEpDesc>
 800830e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008310:	2101      	movs	r1, #1
 8008312:	4638      	mov	r0, r7
 8008314:	f000 fded 	bl	8008ef2 <USBD_GetEpDesc>
 8008318:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800831a:	2181      	movs	r1, #129	@ 0x81
 800831c:	4638      	mov	r0, r7
 800831e:	f000 fde8 	bl	8008ef2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8008322:	b10d      	cbz	r5, 8008328 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008324:	2210      	movs	r2, #16
 8008326:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8008328:	b11c      	cbz	r4, 8008332 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800832a:	2240      	movs	r2, #64	@ 0x40
 800832c:	7122      	strb	r2, [r4, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8008332:	b118      	cbz	r0, 800833c <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008334:	2240      	movs	r2, #64	@ 0x40
 8008336:	7102      	strb	r2, [r0, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800833c:	2343      	movs	r3, #67	@ 0x43
 800833e:	8033      	strh	r3, [r6, #0]
}
 8008340:	4800      	ldr	r0, [pc, #0]	@ (8008344 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8008342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008344:	200000c8 	.word	0x200000c8

08008348 <USBD_CDC_GetFSCfgDesc>:
{
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800834c:	4f0f      	ldr	r7, [pc, #60]	@ (800838c <USBD_CDC_GetFSCfgDesc+0x44>)
 800834e:	2182      	movs	r1, #130	@ 0x82
 8008350:	4638      	mov	r0, r7
 8008352:	f000 fdce 	bl	8008ef2 <USBD_GetEpDesc>
 8008356:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008358:	2101      	movs	r1, #1
 800835a:	4638      	mov	r0, r7
 800835c:	f000 fdc9 	bl	8008ef2 <USBD_GetEpDesc>
 8008360:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008362:	2181      	movs	r1, #129	@ 0x81
 8008364:	4638      	mov	r0, r7
 8008366:	f000 fdc4 	bl	8008ef2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800836a:	b10d      	cbz	r5, 8008370 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800836c:	2210      	movs	r2, #16
 800836e:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8008370:	b11c      	cbz	r4, 800837a <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008372:	2240      	movs	r2, #64	@ 0x40
 8008374:	7122      	strb	r2, [r4, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800837a:	b118      	cbz	r0, 8008384 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800837c:	2240      	movs	r2, #64	@ 0x40
 800837e:	7102      	strb	r2, [r0, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008384:	2343      	movs	r3, #67	@ 0x43
 8008386:	8033      	strh	r3, [r6, #0]
}
 8008388:	4800      	ldr	r0, [pc, #0]	@ (800838c <USBD_CDC_GetFSCfgDesc+0x44>)
 800838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838c:	200000c8 	.word	0x200000c8

08008390 <USBD_CDC_GetHSCfgDesc>:
{
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008394:	4f0f      	ldr	r7, [pc, #60]	@ (80083d4 <USBD_CDC_GetHSCfgDesc+0x44>)
 8008396:	2182      	movs	r1, #130	@ 0x82
 8008398:	4638      	mov	r0, r7
 800839a:	f000 fdaa 	bl	8008ef2 <USBD_GetEpDesc>
 800839e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083a0:	2101      	movs	r1, #1
 80083a2:	4638      	mov	r0, r7
 80083a4:	f000 fda5 	bl	8008ef2 <USBD_GetEpDesc>
 80083a8:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083aa:	2181      	movs	r1, #129	@ 0x81
 80083ac:	4638      	mov	r0, r7
 80083ae:	f000 fda0 	bl	8008ef2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80083b2:	b10d      	cbz	r5, 80083b8 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80083b4:	2210      	movs	r2, #16
 80083b6:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80083b8:	b11c      	cbz	r4, 80083c2 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083ba:	2200      	movs	r2, #0
 80083bc:	7122      	strb	r2, [r4, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80083c2:	b118      	cbz	r0, 80083cc <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083c4:	2200      	movs	r2, #0
 80083c6:	7102      	strb	r2, [r0, #4]
 80083c8:	2202      	movs	r2, #2
 80083ca:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083cc:	2343      	movs	r3, #67	@ 0x43
 80083ce:	8033      	strh	r3, [r6, #0]
}
 80083d0:	4800      	ldr	r0, [pc, #0]	@ (80083d4 <USBD_CDC_GetHSCfgDesc+0x44>)
 80083d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d4:	200000c8 	.word	0x200000c8

080083d8 <USBD_CDC_DataOut>:
{
 80083d8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083da:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80083de:	33b0      	adds	r3, #176	@ 0xb0
 80083e0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083e4:	b195      	cbz	r5, 800840c <USBD_CDC_DataOut+0x34>
 80083e6:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083e8:	f000 fba9 	bl	8008b3e <USBD_LL_GetRxDataSize>
 80083ec:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083f0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80083f4:	33b0      	adds	r3, #176	@ 0xb0
 80083f6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80083fa:	6863      	ldr	r3, [r4, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8008402:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8008406:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8008408:	2000      	movs	r0, #0
}
 800840a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800840c:	2003      	movs	r0, #3
 800840e:	e7fc      	b.n	800840a <USBD_CDC_DataOut+0x32>

08008410 <USBD_CDC_DataIn>:
{
 8008410:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008412:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008416:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800841a:	33b0      	adds	r3, #176	@ 0xb0
 800841c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8008420:	b384      	cbz	r4, 8008484 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008422:	f001 030f 	and.w	r3, r1, #15
 8008426:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800842a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800842e:	6992      	ldr	r2, [r2, #24]
 8008430:	b14a      	cbz	r2, 8008446 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008432:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8008436:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
 800843a:	6a2d      	ldr	r5, [r5, #32]
 800843c:	fbb2 fcf5 	udiv	ip, r2, r5
 8008440:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008444:	b192      	cbz	r2, 800846c <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800844c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008450:	33b0      	adds	r3, #176	@ 0xb0
 8008452:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008456:	6843      	ldr	r3, [r0, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	b1ab      	cbz	r3, 8008488 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800845c:	460a      	mov	r2, r1
 800845e:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8008462:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8008466:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8008468:	2000      	movs	r0, #0
}
 800846a:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800846c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008470:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008474:	2400      	movs	r4, #0
 8008476:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008478:	4623      	mov	r3, r4
 800847a:	4622      	mov	r2, r4
 800847c:	f000 fb41 	bl	8008b02 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8008480:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008482:	e7f2      	b.n	800846a <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8008484:	2003      	movs	r0, #3
 8008486:	e7f0      	b.n	800846a <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8008488:	2000      	movs	r0, #0
 800848a:	e7ee      	b.n	800846a <USBD_CDC_DataIn+0x5a>

0800848c <USBD_CDC_Setup>:
{
 800848c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008490:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008494:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8008498:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 800849c:	2200      	movs	r2, #0
 800849e:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 80084a2:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 80084a6:	2f00      	cmp	r7, #0
 80084a8:	d078      	beq.n	800859c <USBD_CDC_Setup+0x110>
 80084aa:	4604      	mov	r4, r0
 80084ac:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ae:	7809      	ldrb	r1, [r1, #0]
 80084b0:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 80084b4:	d034      	beq.n	8008520 <USBD_CDC_Setup+0x94>
 80084b6:	2e20      	cmp	r6, #32
 80084b8:	d169      	bne.n	800858e <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 80084ba:	88ea      	ldrh	r2, [r5, #6]
 80084bc:	b32a      	cbz	r2, 800850a <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 80084be:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80084c2:	d10e      	bne.n	80084e2 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 80084c4:	786b      	ldrb	r3, [r5, #1]
 80084c6:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80084ca:	88ea      	ldrh	r2, [r5, #6]
 80084cc:	2a3f      	cmp	r2, #63	@ 0x3f
 80084ce:	d81a      	bhi.n	8008506 <USBD_CDC_Setup+0x7a>
 80084d0:	b2d2      	uxtb	r2, r2
 80084d2:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80084d6:	4639      	mov	r1, r7
 80084d8:	4620      	mov	r0, r4
 80084da:	f001 f98a 	bl	80097f2 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80084de:	2600      	movs	r6, #0
 80084e0:	e059      	b.n	8008596 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084e2:	33b0      	adds	r3, #176	@ 0xb0
 80084e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	4639      	mov	r1, r7
 80084ee:	7868      	ldrb	r0, [r5, #1]
 80084f0:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084f2:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084f4:	2a07      	cmp	r2, #7
 80084f6:	bf28      	it	cs
 80084f8:	2207      	movcs	r2, #7
 80084fa:	4639      	mov	r1, r7
 80084fc:	4620      	mov	r0, r4
 80084fe:	f001 f963 	bl	80097c8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008502:	2600      	movs	r6, #0
 8008504:	e047      	b.n	8008596 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008506:	2240      	movs	r2, #64	@ 0x40
 8008508:	e7e3      	b.n	80084d2 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800850a:	33b0      	adds	r3, #176	@ 0xb0
 800850c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	2200      	movs	r2, #0
 8008516:	4629      	mov	r1, r5
 8008518:	7868      	ldrb	r0, [r5, #1]
 800851a:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800851c:	2600      	movs	r6, #0
 800851e:	e03a      	b.n	8008596 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8008520:	786f      	ldrb	r7, [r5, #1]
 8008522:	2f0b      	cmp	r7, #11
 8008524:	d82e      	bhi.n	8008584 <USBD_CDC_Setup+0xf8>
 8008526:	e8df f007 	tbb	[pc, r7]
 800852a:	3606      	.short	0x3606
 800852c:	2d2d2d2d 	.word	0x2d2d2d2d
 8008530:	2d2d2d2d 	.word	0x2d2d2d2d
 8008534:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008536:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800853a:	2b03      	cmp	r3, #3
 800853c:	d004      	beq.n	8008548 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 800853e:	4629      	mov	r1, r5
 8008540:	f000 fd14 	bl	8008f6c <USBD_CtlError>
            ret = USBD_FAIL;
 8008544:	2603      	movs	r6, #3
 8008546:	e026      	b.n	8008596 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008548:	2202      	movs	r2, #2
 800854a:	a901      	add	r1, sp, #4
 800854c:	f001 f93c 	bl	80097c8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008550:	463e      	mov	r6, r7
 8008552:	e020      	b.n	8008596 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008554:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008558:	2b03      	cmp	r3, #3
 800855a:	d004      	beq.n	8008566 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 800855c:	4629      	mov	r1, r5
 800855e:	f000 fd05 	bl	8008f6c <USBD_CtlError>
            ret = USBD_FAIL;
 8008562:	2603      	movs	r6, #3
 8008564:	e017      	b.n	8008596 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008566:	2201      	movs	r2, #1
 8008568:	f10d 0107 	add.w	r1, sp, #7
 800856c:	f001 f92c 	bl	80097c8 <USBD_CtlSendData>
 8008570:	e011      	b.n	8008596 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008572:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008576:	2b03      	cmp	r3, #3
 8008578:	d00d      	beq.n	8008596 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 800857a:	4629      	mov	r1, r5
 800857c:	f000 fcf6 	bl	8008f6c <USBD_CtlError>
            ret = USBD_FAIL;
 8008580:	2603      	movs	r6, #3
 8008582:	e008      	b.n	8008596 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8008584:	4629      	mov	r1, r5
 8008586:	f000 fcf1 	bl	8008f6c <USBD_CtlError>
          ret = USBD_FAIL;
 800858a:	2603      	movs	r6, #3
          break;
 800858c:	e003      	b.n	8008596 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 800858e:	4629      	mov	r1, r5
 8008590:	f000 fcec 	bl	8008f6c <USBD_CtlError>
      ret = USBD_FAIL;
 8008594:	2603      	movs	r6, #3
}
 8008596:	4630      	mov	r0, r6
 8008598:	b003      	add	sp, #12
 800859a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800859c:	2603      	movs	r6, #3
 800859e:	e7fa      	b.n	8008596 <USBD_CDC_Setup+0x10a>

080085a0 <USBD_CDC_DeInit>:
{
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80085a4:	2181      	movs	r1, #129	@ 0x81
 80085a6:	f000 fa5a 	bl	8008a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80085aa:	2500      	movs	r5, #0
 80085ac:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80085ae:	2101      	movs	r1, #1
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fa54 	bl	8008a5e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80085b6:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80085ba:	2182      	movs	r1, #130	@ 0x82
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 fa4e 	bl	8008a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80085c2:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80085c6:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80085ca:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80085ce:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80085d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085d6:	b19a      	cbz	r2, 8008600 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80085d8:	33b0      	adds	r3, #176	@ 0xb0
 80085da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80085e4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80085e8:	33b0      	adds	r3, #176	@ 0xb0
 80085ea:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80085ee:	f000 fad3 	bl	8008b98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085f2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80085f6:	33b0      	adds	r3, #176	@ 0xb0
 80085f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80085fc:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8008600:	2000      	movs	r0, #0
 8008602:	bd38      	pop	{r3, r4, r5, pc}

08008604 <USBD_CDC_Init>:
{
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008608:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800860c:	f000 fac0 	bl	8008b90 <USBD_static_malloc>
  if (hcdc == NULL)
 8008610:	2800      	cmp	r0, #0
 8008612:	d049      	beq.n	80086a8 <USBD_CDC_Init+0xa4>
 8008614:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008616:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800861a:	2100      	movs	r1, #0
 800861c:	f001 f990 	bl	8009940 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008620:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008624:	33b0      	adds	r3, #176	@ 0xb0
 8008626:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800862a:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800862e:	7c23      	ldrb	r3, [r4, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d141      	bne.n	80086b8 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008638:	2202      	movs	r2, #2
 800863a:	2181      	movs	r1, #129	@ 0x81
 800863c:	4620      	mov	r0, r4
 800863e:	f000 f9fc 	bl	8008a3a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008642:	2601      	movs	r6, #1
 8008644:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800864a:	2202      	movs	r2, #2
 800864c:	4631      	mov	r1, r6
 800864e:	4620      	mov	r0, r4
 8008650:	f000 f9f3 	bl	8008a3a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008654:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008658:	2310      	movs	r3, #16
 800865a:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800865e:	2308      	movs	r3, #8
 8008660:	2203      	movs	r2, #3
 8008662:	2182      	movs	r1, #130	@ 0x82
 8008664:	4620      	mov	r0, r4
 8008666:	f000 f9e8 	bl	8008a3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800866a:	2301      	movs	r3, #1
 800866c:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8008670:	2600      	movs	r6, #0
 8008672:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008676:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800867a:	33b0      	adds	r3, #176	@ 0xb0
 800867c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4798      	blx	r3
  hcdc->TxState = 0U;
 8008686:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800868a:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 800868e:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8008692:	b362      	cbz	r2, 80086ee <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008694:	7c25      	ldrb	r5, [r4, #16]
 8008696:	bb1d      	cbnz	r5, 80086e0 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800869c:	2101      	movs	r1, #1
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 fa3e 	bl	8008b20 <USBD_LL_PrepareReceive>
}
 80086a4:	4628      	mov	r0, r5
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086a8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80086ac:	33b0      	adds	r3, #176	@ 0xb0
 80086ae:	2200      	movs	r2, #0
 80086b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 80086b4:	2502      	movs	r5, #2
 80086b6:	e7f5      	b.n	80086a4 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086b8:	2340      	movs	r3, #64	@ 0x40
 80086ba:	2202      	movs	r2, #2
 80086bc:	2181      	movs	r1, #129	@ 0x81
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 f9bb 	bl	8008a3a <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086c4:	2601      	movs	r6, #1
 80086c6:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086c8:	2340      	movs	r3, #64	@ 0x40
 80086ca:	2202      	movs	r2, #2
 80086cc:	4631      	mov	r1, r6
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 f9b3 	bl	8008a3a <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086d4:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80086d8:	2310      	movs	r3, #16
 80086da:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 80086de:	e7be      	b.n	800865e <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086e0:	2340      	movs	r3, #64	@ 0x40
 80086e2:	2101      	movs	r1, #1
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fa1b 	bl	8008b20 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80086ea:	2500      	movs	r5, #0
 80086ec:	e7da      	b.n	80086a4 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 80086ee:	2502      	movs	r5, #2
 80086f0:	e7d8      	b.n	80086a4 <USBD_CDC_Init+0xa0>

080086f2 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80086f2:	b139      	cbz	r1, 8008704 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 80086f4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80086f8:	33b0      	adds	r3, #176	@ 0xb0
 80086fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80086fe:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8008700:	2000      	movs	r0, #0
 8008702:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008704:	2003      	movs	r0, #3
}
 8008706:	4770      	bx	lr

08008708 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008708:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800870c:	33b0      	adds	r3, #176	@ 0xb0
 800870e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008712:	b12b      	cbz	r3, 8008720 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8008714:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008718:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800871c:	2000      	movs	r0, #0
 800871e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008720:	2003      	movs	r0, #3
}
 8008722:	4770      	bx	lr

08008724 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008724:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008728:	33b0      	adds	r3, #176	@ 0xb0
 800872a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800872e:	b11b      	cbz	r3, 8008738 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8008730:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008734:	2000      	movs	r0, #0
 8008736:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008738:	2003      	movs	r0, #3
}
 800873a:	4770      	bx	lr

0800873c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800873c:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800873e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008742:	33b0      	adds	r3, #176	@ 0xb0
 8008744:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008748:	b18a      	cbz	r2, 800876e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800874a:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 800874e:	b10b      	cbz	r3, 8008754 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008750:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8008752:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8008754:	2301      	movs	r3, #1
 8008756:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800875a:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 800875e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008760:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8008764:	2181      	movs	r1, #129	@ 0x81
 8008766:	f000 f9cc 	bl	8008b02 <USBD_LL_Transmit>
    ret = USBD_OK;
 800876a:	2000      	movs	r0, #0
 800876c:	e7f1      	b.n	8008752 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 800876e:	2003      	movs	r0, #3
 8008770:	e7ef      	b.n	8008752 <USBD_CDC_TransmitPacket+0x16>

08008772 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008772:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008774:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008778:	33b0      	adds	r3, #176	@ 0xb0
 800877a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800877e:	b192      	cbz	r2, 80087a6 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008780:	7c04      	ldrb	r4, [r0, #16]
 8008782:	b944      	cbnz	r4, 8008796 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008788:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800878c:	2101      	movs	r1, #1
 800878e:	f000 f9c7 	bl	8008b20 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8008792:	4620      	mov	r0, r4
 8008794:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008796:	2340      	movs	r3, #64	@ 0x40
 8008798:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800879c:	2101      	movs	r1, #1
 800879e:	f000 f9bf 	bl	8008b20 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80087a2:	2400      	movs	r4, #0
 80087a4:	e7f5      	b.n	8008792 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 80087a6:	2403      	movs	r4, #3
 80087a8:	e7f3      	b.n	8008792 <USBD_CDC_ReceivePacket+0x20>

080087aa <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80087aa:	2000      	movs	r0, #0
 80087ac:	4770      	bx	lr

080087ae <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80087ae:	2000      	movs	r0, #0
 80087b0:	4770      	bx	lr

080087b2 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80087b2:	2000      	movs	r0, #0
 80087b4:	4770      	bx	lr
	...

080087b8 <CDC_Receive_FS>:
{
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	4604      	mov	r4, r0
 80087bc:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087be:	4e07      	ldr	r6, [pc, #28]	@ (80087dc <CDC_Receive_FS+0x24>)
 80087c0:	4601      	mov	r1, r0
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7ff ffae 	bl	8008724 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff ffd2 	bl	8008772 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(Buf, *Len);
 80087ce:	6829      	ldr	r1, [r5, #0]
 80087d0:	4620      	mov	r0, r4
 80087d2:	f7f9 fe05 	bl	80023e0 <USB_CDC_RxHandler>
}
 80087d6:	2000      	movs	r0, #0
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	bf00      	nop
 80087dc:	200014c8 	.word	0x200014c8

080087e0 <CDC_Init_FS>:
{
 80087e0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087e2:	4c06      	ldr	r4, [pc, #24]	@ (80087fc <CDC_Init_FS+0x1c>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	4906      	ldr	r1, [pc, #24]	@ (8008800 <CDC_Init_FS+0x20>)
 80087e8:	4620      	mov	r0, r4
 80087ea:	f7ff ff8d 	bl	8008708 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087ee:	4905      	ldr	r1, [pc, #20]	@ (8008804 <CDC_Init_FS+0x24>)
 80087f0:	4620      	mov	r0, r4
 80087f2:	f7ff ff97 	bl	8008724 <USBD_CDC_SetRxBuffer>
}
 80087f6:	2000      	movs	r0, #0
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	bf00      	nop
 80087fc:	200014c8 	.word	0x200014c8
 8008800:	200017a4 	.word	0x200017a4
 8008804:	20001ba4 	.word	0x20001ba4

08008808 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008808:	4b09      	ldr	r3, [pc, #36]	@ (8008830 <CDC_Transmit_FS+0x28>)
 800880a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 800880e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008812:	b10b      	cbz	r3, 8008818 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8008814:	2001      	movs	r0, #1
}
 8008816:	4770      	bx	lr
{
 8008818:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800881a:	4c05      	ldr	r4, [pc, #20]	@ (8008830 <CDC_Transmit_FS+0x28>)
 800881c:	460a      	mov	r2, r1
 800881e:	4601      	mov	r1, r0
 8008820:	4620      	mov	r0, r4
 8008822:	f7ff ff71 	bl	8008708 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008826:	4620      	mov	r0, r4
 8008828:	f7ff ff88 	bl	800873c <USBD_CDC_TransmitPacket>
}
 800882c:	bd10      	pop	{r4, pc}
 800882e:	bf00      	nop
 8008830:	200014c8 	.word	0x200014c8

08008834 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008834:	b508      	push	{r3, lr}
  SystemClock_Config();
 8008836:	f7f9 ffa5 	bl	8002784 <SystemClock_Config>
}
 800883a:	bd08      	pop	{r3, pc}

0800883c <HAL_PCD_MspInit>:
{
 800883c:	b530      	push	{r4, r5, lr}
 800883e:	b095      	sub	sp, #84	@ 0x54
 8008840:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008842:	2100      	movs	r1, #0
 8008844:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008846:	9110      	str	r1, [sp, #64]	@ 0x40
 8008848:	9111      	str	r1, [sp, #68]	@ 0x44
 800884a:	9112      	str	r1, [sp, #72]	@ 0x48
 800884c:	9113      	str	r1, [sp, #76]	@ 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800884e:	2234      	movs	r2, #52	@ 0x34
 8008850:	a802      	add	r0, sp, #8
 8008852:	f001 f875 	bl	8009940 <memset>
  if(pcdHandle->Instance==USB)
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	4b1d      	ldr	r3, [pc, #116]	@ (80088d0 <HAL_PCD_MspInit+0x94>)
 800885a:	429a      	cmp	r2, r3
 800885c:	d001      	beq.n	8008862 <HAL_PCD_MspInit+0x26>
}
 800885e:	b015      	add	sp, #84	@ 0x54
 8008860:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008862:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008866:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008868:	a802      	add	r0, sp, #8
 800886a:	f7fd fb8f 	bl	8005f8c <HAL_RCCEx_PeriphCLKConfig>
 800886e:	bb58      	cbnz	r0, 80088c8 <HAL_PCD_MspInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008870:	4c18      	ldr	r4, [pc, #96]	@ (80088d4 <HAL_PCD_MspInit+0x98>)
 8008872:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008874:	f043 0301 	orr.w	r3, r3, #1
 8008878:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800887a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008884:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008888:	930f      	str	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888a:	2302      	movs	r3, #2
 800888c:	9310      	str	r3, [sp, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800888e:	2500      	movs	r5, #0
 8008890:	9511      	str	r5, [sp, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008892:	2303      	movs	r3, #3
 8008894:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8008896:	230a      	movs	r3, #10
 8008898:	9313      	str	r3, [sp, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800889a:	a90f      	add	r1, sp, #60	@ 0x3c
 800889c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80088a0:	f7fb fb50 	bl	8003f44 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 80088a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80088ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80088b6:	462a      	mov	r2, r5
 80088b8:	4629      	mov	r1, r5
 80088ba:	2043      	movs	r0, #67	@ 0x43
 80088bc:	f7fb f9de 	bl	8003c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80088c0:	2043      	movs	r0, #67	@ 0x43
 80088c2:	f7fb f9eb 	bl	8003c9c <HAL_NVIC_EnableIRQ>
}
 80088c6:	e7ca      	b.n	800885e <HAL_PCD_MspInit+0x22>
      Error_Handler();
 80088c8:	f7f9 fe74 	bl	80025b4 <Error_Handler>
 80088cc:	e7d0      	b.n	8008870 <HAL_PCD_MspInit+0x34>
 80088ce:	bf00      	nop
 80088d0:	40006800 	.word	0x40006800
 80088d4:	40021000 	.word	0x40021000

080088d8 <HAL_PCD_SetupStageCallback>:
{
 80088d8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088da:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80088de:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 80088e2:	f000 f9a7 	bl	8008c34 <USBD_LL_SetupStage>
}
 80088e6:	bd08      	pop	{r3, pc}

080088e8 <HAL_PCD_DataOutStageCallback>:
{
 80088e8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088ea:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80088ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80088f2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80088f6:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 80088fa:	f000 fa2a 	bl	8008d52 <USBD_LL_DataOutStage>
}
 80088fe:	bd08      	pop	{r3, pc}

08008900 <HAL_PCD_DataInStageCallback>:
{
 8008900:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008902:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008906:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800890a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800890c:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008910:	f000 fa7f 	bl	8008e12 <USBD_LL_DataInStage>
}
 8008914:	bd08      	pop	{r3, pc}

08008916 <HAL_PCD_SOFCallback>:
{
 8008916:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008918:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 800891c:	f000 fa05 	bl	8008d2a <USBD_LL_SOF>
}
 8008920:	bd08      	pop	{r3, pc}

08008922 <HAL_PCD_ResetCallback>:
{
 8008922:	b510      	push	{r4, lr}
 8008924:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008926:	7983      	ldrb	r3, [r0, #6]
 8008928:	2b02      	cmp	r3, #2
 800892a:	d109      	bne.n	8008940 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800892c:	2101      	movs	r1, #1
 800892e:	f8d4 02dc 	ldr.w	r0, [r4, #732]	@ 0x2dc
 8008932:	f000 f9dd 	bl	8008cf0 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008936:	f8d4 02dc 	ldr.w	r0, [r4, #732]	@ 0x2dc
 800893a:	f000 f9a7 	bl	8008c8c <USBD_LL_Reset>
}
 800893e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008940:	f7f9 fe38 	bl	80025b4 <Error_Handler>
 8008944:	e7f2      	b.n	800892c <HAL_PCD_ResetCallback+0xa>
	...

08008948 <HAL_PCD_SuspendCallback>:
{
 8008948:	b510      	push	{r4, lr}
 800894a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800894c:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008950:	f000 f9d1 	bl	8008cf6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8008954:	7aa3      	ldrb	r3, [r4, #10]
 8008956:	b123      	cbz	r3, 8008962 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008958:	4a02      	ldr	r2, [pc, #8]	@ (8008964 <HAL_PCD_SuspendCallback+0x1c>)
 800895a:	6913      	ldr	r3, [r2, #16]
 800895c:	f043 0306 	orr.w	r3, r3, #6
 8008960:	6113      	str	r3, [r2, #16]
}
 8008962:	bd10      	pop	{r4, pc}
 8008964:	e000ed00 	.word	0xe000ed00

08008968 <HAL_PCD_ResumeCallback>:
{
 8008968:	b510      	push	{r4, lr}
 800896a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800896c:	7a83      	ldrb	r3, [r0, #10]
 800896e:	b923      	cbnz	r3, 800897a <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008970:	f8d4 02dc 	ldr.w	r0, [r4, #732]	@ 0x2dc
 8008974:	f000 f9cd 	bl	8008d12 <USBD_LL_Resume>
}
 8008978:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800897a:	4a04      	ldr	r2, [pc, #16]	@ (800898c <HAL_PCD_ResumeCallback+0x24>)
 800897c:	6913      	ldr	r3, [r2, #16]
 800897e:	f023 0306 	bic.w	r3, r3, #6
 8008982:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008984:	f7ff ff56 	bl	8008834 <SystemClockConfig_Resume>
 8008988:	e7f2      	b.n	8008970 <HAL_PCD_ResumeCallback+0x8>
 800898a:	bf00      	nop
 800898c:	e000ed00 	.word	0xe000ed00

08008990 <USBD_LL_Init>:
{
 8008990:	b510      	push	{r4, lr}
 8008992:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8008994:	f7fc fdd4 	bl	8005540 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 8008998:	481e      	ldr	r0, [pc, #120]	@ (8008a14 <USBD_LL_Init+0x84>)
 800899a:	f8c0 42dc 	str.w	r4, [r0, #732]	@ 0x2dc
  pdev->pData = &hpcd_USB_FS;
 800899e:	f8c4 02c8 	str.w	r0, [r4, #712]	@ 0x2c8
  hpcd_USB_FS.Instance = USB;
 80089a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a18 <USBD_LL_Init+0x88>)
 80089a4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089a6:	2308      	movs	r3, #8
 80089a8:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089aa:	2302      	movs	r3, #2
 80089ac:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089ae:	7203      	strb	r3, [r0, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089b4:	7283      	strb	r3, [r0, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089b6:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089b8:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089ba:	f7fb fddb 	bl	8004574 <HAL_PCD_Init>
 80089be:	bb30      	cbnz	r0, 8008a0e <USBD_LL_Init+0x7e>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089c0:	2318      	movs	r3, #24
 80089c2:	2200      	movs	r2, #0
 80089c4:	4611      	mov	r1, r2
 80089c6:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 80089ca:	f7fc fd2e 	bl	800542a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089ce:	2358      	movs	r3, #88	@ 0x58
 80089d0:	2200      	movs	r2, #0
 80089d2:	2180      	movs	r1, #128	@ 0x80
 80089d4:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 80089d8:	f7fc fd27 	bl	800542a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80089dc:	23c0      	movs	r3, #192	@ 0xc0
 80089de:	2200      	movs	r2, #0
 80089e0:	2181      	movs	r1, #129	@ 0x81
 80089e2:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 80089e6:	f7fc fd20 	bl	800542a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80089ea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80089ee:	2200      	movs	r2, #0
 80089f0:	2101      	movs	r1, #1
 80089f2:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 80089f6:	f7fc fd18 	bl	800542a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80089fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80089fe:	2200      	movs	r2, #0
 8008a00:	2182      	movs	r1, #130	@ 0x82
 8008a02:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 8008a06:	f7fc fd10 	bl	800542a <HAL_PCDEx_PMAConfig>
}
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008a0e:	f7f9 fdd1 	bl	80025b4 <Error_Handler>
 8008a12:	e7d5      	b.n	80089c0 <USBD_LL_Init+0x30>
 8008a14:	200021c4 	.word	0x200021c4
 8008a18:	40006800 	.word	0x40006800

08008a1c <USBD_LL_Start>:
{
 8008a1c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008a1e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008a22:	f7fb fe22 	bl	800466a <HAL_PCD_Start>
  switch (hal_status) {
 8008a26:	2803      	cmp	r0, #3
 8008a28:	d805      	bhi.n	8008a36 <USBD_LL_Start+0x1a>
 8008a2a:	e8df f000 	tbb	[pc, r0]
 8008a2e:	0403      	.short	0x0403
 8008a30:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008a32:	2001      	movs	r0, #1
}
 8008a34:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008a36:	2003      	movs	r0, #3
 8008a38:	e7fc      	b.n	8008a34 <USBD_LL_Start+0x18>

08008a3a <USBD_LL_OpenEP>:
{
 8008a3a:	b508      	push	{r3, lr}
 8008a3c:	4694      	mov	ip, r2
 8008a3e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a40:	4663      	mov	r3, ip
 8008a42:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008a46:	f7fc fbac 	bl	80051a2 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8008a4a:	2803      	cmp	r0, #3
 8008a4c:	d805      	bhi.n	8008a5a <USBD_LL_OpenEP+0x20>
 8008a4e:	e8df f000 	tbb	[pc, r0]
 8008a52:	0403      	.short	0x0403
 8008a54:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008a56:	2001      	movs	r0, #1
}
 8008a58:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008a5a:	2003      	movs	r0, #3
 8008a5c:	e7fc      	b.n	8008a58 <USBD_LL_OpenEP+0x1e>

08008a5e <USBD_LL_CloseEP>:
{
 8008a5e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a60:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008a64:	f7fc fbe0 	bl	8005228 <HAL_PCD_EP_Close>
  switch (hal_status) {
 8008a68:	2803      	cmp	r0, #3
 8008a6a:	d805      	bhi.n	8008a78 <USBD_LL_CloseEP+0x1a>
 8008a6c:	e8df f000 	tbb	[pc, r0]
 8008a70:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8008a74:	2001      	movs	r0, #1
}
 8008a76:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008a78:	2003      	movs	r0, #3
 8008a7a:	e7fc      	b.n	8008a76 <USBD_LL_CloseEP+0x18>

08008a7c <USBD_LL_StallEP>:
{
 8008a7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a7e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008a82:	f7fc fc53 	bl	800532c <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8008a86:	2803      	cmp	r0, #3
 8008a88:	d805      	bhi.n	8008a96 <USBD_LL_StallEP+0x1a>
 8008a8a:	e8df f000 	tbb	[pc, r0]
 8008a8e:	0403      	.short	0x0403
 8008a90:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008a92:	2001      	movs	r0, #1
}
 8008a94:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008a96:	2003      	movs	r0, #3
 8008a98:	e7fc      	b.n	8008a94 <USBD_LL_StallEP+0x18>

08008a9a <USBD_LL_ClearStallEP>:
{
 8008a9a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a9c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008aa0:	f7fc fc84 	bl	80053ac <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8008aa4:	2803      	cmp	r0, #3
 8008aa6:	d805      	bhi.n	8008ab4 <USBD_LL_ClearStallEP+0x1a>
 8008aa8:	e8df f000 	tbb	[pc, r0]
 8008aac:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8008ab0:	2001      	movs	r0, #1
}
 8008ab2:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008ab4:	2003      	movs	r0, #3
 8008ab6:	e7fc      	b.n	8008ab2 <USBD_LL_ClearStallEP+0x18>

08008ab8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ab8:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8008abc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008ac0:	d108      	bne.n	8008ad4 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ac2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008ac6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008aca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008ace:	f893 0152 	ldrb.w	r0, [r3, #338]	@ 0x152
}
 8008ad2:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ad4:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008ad8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008adc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008ae0:	7c98      	ldrb	r0, [r3, #18]
 8008ae2:	4770      	bx	lr

08008ae4 <USBD_LL_SetUSBAddress>:
{
 8008ae4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ae6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008aea:	f7fc fa6e 	bl	8004fca <HAL_PCD_SetAddress>
  switch (hal_status) {
 8008aee:	2803      	cmp	r0, #3
 8008af0:	d805      	bhi.n	8008afe <USBD_LL_SetUSBAddress+0x1a>
 8008af2:	e8df f000 	tbb	[pc, r0]
 8008af6:	0403      	.short	0x0403
 8008af8:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008afa:	2001      	movs	r0, #1
}
 8008afc:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008afe:	2003      	movs	r0, #3
 8008b00:	e7fc      	b.n	8008afc <USBD_LL_SetUSBAddress+0x18>

08008b02 <USBD_LL_Transmit>:
{
 8008b02:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b04:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008b08:	f7fc fbea 	bl	80052e0 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 8008b0c:	2803      	cmp	r0, #3
 8008b0e:	d805      	bhi.n	8008b1c <USBD_LL_Transmit+0x1a>
 8008b10:	e8df f000 	tbb	[pc, r0]
 8008b14:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8008b18:	2001      	movs	r0, #1
}
 8008b1a:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008b1c:	2003      	movs	r0, #3
 8008b1e:	e7fc      	b.n	8008b1a <USBD_LL_Transmit+0x18>

08008b20 <USBD_LL_PrepareReceive>:
{
 8008b20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b22:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008b26:	f7fc fbb5 	bl	8005294 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8008b2a:	2803      	cmp	r0, #3
 8008b2c:	d805      	bhi.n	8008b3a <USBD_LL_PrepareReceive+0x1a>
 8008b2e:	e8df f000 	tbb	[pc, r0]
 8008b32:	0403      	.short	0x0403
 8008b34:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8008b36:	2001      	movs	r0, #1
}
 8008b38:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8008b3a:	2003      	movs	r0, #3
 8008b3c:	e7fc      	b.n	8008b38 <USBD_LL_PrepareReceive+0x18>

08008b3e <USBD_LL_GetRxDataSize>:
{
 8008b3e:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b40:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008b44:	f7fc fbc3 	bl	80052ce <HAL_PCD_EP_GetRxCount>
}
 8008b48:	bd08      	pop	{r3, pc}
	...

08008b4c <HAL_PCDEx_LPM_Callback>:
{
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	4604      	mov	r4, r0
  switch (msg)
 8008b50:	b169      	cbz	r1, 8008b6e <HAL_PCDEx_LPM_Callback+0x22>
 8008b52:	2901      	cmp	r1, #1
 8008b54:	d111      	bne.n	8008b7a <HAL_PCDEx_LPM_Callback+0x2e>
    USBD_LL_Suspend(hpcd->pData);
 8008b56:	f8d0 02dc 	ldr.w	r0, [r0, #732]	@ 0x2dc
 8008b5a:	f000 f8cc 	bl	8008cf6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008b5e:	7aa3      	ldrb	r3, [r4, #10]
 8008b60:	b15b      	cbz	r3, 8008b7a <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b62:	4a0a      	ldr	r2, [pc, #40]	@ (8008b8c <HAL_PCDEx_LPM_Callback+0x40>)
 8008b64:	6913      	ldr	r3, [r2, #16]
 8008b66:	f043 0306 	orr.w	r3, r3, #6
 8008b6a:	6113      	str	r3, [r2, #16]
}
 8008b6c:	e005      	b.n	8008b7a <HAL_PCDEx_LPM_Callback+0x2e>
    if (hpcd->Init.low_power_enable)
 8008b6e:	7a83      	ldrb	r3, [r0, #10]
 8008b70:	b923      	cbnz	r3, 8008b7c <HAL_PCDEx_LPM_Callback+0x30>
    USBD_LL_Resume(hpcd->pData);
 8008b72:	f8d4 02dc 	ldr.w	r0, [r4, #732]	@ 0x2dc
 8008b76:	f000 f8cc 	bl	8008d12 <USBD_LL_Resume>
}
 8008b7a:	bd10      	pop	{r4, pc}
      SystemClockConfig_Resume();
 8008b7c:	f7ff fe5a 	bl	8008834 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b80:	4a02      	ldr	r2, [pc, #8]	@ (8008b8c <HAL_PCDEx_LPM_Callback+0x40>)
 8008b82:	6913      	ldr	r3, [r2, #16]
 8008b84:	f023 0306 	bic.w	r3, r3, #6
 8008b88:	6113      	str	r3, [r2, #16]
 8008b8a:	e7f2      	b.n	8008b72 <HAL_PCDEx_LPM_Callback+0x26>
 8008b8c:	e000ed00 	.word	0xe000ed00

08008b90 <USBD_static_malloc>:
}
 8008b90:	4800      	ldr	r0, [pc, #0]	@ (8008b94 <USBD_static_malloc+0x4>)
 8008b92:	4770      	bx	lr
 8008b94:	20001fa4 	.word	0x20001fa4

08008b98 <USBD_static_free>:
}
 8008b98:	4770      	bx	lr

08008b9a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b9a:	b198      	cbz	r0, 8008bc4 <USBD_Init+0x2a>
{
 8008b9c:	b508      	push	{r3, lr}
 8008b9e:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008ba6:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008baa:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bae:	b109      	cbz	r1, 8008bb4 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8008bb0:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008bba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fee7 	bl	8008990 <USBD_LL_Init>

  return ret;
}
 8008bc2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008bc4:	2003      	movs	r0, #3
}
 8008bc6:	4770      	bx	lr

08008bc8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8008bd2:	b1b9      	cbz	r1, 8008c04 <USBD_RegisterClass+0x3c>
 8008bd4:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008bd6:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008bda:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8008bde:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8008be0:	b143      	cbz	r3, 8008bf4 <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008be2:	32ae      	adds	r2, #174	@ 0xae
 8008be4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bea:	f10d 0006 	add.w	r0, sp, #6
 8008bee:	4798      	blx	r3
 8008bf0:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008bf4:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8008bfe:	2000      	movs	r0, #0
}
 8008c00:	b002      	add	sp, #8
 8008c02:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008c04:	2003      	movs	r0, #3
 8008c06:	e7fb      	b.n	8008c00 <USBD_RegisterClass+0x38>

08008c08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c08:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c0a:	f7ff ff07 	bl	8008a1c <USBD_LL_Start>
}
 8008c0e:	bd08      	pop	{r3, pc}

08008c10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c10:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c12:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008c16:	b113      	cbz	r3, 8008c1e <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008c1c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e7fc      	b.n	8008c1c <USBD_SetClassConfig+0xc>

08008c22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c22:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c24:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	4798      	blx	r3
 8008c2c:	b900      	cbnz	r0, 8008c30 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008c2e:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8008c30:	2003      	movs	r0, #3
 8008c32:	e7fc      	b.n	8008c2e <USBD_ClrClassConfig+0xc>

08008c34 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c38:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f000 f981 	bl	8008f44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c42:	2301      	movs	r3, #1
 8008c44:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c48:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8008c4c:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c50:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8008c54:	f001 031f 	and.w	r3, r1, #31
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d007      	beq.n	8008c6c <USBD_LL_SetupStage+0x38>
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d00a      	beq.n	8008c76 <USBD_LL_SetupStage+0x42>
 8008c60:	b973      	cbnz	r3, 8008c80 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c62:	4629      	mov	r1, r5
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fb53 	bl	8009310 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 fb89 	bl	8009386 <USBD_StdItfReq>
      break;
 8008c74:	e7f9      	b.n	8008c6a <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c76:	4629      	mov	r1, r5
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fbc6 	bl	800940a <USBD_StdEPReq>
      break;
 8008c7e:	e7f4      	b.n	8008c6a <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c80:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8008c84:	4620      	mov	r0, r4
 8008c86:	f7ff fef9 	bl	8008a7c <USBD_LL_StallEP>
      break;
 8008c8a:	e7ee      	b.n	8008c6a <USBD_LL_SetupStage+0x36>

08008c8c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c90:	2301      	movs	r3, #1
 8008c92:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c9c:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c9e:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008ca2:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ca6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008caa:	b1db      	cbz	r3, 8008ce4 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b1db      	cbz	r3, 8008ce8 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4798      	blx	r3
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	b9c8      	cbnz	r0, 8008cec <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cb8:	2340      	movs	r3, #64	@ 0x40
 8008cba:	2200      	movs	r2, #0
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7ff febb 	bl	8008a3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cc4:	2601      	movs	r6, #1
 8008cc6:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cca:	2540      	movs	r5, #64	@ 0x40
 8008ccc:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2180      	movs	r1, #128	@ 0x80
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f7ff feaf 	bl	8008a3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cdc:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cde:	6225      	str	r5, [r4, #32]

  return ret;
}
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce4:	2700      	movs	r7, #0
 8008ce6:	e7e7      	b.n	8008cb8 <USBD_LL_Reset+0x2c>
 8008ce8:	2700      	movs	r7, #0
 8008cea:	e7e5      	b.n	8008cb8 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8008cec:	2703      	movs	r7, #3
 8008cee:	e7e3      	b.n	8008cb8 <USBD_LL_Reset+0x2c>

08008cf0 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008cf0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	4770      	bx	lr

08008cf6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008cf6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	d004      	beq.n	8008d08 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008cfe:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d08:	2304      	movs	r3, #4
 8008d0a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8008d0e:	2000      	movs	r0, #0
 8008d10:	4770      	bx	lr

08008d12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d12:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d001      	beq.n	8008d1e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8008d1e:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8008d28:	e7f7      	b.n	8008d1a <USBD_LL_Resume+0x8>

08008d2a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d2a:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d001      	beq.n	8008d38 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8008d34:	2000      	movs	r0, #0
 8008d36:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8008d38:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f9      	beq.n	8008d34 <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f6      	beq.n	8008d34 <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8008d46:	4798      	blx	r3
 8008d48:	e7f4      	b.n	8008d34 <USBD_LL_SOF+0xa>

08008d4a <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	4770      	bx	lr

08008d4e <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008d4e:	2000      	movs	r0, #0
 8008d50:	4770      	bx	lr

08008d52 <USBD_LL_DataOutStage>:
{
 8008d52:	b538      	push	{r3, r4, r5, lr}
 8008d54:	4604      	mov	r4, r0
  if (epnum == 0U)
 8008d56:	460d      	mov	r5, r1
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	d141      	bne.n	8008de0 <USBD_LL_DataOutStage+0x8e>
 8008d5c:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d5e:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008d62:	2a03      	cmp	r2, #3
 8008d64:	d001      	beq.n	8008d6a <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8008d66:	4608      	mov	r0, r1
}
 8008d68:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008d6a:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8008d6e:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8008d72:	4291      	cmp	r1, r2
 8008d74:	d809      	bhi.n	8008d8a <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8008d76:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d00e      	beq.n	8008da0 <USBD_LL_DataOutStage+0x4e>
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d01a      	beq.n	8008dbc <USBD_LL_DataOutStage+0x6a>
 8008d86:	4628      	mov	r0, r5
 8008d88:	e00f      	b.n	8008daa <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8008d8a:	1a89      	subs	r1, r1, r2
 8008d8c:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d90:	428a      	cmp	r2, r1
 8008d92:	bf28      	it	cs
 8008d94:	460a      	movcs	r2, r1
 8008d96:	4619      	mov	r1, r3
 8008d98:	f000 fd3a 	bl	8009810 <USBD_CtlContinueRx>
  return USBD_OK;
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	e7e3      	b.n	8008d68 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008da0:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8008da4:	f7ff ffd1 	bl	8008d4a <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008da8:	b918      	cbnz	r0, 8008db2 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008daa:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d009      	beq.n	8008dc6 <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 fd34 	bl	8009820 <USBD_CtlSendStatus>
  return USBD_OK;
 8008db8:	4628      	mov	r0, r5
 8008dba:	e7d5      	b.n	8008d68 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008dbc:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8008dc0:	f7ff ffc5 	bl	8008d4e <USBD_CoreFindEP>
            break;
 8008dc4:	e7f0      	b.n	8008da8 <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008dc6:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008dca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008dce:	691a      	ldr	r2, [r3, #16]
 8008dd0:	2a00      	cmp	r2, #0
 8008dd2:	d0ee      	beq.n	8008db2 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 8008dd4:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	4620      	mov	r0, r4
 8008ddc:	4798      	blx	r3
 8008dde:	e7e8      	b.n	8008db2 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008de0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008de4:	f7ff ffb3 	bl	8008d4e <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008de8:	b988      	cbnz	r0, 8008e0e <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dea:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d1ba      	bne.n	8008d68 <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8008df2:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008df6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	2a00      	cmp	r2, #0
 8008dfe:	d0b3      	beq.n	8008d68 <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8008e00:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	4629      	mov	r1, r5
 8008e08:	4620      	mov	r0, r4
 8008e0a:	4798      	blx	r3
      if (ret != USBD_OK)
 8008e0c:	e7ac      	b.n	8008d68 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8008e0e:	2000      	movs	r0, #0
 8008e10:	e7aa      	b.n	8008d68 <USBD_LL_DataOutStage+0x16>

08008e12 <USBD_LL_DataInStage>:
{
 8008e12:	b538      	push	{r3, r4, r5, lr}
 8008e14:	4604      	mov	r4, r0
  if (epnum == 0U)
 8008e16:	460d      	mov	r5, r1
 8008e18:	2900      	cmp	r1, #0
 8008e1a:	d14a      	bne.n	8008eb2 <USBD_LL_DataInStage+0xa0>
 8008e1c:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e1e:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008e22:	2a02      	cmp	r2, #2
 8008e24:	d007      	beq.n	8008e36 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8008e26:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8008e2a:	b118      	cbz	r0, 8008e34 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8008e32:	4628      	mov	r0, r5
}
 8008e34:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008e36:	69c2      	ldr	r2, [r0, #28]
 8008e38:	6a01      	ldr	r1, [r0, #32]
 8008e3a:	428a      	cmp	r2, r1
 8008e3c:	d80d      	bhi.n	8008e5a <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8008e3e:	428a      	cmp	r2, r1
 8008e40:	d017      	beq.n	8008e72 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e42:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d027      	beq.n	8008e9a <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e4a:	2180      	movs	r1, #128	@ 0x80
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7ff fe15 	bl	8008a7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 fcef 	bl	8009836 <USBD_CtlReceiveStatus>
 8008e58:	e7e5      	b.n	8008e26 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008e5a:	1a52      	subs	r2, r2, r1
 8008e5c:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e5e:	4619      	mov	r1, r3
 8008e60:	f000 fcbf 	bl	80097e2 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e64:	2300      	movs	r3, #0
 8008e66:	461a      	mov	r2, r3
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f7ff fe58 	bl	8008b20 <USBD_LL_PrepareReceive>
 8008e70:	e7d9      	b.n	8008e26 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8008e72:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d8e4      	bhi.n	8008e42 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8008e78:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d2e0      	bcs.n	8008e42 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e80:	2200      	movs	r2, #0
 8008e82:	4611      	mov	r1, r2
 8008e84:	f000 fcad 	bl	80097e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e88:	2100      	movs	r1, #0
 8008e8a:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e8e:	460b      	mov	r3, r1
 8008e90:	460a      	mov	r2, r1
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7ff fe44 	bl	8008b20 <USBD_LL_PrepareReceive>
 8008e98:	e7c5      	b.n	8008e26 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008e9a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	2a00      	cmp	r2, #0
 8008ea2:	d0d2      	beq.n	8008e4a <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	4620      	mov	r0, r4
 8008eae:	4798      	blx	r3
 8008eb0:	e7cb      	b.n	8008e4a <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008eb2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8008eb6:	f7ff ff4a 	bl	8008d4e <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eba:	b988      	cbnz	r0, 8008ee0 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ebc:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d1b7      	bne.n	8008e34 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ec4:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008ec8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008ecc:	695a      	ldr	r2, [r3, #20]
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	d0b0      	beq.n	8008e34 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8008ed2:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4620      	mov	r0, r4
 8008edc:	4798      	blx	r3
          if (ret != USBD_OK)
 8008ede:	e7a9      	b.n	8008e34 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	e7a7      	b.n	8008e34 <USBD_LL_DataInStage+0x22>

08008ee4 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8008ee4:	880b      	ldrh	r3, [r1, #0]
 8008ee6:	7802      	ldrb	r2, [r0, #0]
 8008ee8:	4413      	add	r3, r2
 8008eea:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008eec:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8008eee:	4418      	add	r0, r3
 8008ef0:	4770      	bx	lr

08008ef2 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8008ef2:	8842      	ldrh	r2, [r0, #2]
 8008ef4:	7803      	ldrb	r3, [r0, #0]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d918      	bls.n	8008f2c <USBD_GetEpDesc+0x3a>
{
 8008efa:	b530      	push	{r4, r5, lr}
 8008efc:	b083      	sub	sp, #12
 8008efe:	4604      	mov	r4, r0
 8008f00:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8008f02:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8008f06:	8863      	ldrh	r3, [r4, #2]
 8008f08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d20a      	bcs.n	8008f26 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f10:	f10d 0106 	add.w	r1, sp, #6
 8008f14:	f7ff ffe6 	bl	8008ee4 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f18:	7843      	ldrb	r3, [r0, #1]
 8008f1a:	2b05      	cmp	r3, #5
 8008f1c:	d1f3      	bne.n	8008f06 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f1e:	7883      	ldrb	r3, [r0, #2]
 8008f20:	42ab      	cmp	r3, r5
 8008f22:	d1f0      	bne.n	8008f06 <USBD_GetEpDesc+0x14>
 8008f24:	e000      	b.n	8008f28 <USBD_GetEpDesc+0x36>
 8008f26:	2000      	movs	r0, #0
}
 8008f28:	b003      	add	sp, #12
 8008f2a:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f2c:	2000      	movs	r0, #0
}
 8008f2e:	4770      	bx	lr

08008f30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f30:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8008f32:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8008f34:	e002      	b.n	8008f3c <USBD_GetLen+0xc>
  {
    len++;
 8008f36:	3001      	adds	r0, #1
 8008f38:	b2c0      	uxtb	r0, r0
    pbuff++;
 8008f3a:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8008f3c:	781a      	ldrb	r2, [r3, #0]
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	d1f9      	bne.n	8008f36 <USBD_GetLen+0x6>
  }

  return len;
}
 8008f42:	4770      	bx	lr

08008f44 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8008f44:	780b      	ldrb	r3, [r1, #0]
 8008f46:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f48:	784b      	ldrb	r3, [r1, #1]
 8008f4a:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8008f4c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8008f4e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8008f54:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8008f56:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8008f58:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8008f5e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8008f60:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8008f62:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008f64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8008f68:	80c3      	strh	r3, [r0, #6]
}
 8008f6a:	4770      	bx	lr

08008f6c <USBD_CtlError>:
{
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f70:	2180      	movs	r1, #128	@ 0x80
 8008f72:	f7ff fd83 	bl	8008a7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f76:	2100      	movs	r1, #0
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f7ff fd7f 	bl	8008a7c <USBD_LL_StallEP>
}
 8008f7e:	bd10      	pop	{r4, pc}

08008f80 <USBD_GetDescriptor>:
{
 8008f80:	b530      	push	{r4, r5, lr}
 8008f82:	b083      	sub	sp, #12
 8008f84:	4605      	mov	r5, r0
 8008f86:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008f8e:	884a      	ldrh	r2, [r1, #2]
 8008f90:	0a13      	lsrs	r3, r2, #8
 8008f92:	3b01      	subs	r3, #1
 8008f94:	2b0e      	cmp	r3, #14
 8008f96:	f200 80bb 	bhi.w	8009110 <USBD_GetDescriptor+0x190>
 8008f9a:	e8df f003 	tbb	[pc, r3]
 8008f9e:	2f15      	.short	0x2f15
 8008fa0:	9db9b943 	.word	0x9db9b943
 8008fa4:	b9b9b9aa 	.word	0xb9b9b9aa
 8008fa8:	b9b9b9b9 	.word	0xb9b9b9b9
 8008fac:	08          	.byte	0x08
 8008fad:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008fae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	b123      	cbz	r3, 8008fc0 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008fb6:	f10d 0106 	add.w	r1, sp, #6
 8008fba:	7c00      	ldrb	r0, [r0, #16]
 8008fbc:	4798      	blx	r3
  if (err != 0U)
 8008fbe:	e00a      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	f7ff ffd3 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 8008fc6:	e0a6      	b.n	8009116 <USBD_GetDescriptor+0x196>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fc8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f10d 0106 	add.w	r1, sp, #6
 8008fd2:	7c00      	ldrb	r0, [r0, #16]
 8008fd4:	4798      	blx	r3
  if (req->wLength != 0U)
 8008fd6:	88e2      	ldrh	r2, [r4, #6]
 8008fd8:	2a00      	cmp	r2, #0
 8008fda:	f000 80a3 	beq.w	8009124 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 8008fde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 8099 	beq.w	800911a <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	bf28      	it	cs
 8008fec:	461a      	movcs	r2, r3
 8008fee:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f000 fbe7 	bl	80097c8 <USBD_CtlSendData>
 8008ffa:	e08c      	b.n	8009116 <USBD_GetDescriptor+0x196>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffc:	7c03      	ldrb	r3, [r0, #16]
 8008ffe:	b943      	cbnz	r3, 8009012 <USBD_GetDescriptor+0x92>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009000:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009006:	f10d 0006 	add.w	r0, sp, #6
 800900a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800900c:	2302      	movs	r3, #2
 800900e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8009010:	e7e1      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009012:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	f10d 0006 	add.w	r0, sp, #6
 800901c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800901e:	2302      	movs	r3, #2
 8009020:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8009022:	e7d8      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	2a05      	cmp	r2, #5
 8009028:	d852      	bhi.n	80090d0 <USBD_GetDescriptor+0x150>
 800902a:	e8df f002 	tbb	[pc, r2]
 800902e:	1003      	.short	0x1003
 8009030:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009034:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	b123      	cbz	r3, 8009046 <USBD_GetDescriptor+0xc6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800903c:	f10d 0106 	add.w	r1, sp, #6
 8009040:	7c00      	ldrb	r0, [r0, #16]
 8009042:	4798      	blx	r3
  if (err != 0U)
 8009044:	e7c7      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8009046:	4621      	mov	r1, r4
 8009048:	f7ff ff90 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 800904c:	e063      	b.n	8009116 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800904e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	b123      	cbz	r3, 8009060 <USBD_GetDescriptor+0xe0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009056:	f10d 0106 	add.w	r1, sp, #6
 800905a:	7c00      	ldrb	r0, [r0, #16]
 800905c:	4798      	blx	r3
  if (err != 0U)
 800905e:	e7ba      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8009060:	4621      	mov	r1, r4
 8009062:	f7ff ff83 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 8009066:	e056      	b.n	8009116 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009068:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	b123      	cbz	r3, 800907a <USBD_GetDescriptor+0xfa>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009070:	f10d 0106 	add.w	r1, sp, #6
 8009074:	7c00      	ldrb	r0, [r0, #16]
 8009076:	4798      	blx	r3
  if (err != 0U)
 8009078:	e7ad      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800907a:	4621      	mov	r1, r4
 800907c:	f7ff ff76 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 8009080:	e049      	b.n	8009116 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009082:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	b123      	cbz	r3, 8009094 <USBD_GetDescriptor+0x114>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800908a:	f10d 0106 	add.w	r1, sp, #6
 800908e:	7c00      	ldrb	r0, [r0, #16]
 8009090:	4798      	blx	r3
  if (err != 0U)
 8009092:	e7a0      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8009094:	4621      	mov	r1, r4
 8009096:	f7ff ff69 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 800909a:	e03c      	b.n	8009116 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800909c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	b123      	cbz	r3, 80090ae <USBD_GetDescriptor+0x12e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090a4:	f10d 0106 	add.w	r1, sp, #6
 80090a8:	7c00      	ldrb	r0, [r0, #16]
 80090aa:	4798      	blx	r3
  if (err != 0U)
 80090ac:	e793      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80090ae:	4621      	mov	r1, r4
 80090b0:	f7ff ff5c 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 80090b4:	e02f      	b.n	8009116 <USBD_GetDescriptor+0x196>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	b123      	cbz	r3, 80090c8 <USBD_GetDescriptor+0x148>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090be:	f10d 0106 	add.w	r1, sp, #6
 80090c2:	7c00      	ldrb	r0, [r0, #16]
 80090c4:	4798      	blx	r3
  if (err != 0U)
 80090c6:	e786      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80090c8:	4621      	mov	r1, r4
 80090ca:	f7ff ff4f 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 80090ce:	e022      	b.n	8009116 <USBD_GetDescriptor+0x196>
          USBD_CtlError(pdev, req);
 80090d0:	4621      	mov	r1, r4
 80090d2:	f7ff ff4b 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 80090d6:	e01e      	b.n	8009116 <USBD_GetDescriptor+0x196>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090d8:	7c03      	ldrb	r3, [r0, #16]
 80090da:	b933      	cbnz	r3, 80090ea <USBD_GetDescriptor+0x16a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80090dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80090e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090e2:	f10d 0006 	add.w	r0, sp, #6
 80090e6:	4798      	blx	r3
  if (err != 0U)
 80090e8:	e775      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80090ea:	4621      	mov	r1, r4
 80090ec:	f7ff ff3e 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 80090f0:	e011      	b.n	8009116 <USBD_GetDescriptor+0x196>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f2:	7c03      	ldrb	r3, [r0, #16]
 80090f4:	b943      	cbnz	r3, 8009108 <USBD_GetDescriptor+0x188>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80090fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fc:	f10d 0006 	add.w	r0, sp, #6
 8009100:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009102:	2307      	movs	r3, #7
 8009104:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8009106:	e766      	b.n	8008fd6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff ff2f 	bl	8008f6c <USBD_CtlError>
  if (err != 0U)
 800910e:	e002      	b.n	8009116 <USBD_GetDescriptor+0x196>
      USBD_CtlError(pdev, req);
 8009110:	4621      	mov	r1, r4
 8009112:	f7ff ff2b 	bl	8008f6c <USBD_CtlError>
}
 8009116:	b003      	add	sp, #12
 8009118:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 800911a:	4621      	mov	r1, r4
 800911c:	4628      	mov	r0, r5
 800911e:	f7ff ff25 	bl	8008f6c <USBD_CtlError>
 8009122:	e7f8      	b.n	8009116 <USBD_GetDescriptor+0x196>
    (void)USBD_CtlSendStatus(pdev);
 8009124:	4628      	mov	r0, r5
 8009126:	f000 fb7b 	bl	8009820 <USBD_CtlSendStatus>
 800912a:	e7f4      	b.n	8009116 <USBD_GetDescriptor+0x196>

0800912c <USBD_SetAddress>:
{
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009130:	888b      	ldrh	r3, [r1, #4]
 8009132:	b9f3      	cbnz	r3, 8009172 <USBD_SetAddress+0x46>
 8009134:	88cb      	ldrh	r3, [r1, #6]
 8009136:	b9e3      	cbnz	r3, 8009172 <USBD_SetAddress+0x46>
 8009138:	884b      	ldrh	r3, [r1, #2]
 800913a:	2b7f      	cmp	r3, #127	@ 0x7f
 800913c:	d819      	bhi.n	8009172 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800913e:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009142:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009146:	2b03      	cmp	r3, #3
 8009148:	d00c      	beq.n	8009164 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800914a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800914e:	4629      	mov	r1, r5
 8009150:	f7ff fcc8 	bl	8008ae4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009154:	4620      	mov	r0, r4
 8009156:	f000 fb63 	bl	8009820 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800915a:	b135      	cbz	r5, 800916a <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800915c:	2302      	movs	r3, #2
 800915e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8009162:	e009      	b.n	8009178 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8009164:	f7ff ff02 	bl	8008f6c <USBD_CtlError>
 8009168:	e006      	b.n	8009178 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800916a:	2301      	movs	r3, #1
 800916c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8009170:	e002      	b.n	8009178 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8009172:	4620      	mov	r0, r4
 8009174:	f7ff fefa 	bl	8008f6c <USBD_CtlError>
}
 8009178:	bd38      	pop	{r3, r4, r5, pc}
	...

0800917c <USBD_SetConfig>:
{
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	4604      	mov	r4, r0
 8009180:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8009182:	788d      	ldrb	r5, [r1, #2]
 8009184:	4b2f      	ldr	r3, [pc, #188]	@ (8009244 <USBD_SetConfig+0xc8>)
 8009186:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009188:	2d01      	cmp	r5, #1
 800918a:	d810      	bhi.n	80091ae <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800918c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009190:	b2da      	uxtb	r2, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d00f      	beq.n	80091b6 <USBD_SetConfig+0x3a>
 8009196:	2a03      	cmp	r2, #3
 8009198:	d026      	beq.n	80091e8 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800919a:	f7ff fee7 	bl	8008f6c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800919e:	4b29      	ldr	r3, [pc, #164]	@ (8009244 <USBD_SetConfig+0xc8>)
 80091a0:	7819      	ldrb	r1, [r3, #0]
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff fd3d 	bl	8008c22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091a8:	2503      	movs	r5, #3
}
 80091aa:	4628      	mov	r0, r5
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80091ae:	f7ff fedd 	bl	8008f6c <USBD_CtlError>
    return USBD_FAIL;
 80091b2:	2503      	movs	r5, #3
 80091b4:	e7f9      	b.n	80091aa <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80091b6:	b1a5      	cbz	r5, 80091e2 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 80091b8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091ba:	4629      	mov	r1, r5
 80091bc:	f7ff fd28 	bl	8008c10 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80091c0:	4605      	mov	r5, r0
 80091c2:	b138      	cbz	r0, 80091d4 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 80091c4:	4631      	mov	r1, r6
 80091c6:	4620      	mov	r0, r4
 80091c8:	f7ff fed0 	bl	8008f6c <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091cc:	2302      	movs	r3, #2
 80091ce:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80091d2:	e7ea      	b.n	80091aa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fb23 	bl	8009820 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091da:	2303      	movs	r3, #3
 80091dc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80091e0:	e7e3      	b.n	80091aa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80091e2:	f000 fb1d 	bl	8009820 <USBD_CtlSendStatus>
 80091e6:	e7e0      	b.n	80091aa <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80091e8:	b1cd      	cbz	r5, 800921e <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 80091ea:	6841      	ldr	r1, [r0, #4]
 80091ec:	428d      	cmp	r5, r1
 80091ee:	d025      	beq.n	800923c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091f0:	b2c9      	uxtb	r1, r1
 80091f2:	f7ff fd16 	bl	8008c22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091f6:	4b13      	ldr	r3, [pc, #76]	@ (8009244 <USBD_SetConfig+0xc8>)
 80091f8:	7819      	ldrb	r1, [r3, #0]
 80091fa:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091fc:	4620      	mov	r0, r4
 80091fe:	f7ff fd07 	bl	8008c10 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8009202:	4605      	mov	r5, r0
 8009204:	b1b0      	cbz	r0, 8009234 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8009206:	4631      	mov	r1, r6
 8009208:	4620      	mov	r0, r4
 800920a:	f7ff feaf 	bl	8008f6c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800920e:	7921      	ldrb	r1, [r4, #4]
 8009210:	4620      	mov	r0, r4
 8009212:	f7ff fd06 	bl	8008c22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009216:	2302      	movs	r3, #2
 8009218:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800921c:	e7c5      	b.n	80091aa <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800921e:	2302      	movs	r3, #2
 8009220:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009224:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009226:	4629      	mov	r1, r5
 8009228:	f7ff fcfb 	bl	8008c22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800922c:	4620      	mov	r0, r4
 800922e:	f000 faf7 	bl	8009820 <USBD_CtlSendStatus>
 8009232:	e7ba      	b.n	80091aa <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8009234:	4620      	mov	r0, r4
 8009236:	f000 faf3 	bl	8009820 <USBD_CtlSendStatus>
 800923a:	e7b6      	b.n	80091aa <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800923c:	f000 faf0 	bl	8009820 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8009240:	2500      	movs	r5, #0
 8009242:	e7b2      	b.n	80091aa <USBD_SetConfig+0x2e>
 8009244:	200024a4 	.word	0x200024a4

08009248 <USBD_GetConfig>:
{
 8009248:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800924a:	88cb      	ldrh	r3, [r1, #6]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d10b      	bne.n	8009268 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8009250:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009254:	b2da      	uxtb	r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d909      	bls.n	800926e <USBD_GetConfig+0x26>
 800925a:	2a03      	cmp	r2, #3
 800925c:	d111      	bne.n	8009282 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800925e:	2201      	movs	r2, #1
 8009260:	1d01      	adds	r1, r0, #4
 8009262:	f000 fab1 	bl	80097c8 <USBD_CtlSendData>
        break;
 8009266:	e001      	b.n	800926c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8009268:	f7ff fe80 	bl	8008f6c <USBD_CtlError>
}
 800926c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800926e:	b252      	sxtb	r2, r2
 8009270:	b13a      	cbz	r2, 8009282 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8009272:	4601      	mov	r1, r0
 8009274:	2300      	movs	r3, #0
 8009276:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800927a:	2201      	movs	r2, #1
 800927c:	f000 faa4 	bl	80097c8 <USBD_CtlSendData>
        break;
 8009280:	e7f4      	b.n	800926c <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8009282:	f7ff fe73 	bl	8008f6c <USBD_CtlError>
}
 8009286:	e7f1      	b.n	800926c <USBD_GetConfig+0x24>

08009288 <USBD_GetStatus>:
{
 8009288:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800928a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800928e:	3b01      	subs	r3, #1
 8009290:	2b02      	cmp	r3, #2
 8009292:	d812      	bhi.n	80092ba <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8009294:	88cb      	ldrh	r3, [r1, #6]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d10c      	bne.n	80092b4 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800929a:	2301      	movs	r3, #1
 800929c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800929e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80092a2:	b10b      	cbz	r3, 80092a8 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092a4:	2303      	movs	r3, #3
 80092a6:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80092a8:	2202      	movs	r2, #2
 80092aa:	f100 010c 	add.w	r1, r0, #12
 80092ae:	f000 fa8b 	bl	80097c8 <USBD_CtlSendData>
}
 80092b2:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80092b4:	f7ff fe5a 	bl	8008f6c <USBD_CtlError>
        break;
 80092b8:	e7fb      	b.n	80092b2 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80092ba:	f7ff fe57 	bl	8008f6c <USBD_CtlError>
}
 80092be:	e7f8      	b.n	80092b2 <USBD_GetStatus+0x2a>

080092c0 <USBD_SetFeature>:
{
 80092c0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092c2:	884b      	ldrh	r3, [r1, #2]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d004      	beq.n	80092d2 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d007      	beq.n	80092dc <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 80092cc:	f7ff fe4e 	bl	8008f6c <USBD_CtlError>
}
 80092d0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80092d2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092d6:	f000 faa3 	bl	8009820 <USBD_CtlSendStatus>
 80092da:	e7f9      	b.n	80092d0 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80092dc:	888b      	ldrh	r3, [r1, #4]
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80092e4:	f000 fa9c 	bl	8009820 <USBD_CtlSendStatus>
 80092e8:	e7f2      	b.n	80092d0 <USBD_SetFeature+0x10>

080092ea <USBD_ClrFeature>:
{
 80092ea:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80092ec:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80092f0:	3b01      	subs	r3, #1
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d809      	bhi.n	800930a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092f6:	884b      	ldrh	r3, [r1, #2]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d000      	beq.n	80092fe <USBD_ClrFeature+0x14>
}
 80092fc:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009304:	f000 fa8c 	bl	8009820 <USBD_CtlSendStatus>
 8009308:	e7f8      	b.n	80092fc <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800930a:	f7ff fe2f 	bl	8008f6c <USBD_CtlError>
}
 800930e:	e7f5      	b.n	80092fc <USBD_ClrFeature+0x12>

08009310 <USBD_StdDevReq>:
{
 8009310:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009312:	780c      	ldrb	r4, [r1, #0]
 8009314:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8009318:	2c20      	cmp	r4, #32
 800931a:	d006      	beq.n	800932a <USBD_StdDevReq+0x1a>
 800931c:	2c40      	cmp	r4, #64	@ 0x40
 800931e:	d004      	beq.n	800932a <USBD_StdDevReq+0x1a>
 8009320:	b16c      	cbz	r4, 800933e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8009322:	f7ff fe23 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009326:	2400      	movs	r4, #0
      break;
 8009328:	e007      	b.n	800933a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800932a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800932e:	33ae      	adds	r3, #174	@ 0xae
 8009330:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	4798      	blx	r3
 8009338:	4604      	mov	r4, r0
}
 800933a:	4620      	mov	r0, r4
 800933c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800933e:	784d      	ldrb	r5, [r1, #1]
 8009340:	2d09      	cmp	r5, #9
 8009342:	d81d      	bhi.n	8009380 <USBD_StdDevReq+0x70>
 8009344:	e8df f005 	tbb	[pc, r5]
 8009348:	161c1912 	.word	0x161c1912
 800934c:	1c05081c 	.word	0x1c05081c
 8009350:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8009352:	f7ff fe15 	bl	8008f80 <USBD_GetDescriptor>
          break;
 8009356:	e7f0      	b.n	800933a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8009358:	f7ff fee8 	bl	800912c <USBD_SetAddress>
          break;
 800935c:	e7ed      	b.n	800933a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800935e:	f7ff ff0d 	bl	800917c <USBD_SetConfig>
 8009362:	4604      	mov	r4, r0
          break;
 8009364:	e7e9      	b.n	800933a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8009366:	f7ff ff6f 	bl	8009248 <USBD_GetConfig>
          break;
 800936a:	e7e6      	b.n	800933a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800936c:	f7ff ff8c 	bl	8009288 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8009370:	462c      	mov	r4, r5
          break;
 8009372:	e7e2      	b.n	800933a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8009374:	f7ff ffa4 	bl	80092c0 <USBD_SetFeature>
          break;
 8009378:	e7df      	b.n	800933a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800937a:	f7ff ffb6 	bl	80092ea <USBD_ClrFeature>
          break;
 800937e:	e7dc      	b.n	800933a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8009380:	f7ff fdf4 	bl	8008f6c <USBD_CtlError>
          break;
 8009384:	e7d9      	b.n	800933a <USBD_StdDevReq+0x2a>

08009386 <USBD_StdItfReq>:
{
 8009386:	b570      	push	{r4, r5, r6, lr}
 8009388:	4605      	mov	r5, r0
 800938a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800938c:	780b      	ldrb	r3, [r1, #0]
 800938e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009392:	2b20      	cmp	r3, #32
 8009394:	d007      	beq.n	80093a6 <USBD_StdItfReq+0x20>
 8009396:	2b40      	cmp	r3, #64	@ 0x40
 8009398:	d005      	beq.n	80093a6 <USBD_StdItfReq+0x20>
 800939a:	b123      	cbz	r3, 80093a6 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800939c:	f7ff fde6 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80093a0:	2600      	movs	r6, #0
}
 80093a2:	4630      	mov	r0, r6
 80093a4:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80093a6:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80093aa:	3b01      	subs	r3, #1
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d826      	bhi.n	80093fe <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093b0:	7921      	ldrb	r1, [r4, #4]
 80093b2:	2901      	cmp	r1, #1
 80093b4:	d905      	bls.n	80093c2 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	f7ff fdd7 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80093be:	2600      	movs	r6, #0
 80093c0:	e7ef      	b.n	80093a2 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80093c2:	4628      	mov	r0, r5
 80093c4:	f7ff fcc1 	bl	8008d4a <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093c8:	b968      	cbnz	r0, 80093e6 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80093ca:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80093ce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80093d2:	6891      	ldr	r1, [r2, #8]
 80093d4:	b189      	cbz	r1, 80093fa <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80093d6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093da:	6893      	ldr	r3, [r2, #8]
 80093dc:	4621      	mov	r1, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	4798      	blx	r3
 80093e2:	4606      	mov	r6, r0
 80093e4:	e000      	b.n	80093e8 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 80093e6:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093e8:	88e3      	ldrh	r3, [r4, #6]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1d9      	bne.n	80093a2 <USBD_StdItfReq+0x1c>
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	d1d7      	bne.n	80093a2 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 fa14 	bl	8009820 <USBD_CtlSendStatus>
 80093f8:	e7d3      	b.n	80093a2 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 80093fa:	2603      	movs	r6, #3
 80093fc:	e7f4      	b.n	80093e8 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 80093fe:	4621      	mov	r1, r4
 8009400:	4628      	mov	r0, r5
 8009402:	f7ff fdb3 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009406:	2600      	movs	r6, #0
          break;
 8009408:	e7cb      	b.n	80093a2 <USBD_StdItfReq+0x1c>

0800940a <USBD_StdEPReq>:
{
 800940a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940e:	4606      	mov	r6, r0
 8009410:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8009412:	888b      	ldrh	r3, [r1, #4]
 8009414:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009416:	780c      	ldrb	r4, [r1, #0]
 8009418:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800941c:	2c20      	cmp	r4, #32
 800941e:	d008      	beq.n	8009432 <USBD_StdEPReq+0x28>
 8009420:	2c40      	cmp	r4, #64	@ 0x40
 8009422:	d006      	beq.n	8009432 <USBD_StdEPReq+0x28>
 8009424:	b1dc      	cbz	r4, 800945e <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8009426:	f7ff fda1 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800942a:	2400      	movs	r4, #0
}
 800942c:	4620      	mov	r0, r4
 800942e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009432:	4639      	mov	r1, r7
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fc8a 	bl	8008d4e <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800943a:	4604      	mov	r4, r0
 800943c:	2800      	cmp	r0, #0
 800943e:	f040 80fc 	bne.w	800963a <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 8009442:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8009446:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800944a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0eb      	beq.n	800942c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009454:	4629      	mov	r1, r5
 8009456:	4630      	mov	r0, r6
 8009458:	4798      	blx	r3
 800945a:	4604      	mov	r4, r0
 800945c:	e7e6      	b.n	800942c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800945e:	f891 8001 	ldrb.w	r8, [r1, #1]
 8009462:	f1b8 0f01 	cmp.w	r8, #1
 8009466:	d031      	beq.n	80094cc <USBD_StdEPReq+0xc2>
 8009468:	f1b8 0f03 	cmp.w	r8, #3
 800946c:	d005      	beq.n	800947a <USBD_StdEPReq+0x70>
 800946e:	f1b8 0f00 	cmp.w	r8, #0
 8009472:	d067      	beq.n	8009544 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8009474:	f7ff fd7a 	bl	8008f6c <USBD_CtlError>
          break;
 8009478:	e7d8      	b.n	800942c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800947a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800947e:	b2da      	uxtb	r2, r3
 8009480:	2b02      	cmp	r3, #2
 8009482:	d004      	beq.n	800948e <USBD_StdEPReq+0x84>
 8009484:	2a03      	cmp	r2, #3
 8009486:	d012      	beq.n	80094ae <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8009488:	f7ff fd70 	bl	8008f6c <USBD_CtlError>
              break;
 800948c:	e7ce      	b.n	800942c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800948e:	b10f      	cbz	r7, 8009494 <USBD_StdEPReq+0x8a>
 8009490:	2f80      	cmp	r7, #128	@ 0x80
 8009492:	d104      	bne.n	800949e <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8009494:	4629      	mov	r1, r5
 8009496:	4630      	mov	r0, r6
 8009498:	f7ff fd68 	bl	8008f6c <USBD_CtlError>
 800949c:	e7c6      	b.n	800942c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800949e:	4639      	mov	r1, r7
 80094a0:	f7ff faec 	bl	8008a7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094a4:	2180      	movs	r1, #128	@ 0x80
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7ff fae8 	bl	8008a7c <USBD_LL_StallEP>
 80094ac:	e7be      	b.n	800942c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094ae:	884b      	ldrh	r3, [r1, #2]
 80094b0:	b923      	cbnz	r3, 80094bc <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094b2:	b11f      	cbz	r7, 80094bc <USBD_StdEPReq+0xb2>
 80094b4:	2f80      	cmp	r7, #128	@ 0x80
 80094b6:	d001      	beq.n	80094bc <USBD_StdEPReq+0xb2>
 80094b8:	88cb      	ldrh	r3, [r1, #6]
 80094ba:	b11b      	cbz	r3, 80094c4 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 80094bc:	4630      	mov	r0, r6
 80094be:	f000 f9af 	bl	8009820 <USBD_CtlSendStatus>
              break;
 80094c2:	e7b3      	b.n	800942c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80094c4:	4639      	mov	r1, r7
 80094c6:	f7ff fad9 	bl	8008a7c <USBD_LL_StallEP>
 80094ca:	e7f7      	b.n	80094bc <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 80094cc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d004      	beq.n	80094e0 <USBD_StdEPReq+0xd6>
 80094d6:	2a03      	cmp	r2, #3
 80094d8:	d012      	beq.n	8009500 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 80094da:	f7ff fd47 	bl	8008f6c <USBD_CtlError>
              break;
 80094de:	e7a5      	b.n	800942c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e0:	b10f      	cbz	r7, 80094e6 <USBD_StdEPReq+0xdc>
 80094e2:	2f80      	cmp	r7, #128	@ 0x80
 80094e4:	d104      	bne.n	80094f0 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 80094e6:	4629      	mov	r1, r5
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff fd3f 	bl	8008f6c <USBD_CtlError>
 80094ee:	e79d      	b.n	800942c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7ff fac3 	bl	8008a7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f6:	2180      	movs	r1, #128	@ 0x80
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7ff fabf 	bl	8008a7c <USBD_LL_StallEP>
 80094fe:	e795      	b.n	800942c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009500:	884b      	ldrh	r3, [r1, #2]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d192      	bne.n	800942c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8009506:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800950a:	d117      	bne.n	800953c <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 800950c:	4630      	mov	r0, r6
 800950e:	f000 f987 	bl	8009820 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009512:	4639      	mov	r1, r7
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff fc1a 	bl	8008d4e <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800951a:	2800      	cmp	r0, #0
 800951c:	d186      	bne.n	800942c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800951e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8009522:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8009526:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800952a:	6892      	ldr	r2, [r2, #8]
 800952c:	2a00      	cmp	r2, #0
 800952e:	f000 8086 	beq.w	800963e <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009532:	4629      	mov	r1, r5
 8009534:	4630      	mov	r0, r6
 8009536:	4790      	blx	r2
 8009538:	4604      	mov	r4, r0
 800953a:	e777      	b.n	800942c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800953c:	4639      	mov	r1, r7
 800953e:	f7ff faac 	bl	8008a9a <USBD_LL_ClearStallEP>
 8009542:	e7e3      	b.n	800950c <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8009544:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009548:	b2d1      	uxtb	r1, r2
 800954a:	2a02      	cmp	r2, #2
 800954c:	d006      	beq.n	800955c <USBD_StdEPReq+0x152>
 800954e:	2903      	cmp	r1, #3
 8009550:	d029      	beq.n	80095a6 <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 8009552:	4629      	mov	r1, r5
 8009554:	f7ff fd0a 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009558:	4644      	mov	r4, r8
              break;
 800955a:	e767      	b.n	800942c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800955c:	b10f      	cbz	r7, 8009562 <USBD_StdEPReq+0x158>
 800955e:	2f80      	cmp	r7, #128	@ 0x80
 8009560:	d113      	bne.n	800958a <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009562:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009566:	d115      	bne.n	8009594 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009568:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800956c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8009570:	00b9      	lsls	r1, r7, #2
 8009572:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8009576:	4431      	add	r1, r6
 8009578:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800957a:	2300      	movs	r3, #0
 800957c:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800957e:	2202      	movs	r2, #2
 8009580:	4630      	mov	r0, r6
 8009582:	f000 f921 	bl	80097c8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009586:	4644      	mov	r4, r8
              break;
 8009588:	e750      	b.n	800942c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800958a:	4629      	mov	r1, r5
 800958c:	f7ff fcee 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009590:	4644      	mov	r4, r8
                break;
 8009592:	e74b      	b.n	800942c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009594:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8009598:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800959c:	00b9      	lsls	r1, r7, #2
 800959e:	3110      	adds	r1, #16
 80095a0:	4431      	add	r1, r6
 80095a2:	3104      	adds	r1, #4
 80095a4:	e7e9      	b.n	800957a <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 80095a6:	b25b      	sxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	db1f      	blt.n	80095ec <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095ac:	f007 020f 	and.w	r2, r7, #15
 80095b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80095b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80095b8:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 80095bc:	b322      	cbz	r2, 8009608 <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095be:	2b00      	cmp	r3, #0
 80095c0:	db27      	blt.n	8009612 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095c2:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095ca:	009c      	lsls	r4, r3, #2
 80095cc:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 80095d0:	4434      	add	r4, r6
 80095d2:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095d4:	b10f      	cbz	r7, 80095da <USBD_StdEPReq+0x1d0>
 80095d6:	2f80      	cmp	r7, #128	@ 0x80
 80095d8:	d124      	bne.n	8009624 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 80095da:	2300      	movs	r3, #0
 80095dc:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095de:	2202      	movs	r2, #2
 80095e0:	4621      	mov	r1, r4
 80095e2:	4630      	mov	r0, r6
 80095e4:	f000 f8f0 	bl	80097c8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80095e8:	4644      	mov	r4, r8
              break;
 80095ea:	e71f      	b.n	800942c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095ec:	f007 020f 	and.w	r2, r7, #15
 80095f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80095f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80095f8:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	d1df      	bne.n	80095be <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 80095fe:	4629      	mov	r1, r5
 8009600:	f7ff fcb4 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009604:	4644      	mov	r4, r8
                  break;
 8009606:	e711      	b.n	800942c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8009608:	4629      	mov	r1, r5
 800960a:	f7ff fcaf 	bl	8008f6c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800960e:	4644      	mov	r4, r8
                  break;
 8009610:	e70c      	b.n	800942c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009612:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8009616:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800961a:	009c      	lsls	r4, r3, #2
 800961c:	3410      	adds	r4, #16
 800961e:	4434      	add	r4, r6
 8009620:	3404      	adds	r4, #4
 8009622:	e7d7      	b.n	80095d4 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009624:	4639      	mov	r1, r7
 8009626:	4630      	mov	r0, r6
 8009628:	f7ff fa46 	bl	8008ab8 <USBD_LL_IsStallEP>
 800962c:	b110      	cbz	r0, 8009634 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 800962e:	2301      	movs	r3, #1
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	e7d4      	b.n	80095de <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 8009634:	2300      	movs	r3, #0
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	e7d1      	b.n	80095de <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 800963a:	2400      	movs	r4, #0
 800963c:	e6f6      	b.n	800942c <USBD_StdEPReq+0x22>
 800963e:	4604      	mov	r4, r0
 8009640:	e6f4      	b.n	800942c <USBD_StdEPReq+0x22>

08009642 <USBD_GetString>:
  if (desc == NULL)
 8009642:	b300      	cbz	r0, 8009686 <USBD_GetString+0x44>
{
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	460d      	mov	r5, r1
 8009648:	4616      	mov	r6, r2
 800964a:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800964c:	f7ff fc70 	bl	8008f30 <USBD_GetLen>
 8009650:	3001      	adds	r0, #1
 8009652:	0043      	lsls	r3, r0, #1
 8009654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009658:	d806      	bhi.n	8009668 <USBD_GetString+0x26>
 800965a:	b29b      	uxth	r3, r3
 800965c:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800965e:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009660:	2303      	movs	r3, #3
 8009662:	706b      	strb	r3, [r5, #1]
  idx++;
 8009664:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8009666:	e00a      	b.n	800967e <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009668:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800966c:	e7f6      	b.n	800965c <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 800966e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8009670:	3401      	adds	r4, #1
    idx++;
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8009676:	2100      	movs	r1, #0
 8009678:	54a9      	strb	r1, [r5, r2]
    idx++;
 800967a:	3302      	adds	r3, #2
 800967c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800967e:	7822      	ldrb	r2, [r4, #0]
 8009680:	2a00      	cmp	r2, #0
 8009682:	d1f4      	bne.n	800966e <USBD_GetString+0x2c>
}
 8009684:	bd70      	pop	{r4, r5, r6, pc}
 8009686:	4770      	bx	lr

08009688 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009688:	2312      	movs	r3, #18
 800968a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800968c:	4800      	ldr	r0, [pc, #0]	@ (8009690 <USBD_FS_DeviceDescriptor+0x8>)
 800968e:	4770      	bx	lr
 8009690:	20000190 	.word	0x20000190

08009694 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009694:	2304      	movs	r3, #4
 8009696:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8009698:	4800      	ldr	r0, [pc, #0]	@ (800969c <USBD_FS_LangIDStrDescriptor+0x8>)
 800969a:	4770      	bx	lr
 800969c:	20000180 	.word	0x20000180

080096a0 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80096a0:	230c      	movs	r3, #12
 80096a2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80096a4:	4800      	ldr	r0, [pc, #0]	@ (80096a8 <USBD_FS_USR_BOSDescriptor+0x8>)
 80096a6:	4770      	bx	lr
 80096a8:	20000184 	.word	0x20000184

080096ac <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80096ac:	2300      	movs	r3, #0
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d21e      	bcs.n	80096f0 <IntToUnicode+0x44>
{
 80096b2:	b500      	push	{lr}
 80096b4:	e010      	b.n	80096d8 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096b6:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 80096ba:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 80096be:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80096c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80096c4:	f10c 0c01 	add.w	ip, ip, #1
 80096c8:	f04f 0e00 	mov.w	lr, #0
 80096cc:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 80096d0:	3301      	adds	r3, #1
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d209      	bcs.n	80096ec <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 80096d8:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 80096dc:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 80096e0:	d2e9      	bcs.n	80096b6 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80096e2:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80096e6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80096ea:	e7e8      	b.n	80096be <IntToUnicode+0x12>
  }
}
 80096ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <Get_SerialNum>:
{
 80096f4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009724 <Get_SerialNum+0x30>)
 80096f8:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096fc:	f8d3 4594 	ldr.w	r4, [r3, #1428]	@ 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009700:	f8d3 3598 	ldr.w	r3, [r3, #1432]	@ 0x598
  if (deviceserial0 != 0)
 8009704:	18c0      	adds	r0, r0, r3
 8009706:	d100      	bne.n	800970a <Get_SerialNum+0x16>
}
 8009708:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800970a:	4d07      	ldr	r5, [pc, #28]	@ (8009728 <Get_SerialNum+0x34>)
 800970c:	2208      	movs	r2, #8
 800970e:	4629      	mov	r1, r5
 8009710:	f7ff ffcc 	bl	80096ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009714:	2204      	movs	r2, #4
 8009716:	f105 0110 	add.w	r1, r5, #16
 800971a:	4620      	mov	r0, r4
 800971c:	f7ff ffc6 	bl	80096ac <IntToUnicode>
}
 8009720:	e7f2      	b.n	8009708 <Get_SerialNum+0x14>
 8009722:	bf00      	nop
 8009724:	1fff7000 	.word	0x1fff7000
 8009728:	20000166 	.word	0x20000166

0800972c <USBD_FS_SerialStrDescriptor>:
{
 800972c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800972e:	231a      	movs	r3, #26
 8009730:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8009732:	f7ff ffdf 	bl	80096f4 <Get_SerialNum>
}
 8009736:	4801      	ldr	r0, [pc, #4]	@ (800973c <USBD_FS_SerialStrDescriptor+0x10>)
 8009738:	bd08      	pop	{r3, pc}
 800973a:	bf00      	nop
 800973c:	20000164 	.word	0x20000164

08009740 <USBD_FS_ProductStrDescriptor>:
{
 8009740:	b508      	push	{r3, lr}
 8009742:	460a      	mov	r2, r1
  if(speed == 0)
 8009744:	b928      	cbnz	r0, 8009752 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009746:	4905      	ldr	r1, [pc, #20]	@ (800975c <USBD_FS_ProductStrDescriptor+0x1c>)
 8009748:	4805      	ldr	r0, [pc, #20]	@ (8009760 <USBD_FS_ProductStrDescriptor+0x20>)
 800974a:	f7ff ff7a 	bl	8009642 <USBD_GetString>
}
 800974e:	4803      	ldr	r0, [pc, #12]	@ (800975c <USBD_FS_ProductStrDescriptor+0x1c>)
 8009750:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009752:	4902      	ldr	r1, [pc, #8]	@ (800975c <USBD_FS_ProductStrDescriptor+0x1c>)
 8009754:	4802      	ldr	r0, [pc, #8]	@ (8009760 <USBD_FS_ProductStrDescriptor+0x20>)
 8009756:	f7ff ff74 	bl	8009642 <USBD_GetString>
 800975a:	e7f8      	b.n	800974e <USBD_FS_ProductStrDescriptor+0xe>
 800975c:	200024a8 	.word	0x200024a8
 8009760:	0800bb08 	.word	0x0800bb08

08009764 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009764:	b510      	push	{r4, lr}
 8009766:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009768:	4c03      	ldr	r4, [pc, #12]	@ (8009778 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800976a:	4621      	mov	r1, r4
 800976c:	4803      	ldr	r0, [pc, #12]	@ (800977c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800976e:	f7ff ff68 	bl	8009642 <USBD_GetString>
}
 8009772:	4620      	mov	r0, r4
 8009774:	bd10      	pop	{r4, pc}
 8009776:	bf00      	nop
 8009778:	200024a8 	.word	0x200024a8
 800977c:	0800bb08 	.word	0x0800bb08

08009780 <USBD_FS_ConfigStrDescriptor>:
{
 8009780:	b508      	push	{r3, lr}
 8009782:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8009784:	b928      	cbnz	r0, 8009792 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009786:	4905      	ldr	r1, [pc, #20]	@ (800979c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009788:	4805      	ldr	r0, [pc, #20]	@ (80097a0 <USBD_FS_ConfigStrDescriptor+0x20>)
 800978a:	f7ff ff5a 	bl	8009642 <USBD_GetString>
}
 800978e:	4803      	ldr	r0, [pc, #12]	@ (800979c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009790:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009792:	4902      	ldr	r1, [pc, #8]	@ (800979c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8009794:	4802      	ldr	r0, [pc, #8]	@ (80097a0 <USBD_FS_ConfigStrDescriptor+0x20>)
 8009796:	f7ff ff54 	bl	8009642 <USBD_GetString>
 800979a:	e7f8      	b.n	800978e <USBD_FS_ConfigStrDescriptor+0xe>
 800979c:	200024a8 	.word	0x200024a8
 80097a0:	0800bb14 	.word	0x0800bb14

080097a4 <USBD_FS_InterfaceStrDescriptor>:
{
 80097a4:	b508      	push	{r3, lr}
 80097a6:	460a      	mov	r2, r1
  if(speed == 0)
 80097a8:	b928      	cbnz	r0, 80097b6 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097aa:	4905      	ldr	r1, [pc, #20]	@ (80097c0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80097ac:	4805      	ldr	r0, [pc, #20]	@ (80097c4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80097ae:	f7ff ff48 	bl	8009642 <USBD_GetString>
}
 80097b2:	4803      	ldr	r0, [pc, #12]	@ (80097c0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80097b4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097b6:	4902      	ldr	r1, [pc, #8]	@ (80097c0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80097b8:	4802      	ldr	r0, [pc, #8]	@ (80097c4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80097ba:	f7ff ff42 	bl	8009642 <USBD_GetString>
 80097be:	e7f8      	b.n	80097b2 <USBD_FS_InterfaceStrDescriptor+0xe>
 80097c0:	200024a8 	.word	0x200024a8
 80097c4:	0800bb20 	.word	0x0800bb20

080097c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097c8:	b508      	push	{r3, lr}
 80097ca:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097cc:	2202      	movs	r2, #2
 80097ce:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80097d2:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097d4:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097d6:	460a      	mov	r2, r1
 80097d8:	2100      	movs	r1, #0
 80097da:	f7ff f992 	bl	8008b02 <USBD_LL_Transmit>

  return USBD_OK;
}
 80097de:	2000      	movs	r0, #0
 80097e0:	bd08      	pop	{r3, pc}

080097e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097e2:	b508      	push	{r3, lr}
 80097e4:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097e6:	460a      	mov	r2, r1
 80097e8:	2100      	movs	r1, #0
 80097ea:	f7ff f98a 	bl	8008b02 <USBD_LL_Transmit>

  return USBD_OK;
}
 80097ee:	2000      	movs	r0, #0
 80097f0:	bd08      	pop	{r3, pc}

080097f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097f2:	b508      	push	{r3, lr}
 80097f4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097f6:	2203      	movs	r2, #3
 80097f8:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097fc:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009800:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009804:	460a      	mov	r2, r1
 8009806:	2100      	movs	r1, #0
 8009808:	f7ff f98a 	bl	8008b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800980c:	2000      	movs	r0, #0
 800980e:	bd08      	pop	{r3, pc}

08009810 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009810:	b508      	push	{r3, lr}
 8009812:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009814:	460a      	mov	r2, r1
 8009816:	2100      	movs	r1, #0
 8009818:	f7ff f982 	bl	8008b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800981c:	2000      	movs	r0, #0
 800981e:	bd08      	pop	{r3, pc}

08009820 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009820:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009822:	2204      	movs	r2, #4
 8009824:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009828:	2300      	movs	r3, #0
 800982a:	461a      	mov	r2, r3
 800982c:	4619      	mov	r1, r3
 800982e:	f7ff f968 	bl	8008b02 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009832:	2000      	movs	r0, #0
 8009834:	bd08      	pop	{r3, pc}

08009836 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009836:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009838:	2205      	movs	r2, #5
 800983a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800983e:	2300      	movs	r3, #0
 8009840:	461a      	mov	r2, r3
 8009842:	4619      	mov	r1, r3
 8009844:	f7ff f96c 	bl	8008b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009848:	2000      	movs	r0, #0
 800984a:	bd08      	pop	{r3, pc}

0800984c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800984c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009884 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009850:	f7fe fcfc 	bl	800824c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009854:	480c      	ldr	r0, [pc, #48]	@ (8009888 <LoopForever+0x6>)
  ldr r1, =_edata
 8009856:	490d      	ldr	r1, [pc, #52]	@ (800988c <LoopForever+0xa>)
  ldr r2, =_sidata
 8009858:	4a0d      	ldr	r2, [pc, #52]	@ (8009890 <LoopForever+0xe>)
  movs r3, #0
 800985a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800985c:	e002      	b.n	8009864 <LoopCopyDataInit>

0800985e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800985e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009862:	3304      	adds	r3, #4

08009864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009868:	d3f9      	bcc.n	800985e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800986a:	4a0a      	ldr	r2, [pc, #40]	@ (8009894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800986c:	4c0a      	ldr	r4, [pc, #40]	@ (8009898 <LoopForever+0x16>)
  movs r3, #0
 800986e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009870:	e001      	b.n	8009876 <LoopFillZerobss>

08009872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009874:	3204      	adds	r2, #4

08009876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009878:	d3fb      	bcc.n	8009872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800987a:	f000 fde5 	bl	800a448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800987e:	f7f9 f817 	bl	80028b0 <main>

08009882 <LoopForever>:

LoopForever:
    b LoopForever
 8009882:	e7fe      	b.n	8009882 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009884:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8009888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800988c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8009890:	0800d2e0 	.word	0x0800d2e0
  ldr r2, =_sbss
 8009894:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8009898:	20002814 	.word	0x20002814

0800989c <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800989c:	e7fe      	b.n	800989c <COMP_IRQHandler>
	...

080098a0 <siprintf>:
 80098a0:	b40e      	push	{r1, r2, r3}
 80098a2:	b510      	push	{r4, lr}
 80098a4:	b09d      	sub	sp, #116	@ 0x74
 80098a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80098a8:	9002      	str	r0, [sp, #8]
 80098aa:	9006      	str	r0, [sp, #24]
 80098ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80098b0:	480a      	ldr	r0, [pc, #40]	@ (80098dc <siprintf+0x3c>)
 80098b2:	9107      	str	r1, [sp, #28]
 80098b4:	9104      	str	r1, [sp, #16]
 80098b6:	490a      	ldr	r1, [pc, #40]	@ (80098e0 <siprintf+0x40>)
 80098b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098bc:	9105      	str	r1, [sp, #20]
 80098be:	2400      	movs	r4, #0
 80098c0:	a902      	add	r1, sp, #8
 80098c2:	6800      	ldr	r0, [r0, #0]
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80098c8:	f001 f814 	bl	800a8f4 <_svfiprintf_r>
 80098cc:	9b02      	ldr	r3, [sp, #8]
 80098ce:	701c      	strb	r4, [r3, #0]
 80098d0:	b01d      	add	sp, #116	@ 0x74
 80098d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d6:	b003      	add	sp, #12
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	200001cc 	.word	0x200001cc
 80098e0:	ffff0208 	.word	0xffff0208

080098e4 <siscanf>:
 80098e4:	b40e      	push	{r1, r2, r3}
 80098e6:	b570      	push	{r4, r5, r6, lr}
 80098e8:	b09d      	sub	sp, #116	@ 0x74
 80098ea:	ac21      	add	r4, sp, #132	@ 0x84
 80098ec:	2500      	movs	r5, #0
 80098ee:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80098f2:	f854 6b04 	ldr.w	r6, [r4], #4
 80098f6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80098fa:	951b      	str	r5, [sp, #108]	@ 0x6c
 80098fc:	9002      	str	r0, [sp, #8]
 80098fe:	9006      	str	r0, [sp, #24]
 8009900:	f7f6 fc50 	bl	80001a4 <strlen>
 8009904:	4b0b      	ldr	r3, [pc, #44]	@ (8009934 <siscanf+0x50>)
 8009906:	9003      	str	r0, [sp, #12]
 8009908:	9007      	str	r0, [sp, #28]
 800990a:	480b      	ldr	r0, [pc, #44]	@ (8009938 <siscanf+0x54>)
 800990c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800990e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009912:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009916:	4632      	mov	r2, r6
 8009918:	4623      	mov	r3, r4
 800991a:	a902      	add	r1, sp, #8
 800991c:	6800      	ldr	r0, [r0, #0]
 800991e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009920:	9514      	str	r5, [sp, #80]	@ 0x50
 8009922:	9401      	str	r4, [sp, #4]
 8009924:	f001 f93c 	bl	800aba0 <__ssvfiscanf_r>
 8009928:	b01d      	add	sp, #116	@ 0x74
 800992a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800992e:	b003      	add	sp, #12
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	0800993d 	.word	0x0800993d
 8009938:	200001cc 	.word	0x200001cc

0800993c <__seofread>:
 800993c:	2000      	movs	r0, #0
 800993e:	4770      	bx	lr

08009940 <memset>:
 8009940:	4402      	add	r2, r0
 8009942:	4603      	mov	r3, r0
 8009944:	4293      	cmp	r3, r2
 8009946:	d100      	bne.n	800994a <memset+0xa>
 8009948:	4770      	bx	lr
 800994a:	f803 1b01 	strb.w	r1, [r3], #1
 800994e:	e7f9      	b.n	8009944 <memset+0x4>

08009950 <validate_structure>:
 8009950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009952:	6801      	ldr	r1, [r0, #0]
 8009954:	293b      	cmp	r1, #59	@ 0x3b
 8009956:	4604      	mov	r4, r0
 8009958:	d911      	bls.n	800997e <validate_structure+0x2e>
 800995a:	223c      	movs	r2, #60	@ 0x3c
 800995c:	4668      	mov	r0, sp
 800995e:	f000 fda3 	bl	800a4a8 <div>
 8009962:	9a01      	ldr	r2, [sp, #4]
 8009964:	6863      	ldr	r3, [r4, #4]
 8009966:	9900      	ldr	r1, [sp, #0]
 8009968:	2a00      	cmp	r2, #0
 800996a:	440b      	add	r3, r1
 800996c:	6063      	str	r3, [r4, #4]
 800996e:	bfbb      	ittet	lt
 8009970:	323c      	addlt	r2, #60	@ 0x3c
 8009972:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009976:	6022      	strge	r2, [r4, #0]
 8009978:	6022      	strlt	r2, [r4, #0]
 800997a:	bfb8      	it	lt
 800997c:	6063      	strlt	r3, [r4, #4]
 800997e:	6861      	ldr	r1, [r4, #4]
 8009980:	293b      	cmp	r1, #59	@ 0x3b
 8009982:	d911      	bls.n	80099a8 <validate_structure+0x58>
 8009984:	223c      	movs	r2, #60	@ 0x3c
 8009986:	4668      	mov	r0, sp
 8009988:	f000 fd8e 	bl	800a4a8 <div>
 800998c:	9a01      	ldr	r2, [sp, #4]
 800998e:	68a3      	ldr	r3, [r4, #8]
 8009990:	9900      	ldr	r1, [sp, #0]
 8009992:	2a00      	cmp	r2, #0
 8009994:	440b      	add	r3, r1
 8009996:	60a3      	str	r3, [r4, #8]
 8009998:	bfbb      	ittet	lt
 800999a:	323c      	addlt	r2, #60	@ 0x3c
 800999c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80099a0:	6062      	strge	r2, [r4, #4]
 80099a2:	6062      	strlt	r2, [r4, #4]
 80099a4:	bfb8      	it	lt
 80099a6:	60a3      	strlt	r3, [r4, #8]
 80099a8:	68a1      	ldr	r1, [r4, #8]
 80099aa:	2917      	cmp	r1, #23
 80099ac:	d911      	bls.n	80099d2 <validate_structure+0x82>
 80099ae:	2218      	movs	r2, #24
 80099b0:	4668      	mov	r0, sp
 80099b2:	f000 fd79 	bl	800a4a8 <div>
 80099b6:	9a01      	ldr	r2, [sp, #4]
 80099b8:	68e3      	ldr	r3, [r4, #12]
 80099ba:	9900      	ldr	r1, [sp, #0]
 80099bc:	2a00      	cmp	r2, #0
 80099be:	440b      	add	r3, r1
 80099c0:	60e3      	str	r3, [r4, #12]
 80099c2:	bfbb      	ittet	lt
 80099c4:	3218      	addlt	r2, #24
 80099c6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80099ca:	60a2      	strge	r2, [r4, #8]
 80099cc:	60a2      	strlt	r2, [r4, #8]
 80099ce:	bfb8      	it	lt
 80099d0:	60e3      	strlt	r3, [r4, #12]
 80099d2:	6921      	ldr	r1, [r4, #16]
 80099d4:	290b      	cmp	r1, #11
 80099d6:	d911      	bls.n	80099fc <validate_structure+0xac>
 80099d8:	220c      	movs	r2, #12
 80099da:	4668      	mov	r0, sp
 80099dc:	f000 fd64 	bl	800a4a8 <div>
 80099e0:	9a01      	ldr	r2, [sp, #4]
 80099e2:	6963      	ldr	r3, [r4, #20]
 80099e4:	9900      	ldr	r1, [sp, #0]
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	440b      	add	r3, r1
 80099ea:	6163      	str	r3, [r4, #20]
 80099ec:	bfbb      	ittet	lt
 80099ee:	320c      	addlt	r2, #12
 80099f0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80099f4:	6122      	strge	r2, [r4, #16]
 80099f6:	6122      	strlt	r2, [r4, #16]
 80099f8:	bfb8      	it	lt
 80099fa:	6163      	strlt	r3, [r4, #20]
 80099fc:	6963      	ldr	r3, [r4, #20]
 80099fe:	079a      	lsls	r2, r3, #30
 8009a00:	d13f      	bne.n	8009a82 <validate_structure+0x132>
 8009a02:	2164      	movs	r1, #100	@ 0x64
 8009a04:	fb93 f2f1 	sdiv	r2, r3, r1
 8009a08:	fb01 3212 	mls	r2, r1, r2, r3
 8009a0c:	2a00      	cmp	r2, #0
 8009a0e:	d13a      	bne.n	8009a86 <validate_structure+0x136>
 8009a10:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8009a14:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009a18:	fb93 f1f2 	sdiv	r1, r3, r2
 8009a1c:	fb02 3311 	mls	r3, r2, r1, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bf0c      	ite	eq
 8009a24:	231d      	moveq	r3, #29
 8009a26:	231c      	movne	r3, #28
 8009a28:	68e2      	ldr	r2, [r4, #12]
 8009a2a:	2a00      	cmp	r2, #0
 8009a2c:	dd2d      	ble.n	8009a8a <validate_structure+0x13a>
 8009a2e:	4d30      	ldr	r5, [pc, #192]	@ (8009af0 <validate_structure+0x1a0>)
 8009a30:	6921      	ldr	r1, [r4, #16]
 8009a32:	2901      	cmp	r1, #1
 8009a34:	bf14      	ite	ne
 8009a36:	f855 0021 	ldrne.w	r0, [r5, r1, lsl #2]
 8009a3a:	4618      	moveq	r0, r3
 8009a3c:	4282      	cmp	r2, r0
 8009a3e:	dd4d      	ble.n	8009adc <validate_structure+0x18c>
 8009a40:	3101      	adds	r1, #1
 8009a42:	1a12      	subs	r2, r2, r0
 8009a44:	290c      	cmp	r1, #12
 8009a46:	60e2      	str	r2, [r4, #12]
 8009a48:	6121      	str	r1, [r4, #16]
 8009a4a:	d1f1      	bne.n	8009a30 <validate_structure+0xe0>
 8009a4c:	6963      	ldr	r3, [r4, #20]
 8009a4e:	2000      	movs	r0, #0
 8009a50:	1c59      	adds	r1, r3, #1
 8009a52:	6120      	str	r0, [r4, #16]
 8009a54:	0788      	lsls	r0, r1, #30
 8009a56:	6161      	str	r1, [r4, #20]
 8009a58:	d146      	bne.n	8009ae8 <validate_structure+0x198>
 8009a5a:	2064      	movs	r0, #100	@ 0x64
 8009a5c:	fb91 f6f0 	sdiv	r6, r1, r0
 8009a60:	fb00 1116 	mls	r1, r0, r6, r1
 8009a64:	2900      	cmp	r1, #0
 8009a66:	d141      	bne.n	8009aec <validate_structure+0x19c>
 8009a68:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8009a6c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009a70:	fb93 f0f1 	sdiv	r0, r3, r1
 8009a74:	fb01 3310 	mls	r3, r1, r0, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bf0c      	ite	eq
 8009a7c:	231d      	moveq	r3, #29
 8009a7e:	231c      	movne	r3, #28
 8009a80:	e7d6      	b.n	8009a30 <validate_structure+0xe0>
 8009a82:	231c      	movs	r3, #28
 8009a84:	e7d0      	b.n	8009a28 <validate_structure+0xd8>
 8009a86:	231d      	movs	r3, #29
 8009a88:	e7ce      	b.n	8009a28 <validate_structure+0xd8>
 8009a8a:	4e19      	ldr	r6, [pc, #100]	@ (8009af0 <validate_structure+0x1a0>)
 8009a8c:	250b      	movs	r5, #11
 8009a8e:	2064      	movs	r0, #100	@ 0x64
 8009a90:	6921      	ldr	r1, [r4, #16]
 8009a92:	3901      	subs	r1, #1
 8009a94:	6121      	str	r1, [r4, #16]
 8009a96:	3101      	adds	r1, #1
 8009a98:	d116      	bne.n	8009ac8 <validate_structure+0x178>
 8009a9a:	6963      	ldr	r3, [r4, #20]
 8009a9c:	1e59      	subs	r1, r3, #1
 8009a9e:	078f      	lsls	r7, r1, #30
 8009aa0:	e9c4 5104 	strd	r5, r1, [r4, #16]
 8009aa4:	d11c      	bne.n	8009ae0 <validate_structure+0x190>
 8009aa6:	fb91 f7f0 	sdiv	r7, r1, r0
 8009aaa:	fb00 1117 	mls	r1, r0, r7, r1
 8009aae:	b9c9      	cbnz	r1, 8009ae4 <validate_structure+0x194>
 8009ab0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009ab4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009ab8:	fb93 f7f1 	sdiv	r7, r3, r1
 8009abc:	fb01 3317 	mls	r3, r1, r7, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	bf0c      	ite	eq
 8009ac4:	231d      	moveq	r3, #29
 8009ac6:	231c      	movne	r3, #28
 8009ac8:	6921      	ldr	r1, [r4, #16]
 8009aca:	2901      	cmp	r1, #1
 8009acc:	bf14      	ite	ne
 8009ace:	f856 1021 	ldrne.w	r1, [r6, r1, lsl #2]
 8009ad2:	4619      	moveq	r1, r3
 8009ad4:	440a      	add	r2, r1
 8009ad6:	2a00      	cmp	r2, #0
 8009ad8:	60e2      	str	r2, [r4, #12]
 8009ada:	ddd9      	ble.n	8009a90 <validate_structure+0x140>
 8009adc:	b003      	add	sp, #12
 8009ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae0:	231c      	movs	r3, #28
 8009ae2:	e7f1      	b.n	8009ac8 <validate_structure+0x178>
 8009ae4:	231d      	movs	r3, #29
 8009ae6:	e7ef      	b.n	8009ac8 <validate_structure+0x178>
 8009ae8:	231c      	movs	r3, #28
 8009aea:	e7a1      	b.n	8009a30 <validate_structure+0xe0>
 8009aec:	231d      	movs	r3, #29
 8009aee:	e79f      	b.n	8009a30 <validate_structure+0xe0>
 8009af0:	0800d094 	.word	0x0800d094

08009af4 <mktime>:
 8009af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af8:	b085      	sub	sp, #20
 8009afa:	4607      	mov	r7, r0
 8009afc:	f001 fd46 	bl	800b58c <__gettzinfo>
 8009b00:	4681      	mov	r9, r0
 8009b02:	4638      	mov	r0, r7
 8009b04:	f7ff ff24 	bl	8009950 <validate_structure>
 8009b08:	e9d7 4300 	ldrd	r4, r3, [r7]
 8009b0c:	223c      	movs	r2, #60	@ 0x3c
 8009b0e:	fb02 4403 	mla	r4, r2, r3, r4
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	697d      	ldr	r5, [r7, #20]
 8009b16:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009b1a:	fb02 4403 	mla	r4, r2, r3, r4
 8009b1e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8009b22:	4ac3      	ldr	r2, [pc, #780]	@ (8009e30 <mktime+0x33c>)
 8009b24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b28:	3e01      	subs	r6, #1
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	4416      	add	r6, r2
 8009b2e:	dd11      	ble.n	8009b54 <mktime+0x60>
 8009b30:	07a9      	lsls	r1, r5, #30
 8009b32:	d10f      	bne.n	8009b54 <mktime+0x60>
 8009b34:	2264      	movs	r2, #100	@ 0x64
 8009b36:	fb95 f3f2 	sdiv	r3, r5, r2
 8009b3a:	fb02 5313 	mls	r3, r2, r3, r5
 8009b3e:	b943      	cbnz	r3, 8009b52 <mktime+0x5e>
 8009b40:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009b44:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009b48:	fb93 f1f2 	sdiv	r1, r3, r2
 8009b4c:	fb02 3311 	mls	r3, r2, r1, r3
 8009b50:	b903      	cbnz	r3, 8009b54 <mktime+0x60>
 8009b52:	3601      	adds	r6, #1
 8009b54:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8009b58:	3310      	adds	r3, #16
 8009b5a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	61fe      	str	r6, [r7, #28]
 8009b62:	f200 8170 	bhi.w	8009e46 <mktime+0x352>
 8009b66:	2d46      	cmp	r5, #70	@ 0x46
 8009b68:	f340 80b6 	ble.w	8009cd8 <mktime+0x1e4>
 8009b6c:	2346      	movs	r3, #70	@ 0x46
 8009b6e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8009b72:	2164      	movs	r1, #100	@ 0x64
 8009b74:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009b78:	079a      	lsls	r2, r3, #30
 8009b7a:	f040 80a7 	bne.w	8009ccc <mktime+0x1d8>
 8009b7e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009b82:	fb01 3212 	mls	r2, r1, r2, r3
 8009b86:	2a00      	cmp	r2, #0
 8009b88:	f040 80a3 	bne.w	8009cd2 <mktime+0x1de>
 8009b8c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009b90:	fb92 fef0 	sdiv	lr, r2, r0
 8009b94:	fb00 221e 	mls	r2, r0, lr, r2
 8009b98:	2a00      	cmp	r2, #0
 8009b9a:	bf0c      	ite	eq
 8009b9c:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009ba0:	4662      	movne	r2, ip
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	4416      	add	r6, r2
 8009ba8:	d1e6      	bne.n	8009b78 <mktime+0x84>
 8009baa:	4ba2      	ldr	r3, [pc, #648]	@ (8009e34 <mktime+0x340>)
 8009bac:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8009bb0:	fbc6 4803 	smlal	r4, r8, r6, r3
 8009bb4:	f000 fa0a 	bl	8009fcc <__tz_lock>
 8009bb8:	f000 fa14 	bl	8009fe4 <_tzset_unlocked>
 8009bbc:	4b9e      	ldr	r3, [pc, #632]	@ (8009e38 <mktime+0x344>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8147 	beq.w	8009e54 <mktime+0x360>
 8009bc6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8009bca:	6978      	ldr	r0, [r7, #20]
 8009bcc:	4653      	mov	r3, sl
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	bfa8      	it	ge
 8009bd2:	2301      	movge	r3, #1
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009bda:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8009bde:	4283      	cmp	r3, r0
 8009be0:	f040 80bd 	bne.w	8009d5e <mktime+0x26a>
 8009be4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8009be8:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8009bec:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8009bf0:	1a13      	subs	r3, r2, r0
 8009bf2:	9303      	str	r3, [sp, #12]
 8009bf4:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8009bf8:	9302      	str	r3, [sp, #8]
 8009bfa:	9a02      	ldr	r2, [sp, #8]
 8009bfc:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8009c00:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8009c04:	ebb2 0e03 	subs.w	lr, r2, r3
 8009c08:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8009c0c:	4574      	cmp	r4, lr
 8009c0e:	eb78 0201 	sbcs.w	r2, r8, r1
 8009c12:	f280 80c7 	bge.w	8009da4 <mktime+0x2b0>
 8009c16:	f8d9 2000 	ldr.w	r2, [r9]
 8009c1a:	2a00      	cmp	r2, #0
 8009c1c:	f000 80d0 	beq.w	8009dc0 <mktime+0x2cc>
 8009c20:	9a03      	ldr	r2, [sp, #12]
 8009c22:	4294      	cmp	r4, r2
 8009c24:	eb78 020b 	sbcs.w	r2, r8, fp
 8009c28:	f2c0 8111 	blt.w	8009e4e <mktime+0x35a>
 8009c2c:	4574      	cmp	r4, lr
 8009c2e:	eb78 0101 	sbcs.w	r1, r8, r1
 8009c32:	bfb4      	ite	lt
 8009c34:	f04f 0b01 	movlt.w	fp, #1
 8009c38:	f04f 0b00 	movge.w	fp, #0
 8009c3c:	f1ba 0f00 	cmp.w	sl, #0
 8009c40:	f2c0 8094 	blt.w	8009d6c <mktime+0x278>
 8009c44:	9a01      	ldr	r2, [sp, #4]
 8009c46:	ea82 0a0b 	eor.w	sl, r2, fp
 8009c4a:	f1ba 0f01 	cmp.w	sl, #1
 8009c4e:	f040 808d 	bne.w	8009d6c <mktime+0x278>
 8009c52:	f1bb 0f00 	cmp.w	fp, #0
 8009c56:	f000 80c2 	beq.w	8009dde <mktime+0x2ea>
 8009c5a:	1a1b      	subs	r3, r3, r0
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	441a      	add	r2, r3
 8009c60:	191c      	adds	r4, r3, r4
 8009c62:	603a      	str	r2, [r7, #0]
 8009c64:	4638      	mov	r0, r7
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	9201      	str	r2, [sp, #4]
 8009c6a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009c6e:	f7ff fe6f 	bl	8009950 <validate_structure>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	9a01      	ldr	r2, [sp, #4]
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	d078      	beq.n	8009d6c <mktime+0x278>
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	f300 80b1 	bgt.w	8009de2 <mktime+0x2ee>
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	bfa8      	it	ge
 8009c86:	469a      	movge	sl, r3
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	eb1a 0303 	adds.w	r3, sl, r3
 8009c8e:	4456      	add	r6, sl
 8009c90:	f140 80b0 	bpl.w	8009df4 <mktime+0x300>
 8009c94:	1e6b      	subs	r3, r5, #1
 8009c96:	0799      	lsls	r1, r3, #30
 8009c98:	f040 80a6 	bne.w	8009de8 <mktime+0x2f4>
 8009c9c:	2264      	movs	r2, #100	@ 0x64
 8009c9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8009ca2:	fb02 3311 	mls	r3, r2, r1, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f040 80a1 	bne.w	8009dee <mktime+0x2fa>
 8009cac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009cb0:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8009cb4:	fb95 f2f3 	sdiv	r2, r5, r3
 8009cb8:	fb03 5512 	mls	r5, r3, r2, r5
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	f240 136d 	movw	r3, #365	@ 0x16d
 8009cc2:	bf18      	it	ne
 8009cc4:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	e04f      	b.n	8009d6c <mktime+0x278>
 8009ccc:	f240 126d 	movw	r2, #365	@ 0x16d
 8009cd0:	e767      	b.n	8009ba2 <mktime+0xae>
 8009cd2:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009cd6:	e764      	b.n	8009ba2 <mktime+0xae>
 8009cd8:	f43f af67 	beq.w	8009baa <mktime+0xb6>
 8009cdc:	2345      	movs	r3, #69	@ 0x45
 8009cde:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8009ce2:	2164      	movs	r1, #100	@ 0x64
 8009ce4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009ce8:	e012      	b.n	8009d10 <mktime+0x21c>
 8009cea:	bb62      	cbnz	r2, 8009d46 <mktime+0x252>
 8009cec:	fb93 f2f1 	sdiv	r2, r3, r1
 8009cf0:	fb01 3212 	mls	r2, r1, r2, r3
 8009cf4:	bb52      	cbnz	r2, 8009d4c <mktime+0x258>
 8009cf6:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009cfa:	fb92 fef0 	sdiv	lr, r2, r0
 8009cfe:	fb00 221e 	mls	r2, r0, lr, r2
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	bf0c      	ite	eq
 8009d06:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009d0a:	4662      	movne	r2, ip
 8009d0c:	1ab6      	subs	r6, r6, r2
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	f003 0203 	and.w	r2, r3, #3
 8009d16:	dce8      	bgt.n	8009cea <mktime+0x1f6>
 8009d18:	b9da      	cbnz	r2, 8009d52 <mktime+0x25e>
 8009d1a:	2264      	movs	r2, #100	@ 0x64
 8009d1c:	fb95 f3f2 	sdiv	r3, r5, r2
 8009d20:	fb02 5313 	mls	r3, r2, r3, r5
 8009d24:	b9c3      	cbnz	r3, 8009d58 <mktime+0x264>
 8009d26:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009d2a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009d2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8009d32:	fb02 3311 	mls	r3, r2, r1, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f240 136d 	movw	r3, #365	@ 0x16d
 8009d3c:	bf08      	it	eq
 8009d3e:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8009d42:	1af6      	subs	r6, r6, r3
 8009d44:	e731      	b.n	8009baa <mktime+0xb6>
 8009d46:	f240 126d 	movw	r2, #365	@ 0x16d
 8009d4a:	e7df      	b.n	8009d0c <mktime+0x218>
 8009d4c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009d50:	e7dc      	b.n	8009d0c <mktime+0x218>
 8009d52:	f240 136d 	movw	r3, #365	@ 0x16d
 8009d56:	e7f4      	b.n	8009d42 <mktime+0x24e>
 8009d58:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8009d5c:	e7f1      	b.n	8009d42 <mktime+0x24e>
 8009d5e:	f000 f881 	bl	8009e64 <__tzcalc_limits>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	f47f af3e 	bne.w	8009be4 <mktime+0xf0>
 8009d68:	f8dd b004 	ldr.w	fp, [sp, #4]
 8009d6c:	f1bb 0f01 	cmp.w	fp, #1
 8009d70:	d172      	bne.n	8009e58 <mktime+0x364>
 8009d72:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8009d76:	191c      	adds	r4, r3, r4
 8009d78:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009d7c:	f04f 0b01 	mov.w	fp, #1
 8009d80:	f000 f92a 	bl	8009fd8 <__tz_unlock>
 8009d84:	3604      	adds	r6, #4
 8009d86:	2307      	movs	r3, #7
 8009d88:	fb96 f3f3 	sdiv	r3, r6, r3
 8009d8c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009d90:	1af6      	subs	r6, r6, r3
 8009d92:	d456      	bmi.n	8009e42 <mktime+0x34e>
 8009d94:	f8c7 b020 	str.w	fp, [r7, #32]
 8009d98:	61be      	str	r6, [r7, #24]
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	4641      	mov	r1, r8
 8009d9e:	b005      	add	sp, #20
 8009da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da4:	9a02      	ldr	r2, [sp, #8]
 8009da6:	1a12      	subs	r2, r2, r0
 8009da8:	9202      	str	r2, [sp, #8]
 8009daa:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8009dae:	eb6c 0c02 	sbc.w	ip, ip, r2
 8009db2:	9a02      	ldr	r2, [sp, #8]
 8009db4:	4294      	cmp	r4, r2
 8009db6:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8009dba:	f6bf af2c 	bge.w	8009c16 <mktime+0x122>
 8009dbe:	e7d3      	b.n	8009d68 <mktime+0x274>
 8009dc0:	9a03      	ldr	r2, [sp, #12]
 8009dc2:	4294      	cmp	r4, r2
 8009dc4:	eb78 020b 	sbcs.w	r2, r8, fp
 8009dc8:	f6ff af30 	blt.w	8009c2c <mktime+0x138>
 8009dcc:	f1ba 0f00 	cmp.w	sl, #0
 8009dd0:	dbcf      	blt.n	8009d72 <mktime+0x27e>
 8009dd2:	f04f 0b01 	mov.w	fp, #1
 8009dd6:	e735      	b.n	8009c44 <mktime+0x150>
 8009dd8:	f04f 0b00 	mov.w	fp, #0
 8009ddc:	e732      	b.n	8009c44 <mktime+0x150>
 8009dde:	1ac3      	subs	r3, r0, r3
 8009de0:	e73c      	b.n	8009c5c <mktime+0x168>
 8009de2:	f04f 3aff 	mov.w	sl, #4294967295
 8009de6:	e74f      	b.n	8009c88 <mktime+0x194>
 8009de8:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8009dec:	e76c      	b.n	8009cc8 <mktime+0x1d4>
 8009dee:	f240 136d 	movw	r3, #365	@ 0x16d
 8009df2:	e769      	b.n	8009cc8 <mktime+0x1d4>
 8009df4:	07aa      	lsls	r2, r5, #30
 8009df6:	d117      	bne.n	8009e28 <mktime+0x334>
 8009df8:	2164      	movs	r1, #100	@ 0x64
 8009dfa:	fb95 f2f1 	sdiv	r2, r5, r1
 8009dfe:	fb01 5212 	mls	r2, r1, r2, r5
 8009e02:	b9da      	cbnz	r2, 8009e3c <mktime+0x348>
 8009e04:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009e08:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8009e0c:	fb95 f1f2 	sdiv	r1, r5, r2
 8009e10:	fb02 5511 	mls	r5, r2, r1, r5
 8009e14:	2d00      	cmp	r5, #0
 8009e16:	f240 126d 	movw	r2, #365	@ 0x16d
 8009e1a:	bf08      	it	eq
 8009e1c:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009e20:	4293      	cmp	r3, r2
 8009e22:	bfa8      	it	ge
 8009e24:	1a9b      	subge	r3, r3, r2
 8009e26:	e74f      	b.n	8009cc8 <mktime+0x1d4>
 8009e28:	f240 126d 	movw	r2, #365	@ 0x16d
 8009e2c:	e7f8      	b.n	8009e20 <mktime+0x32c>
 8009e2e:	bf00      	nop
 8009e30:	0800d064 	.word	0x0800d064
 8009e34:	00015180 	.word	0x00015180
 8009e38:	20002800 	.word	0x20002800
 8009e3c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009e40:	e7ee      	b.n	8009e20 <mktime+0x32c>
 8009e42:	3607      	adds	r6, #7
 8009e44:	e7a6      	b.n	8009d94 <mktime+0x2a0>
 8009e46:	f04f 34ff 	mov.w	r4, #4294967295
 8009e4a:	46a0      	mov	r8, r4
 8009e4c:	e7a5      	b.n	8009d9a <mktime+0x2a6>
 8009e4e:	f1ba 0f00 	cmp.w	sl, #0
 8009e52:	dac1      	bge.n	8009dd8 <mktime+0x2e4>
 8009e54:	f04f 0b00 	mov.w	fp, #0
 8009e58:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8009e5c:	191c      	adds	r4, r3, r4
 8009e5e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009e62:	e78d      	b.n	8009d80 <mktime+0x28c>

08009e64 <__tzcalc_limits>:
 8009e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e68:	4604      	mov	r4, r0
 8009e6a:	f001 fb8f 	bl	800b58c <__gettzinfo>
 8009e6e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8009e72:	429c      	cmp	r4, r3
 8009e74:	f340 80a3 	ble.w	8009fbe <__tzcalc_limits+0x15a>
 8009e78:	f46f 65f6 	mvn.w	r5, #1968	@ 0x7b0
 8009e7c:	1966      	adds	r6, r4, r5
 8009e7e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8009e82:	f240 126d 	movw	r2, #365	@ 0x16d
 8009e86:	10b6      	asrs	r6, r6, #2
 8009e88:	fb02 6603 	mla	r6, r2, r3, r6
 8009e8c:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 8009e90:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8009e94:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8009e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e9c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009ea0:	441e      	add	r6, r3
 8009ea2:	19e3      	adds	r3, r4, r7
 8009ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ea8:	4a46      	ldr	r2, [pc, #280]	@ (8009fc4 <__tzcalc_limits+0x160>)
 8009eaa:	6044      	str	r4, [r0, #4]
 8009eac:	441e      	add	r6, r3
 8009eae:	4605      	mov	r5, r0
 8009eb0:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 8009eb4:	7a2b      	ldrb	r3, [r5, #8]
 8009eb6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8009eba:	2b4a      	cmp	r3, #74	@ 0x4a
 8009ebc:	d138      	bne.n	8009f30 <__tzcalc_limits+0xcc>
 8009ebe:	07a1      	lsls	r1, r4, #30
 8009ec0:	eb06 030c 	add.w	r3, r6, ip
 8009ec4:	d106      	bne.n	8009ed4 <__tzcalc_limits+0x70>
 8009ec6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8009eca:	fb94 f1fe 	sdiv	r1, r4, lr
 8009ece:	fb0e 4111 	mls	r1, lr, r1, r4
 8009ed2:	b931      	cbnz	r1, 8009ee2 <__tzcalc_limits+0x7e>
 8009ed4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8009ed8:	fb94 f1fe 	sdiv	r1, r4, lr
 8009edc:	fb0e 4111 	mls	r1, lr, r1, r4
 8009ee0:	bb19      	cbnz	r1, 8009f2a <__tzcalc_limits+0xc6>
 8009ee2:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 8009ee6:	bfd4      	ite	le
 8009ee8:	f04f 0c00 	movle.w	ip, #0
 8009eec:	f04f 0c01 	movgt.w	ip, #1
 8009ef0:	4463      	add	r3, ip
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	69a9      	ldr	r1, [r5, #24]
 8009ef6:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8009efa:	fbc3 1c02 	smlal	r1, ip, r3, r2
 8009efe:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009f00:	18c9      	adds	r1, r1, r3
 8009f02:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 8009f06:	e9c5 1308 	strd	r1, r3, [r5, #32]
 8009f0a:	3528      	adds	r5, #40	@ 0x28
 8009f0c:	42af      	cmp	r7, r5
 8009f0e:	d1d1      	bne.n	8009eb4 <__tzcalc_limits+0x50>
 8009f10:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8009f14:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8009f18:	428c      	cmp	r4, r1
 8009f1a:	4193      	sbcs	r3, r2
 8009f1c:	bfb4      	ite	lt
 8009f1e:	2301      	movlt	r3, #1
 8009f20:	2300      	movge	r3, #0
 8009f22:	6003      	str	r3, [r0, #0]
 8009f24:	2001      	movs	r0, #1
 8009f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	f04f 0c00 	mov.w	ip, #0
 8009f2e:	e7df      	b.n	8009ef0 <__tzcalc_limits+0x8c>
 8009f30:	2b44      	cmp	r3, #68	@ 0x44
 8009f32:	d102      	bne.n	8009f3a <__tzcalc_limits+0xd6>
 8009f34:	eb06 030c 	add.w	r3, r6, ip
 8009f38:	e7dc      	b.n	8009ef4 <__tzcalc_limits+0x90>
 8009f3a:	07a3      	lsls	r3, r4, #30
 8009f3c:	d105      	bne.n	8009f4a <__tzcalc_limits+0xe6>
 8009f3e:	2164      	movs	r1, #100	@ 0x64
 8009f40:	fb94 f3f1 	sdiv	r3, r4, r1
 8009f44:	fb01 4313 	mls	r3, r1, r3, r4
 8009f48:	bb93      	cbnz	r3, 8009fb0 <__tzcalc_limits+0x14c>
 8009f4a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009f4e:	fb94 f3f1 	sdiv	r3, r4, r1
 8009f52:	fb01 4313 	mls	r3, r1, r3, r4
 8009f56:	fab3 f383 	clz	r3, r3
 8009f5a:	095b      	lsrs	r3, r3, #5
 8009f5c:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8009fc8 <__tzcalc_limits+0x164>
 8009f60:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8009f64:	425b      	negs	r3, r3
 8009f66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	f04f 0800 	mov.w	r8, #0
 8009f70:	4473      	add	r3, lr
 8009f72:	f108 0801 	add.w	r8, r8, #1
 8009f76:	45c1      	cmp	r9, r8
 8009f78:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 8009f7c:	dc1a      	bgt.n	8009fb4 <__tzcalc_limits+0x150>
 8009f7e:	f101 0804 	add.w	r8, r1, #4
 8009f82:	2307      	movs	r3, #7
 8009f84:	fb98 f3f3 	sdiv	r3, r8, r3
 8009f88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009f8c:	eba8 0303 	sub.w	r3, r8, r3
 8009f90:	ebbc 0c03 	subs.w	ip, ip, r3
 8009f94:	692b      	ldr	r3, [r5, #16]
 8009f96:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f9a:	bf48      	it	mi
 8009f9c:	f10c 0c07 	addmi.w	ip, ip, #7
 8009fa0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009fa4:	449c      	add	ip, r3
 8009fa6:	45f4      	cmp	ip, lr
 8009fa8:	da06      	bge.n	8009fb8 <__tzcalc_limits+0x154>
 8009faa:	eb01 030c 	add.w	r3, r1, ip
 8009fae:	e7a1      	b.n	8009ef4 <__tzcalc_limits+0x90>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7d3      	b.n	8009f5c <__tzcalc_limits+0xf8>
 8009fb4:	4471      	add	r1, lr
 8009fb6:	e7dc      	b.n	8009f72 <__tzcalc_limits+0x10e>
 8009fb8:	f1ac 0c07 	sub.w	ip, ip, #7
 8009fbc:	e7f3      	b.n	8009fa6 <__tzcalc_limits+0x142>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	e7b1      	b.n	8009f26 <__tzcalc_limits+0xc2>
 8009fc2:	bf00      	nop
 8009fc4:	00015180 	.word	0x00015180
 8009fc8:	0800d260 	.word	0x0800d260

08009fcc <__tz_lock>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	@ (8009fd4 <__tz_lock+0x8>)
 8009fce:	f000 ba5f 	b.w	800a490 <__retarget_lock_acquire>
 8009fd2:	bf00      	nop
 8009fd4:	20002808 	.word	0x20002808

08009fd8 <__tz_unlock>:
 8009fd8:	4801      	ldr	r0, [pc, #4]	@ (8009fe0 <__tz_unlock+0x8>)
 8009fda:	f000 ba5b 	b.w	800a494 <__retarget_lock_release>
 8009fde:	bf00      	nop
 8009fe0:	20002808 	.word	0x20002808

08009fe4 <_tzset_unlocked>:
 8009fe4:	4b01      	ldr	r3, [pc, #4]	@ (8009fec <_tzset_unlocked+0x8>)
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	f000 b802 	b.w	8009ff0 <_tzset_unlocked_r>
 8009fec:	200001cc 	.word	0x200001cc

08009ff0 <_tzset_unlocked_r>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	b08d      	sub	sp, #52	@ 0x34
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	f001 fac8 	bl	800b58c <__gettzinfo>
 8009ffc:	49bc      	ldr	r1, [pc, #752]	@ (800a2f0 <_tzset_unlocked_r+0x300>)
 8009ffe:	4fbd      	ldr	r7, [pc, #756]	@ (800a2f4 <_tzset_unlocked_r+0x304>)
 800a000:	4604      	mov	r4, r0
 800a002:	4628      	mov	r0, r5
 800a004:	f000 fade 	bl	800a5c4 <_getenv_r>
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	4606      	mov	r6, r0
 800a00c:	bb10      	cbnz	r0, 800a054 <_tzset_unlocked_r+0x64>
 800a00e:	4bba      	ldr	r3, [pc, #744]	@ (800a2f8 <_tzset_unlocked_r+0x308>)
 800a010:	4aba      	ldr	r2, [pc, #744]	@ (800a2fc <_tzset_unlocked_r+0x30c>)
 800a012:	6018      	str	r0, [r3, #0]
 800a014:	4bba      	ldr	r3, [pc, #744]	@ (800a300 <_tzset_unlocked_r+0x310>)
 800a016:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a018:	6018      	str	r0, [r3, #0]
 800a01a:	4bba      	ldr	r3, [pc, #744]	@ (800a304 <_tzset_unlocked_r+0x314>)
 800a01c:	6526      	str	r6, [r4, #80]	@ 0x50
 800a01e:	e9c3 2200 	strd	r2, r2, [r3]
 800a022:	204a      	movs	r0, #74	@ 0x4a
 800a024:	2200      	movs	r2, #0
 800a026:	2300      	movs	r3, #0
 800a028:	7220      	strb	r0, [r4, #8]
 800a02a:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
 800a02e:	e9c4 6603 	strd	r6, r6, [r4, #12]
 800a032:	e9c4 6605 	strd	r6, r6, [r4, #20]
 800a036:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a03a:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
 800a03e:	e9c4 660f 	strd	r6, r6, [r4, #60]	@ 0x3c
 800a042:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a046:	4608      	mov	r0, r1
 800a048:	f000 fac4 	bl	800a5d4 <free>
 800a04c:	603e      	str	r6, [r7, #0]
 800a04e:	b00d      	add	sp, #52	@ 0x34
 800a050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a054:	2900      	cmp	r1, #0
 800a056:	f040 808f 	bne.w	800a178 <_tzset_unlocked_r+0x188>
 800a05a:	6838      	ldr	r0, [r7, #0]
 800a05c:	f000 faba 	bl	800a5d4 <free>
 800a060:	4630      	mov	r0, r6
 800a062:	f7f6 f89f 	bl	80001a4 <strlen>
 800a066:	1c41      	adds	r1, r0, #1
 800a068:	4628      	mov	r0, r5
 800a06a:	f000 fadd 	bl	800a628 <_malloc_r>
 800a06e:	6038      	str	r0, [r7, #0]
 800a070:	2800      	cmp	r0, #0
 800a072:	f040 8087 	bne.w	800a184 <_tzset_unlocked_r+0x194>
 800a076:	4aa2      	ldr	r2, [pc, #648]	@ (800a300 <_tzset_unlocked_r+0x310>)
 800a078:	4fa2      	ldr	r7, [pc, #648]	@ (800a304 <_tzset_unlocked_r+0x314>)
 800a07a:	f8df a27c 	ldr.w	sl, [pc, #636]	@ 800a2f8 <_tzset_unlocked_r+0x308>
 800a07e:	2300      	movs	r3, #0
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	4aa1      	ldr	r2, [pc, #644]	@ (800a308 <_tzset_unlocked_r+0x318>)
 800a084:	f8ca 3000 	str.w	r3, [sl]
 800a088:	2000      	movs	r0, #0
 800a08a:	2100      	movs	r1, #0
 800a08c:	e9c7 2200 	strd	r2, r2, [r7]
 800a090:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800a094:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800a098:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800a09c:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800a0a0:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800a0a4:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800a0a8:	224a      	movs	r2, #74	@ 0x4a
 800a0aa:	7222      	strb	r2, [r4, #8]
 800a0ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0ae:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800a0b2:	6523      	str	r3, [r4, #80]	@ 0x50
 800a0b4:	7833      	ldrb	r3, [r6, #0]
 800a0b6:	2b3a      	cmp	r3, #58	@ 0x3a
 800a0b8:	bf08      	it	eq
 800a0ba:	3601      	addeq	r6, #1
 800a0bc:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 800a0c0:	7833      	ldrb	r3, [r6, #0]
 800a0c2:	2b3c      	cmp	r3, #60	@ 0x3c
 800a0c4:	d162      	bne.n	800a18c <_tzset_unlocked_r+0x19c>
 800a0c6:	1c75      	adds	r5, r6, #1
 800a0c8:	4a90      	ldr	r2, [pc, #576]	@ (800a30c <_tzset_unlocked_r+0x31c>)
 800a0ca:	4991      	ldr	r1, [pc, #580]	@ (800a310 <_tzset_unlocked_r+0x320>)
 800a0cc:	465b      	mov	r3, fp
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f7ff fc08 	bl	80098e4 <siscanf>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	ddba      	ble.n	800a04e <_tzset_unlocked_r+0x5e>
 800a0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0da:	1eda      	subs	r2, r3, #3
 800a0dc:	2a07      	cmp	r2, #7
 800a0de:	d8b6      	bhi.n	800a04e <_tzset_unlocked_r+0x5e>
 800a0e0:	5cea      	ldrb	r2, [r5, r3]
 800a0e2:	2a3e      	cmp	r2, #62	@ 0x3e
 800a0e4:	d1b3      	bne.n	800a04e <_tzset_unlocked_r+0x5e>
 800a0e6:	3602      	adds	r6, #2
 800a0e8:	18f5      	adds	r5, r6, r3
 800a0ea:	5cf3      	ldrb	r3, [r6, r3]
 800a0ec:	2b2d      	cmp	r3, #45	@ 0x2d
 800a0ee:	d15b      	bne.n	800a1a8 <_tzset_unlocked_r+0x1b8>
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	f04f 38ff 	mov.w	r8, #4294967295
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a0fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a100:	f10d 0920 	add.w	r9, sp, #32
 800a104:	f10d 031e 	add.w	r3, sp, #30
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	e9cd b901 	strd	fp, r9, [sp, #4]
 800a10e:	4981      	ldr	r1, [pc, #516]	@ (800a314 <_tzset_unlocked_r+0x324>)
 800a110:	f8cd b00c 	str.w	fp, [sp, #12]
 800a114:	465b      	mov	r3, fp
 800a116:	aa07      	add	r2, sp, #28
 800a118:	4628      	mov	r0, r5
 800a11a:	f7ff fbe3 	bl	80098e4 <siscanf>
 800a11e:	2800      	cmp	r0, #0
 800a120:	dd95      	ble.n	800a04e <_tzset_unlocked_r+0x5e>
 800a122:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a126:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800a12a:	223c      	movs	r2, #60	@ 0x3c
 800a12c:	fb02 6603 	mla	r6, r2, r3, r6
 800a130:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a134:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800a138:	fb02 6603 	mla	r6, r2, r3, r6
 800a13c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a13e:	fb08 f606 	mul.w	r6, r8, r6
 800a142:	eb05 0803 	add.w	r8, r5, r3
 800a146:	5ceb      	ldrb	r3, [r5, r3]
 800a148:	2b3c      	cmp	r3, #60	@ 0x3c
 800a14a:	f040 80ed 	bne.w	800a328 <_tzset_unlocked_r+0x338>
 800a14e:	f108 0501 	add.w	r5, r8, #1
 800a152:	4a71      	ldr	r2, [pc, #452]	@ (800a318 <_tzset_unlocked_r+0x328>)
 800a154:	496e      	ldr	r1, [pc, #440]	@ (800a310 <_tzset_unlocked_r+0x320>)
 800a156:	465b      	mov	r3, fp
 800a158:	4628      	mov	r0, r5
 800a15a:	f7ff fbc3 	bl	80098e4 <siscanf>
 800a15e:	2800      	cmp	r0, #0
 800a160:	dc28      	bgt.n	800a1b4 <_tzset_unlocked_r+0x1c4>
 800a162:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a166:	2b3e      	cmp	r3, #62	@ 0x3e
 800a168:	d124      	bne.n	800a1b4 <_tzset_unlocked_r+0x1c4>
 800a16a:	4b68      	ldr	r3, [pc, #416]	@ (800a30c <_tzset_unlocked_r+0x31c>)
 800a16c:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a16e:	e9c7 3300 	strd	r3, r3, [r7]
 800a172:	f8ca 6000 	str.w	r6, [sl]
 800a176:	e76a      	b.n	800a04e <_tzset_unlocked_r+0x5e>
 800a178:	f7f6 f80a 	bl	8000190 <strcmp>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f47f af6c 	bne.w	800a05a <_tzset_unlocked_r+0x6a>
 800a182:	e764      	b.n	800a04e <_tzset_unlocked_r+0x5e>
 800a184:	4631      	mov	r1, r6
 800a186:	f000 f987 	bl	800a498 <strcpy>
 800a18a:	e774      	b.n	800a076 <_tzset_unlocked_r+0x86>
 800a18c:	4a5f      	ldr	r2, [pc, #380]	@ (800a30c <_tzset_unlocked_r+0x31c>)
 800a18e:	4963      	ldr	r1, [pc, #396]	@ (800a31c <_tzset_unlocked_r+0x32c>)
 800a190:	465b      	mov	r3, fp
 800a192:	4630      	mov	r0, r6
 800a194:	f7ff fba6 	bl	80098e4 <siscanf>
 800a198:	2800      	cmp	r0, #0
 800a19a:	f77f af58 	ble.w	800a04e <_tzset_unlocked_r+0x5e>
 800a19e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1a0:	1eda      	subs	r2, r3, #3
 800a1a2:	2a07      	cmp	r2, #7
 800a1a4:	d9a0      	bls.n	800a0e8 <_tzset_unlocked_r+0xf8>
 800a1a6:	e752      	b.n	800a04e <_tzset_unlocked_r+0x5e>
 800a1a8:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1aa:	bf08      	it	eq
 800a1ac:	3501      	addeq	r5, #1
 800a1ae:	f04f 0801 	mov.w	r8, #1
 800a1b2:	e7a0      	b.n	800a0f6 <_tzset_unlocked_r+0x106>
 800a1b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1b6:	1eda      	subs	r2, r3, #3
 800a1b8:	2a07      	cmp	r2, #7
 800a1ba:	f63f af48 	bhi.w	800a04e <_tzset_unlocked_r+0x5e>
 800a1be:	5cea      	ldrb	r2, [r5, r3]
 800a1c0:	2a3e      	cmp	r2, #62	@ 0x3e
 800a1c2:	f47f af44 	bne.w	800a04e <_tzset_unlocked_r+0x5e>
 800a1c6:	f108 0802 	add.w	r8, r8, #2
 800a1ca:	eb08 0503 	add.w	r5, r8, r3
 800a1ce:	f818 3003 	ldrb.w	r3, [r8, r3]
 800a1d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1d4:	f040 80b7 	bne.w	800a346 <_tzset_unlocked_r+0x356>
 800a1d8:	3501      	adds	r5, #1
 800a1da:	f04f 38ff 	mov.w	r8, #4294967295
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a1e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a1e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a1ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ee:	f10d 031e 	add.w	r3, sp, #30
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	e9cd 9b02 	strd	r9, fp, [sp, #8]
 800a1f8:	4946      	ldr	r1, [pc, #280]	@ (800a314 <_tzset_unlocked_r+0x324>)
 800a1fa:	f8cd b004 	str.w	fp, [sp, #4]
 800a1fe:	465b      	mov	r3, fp
 800a200:	aa07      	add	r2, sp, #28
 800a202:	4628      	mov	r0, r5
 800a204:	f7ff fb6e 	bl	80098e4 <siscanf>
 800a208:	2800      	cmp	r0, #0
 800a20a:	f300 80a2 	bgt.w	800a352 <_tzset_unlocked_r+0x362>
 800a20e:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a216:	46a0      	mov	r8, r4
 800a218:	441d      	add	r5, r3
 800a21a:	f04f 0b00 	mov.w	fp, #0
 800a21e:	782b      	ldrb	r3, [r5, #0]
 800a220:	2b2c      	cmp	r3, #44	@ 0x2c
 800a222:	bf08      	it	eq
 800a224:	3501      	addeq	r5, #1
 800a226:	f895 9000 	ldrb.w	r9, [r5]
 800a22a:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800a22e:	f040 80a0 	bne.w	800a372 <_tzset_unlocked_r+0x382>
 800a232:	ab0a      	add	r3, sp, #40	@ 0x28
 800a234:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800a238:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a23c:	aa09      	add	r2, sp, #36	@ 0x24
 800a23e:	9200      	str	r2, [sp, #0]
 800a240:	4937      	ldr	r1, [pc, #220]	@ (800a320 <_tzset_unlocked_r+0x330>)
 800a242:	9303      	str	r3, [sp, #12]
 800a244:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800a248:	4628      	mov	r0, r5
 800a24a:	f7ff fb4b 	bl	80098e4 <siscanf>
 800a24e:	2803      	cmp	r0, #3
 800a250:	f47f aefd 	bne.w	800a04e <_tzset_unlocked_r+0x5e>
 800a254:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800a258:	1e4b      	subs	r3, r1, #1
 800a25a:	2b0b      	cmp	r3, #11
 800a25c:	f63f aef7 	bhi.w	800a04e <_tzset_unlocked_r+0x5e>
 800a260:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800a264:	1e53      	subs	r3, r2, #1
 800a266:	2b04      	cmp	r3, #4
 800a268:	f63f aef1 	bhi.w	800a04e <_tzset_unlocked_r+0x5e>
 800a26c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800a270:	2b06      	cmp	r3, #6
 800a272:	f63f aeec 	bhi.w	800a04e <_tzset_unlocked_r+0x5e>
 800a276:	e9c8 1203 	strd	r1, r2, [r8, #12]
 800a27a:	f888 9008 	strb.w	r9, [r8, #8]
 800a27e:	f8c8 3014 	str.w	r3, [r8, #20]
 800a282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a284:	eb05 0903 	add.w	r9, r5, r3
 800a288:	2500      	movs	r5, #0
 800a28a:	f04f 0302 	mov.w	r3, #2
 800a28e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a292:	f8ad 501e 	strh.w	r5, [sp, #30]
 800a296:	f8ad 5020 	strh.w	r5, [sp, #32]
 800a29a:	950a      	str	r5, [sp, #40]	@ 0x28
 800a29c:	f899 3000 	ldrb.w	r3, [r9]
 800a2a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800a2a2:	f040 8094 	bne.w	800a3ce <_tzset_unlocked_r+0x3de>
 800a2a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a2a8:	aa08      	add	r2, sp, #32
 800a2aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a2ae:	f10d 021e 	add.w	r2, sp, #30
 800a2b2:	9200      	str	r2, [sp, #0]
 800a2b4:	491b      	ldr	r1, [pc, #108]	@ (800a324 <_tzset_unlocked_r+0x334>)
 800a2b6:	9303      	str	r3, [sp, #12]
 800a2b8:	aa07      	add	r2, sp, #28
 800a2ba:	4648      	mov	r0, r9
 800a2bc:	f7ff fb12 	bl	80098e4 <siscanf>
 800a2c0:	42a8      	cmp	r0, r5
 800a2c2:	f300 8084 	bgt.w	800a3ce <_tzset_unlocked_r+0x3de>
 800a2c6:	214a      	movs	r1, #74	@ 0x4a
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800a2d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a2d4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a2d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800a2dc:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800a2e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a2e4:	7221      	strb	r1, [r4, #8]
 800a2e6:	62a5      	str	r5, [r4, #40]	@ 0x28
 800a2e8:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a2ec:	6525      	str	r5, [r4, #80]	@ 0x50
 800a2ee:	e6ae      	b.n	800a04e <_tzset_unlocked_r+0x5e>
 800a2f0:	0800d0c4 	.word	0x0800d0c4
 800a2f4:	200027e0 	.word	0x200027e0
 800a2f8:	200027fc 	.word	0x200027fc
 800a2fc:	0800d0c7 	.word	0x0800d0c7
 800a300:	20002800 	.word	0x20002800
 800a304:	200001c4 	.word	0x200001c4
 800a308:	0800d117 	.word	0x0800d117
 800a30c:	200027f0 	.word	0x200027f0
 800a310:	0800d0cb 	.word	0x0800d0cb
 800a314:	0800d100 	.word	0x0800d100
 800a318:	200027e4 	.word	0x200027e4
 800a31c:	0800d0de 	.word	0x0800d0de
 800a320:	0800d0ec 	.word	0x0800d0ec
 800a324:	0800d0ff 	.word	0x0800d0ff
 800a328:	4a40      	ldr	r2, [pc, #256]	@ (800a42c <_tzset_unlocked_r+0x43c>)
 800a32a:	4941      	ldr	r1, [pc, #260]	@ (800a430 <_tzset_unlocked_r+0x440>)
 800a32c:	465b      	mov	r3, fp
 800a32e:	4640      	mov	r0, r8
 800a330:	f7ff fad8 	bl	80098e4 <siscanf>
 800a334:	2800      	cmp	r0, #0
 800a336:	f77f af18 	ble.w	800a16a <_tzset_unlocked_r+0x17a>
 800a33a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a33c:	1eda      	subs	r2, r3, #3
 800a33e:	2a07      	cmp	r2, #7
 800a340:	f67f af43 	bls.w	800a1ca <_tzset_unlocked_r+0x1da>
 800a344:	e683      	b.n	800a04e <_tzset_unlocked_r+0x5e>
 800a346:	2b2b      	cmp	r3, #43	@ 0x2b
 800a348:	bf08      	it	eq
 800a34a:	3501      	addeq	r5, #1
 800a34c:	f04f 0801 	mov.w	r8, #1
 800a350:	e745      	b.n	800a1de <_tzset_unlocked_r+0x1ee>
 800a352:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a356:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a35a:	213c      	movs	r1, #60	@ 0x3c
 800a35c:	fb01 3302 	mla	r3, r1, r2, r3
 800a360:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a364:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a368:	fb01 3302 	mla	r3, r1, r2, r3
 800a36c:	fb08 f303 	mul.w	r3, r8, r3
 800a370:	e74f      	b.n	800a212 <_tzset_unlocked_r+0x222>
 800a372:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800a376:	bf06      	itte	eq
 800a378:	3501      	addeq	r5, #1
 800a37a:	464b      	moveq	r3, r9
 800a37c:	2344      	movne	r3, #68	@ 0x44
 800a37e:	220a      	movs	r2, #10
 800a380:	a90b      	add	r1, sp, #44	@ 0x2c
 800a382:	4628      	mov	r0, r5
 800a384:	9305      	str	r3, [sp, #20]
 800a386:	f000 fa4b 	bl	800a820 <strtoul>
 800a38a:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800a38e:	9b05      	ldr	r3, [sp, #20]
 800a390:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800a394:	45a9      	cmp	r9, r5
 800a396:	d114      	bne.n	800a3c2 <_tzset_unlocked_r+0x3d2>
 800a398:	234d      	movs	r3, #77	@ 0x4d
 800a39a:	f1bb 0f00 	cmp.w	fp, #0
 800a39e:	d107      	bne.n	800a3b0 <_tzset_unlocked_r+0x3c0>
 800a3a0:	7223      	strb	r3, [r4, #8]
 800a3a2:	2103      	movs	r1, #3
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800a3aa:	f8c4 b014 	str.w	fp, [r4, #20]
 800a3ae:	e76b      	b.n	800a288 <_tzset_unlocked_r+0x298>
 800a3b0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800a3b4:	220b      	movs	r2, #11
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800a3bc:	2300      	movs	r3, #0
 800a3be:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a3c0:	e762      	b.n	800a288 <_tzset_unlocked_r+0x298>
 800a3c2:	b280      	uxth	r0, r0
 800a3c4:	f888 3008 	strb.w	r3, [r8, #8]
 800a3c8:	f8c8 0014 	str.w	r0, [r8, #20]
 800a3cc:	e75c      	b.n	800a288 <_tzset_unlocked_r+0x298>
 800a3ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a3d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a3d6:	213c      	movs	r1, #60	@ 0x3c
 800a3d8:	fb01 3302 	mla	r3, r1, r2, r3
 800a3dc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a3e0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a3e4:	fb01 3302 	mla	r3, r1, r2, r3
 800a3e8:	f8c8 3018 	str.w	r3, [r8, #24]
 800a3ec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a3ee:	f10b 0301 	add.w	r3, fp, #1
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	444d      	add	r5, r9
 800a3f6:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 800a3fa:	f04f 0b01 	mov.w	fp, #1
 800a3fe:	f47f af0e 	bne.w	800a21e <_tzset_unlocked_r+0x22e>
 800a402:	9b04      	ldr	r3, [sp, #16]
 800a404:	6523      	str	r3, [r4, #80]	@ 0x50
 800a406:	4b0b      	ldr	r3, [pc, #44]	@ (800a434 <_tzset_unlocked_r+0x444>)
 800a408:	603b      	str	r3, [r7, #0]
 800a40a:	6860      	ldr	r0, [r4, #4]
 800a40c:	4b07      	ldr	r3, [pc, #28]	@ (800a42c <_tzset_unlocked_r+0x43c>)
 800a40e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a410:	607b      	str	r3, [r7, #4]
 800a412:	f7ff fd27 	bl	8009e64 <__tzcalc_limits>
 800a416:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a418:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a41a:	f8ca 2000 	str.w	r2, [sl]
 800a41e:	1a9b      	subs	r3, r3, r2
 800a420:	4a05      	ldr	r2, [pc, #20]	@ (800a438 <_tzset_unlocked_r+0x448>)
 800a422:	bf18      	it	ne
 800a424:	2301      	movne	r3, #1
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	e611      	b.n	800a04e <_tzset_unlocked_r+0x5e>
 800a42a:	bf00      	nop
 800a42c:	200027e4 	.word	0x200027e4
 800a430:	0800d0de 	.word	0x0800d0de
 800a434:	200027f0 	.word	0x200027f0
 800a438:	20002800 	.word	0x20002800

0800a43c <__errno>:
 800a43c:	4b01      	ldr	r3, [pc, #4]	@ (800a444 <__errno+0x8>)
 800a43e:	6818      	ldr	r0, [r3, #0]
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	200001cc 	.word	0x200001cc

0800a448 <__libc_init_array>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <__libc_init_array+0x38>)
 800a44c:	4d0d      	ldr	r5, [pc, #52]	@ (800a484 <__libc_init_array+0x3c>)
 800a44e:	1b5b      	subs	r3, r3, r5
 800a450:	109c      	asrs	r4, r3, #2
 800a452:	2600      	movs	r6, #0
 800a454:	42a6      	cmp	r6, r4
 800a456:	d109      	bne.n	800a46c <__libc_init_array+0x24>
 800a458:	f001 faf4 	bl	800ba44 <_init>
 800a45c:	4d0a      	ldr	r5, [pc, #40]	@ (800a488 <__libc_init_array+0x40>)
 800a45e:	4b0b      	ldr	r3, [pc, #44]	@ (800a48c <__libc_init_array+0x44>)
 800a460:	1b5b      	subs	r3, r3, r5
 800a462:	109c      	asrs	r4, r3, #2
 800a464:	2600      	movs	r6, #0
 800a466:	42a6      	cmp	r6, r4
 800a468:	d105      	bne.n	800a476 <__libc_init_array+0x2e>
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a470:	4798      	blx	r3
 800a472:	3601      	adds	r6, #1
 800a474:	e7ee      	b.n	800a454 <__libc_init_array+0xc>
 800a476:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47a:	4798      	blx	r3
 800a47c:	3601      	adds	r6, #1
 800a47e:	e7f2      	b.n	800a466 <__libc_init_array+0x1e>
 800a480:	0800d2d0 	.word	0x0800d2d0
 800a484:	0800d2d0 	.word	0x0800d2d0
 800a488:	0800d2d0 	.word	0x0800d2d0
 800a48c:	0800d2d4 	.word	0x0800d2d4

0800a490 <__retarget_lock_acquire>:
 800a490:	4770      	bx	lr

0800a492 <__retarget_lock_acquire_recursive>:
 800a492:	4770      	bx	lr

0800a494 <__retarget_lock_release>:
 800a494:	4770      	bx	lr

0800a496 <__retarget_lock_release_recursive>:
 800a496:	4770      	bx	lr

0800a498 <strcpy>:
 800a498:	4603      	mov	r3, r0
 800a49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a49e:	f803 2b01 	strb.w	r2, [r3], #1
 800a4a2:	2a00      	cmp	r2, #0
 800a4a4:	d1f9      	bne.n	800a49a <strcpy+0x2>
 800a4a6:	4770      	bx	lr

0800a4a8 <div>:
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	fb91 f4f2 	sdiv	r4, r1, r2
 800a4ae:	fb02 1114 	mls	r1, r2, r4, r1
 800a4b2:	6004      	str	r4, [r0, #0]
 800a4b4:	6041      	str	r1, [r0, #4]
 800a4b6:	bd10      	pop	{r4, pc}

0800a4b8 <_free_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d041      	beq.n	800a544 <_free_r+0x8c>
 800a4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c4:	1f0c      	subs	r4, r1, #4
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfb8      	it	lt
 800a4ca:	18e4      	addlt	r4, r4, r3
 800a4cc:	f000 f92c 	bl	800a728 <__malloc_lock>
 800a4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a548 <_free_r+0x90>)
 800a4d2:	6813      	ldr	r3, [r2, #0]
 800a4d4:	b933      	cbnz	r3, 800a4e4 <_free_r+0x2c>
 800a4d6:	6063      	str	r3, [r4, #4]
 800a4d8:	6014      	str	r4, [r2, #0]
 800a4da:	4628      	mov	r0, r5
 800a4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4e0:	f000 b928 	b.w	800a734 <__malloc_unlock>
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	d908      	bls.n	800a4fa <_free_r+0x42>
 800a4e8:	6820      	ldr	r0, [r4, #0]
 800a4ea:	1821      	adds	r1, r4, r0
 800a4ec:	428b      	cmp	r3, r1
 800a4ee:	bf01      	itttt	eq
 800a4f0:	6819      	ldreq	r1, [r3, #0]
 800a4f2:	685b      	ldreq	r3, [r3, #4]
 800a4f4:	1809      	addeq	r1, r1, r0
 800a4f6:	6021      	streq	r1, [r4, #0]
 800a4f8:	e7ed      	b.n	800a4d6 <_free_r+0x1e>
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	b10b      	cbz	r3, 800a504 <_free_r+0x4c>
 800a500:	42a3      	cmp	r3, r4
 800a502:	d9fa      	bls.n	800a4fa <_free_r+0x42>
 800a504:	6811      	ldr	r1, [r2, #0]
 800a506:	1850      	adds	r0, r2, r1
 800a508:	42a0      	cmp	r0, r4
 800a50a:	d10b      	bne.n	800a524 <_free_r+0x6c>
 800a50c:	6820      	ldr	r0, [r4, #0]
 800a50e:	4401      	add	r1, r0
 800a510:	1850      	adds	r0, r2, r1
 800a512:	4283      	cmp	r3, r0
 800a514:	6011      	str	r1, [r2, #0]
 800a516:	d1e0      	bne.n	800a4da <_free_r+0x22>
 800a518:	6818      	ldr	r0, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	6053      	str	r3, [r2, #4]
 800a51e:	4408      	add	r0, r1
 800a520:	6010      	str	r0, [r2, #0]
 800a522:	e7da      	b.n	800a4da <_free_r+0x22>
 800a524:	d902      	bls.n	800a52c <_free_r+0x74>
 800a526:	230c      	movs	r3, #12
 800a528:	602b      	str	r3, [r5, #0]
 800a52a:	e7d6      	b.n	800a4da <_free_r+0x22>
 800a52c:	6820      	ldr	r0, [r4, #0]
 800a52e:	1821      	adds	r1, r4, r0
 800a530:	428b      	cmp	r3, r1
 800a532:	bf04      	itt	eq
 800a534:	6819      	ldreq	r1, [r3, #0]
 800a536:	685b      	ldreq	r3, [r3, #4]
 800a538:	6063      	str	r3, [r4, #4]
 800a53a:	bf04      	itt	eq
 800a53c:	1809      	addeq	r1, r1, r0
 800a53e:	6021      	streq	r1, [r4, #0]
 800a540:	6054      	str	r4, [r2, #4]
 800a542:	e7ca      	b.n	800a4da <_free_r+0x22>
 800a544:	bd38      	pop	{r3, r4, r5, pc}
 800a546:	bf00      	nop
 800a548:	20002810 	.word	0x20002810

0800a54c <_findenv_r>:
 800a54c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800a5c0 <_findenv_r+0x74>
 800a554:	4606      	mov	r6, r0
 800a556:	4689      	mov	r9, r1
 800a558:	4617      	mov	r7, r2
 800a55a:	f001 f839 	bl	800b5d0 <__env_lock>
 800a55e:	f8da 4000 	ldr.w	r4, [sl]
 800a562:	b134      	cbz	r4, 800a572 <_findenv_r+0x26>
 800a564:	464b      	mov	r3, r9
 800a566:	4698      	mov	r8, r3
 800a568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a56c:	b13a      	cbz	r2, 800a57e <_findenv_r+0x32>
 800a56e:	2a3d      	cmp	r2, #61	@ 0x3d
 800a570:	d1f9      	bne.n	800a566 <_findenv_r+0x1a>
 800a572:	4630      	mov	r0, r6
 800a574:	f001 f832 	bl	800b5dc <__env_unlock>
 800a578:	2000      	movs	r0, #0
 800a57a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57e:	eba8 0809 	sub.w	r8, r8, r9
 800a582:	46a3      	mov	fp, r4
 800a584:	f854 0b04 	ldr.w	r0, [r4], #4
 800a588:	2800      	cmp	r0, #0
 800a58a:	d0f2      	beq.n	800a572 <_findenv_r+0x26>
 800a58c:	4642      	mov	r2, r8
 800a58e:	4649      	mov	r1, r9
 800a590:	f000 ffea 	bl	800b568 <strncmp>
 800a594:	2800      	cmp	r0, #0
 800a596:	d1f4      	bne.n	800a582 <_findenv_r+0x36>
 800a598:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a59c:	eb03 0508 	add.w	r5, r3, r8
 800a5a0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a5a4:	2b3d      	cmp	r3, #61	@ 0x3d
 800a5a6:	d1ec      	bne.n	800a582 <_findenv_r+0x36>
 800a5a8:	f8da 3000 	ldr.w	r3, [sl]
 800a5ac:	ebab 0303 	sub.w	r3, fp, r3
 800a5b0:	109b      	asrs	r3, r3, #2
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	603b      	str	r3, [r7, #0]
 800a5b6:	f001 f811 	bl	800b5dc <__env_unlock>
 800a5ba:	1c68      	adds	r0, r5, #1
 800a5bc:	e7dd      	b.n	800a57a <_findenv_r+0x2e>
 800a5be:	bf00      	nop
 800a5c0:	200000c0 	.word	0x200000c0

0800a5c4 <_getenv_r>:
 800a5c4:	b507      	push	{r0, r1, r2, lr}
 800a5c6:	aa01      	add	r2, sp, #4
 800a5c8:	f7ff ffc0 	bl	800a54c <_findenv_r>
 800a5cc:	b003      	add	sp, #12
 800a5ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a5d4 <free>:
 800a5d4:	4b02      	ldr	r3, [pc, #8]	@ (800a5e0 <free+0xc>)
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	f7ff bf6d 	b.w	800a4b8 <_free_r>
 800a5de:	bf00      	nop
 800a5e0:	200001cc 	.word	0x200001cc

0800a5e4 <sbrk_aligned>:
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a624 <sbrk_aligned+0x40>)
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	6831      	ldr	r1, [r6, #0]
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	b911      	cbnz	r1, 800a5f6 <sbrk_aligned+0x12>
 800a5f0:	f000 ffd0 	bl	800b594 <_sbrk_r>
 800a5f4:	6030      	str	r0, [r6, #0]
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f000 ffcb 	bl	800b594 <_sbrk_r>
 800a5fe:	1c43      	adds	r3, r0, #1
 800a600:	d103      	bne.n	800a60a <sbrk_aligned+0x26>
 800a602:	f04f 34ff 	mov.w	r4, #4294967295
 800a606:	4620      	mov	r0, r4
 800a608:	bd70      	pop	{r4, r5, r6, pc}
 800a60a:	1cc4      	adds	r4, r0, #3
 800a60c:	f024 0403 	bic.w	r4, r4, #3
 800a610:	42a0      	cmp	r0, r4
 800a612:	d0f8      	beq.n	800a606 <sbrk_aligned+0x22>
 800a614:	1a21      	subs	r1, r4, r0
 800a616:	4628      	mov	r0, r5
 800a618:	f000 ffbc 	bl	800b594 <_sbrk_r>
 800a61c:	3001      	adds	r0, #1
 800a61e:	d1f2      	bne.n	800a606 <sbrk_aligned+0x22>
 800a620:	e7ef      	b.n	800a602 <sbrk_aligned+0x1e>
 800a622:	bf00      	nop
 800a624:	2000280c 	.word	0x2000280c

0800a628 <_malloc_r>:
 800a628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a62c:	1ccd      	adds	r5, r1, #3
 800a62e:	f025 0503 	bic.w	r5, r5, #3
 800a632:	3508      	adds	r5, #8
 800a634:	2d0c      	cmp	r5, #12
 800a636:	bf38      	it	cc
 800a638:	250c      	movcc	r5, #12
 800a63a:	2d00      	cmp	r5, #0
 800a63c:	4606      	mov	r6, r0
 800a63e:	db01      	blt.n	800a644 <_malloc_r+0x1c>
 800a640:	42a9      	cmp	r1, r5
 800a642:	d904      	bls.n	800a64e <_malloc_r+0x26>
 800a644:	230c      	movs	r3, #12
 800a646:	6033      	str	r3, [r6, #0]
 800a648:	2000      	movs	r0, #0
 800a64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a724 <_malloc_r+0xfc>
 800a652:	f000 f869 	bl	800a728 <__malloc_lock>
 800a656:	f8d8 3000 	ldr.w	r3, [r8]
 800a65a:	461c      	mov	r4, r3
 800a65c:	bb44      	cbnz	r4, 800a6b0 <_malloc_r+0x88>
 800a65e:	4629      	mov	r1, r5
 800a660:	4630      	mov	r0, r6
 800a662:	f7ff ffbf 	bl	800a5e4 <sbrk_aligned>
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	4604      	mov	r4, r0
 800a66a:	d158      	bne.n	800a71e <_malloc_r+0xf6>
 800a66c:	f8d8 4000 	ldr.w	r4, [r8]
 800a670:	4627      	mov	r7, r4
 800a672:	2f00      	cmp	r7, #0
 800a674:	d143      	bne.n	800a6fe <_malloc_r+0xd6>
 800a676:	2c00      	cmp	r4, #0
 800a678:	d04b      	beq.n	800a712 <_malloc_r+0xea>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	4639      	mov	r1, r7
 800a67e:	4630      	mov	r0, r6
 800a680:	eb04 0903 	add.w	r9, r4, r3
 800a684:	f000 ff86 	bl	800b594 <_sbrk_r>
 800a688:	4581      	cmp	r9, r0
 800a68a:	d142      	bne.n	800a712 <_malloc_r+0xea>
 800a68c:	6821      	ldr	r1, [r4, #0]
 800a68e:	1a6d      	subs	r5, r5, r1
 800a690:	4629      	mov	r1, r5
 800a692:	4630      	mov	r0, r6
 800a694:	f7ff ffa6 	bl	800a5e4 <sbrk_aligned>
 800a698:	3001      	adds	r0, #1
 800a69a:	d03a      	beq.n	800a712 <_malloc_r+0xea>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	442b      	add	r3, r5
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	bb62      	cbnz	r2, 800a704 <_malloc_r+0xdc>
 800a6aa:	f8c8 7000 	str.w	r7, [r8]
 800a6ae:	e00f      	b.n	800a6d0 <_malloc_r+0xa8>
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	1b52      	subs	r2, r2, r5
 800a6b4:	d420      	bmi.n	800a6f8 <_malloc_r+0xd0>
 800a6b6:	2a0b      	cmp	r2, #11
 800a6b8:	d917      	bls.n	800a6ea <_malloc_r+0xc2>
 800a6ba:	1961      	adds	r1, r4, r5
 800a6bc:	42a3      	cmp	r3, r4
 800a6be:	6025      	str	r5, [r4, #0]
 800a6c0:	bf18      	it	ne
 800a6c2:	6059      	strne	r1, [r3, #4]
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	bf08      	it	eq
 800a6c8:	f8c8 1000 	streq.w	r1, [r8]
 800a6cc:	5162      	str	r2, [r4, r5]
 800a6ce:	604b      	str	r3, [r1, #4]
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f000 f82f 	bl	800a734 <__malloc_unlock>
 800a6d6:	f104 000b 	add.w	r0, r4, #11
 800a6da:	1d23      	adds	r3, r4, #4
 800a6dc:	f020 0007 	bic.w	r0, r0, #7
 800a6e0:	1ac2      	subs	r2, r0, r3
 800a6e2:	bf1c      	itt	ne
 800a6e4:	1a1b      	subne	r3, r3, r0
 800a6e6:	50a3      	strne	r3, [r4, r2]
 800a6e8:	e7af      	b.n	800a64a <_malloc_r+0x22>
 800a6ea:	6862      	ldr	r2, [r4, #4]
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	bf0c      	ite	eq
 800a6f0:	f8c8 2000 	streq.w	r2, [r8]
 800a6f4:	605a      	strne	r2, [r3, #4]
 800a6f6:	e7eb      	b.n	800a6d0 <_malloc_r+0xa8>
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	6864      	ldr	r4, [r4, #4]
 800a6fc:	e7ae      	b.n	800a65c <_malloc_r+0x34>
 800a6fe:	463c      	mov	r4, r7
 800a700:	687f      	ldr	r7, [r7, #4]
 800a702:	e7b6      	b.n	800a672 <_malloc_r+0x4a>
 800a704:	461a      	mov	r2, r3
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d1fb      	bne.n	800a704 <_malloc_r+0xdc>
 800a70c:	2300      	movs	r3, #0
 800a70e:	6053      	str	r3, [r2, #4]
 800a710:	e7de      	b.n	800a6d0 <_malloc_r+0xa8>
 800a712:	230c      	movs	r3, #12
 800a714:	6033      	str	r3, [r6, #0]
 800a716:	4630      	mov	r0, r6
 800a718:	f000 f80c 	bl	800a734 <__malloc_unlock>
 800a71c:	e794      	b.n	800a648 <_malloc_r+0x20>
 800a71e:	6005      	str	r5, [r0, #0]
 800a720:	e7d6      	b.n	800a6d0 <_malloc_r+0xa8>
 800a722:	bf00      	nop
 800a724:	20002810 	.word	0x20002810

0800a728 <__malloc_lock>:
 800a728:	4801      	ldr	r0, [pc, #4]	@ (800a730 <__malloc_lock+0x8>)
 800a72a:	f7ff beb2 	b.w	800a492 <__retarget_lock_acquire_recursive>
 800a72e:	bf00      	nop
 800a730:	2000280a 	.word	0x2000280a

0800a734 <__malloc_unlock>:
 800a734:	4801      	ldr	r0, [pc, #4]	@ (800a73c <__malloc_unlock+0x8>)
 800a736:	f7ff beae 	b.w	800a496 <__retarget_lock_release_recursive>
 800a73a:	bf00      	nop
 800a73c:	2000280a 	.word	0x2000280a

0800a740 <_strtoul_l.isra.0>:
 800a740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a744:	4e34      	ldr	r6, [pc, #208]	@ (800a818 <_strtoul_l.isra.0+0xd8>)
 800a746:	4686      	mov	lr, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	4628      	mov	r0, r5
 800a74c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a750:	5d37      	ldrb	r7, [r6, r4]
 800a752:	f017 0708 	ands.w	r7, r7, #8
 800a756:	d1f8      	bne.n	800a74a <_strtoul_l.isra.0+0xa>
 800a758:	2c2d      	cmp	r4, #45	@ 0x2d
 800a75a:	d110      	bne.n	800a77e <_strtoul_l.isra.0+0x3e>
 800a75c:	782c      	ldrb	r4, [r5, #0]
 800a75e:	2701      	movs	r7, #1
 800a760:	1c85      	adds	r5, r0, #2
 800a762:	f033 0010 	bics.w	r0, r3, #16
 800a766:	d115      	bne.n	800a794 <_strtoul_l.isra.0+0x54>
 800a768:	2c30      	cmp	r4, #48	@ 0x30
 800a76a:	d10d      	bne.n	800a788 <_strtoul_l.isra.0+0x48>
 800a76c:	7828      	ldrb	r0, [r5, #0]
 800a76e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a772:	2858      	cmp	r0, #88	@ 0x58
 800a774:	d108      	bne.n	800a788 <_strtoul_l.isra.0+0x48>
 800a776:	786c      	ldrb	r4, [r5, #1]
 800a778:	3502      	adds	r5, #2
 800a77a:	2310      	movs	r3, #16
 800a77c:	e00a      	b.n	800a794 <_strtoul_l.isra.0+0x54>
 800a77e:	2c2b      	cmp	r4, #43	@ 0x2b
 800a780:	bf04      	itt	eq
 800a782:	782c      	ldrbeq	r4, [r5, #0]
 800a784:	1c85      	addeq	r5, r0, #2
 800a786:	e7ec      	b.n	800a762 <_strtoul_l.isra.0+0x22>
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1f6      	bne.n	800a77a <_strtoul_l.isra.0+0x3a>
 800a78c:	2c30      	cmp	r4, #48	@ 0x30
 800a78e:	bf14      	ite	ne
 800a790:	230a      	movne	r3, #10
 800a792:	2308      	moveq	r3, #8
 800a794:	f04f 38ff 	mov.w	r8, #4294967295
 800a798:	2600      	movs	r6, #0
 800a79a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a79e:	fb03 f908 	mul.w	r9, r3, r8
 800a7a2:	ea6f 0909 	mvn.w	r9, r9
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a7ac:	f1bc 0f09 	cmp.w	ip, #9
 800a7b0:	d810      	bhi.n	800a7d4 <_strtoul_l.isra.0+0x94>
 800a7b2:	4664      	mov	r4, ip
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	dd1e      	ble.n	800a7f6 <_strtoul_l.isra.0+0xb6>
 800a7b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a7bc:	d007      	beq.n	800a7ce <_strtoul_l.isra.0+0x8e>
 800a7be:	4580      	cmp	r8, r0
 800a7c0:	d316      	bcc.n	800a7f0 <_strtoul_l.isra.0+0xb0>
 800a7c2:	d101      	bne.n	800a7c8 <_strtoul_l.isra.0+0x88>
 800a7c4:	45a1      	cmp	r9, r4
 800a7c6:	db13      	blt.n	800a7f0 <_strtoul_l.isra.0+0xb0>
 800a7c8:	fb00 4003 	mla	r0, r0, r3, r4
 800a7cc:	2601      	movs	r6, #1
 800a7ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d2:	e7e9      	b.n	800a7a8 <_strtoul_l.isra.0+0x68>
 800a7d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a7d8:	f1bc 0f19 	cmp.w	ip, #25
 800a7dc:	d801      	bhi.n	800a7e2 <_strtoul_l.isra.0+0xa2>
 800a7de:	3c37      	subs	r4, #55	@ 0x37
 800a7e0:	e7e8      	b.n	800a7b4 <_strtoul_l.isra.0+0x74>
 800a7e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a7e6:	f1bc 0f19 	cmp.w	ip, #25
 800a7ea:	d804      	bhi.n	800a7f6 <_strtoul_l.isra.0+0xb6>
 800a7ec:	3c57      	subs	r4, #87	@ 0x57
 800a7ee:	e7e1      	b.n	800a7b4 <_strtoul_l.isra.0+0x74>
 800a7f0:	f04f 36ff 	mov.w	r6, #4294967295
 800a7f4:	e7eb      	b.n	800a7ce <_strtoul_l.isra.0+0x8e>
 800a7f6:	1c73      	adds	r3, r6, #1
 800a7f8:	d106      	bne.n	800a808 <_strtoul_l.isra.0+0xc8>
 800a7fa:	2322      	movs	r3, #34	@ 0x22
 800a7fc:	f8ce 3000 	str.w	r3, [lr]
 800a800:	4630      	mov	r0, r6
 800a802:	b932      	cbnz	r2, 800a812 <_strtoul_l.isra.0+0xd2>
 800a804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a808:	b107      	cbz	r7, 800a80c <_strtoul_l.isra.0+0xcc>
 800a80a:	4240      	negs	r0, r0
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	d0f9      	beq.n	800a804 <_strtoul_l.isra.0+0xc4>
 800a810:	b106      	cbz	r6, 800a814 <_strtoul_l.isra.0+0xd4>
 800a812:	1e69      	subs	r1, r5, #1
 800a814:	6011      	str	r1, [r2, #0]
 800a816:	e7f5      	b.n	800a804 <_strtoul_l.isra.0+0xc4>
 800a818:	0800d161 	.word	0x0800d161

0800a81c <_strtoul_r>:
 800a81c:	f7ff bf90 	b.w	800a740 <_strtoul_l.isra.0>

0800a820 <strtoul>:
 800a820:	4613      	mov	r3, r2
 800a822:	460a      	mov	r2, r1
 800a824:	4601      	mov	r1, r0
 800a826:	4802      	ldr	r0, [pc, #8]	@ (800a830 <strtoul+0x10>)
 800a828:	6800      	ldr	r0, [r0, #0]
 800a82a:	f7ff bf89 	b.w	800a740 <_strtoul_l.isra.0>
 800a82e:	bf00      	nop
 800a830:	200001cc 	.word	0x200001cc

0800a834 <__ssputs_r>:
 800a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	688e      	ldr	r6, [r1, #8]
 800a83a:	461f      	mov	r7, r3
 800a83c:	42be      	cmp	r6, r7
 800a83e:	4682      	mov	sl, r0
 800a840:	460c      	mov	r4, r1
 800a842:	4690      	mov	r8, r2
 800a844:	4633      	mov	r3, r6
 800a846:	d853      	bhi.n	800a8f0 <__ssputs_r+0xbc>
 800a848:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800a84c:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 800a850:	d02b      	beq.n	800a8aa <__ssputs_r+0x76>
 800a852:	6965      	ldr	r5, [r4, #20]
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	6909      	ldr	r1, [r1, #16]
 800a858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a85c:	eba3 0901 	sub.w	r9, r3, r1
 800a860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a864:	1c7b      	adds	r3, r7, #1
 800a866:	106d      	asrs	r5, r5, #1
 800a868:	444b      	add	r3, r9
 800a86a:	42ab      	cmp	r3, r5
 800a86c:	462a      	mov	r2, r5
 800a86e:	bf84      	itt	hi
 800a870:	461d      	movhi	r5, r3
 800a872:	462a      	movhi	r2, r5
 800a874:	0543      	lsls	r3, r0, #21
 800a876:	d527      	bpl.n	800a8c8 <__ssputs_r+0x94>
 800a878:	4611      	mov	r1, r2
 800a87a:	4650      	mov	r0, sl
 800a87c:	f7ff fed4 	bl	800a628 <_malloc_r>
 800a880:	4606      	mov	r6, r0
 800a882:	b358      	cbz	r0, 800a8dc <__ssputs_r+0xa8>
 800a884:	6921      	ldr	r1, [r4, #16]
 800a886:	464a      	mov	r2, r9
 800a888:	f000 fe94 	bl	800b5b4 <memcpy>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	6126      	str	r6, [r4, #16]
 800a89a:	6165      	str	r5, [r4, #20]
 800a89c:	444e      	add	r6, r9
 800a89e:	eba5 0509 	sub.w	r5, r5, r9
 800a8a2:	6026      	str	r6, [r4, #0]
 800a8a4:	60a5      	str	r5, [r4, #8]
 800a8a6:	463e      	mov	r6, r7
 800a8a8:	463b      	mov	r3, r7
 800a8aa:	461f      	mov	r7, r3
 800a8ac:	6820      	ldr	r0, [r4, #0]
 800a8ae:	463a      	mov	r2, r7
 800a8b0:	4641      	mov	r1, r8
 800a8b2:	f000 fe40 	bl	800b536 <memmove>
 800a8b6:	68a3      	ldr	r3, [r4, #8]
 800a8b8:	1b9b      	subs	r3, r3, r6
 800a8ba:	60a3      	str	r3, [r4, #8]
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	443b      	add	r3, r7
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	f000 fe8d 	bl	800b5e8 <_realloc_r>
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1e1      	bne.n	800a898 <__ssputs_r+0x64>
 800a8d4:	6921      	ldr	r1, [r4, #16]
 800a8d6:	4650      	mov	r0, sl
 800a8d8:	f7ff fdee 	bl	800a4b8 <_free_r>
 800a8dc:	230c      	movs	r3, #12
 800a8de:	f8ca 3000 	str.w	r3, [sl]
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ee:	e7e9      	b.n	800a8c4 <__ssputs_r+0x90>
 800a8f0:	463e      	mov	r6, r7
 800a8f2:	e7db      	b.n	800a8ac <__ssputs_r+0x78>

0800a8f4 <_svfiprintf_r>:
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	4698      	mov	r8, r3
 800a8fa:	898b      	ldrh	r3, [r1, #12]
 800a8fc:	061b      	lsls	r3, r3, #24
 800a8fe:	b09d      	sub	sp, #116	@ 0x74
 800a900:	4607      	mov	r7, r0
 800a902:	460d      	mov	r5, r1
 800a904:	4614      	mov	r4, r2
 800a906:	d510      	bpl.n	800a92a <_svfiprintf_r+0x36>
 800a908:	690b      	ldr	r3, [r1, #16]
 800a90a:	b973      	cbnz	r3, 800a92a <_svfiprintf_r+0x36>
 800a90c:	2140      	movs	r1, #64	@ 0x40
 800a90e:	f7ff fe8b 	bl	800a628 <_malloc_r>
 800a912:	6028      	str	r0, [r5, #0]
 800a914:	6128      	str	r0, [r5, #16]
 800a916:	b930      	cbnz	r0, 800a926 <_svfiprintf_r+0x32>
 800a918:	230c      	movs	r3, #12
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295
 800a920:	b01d      	add	sp, #116	@ 0x74
 800a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a926:	2340      	movs	r3, #64	@ 0x40
 800a928:	616b      	str	r3, [r5, #20]
 800a92a:	2300      	movs	r3, #0
 800a92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92e:	2320      	movs	r3, #32
 800a930:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a934:	f8cd 800c 	str.w	r8, [sp, #12]
 800a938:	2330      	movs	r3, #48	@ 0x30
 800a93a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aad8 <_svfiprintf_r+0x1e4>
 800a93e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a942:	f04f 0901 	mov.w	r9, #1
 800a946:	4623      	mov	r3, r4
 800a948:	469a      	mov	sl, r3
 800a94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a94e:	b10a      	cbz	r2, 800a954 <_svfiprintf_r+0x60>
 800a950:	2a25      	cmp	r2, #37	@ 0x25
 800a952:	d1f9      	bne.n	800a948 <_svfiprintf_r+0x54>
 800a954:	ebba 0b04 	subs.w	fp, sl, r4
 800a958:	d00b      	beq.n	800a972 <_svfiprintf_r+0x7e>
 800a95a:	465b      	mov	r3, fp
 800a95c:	4622      	mov	r2, r4
 800a95e:	4629      	mov	r1, r5
 800a960:	4638      	mov	r0, r7
 800a962:	f7ff ff67 	bl	800a834 <__ssputs_r>
 800a966:	3001      	adds	r0, #1
 800a968:	f000 80a7 	beq.w	800aaba <_svfiprintf_r+0x1c6>
 800a96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a96e:	445a      	add	r2, fp
 800a970:	9209      	str	r2, [sp, #36]	@ 0x24
 800a972:	f89a 3000 	ldrb.w	r3, [sl]
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 809f 	beq.w	800aaba <_svfiprintf_r+0x1c6>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295
 800a982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a986:	f10a 0a01 	add.w	sl, sl, #1
 800a98a:	9304      	str	r3, [sp, #16]
 800a98c:	9307      	str	r3, [sp, #28]
 800a98e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a992:	931a      	str	r3, [sp, #104]	@ 0x68
 800a994:	4654      	mov	r4, sl
 800a996:	2205      	movs	r2, #5
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	484e      	ldr	r0, [pc, #312]	@ (800aad8 <_svfiprintf_r+0x1e4>)
 800a99e:	f7f5 fc0f 	bl	80001c0 <memchr>
 800a9a2:	9a04      	ldr	r2, [sp, #16]
 800a9a4:	b9d8      	cbnz	r0, 800a9de <_svfiprintf_r+0xea>
 800a9a6:	06d0      	lsls	r0, r2, #27
 800a9a8:	bf44      	itt	mi
 800a9aa:	2320      	movmi	r3, #32
 800a9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9b0:	0711      	lsls	r1, r2, #28
 800a9b2:	bf44      	itt	mi
 800a9b4:	232b      	movmi	r3, #43	@ 0x2b
 800a9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a9be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9c0:	d015      	beq.n	800a9ee <_svfiprintf_r+0xfa>
 800a9c2:	9a07      	ldr	r2, [sp, #28]
 800a9c4:	4654      	mov	r4, sl
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	f04f 0c0a 	mov.w	ip, #10
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9d2:	3b30      	subs	r3, #48	@ 0x30
 800a9d4:	2b09      	cmp	r3, #9
 800a9d6:	d94b      	bls.n	800aa70 <_svfiprintf_r+0x17c>
 800a9d8:	b1b0      	cbz	r0, 800aa08 <_svfiprintf_r+0x114>
 800a9da:	9207      	str	r2, [sp, #28]
 800a9dc:	e014      	b.n	800aa08 <_svfiprintf_r+0x114>
 800a9de:	eba0 0308 	sub.w	r3, r0, r8
 800a9e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	46a2      	mov	sl, r4
 800a9ec:	e7d2      	b.n	800a994 <_svfiprintf_r+0xa0>
 800a9ee:	9b03      	ldr	r3, [sp, #12]
 800a9f0:	1d19      	adds	r1, r3, #4
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	9103      	str	r1, [sp, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bfbb      	ittet	lt
 800a9fa:	425b      	neglt	r3, r3
 800a9fc:	f042 0202 	orrlt.w	r2, r2, #2
 800aa00:	9307      	strge	r3, [sp, #28]
 800aa02:	9307      	strlt	r3, [sp, #28]
 800aa04:	bfb8      	it	lt
 800aa06:	9204      	strlt	r2, [sp, #16]
 800aa08:	7823      	ldrb	r3, [r4, #0]
 800aa0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa0c:	d10a      	bne.n	800aa24 <_svfiprintf_r+0x130>
 800aa0e:	7863      	ldrb	r3, [r4, #1]
 800aa10:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa12:	d132      	bne.n	800aa7a <_svfiprintf_r+0x186>
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	1d1a      	adds	r2, r3, #4
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	9203      	str	r2, [sp, #12]
 800aa1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa20:	3402      	adds	r4, #2
 800aa22:	9305      	str	r3, [sp, #20]
 800aa24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aae8 <_svfiprintf_r+0x1f4>
 800aa28:	7821      	ldrb	r1, [r4, #0]
 800aa2a:	2203      	movs	r2, #3
 800aa2c:	4650      	mov	r0, sl
 800aa2e:	f7f5 fbc7 	bl	80001c0 <memchr>
 800aa32:	b138      	cbz	r0, 800aa44 <_svfiprintf_r+0x150>
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	eba0 000a 	sub.w	r0, r0, sl
 800aa3a:	2240      	movs	r2, #64	@ 0x40
 800aa3c:	4082      	lsls	r2, r0
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	3401      	adds	r4, #1
 800aa42:	9304      	str	r3, [sp, #16]
 800aa44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa48:	4824      	ldr	r0, [pc, #144]	@ (800aadc <_svfiprintf_r+0x1e8>)
 800aa4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa4e:	2206      	movs	r2, #6
 800aa50:	f7f5 fbb6 	bl	80001c0 <memchr>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d036      	beq.n	800aac6 <_svfiprintf_r+0x1d2>
 800aa58:	4b21      	ldr	r3, [pc, #132]	@ (800aae0 <_svfiprintf_r+0x1ec>)
 800aa5a:	bb1b      	cbnz	r3, 800aaa4 <_svfiprintf_r+0x1b0>
 800aa5c:	9b03      	ldr	r3, [sp, #12]
 800aa5e:	3307      	adds	r3, #7
 800aa60:	f023 0307 	bic.w	r3, r3, #7
 800aa64:	3308      	adds	r3, #8
 800aa66:	9303      	str	r3, [sp, #12]
 800aa68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6a:	4433      	add	r3, r6
 800aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6e:	e76a      	b.n	800a946 <_svfiprintf_r+0x52>
 800aa70:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa74:	460c      	mov	r4, r1
 800aa76:	2001      	movs	r0, #1
 800aa78:	e7a8      	b.n	800a9cc <_svfiprintf_r+0xd8>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	3401      	adds	r4, #1
 800aa7e:	9305      	str	r3, [sp, #20]
 800aa80:	4619      	mov	r1, r3
 800aa82:	f04f 0c0a 	mov.w	ip, #10
 800aa86:	4620      	mov	r0, r4
 800aa88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa8c:	3a30      	subs	r2, #48	@ 0x30
 800aa8e:	2a09      	cmp	r2, #9
 800aa90:	d903      	bls.n	800aa9a <_svfiprintf_r+0x1a6>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0c6      	beq.n	800aa24 <_svfiprintf_r+0x130>
 800aa96:	9105      	str	r1, [sp, #20]
 800aa98:	e7c4      	b.n	800aa24 <_svfiprintf_r+0x130>
 800aa9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e7f0      	b.n	800aa86 <_svfiprintf_r+0x192>
 800aaa4:	ab03      	add	r3, sp, #12
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	4b0e      	ldr	r3, [pc, #56]	@ (800aae4 <_svfiprintf_r+0x1f0>)
 800aaac:	a904      	add	r1, sp, #16
 800aaae:	4638      	mov	r0, r7
 800aab0:	f3af 8000 	nop.w
 800aab4:	1c42      	adds	r2, r0, #1
 800aab6:	4606      	mov	r6, r0
 800aab8:	d1d6      	bne.n	800aa68 <_svfiprintf_r+0x174>
 800aaba:	89ab      	ldrh	r3, [r5, #12]
 800aabc:	065b      	lsls	r3, r3, #25
 800aabe:	f53f af2d 	bmi.w	800a91c <_svfiprintf_r+0x28>
 800aac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac4:	e72c      	b.n	800a920 <_svfiprintf_r+0x2c>
 800aac6:	ab03      	add	r3, sp, #12
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	462a      	mov	r2, r5
 800aacc:	4b05      	ldr	r3, [pc, #20]	@ (800aae4 <_svfiprintf_r+0x1f0>)
 800aace:	a904      	add	r1, sp, #16
 800aad0:	4638      	mov	r0, r7
 800aad2:	f000 fa51 	bl	800af78 <_printf_i>
 800aad6:	e7ed      	b.n	800aab4 <_svfiprintf_r+0x1c0>
 800aad8:	0800d112 	.word	0x0800d112
 800aadc:	0800d11c 	.word	0x0800d11c
 800aae0:	00000000 	.word	0x00000000
 800aae4:	0800a835 	.word	0x0800a835
 800aae8:	0800d118 	.word	0x0800d118

0800aaec <_sungetc_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	1c4b      	adds	r3, r1, #1
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	d103      	bne.n	800aafc <_sungetc_r+0x10>
 800aaf4:	f04f 35ff 	mov.w	r5, #4294967295
 800aaf8:	4628      	mov	r0, r5
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	8993      	ldrh	r3, [r2, #12]
 800aafe:	f023 0320 	bic.w	r3, r3, #32
 800ab02:	8193      	strh	r3, [r2, #12]
 800ab04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab06:	6852      	ldr	r2, [r2, #4]
 800ab08:	b2cd      	uxtb	r5, r1
 800ab0a:	b18b      	cbz	r3, 800ab30 <_sungetc_r+0x44>
 800ab0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	dd08      	ble.n	800ab24 <_sungetc_r+0x38>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	1e5a      	subs	r2, r3, #1
 800ab16:	6022      	str	r2, [r4, #0]
 800ab18:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ab1c:	6863      	ldr	r3, [r4, #4]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	6063      	str	r3, [r4, #4]
 800ab22:	e7e9      	b.n	800aaf8 <_sungetc_r+0xc>
 800ab24:	4621      	mov	r1, r4
 800ab26:	f000 fccc 	bl	800b4c2 <__submore>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d0f1      	beq.n	800ab12 <_sungetc_r+0x26>
 800ab2e:	e7e1      	b.n	800aaf4 <_sungetc_r+0x8>
 800ab30:	6921      	ldr	r1, [r4, #16]
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	b151      	cbz	r1, 800ab4c <_sungetc_r+0x60>
 800ab36:	4299      	cmp	r1, r3
 800ab38:	d208      	bcs.n	800ab4c <_sungetc_r+0x60>
 800ab3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ab3e:	42a9      	cmp	r1, r5
 800ab40:	d104      	bne.n	800ab4c <_sungetc_r+0x60>
 800ab42:	3b01      	subs	r3, #1
 800ab44:	3201      	adds	r2, #1
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	6062      	str	r2, [r4, #4]
 800ab4a:	e7d5      	b.n	800aaf8 <_sungetc_r+0xc>
 800ab4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800ab50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab54:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab56:	2303      	movs	r3, #3
 800ab58:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ab5a:	4623      	mov	r3, r4
 800ab5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	2301      	movs	r3, #1
 800ab64:	e7dc      	b.n	800ab20 <_sungetc_r+0x34>

0800ab66 <__ssrefill_r>:
 800ab66:	b510      	push	{r4, lr}
 800ab68:	460c      	mov	r4, r1
 800ab6a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ab6c:	b169      	cbz	r1, 800ab8a <__ssrefill_r+0x24>
 800ab6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab72:	4299      	cmp	r1, r3
 800ab74:	d001      	beq.n	800ab7a <__ssrefill_r+0x14>
 800ab76:	f7ff fc9f 	bl	800a4b8 <_free_r>
 800ab7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab7c:	6063      	str	r3, [r4, #4]
 800ab7e:	2000      	movs	r0, #0
 800ab80:	6360      	str	r0, [r4, #52]	@ 0x34
 800ab82:	b113      	cbz	r3, 800ab8a <__ssrefill_r+0x24>
 800ab84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ab86:	6023      	str	r3, [r4, #0]
 800ab88:	bd10      	pop	{r4, pc}
 800ab8a:	6923      	ldr	r3, [r4, #16]
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	6063      	str	r3, [r4, #4]
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	f043 0320 	orr.w	r3, r3, #32
 800ab98:	81a3      	strh	r3, [r4, #12]
 800ab9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9e:	e7f3      	b.n	800ab88 <__ssrefill_r+0x22>

0800aba0 <__ssvfiscanf_r>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800aba8:	ac41      	add	r4, sp, #260	@ 0x104
 800abaa:	460d      	mov	r5, r1
 800abac:	2100      	movs	r1, #0
 800abae:	e9c4 1103 	strd	r1, r1, [r4, #12]
 800abb2:	a901      	add	r1, sp, #4
 800abb4:	6161      	str	r1, [r4, #20]
 800abb6:	49af      	ldr	r1, [pc, #700]	@ (800ae74 <__ssvfiscanf_r+0x2d4>)
 800abb8:	f8c4 117c 	str.w	r1, [r4, #380]	@ 0x17c
 800abbc:	f8df b2c4 	ldr.w	fp, [pc, #708]	@ 800ae84 <__ssvfiscanf_r+0x2e4>
 800abc0:	49ad      	ldr	r1, [pc, #692]	@ (800ae78 <__ssvfiscanf_r+0x2d8>)
 800abc2:	f8c4 1180 	str.w	r1, [r4, #384]	@ 0x180
 800abc6:	4607      	mov	r7, r0
 800abc8:	46e8      	mov	r8, sp
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	f892 9000 	ldrb.w	r9, [r2]
 800abd0:	f1b9 0f00 	cmp.w	r9, #0
 800abd4:	f000 8160 	beq.w	800ae98 <__ssvfiscanf_r+0x2f8>
 800abd8:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800abdc:	f013 0308 	ands.w	r3, r3, #8
 800abe0:	f102 0601 	add.w	r6, r2, #1
 800abe4:	d01b      	beq.n	800ac1e <__ssvfiscanf_r+0x7e>
 800abe6:	686b      	ldr	r3, [r5, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	dd10      	ble.n	800ac0e <__ssvfiscanf_r+0x6e>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	781a      	ldrb	r2, [r3, #0]
 800abf0:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800abf4:	0712      	lsls	r2, r2, #28
 800abf6:	d401      	bmi.n	800abfc <__ssvfiscanf_r+0x5c>
 800abf8:	4632      	mov	r2, r6
 800abfa:	e7e7      	b.n	800abcc <__ssvfiscanf_r+0x2c>
 800abfc:	6922      	ldr	r2, [r4, #16]
 800abfe:	3201      	adds	r2, #1
 800ac00:	6122      	str	r2, [r4, #16]
 800ac02:	686a      	ldr	r2, [r5, #4]
 800ac04:	3301      	adds	r3, #1
 800ac06:	3a01      	subs	r2, #1
 800ac08:	606a      	str	r2, [r5, #4]
 800ac0a:	602b      	str	r3, [r5, #0]
 800ac0c:	e7eb      	b.n	800abe6 <__ssvfiscanf_r+0x46>
 800ac0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ac12:	4629      	mov	r1, r5
 800ac14:	4638      	mov	r0, r7
 800ac16:	4798      	blx	r3
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d0e7      	beq.n	800abec <__ssvfiscanf_r+0x4c>
 800ac1c:	e7ec      	b.n	800abf8 <__ssvfiscanf_r+0x58>
 800ac1e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800ac22:	f040 8084 	bne.w	800ad2e <__ssvfiscanf_r+0x18e>
 800ac26:	6023      	str	r3, [r4, #0]
 800ac28:	60a3      	str	r3, [r4, #8]
 800ac2a:	7853      	ldrb	r3, [r2, #1]
 800ac2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac2e:	bf02      	ittt	eq
 800ac30:	2310      	moveq	r3, #16
 800ac32:	1c96      	addeq	r6, r2, #2
 800ac34:	6023      	streq	r3, [r4, #0]
 800ac36:	220a      	movs	r2, #10
 800ac38:	46b2      	mov	sl, r6
 800ac3a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ac3e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ac42:	2b09      	cmp	r3, #9
 800ac44:	d91d      	bls.n	800ac82 <__ssvfiscanf_r+0xe2>
 800ac46:	4b8d      	ldr	r3, [pc, #564]	@ (800ae7c <__ssvfiscanf_r+0x2dc>)
 800ac48:	2203      	movs	r2, #3
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7f5 fab8 	bl	80001c0 <memchr>
 800ac50:	b138      	cbz	r0, 800ac62 <__ssvfiscanf_r+0xc2>
 800ac52:	4b8a      	ldr	r3, [pc, #552]	@ (800ae7c <__ssvfiscanf_r+0x2dc>)
 800ac54:	6822      	ldr	r2, [r4, #0]
 800ac56:	1ac0      	subs	r0, r0, r3
 800ac58:	2301      	movs	r3, #1
 800ac5a:	4083      	lsls	r3, r0
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	4656      	mov	r6, sl
 800ac62:	f816 3b01 	ldrb.w	r3, [r6], #1
 800ac66:	2b78      	cmp	r3, #120	@ 0x78
 800ac68:	d806      	bhi.n	800ac78 <__ssvfiscanf_r+0xd8>
 800ac6a:	2b57      	cmp	r3, #87	@ 0x57
 800ac6c:	d810      	bhi.n	800ac90 <__ssvfiscanf_r+0xf0>
 800ac6e:	2b25      	cmp	r3, #37	@ 0x25
 800ac70:	d05d      	beq.n	800ad2e <__ssvfiscanf_r+0x18e>
 800ac72:	d857      	bhi.n	800ad24 <__ssvfiscanf_r+0x184>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d076      	beq.n	800ad66 <__ssvfiscanf_r+0x1c6>
 800ac78:	2303      	movs	r3, #3
 800ac7a:	61a3      	str	r3, [r4, #24]
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	6063      	str	r3, [r4, #4]
 800ac80:	e089      	b.n	800ad96 <__ssvfiscanf_r+0x1f6>
 800ac82:	68a3      	ldr	r3, [r4, #8]
 800ac84:	fb02 1103 	mla	r1, r2, r3, r1
 800ac88:	3930      	subs	r1, #48	@ 0x30
 800ac8a:	60a1      	str	r1, [r4, #8]
 800ac8c:	4656      	mov	r6, sl
 800ac8e:	e7d3      	b.n	800ac38 <__ssvfiscanf_r+0x98>
 800ac90:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ac94:	2a20      	cmp	r2, #32
 800ac96:	d8ef      	bhi.n	800ac78 <__ssvfiscanf_r+0xd8>
 800ac98:	a101      	add	r1, pc, #4	@ (adr r1, 800aca0 <__ssvfiscanf_r+0x100>)
 800ac9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac9e:	bf00      	nop
 800aca0:	0800ad75 	.word	0x0800ad75
 800aca4:	0800ac79 	.word	0x0800ac79
 800aca8:	0800ac79 	.word	0x0800ac79
 800acac:	0800add1 	.word	0x0800add1
 800acb0:	0800ac79 	.word	0x0800ac79
 800acb4:	0800ac79 	.word	0x0800ac79
 800acb8:	0800ac79 	.word	0x0800ac79
 800acbc:	0800ac79 	.word	0x0800ac79
 800acc0:	0800ac79 	.word	0x0800ac79
 800acc4:	0800ac79 	.word	0x0800ac79
 800acc8:	0800ac79 	.word	0x0800ac79
 800accc:	0800ade7 	.word	0x0800ade7
 800acd0:	0800adcd 	.word	0x0800adcd
 800acd4:	0800ad2b 	.word	0x0800ad2b
 800acd8:	0800ad2b 	.word	0x0800ad2b
 800acdc:	0800ad2b 	.word	0x0800ad2b
 800ace0:	0800ac79 	.word	0x0800ac79
 800ace4:	0800ad87 	.word	0x0800ad87
 800ace8:	0800ac79 	.word	0x0800ac79
 800acec:	0800ac79 	.word	0x0800ac79
 800acf0:	0800ac79 	.word	0x0800ac79
 800acf4:	0800ac79 	.word	0x0800ac79
 800acf8:	0800adf7 	.word	0x0800adf7
 800acfc:	0800ad8f 	.word	0x0800ad8f
 800ad00:	0800ad6d 	.word	0x0800ad6d
 800ad04:	0800ac79 	.word	0x0800ac79
 800ad08:	0800ac79 	.word	0x0800ac79
 800ad0c:	0800adf3 	.word	0x0800adf3
 800ad10:	0800ac79 	.word	0x0800ac79
 800ad14:	0800adcd 	.word	0x0800adcd
 800ad18:	0800ac79 	.word	0x0800ac79
 800ad1c:	0800ac79 	.word	0x0800ac79
 800ad20:	0800ad75 	.word	0x0800ad75
 800ad24:	3b45      	subs	r3, #69	@ 0x45
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d8a6      	bhi.n	800ac78 <__ssvfiscanf_r+0xd8>
 800ad2a:	2305      	movs	r3, #5
 800ad2c:	e032      	b.n	800ad94 <__ssvfiscanf_r+0x1f4>
 800ad2e:	686b      	ldr	r3, [r5, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	dd0d      	ble.n	800ad50 <__ssvfiscanf_r+0x1b0>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	781a      	ldrb	r2, [r3, #0]
 800ad38:	454a      	cmp	r2, r9
 800ad3a:	f040 80ad 	bne.w	800ae98 <__ssvfiscanf_r+0x2f8>
 800ad3e:	3301      	adds	r3, #1
 800ad40:	686a      	ldr	r2, [r5, #4]
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	3a01      	subs	r2, #1
 800ad48:	3301      	adds	r3, #1
 800ad4a:	606a      	str	r2, [r5, #4]
 800ad4c:	6123      	str	r3, [r4, #16]
 800ad4e:	e753      	b.n	800abf8 <__ssvfiscanf_r+0x58>
 800ad50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ad54:	4629      	mov	r1, r5
 800ad56:	4638      	mov	r0, r7
 800ad58:	4798      	blx	r3
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d0ea      	beq.n	800ad34 <__ssvfiscanf_r+0x194>
 800ad5e:	68e0      	ldr	r0, [r4, #12]
 800ad60:	2800      	cmp	r0, #0
 800ad62:	f040 8091 	bne.w	800ae88 <__ssvfiscanf_r+0x2e8>
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6a:	e091      	b.n	800ae90 <__ssvfiscanf_r+0x2f0>
 800ad6c:	6822      	ldr	r2, [r4, #0]
 800ad6e:	f042 0220 	orr.w	r2, r2, #32
 800ad72:	6022      	str	r2, [r4, #0]
 800ad74:	6822      	ldr	r2, [r4, #0]
 800ad76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad7a:	6022      	str	r2, [r4, #0]
 800ad7c:	2210      	movs	r2, #16
 800ad7e:	2b6e      	cmp	r3, #110	@ 0x6e
 800ad80:	6062      	str	r2, [r4, #4]
 800ad82:	d806      	bhi.n	800ad92 <__ssvfiscanf_r+0x1f2>
 800ad84:	e001      	b.n	800ad8a <__ssvfiscanf_r+0x1ea>
 800ad86:	2300      	movs	r3, #0
 800ad88:	6063      	str	r3, [r4, #4]
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e002      	b.n	800ad94 <__ssvfiscanf_r+0x1f4>
 800ad8e:	2308      	movs	r3, #8
 800ad90:	6063      	str	r3, [r4, #4]
 800ad92:	2304      	movs	r3, #4
 800ad94:	61a3      	str	r3, [r4, #24]
 800ad96:	686b      	ldr	r3, [r5, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dd3c      	ble.n	800ae16 <__ssvfiscanf_r+0x276>
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	0659      	lsls	r1, r3, #25
 800ada0:	d405      	bmi.n	800adae <__ssvfiscanf_r+0x20e>
 800ada2:	682b      	ldr	r3, [r5, #0]
 800ada4:	781a      	ldrb	r2, [r3, #0]
 800ada6:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800adaa:	0712      	lsls	r2, r2, #28
 800adac:	d43b      	bmi.n	800ae26 <__ssvfiscanf_r+0x286>
 800adae:	69a3      	ldr	r3, [r4, #24]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	dc4b      	bgt.n	800ae4c <__ssvfiscanf_r+0x2ac>
 800adb4:	4643      	mov	r3, r8
 800adb6:	462a      	mov	r2, r5
 800adb8:	4621      	mov	r1, r4
 800adba:	4638      	mov	r0, r7
 800adbc:	f000 f9fc 	bl	800b1b8 <_scanf_chars>
 800adc0:	2801      	cmp	r0, #1
 800adc2:	d069      	beq.n	800ae98 <__ssvfiscanf_r+0x2f8>
 800adc4:	2802      	cmp	r0, #2
 800adc6:	f47f af17 	bne.w	800abf8 <__ssvfiscanf_r+0x58>
 800adca:	e7c8      	b.n	800ad5e <__ssvfiscanf_r+0x1be>
 800adcc:	220a      	movs	r2, #10
 800adce:	e7d6      	b.n	800ad7e <__ssvfiscanf_r+0x1de>
 800add0:	4631      	mov	r1, r6
 800add2:	a801      	add	r0, sp, #4
 800add4:	f000 fb3c 	bl	800b450 <__sccl>
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	4606      	mov	r6, r0
 800ade2:	2301      	movs	r3, #1
 800ade4:	e7d6      	b.n	800ad94 <__ssvfiscanf_r+0x1f4>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	2300      	movs	r3, #0
 800adf0:	e7d0      	b.n	800ad94 <__ssvfiscanf_r+0x1f4>
 800adf2:	2302      	movs	r3, #2
 800adf4:	e7ce      	b.n	800ad94 <__ssvfiscanf_r+0x1f4>
 800adf6:	6820      	ldr	r0, [r4, #0]
 800adf8:	06c3      	lsls	r3, r0, #27
 800adfa:	f53f aefd 	bmi.w	800abf8 <__ssvfiscanf_r+0x58>
 800adfe:	f8d8 3000 	ldr.w	r3, [r8]
 800ae02:	6922      	ldr	r2, [r4, #16]
 800ae04:	1d19      	adds	r1, r3, #4
 800ae06:	f8c8 1000 	str.w	r1, [r8]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	07c0      	lsls	r0, r0, #31
 800ae0e:	bf4c      	ite	mi
 800ae10:	801a      	strhmi	r2, [r3, #0]
 800ae12:	601a      	strpl	r2, [r3, #0]
 800ae14:	e6f0      	b.n	800abf8 <__ssvfiscanf_r+0x58>
 800ae16:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	4798      	blx	r3
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d0bb      	beq.n	800ad9c <__ssvfiscanf_r+0x1fc>
 800ae24:	e79b      	b.n	800ad5e <__ssvfiscanf_r+0x1be>
 800ae26:	6922      	ldr	r2, [r4, #16]
 800ae28:	3201      	adds	r2, #1
 800ae2a:	6122      	str	r2, [r4, #16]
 800ae2c:	686a      	ldr	r2, [r5, #4]
 800ae2e:	3a01      	subs	r2, #1
 800ae30:	2a00      	cmp	r2, #0
 800ae32:	606a      	str	r2, [r5, #4]
 800ae34:	dd02      	ble.n	800ae3c <__ssvfiscanf_r+0x29c>
 800ae36:	3301      	adds	r3, #1
 800ae38:	602b      	str	r3, [r5, #0]
 800ae3a:	e7b2      	b.n	800ada2 <__ssvfiscanf_r+0x202>
 800ae3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ae40:	4629      	mov	r1, r5
 800ae42:	4638      	mov	r0, r7
 800ae44:	4798      	blx	r3
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0ab      	beq.n	800ada2 <__ssvfiscanf_r+0x202>
 800ae4a:	e788      	b.n	800ad5e <__ssvfiscanf_r+0x1be>
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	dc06      	bgt.n	800ae5e <__ssvfiscanf_r+0x2be>
 800ae50:	4643      	mov	r3, r8
 800ae52:	462a      	mov	r2, r5
 800ae54:	4621      	mov	r1, r4
 800ae56:	4638      	mov	r0, r7
 800ae58:	f000 fa08 	bl	800b26c <_scanf_i>
 800ae5c:	e7b0      	b.n	800adc0 <__ssvfiscanf_r+0x220>
 800ae5e:	4b08      	ldr	r3, [pc, #32]	@ (800ae80 <__ssvfiscanf_r+0x2e0>)
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f43f aec9 	beq.w	800abf8 <__ssvfiscanf_r+0x58>
 800ae66:	4643      	mov	r3, r8
 800ae68:	462a      	mov	r2, r5
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f3af 8000 	nop.w
 800ae72:	e7a5      	b.n	800adc0 <__ssvfiscanf_r+0x220>
 800ae74:	0800aaed 	.word	0x0800aaed
 800ae78:	0800ab67 	.word	0x0800ab67
 800ae7c:	0800d118 	.word	0x0800d118
 800ae80:	00000000 	.word	0x00000000
 800ae84:	0800d161 	.word	0x0800d161
 800ae88:	89ab      	ldrh	r3, [r5, #12]
 800ae8a:	065b      	lsls	r3, r3, #25
 800ae8c:	f53f af6b 	bmi.w	800ad66 <__ssvfiscanf_r+0x1c6>
 800ae90:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae98:	68e0      	ldr	r0, [r4, #12]
 800ae9a:	e7f9      	b.n	800ae90 <__ssvfiscanf_r+0x2f0>

0800ae9c <_printf_common>:
 800ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea0:	4616      	mov	r6, r2
 800aea2:	4698      	mov	r8, r3
 800aea4:	688a      	ldr	r2, [r1, #8]
 800aea6:	690b      	ldr	r3, [r1, #16]
 800aea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aeac:	4293      	cmp	r3, r2
 800aeae:	bfb8      	it	lt
 800aeb0:	4613      	movlt	r3, r2
 800aeb2:	6033      	str	r3, [r6, #0]
 800aeb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aeb8:	4607      	mov	r7, r0
 800aeba:	460c      	mov	r4, r1
 800aebc:	b10a      	cbz	r2, 800aec2 <_printf_common+0x26>
 800aebe:	3301      	adds	r3, #1
 800aec0:	6033      	str	r3, [r6, #0]
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	0699      	lsls	r1, r3, #26
 800aec6:	bf42      	ittt	mi
 800aec8:	6833      	ldrmi	r3, [r6, #0]
 800aeca:	3302      	addmi	r3, #2
 800aecc:	6033      	strmi	r3, [r6, #0]
 800aece:	6825      	ldr	r5, [r4, #0]
 800aed0:	f015 0506 	ands.w	r5, r5, #6
 800aed4:	d106      	bne.n	800aee4 <_printf_common+0x48>
 800aed6:	f104 0a19 	add.w	sl, r4, #25
 800aeda:	68e3      	ldr	r3, [r4, #12]
 800aedc:	6832      	ldr	r2, [r6, #0]
 800aede:	1a9b      	subs	r3, r3, r2
 800aee0:	42ab      	cmp	r3, r5
 800aee2:	dc26      	bgt.n	800af32 <_printf_common+0x96>
 800aee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aee8:	6822      	ldr	r2, [r4, #0]
 800aeea:	3b00      	subs	r3, #0
 800aeec:	bf18      	it	ne
 800aeee:	2301      	movne	r3, #1
 800aef0:	0692      	lsls	r2, r2, #26
 800aef2:	d42b      	bmi.n	800af4c <_printf_common+0xb0>
 800aef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aef8:	4641      	mov	r1, r8
 800aefa:	4638      	mov	r0, r7
 800aefc:	47c8      	blx	r9
 800aefe:	3001      	adds	r0, #1
 800af00:	d01e      	beq.n	800af40 <_printf_common+0xa4>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	6922      	ldr	r2, [r4, #16]
 800af06:	f003 0306 	and.w	r3, r3, #6
 800af0a:	2b04      	cmp	r3, #4
 800af0c:	bf02      	ittt	eq
 800af0e:	68e5      	ldreq	r5, [r4, #12]
 800af10:	6833      	ldreq	r3, [r6, #0]
 800af12:	1aed      	subeq	r5, r5, r3
 800af14:	68a3      	ldr	r3, [r4, #8]
 800af16:	bf0c      	ite	eq
 800af18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af1c:	2500      	movne	r5, #0
 800af1e:	4293      	cmp	r3, r2
 800af20:	bfc4      	itt	gt
 800af22:	1a9b      	subgt	r3, r3, r2
 800af24:	18ed      	addgt	r5, r5, r3
 800af26:	2600      	movs	r6, #0
 800af28:	341a      	adds	r4, #26
 800af2a:	42b5      	cmp	r5, r6
 800af2c:	d11a      	bne.n	800af64 <_printf_common+0xc8>
 800af2e:	2000      	movs	r0, #0
 800af30:	e008      	b.n	800af44 <_printf_common+0xa8>
 800af32:	2301      	movs	r3, #1
 800af34:	4652      	mov	r2, sl
 800af36:	4641      	mov	r1, r8
 800af38:	4638      	mov	r0, r7
 800af3a:	47c8      	blx	r9
 800af3c:	3001      	adds	r0, #1
 800af3e:	d103      	bne.n	800af48 <_printf_common+0xac>
 800af40:	f04f 30ff 	mov.w	r0, #4294967295
 800af44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af48:	3501      	adds	r5, #1
 800af4a:	e7c6      	b.n	800aeda <_printf_common+0x3e>
 800af4c:	18e1      	adds	r1, r4, r3
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	2030      	movs	r0, #48	@ 0x30
 800af52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af56:	4422      	add	r2, r4
 800af58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af60:	3302      	adds	r3, #2
 800af62:	e7c7      	b.n	800aef4 <_printf_common+0x58>
 800af64:	2301      	movs	r3, #1
 800af66:	4622      	mov	r2, r4
 800af68:	4641      	mov	r1, r8
 800af6a:	4638      	mov	r0, r7
 800af6c:	47c8      	blx	r9
 800af6e:	3001      	adds	r0, #1
 800af70:	d0e6      	beq.n	800af40 <_printf_common+0xa4>
 800af72:	3601      	adds	r6, #1
 800af74:	e7d9      	b.n	800af2a <_printf_common+0x8e>
	...

0800af78 <_printf_i>:
 800af78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af7c:	7e0f      	ldrb	r7, [r1, #24]
 800af7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af80:	2f78      	cmp	r7, #120	@ 0x78
 800af82:	4691      	mov	r9, r2
 800af84:	4680      	mov	r8, r0
 800af86:	460c      	mov	r4, r1
 800af88:	469a      	mov	sl, r3
 800af8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af8e:	d807      	bhi.n	800afa0 <_printf_i+0x28>
 800af90:	2f62      	cmp	r7, #98	@ 0x62
 800af92:	d80a      	bhi.n	800afaa <_printf_i+0x32>
 800af94:	2f00      	cmp	r7, #0
 800af96:	f000 80d2 	beq.w	800b13e <_printf_i+0x1c6>
 800af9a:	2f58      	cmp	r7, #88	@ 0x58
 800af9c:	f000 80b7 	beq.w	800b10e <_printf_i+0x196>
 800afa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afa8:	e03a      	b.n	800b020 <_printf_i+0xa8>
 800afaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afae:	2b15      	cmp	r3, #21
 800afb0:	d8f6      	bhi.n	800afa0 <_printf_i+0x28>
 800afb2:	a101      	add	r1, pc, #4	@ (adr r1, 800afb8 <_printf_i+0x40>)
 800afb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afb8:	0800b011 	.word	0x0800b011
 800afbc:	0800b025 	.word	0x0800b025
 800afc0:	0800afa1 	.word	0x0800afa1
 800afc4:	0800afa1 	.word	0x0800afa1
 800afc8:	0800afa1 	.word	0x0800afa1
 800afcc:	0800afa1 	.word	0x0800afa1
 800afd0:	0800b025 	.word	0x0800b025
 800afd4:	0800afa1 	.word	0x0800afa1
 800afd8:	0800afa1 	.word	0x0800afa1
 800afdc:	0800afa1 	.word	0x0800afa1
 800afe0:	0800afa1 	.word	0x0800afa1
 800afe4:	0800b125 	.word	0x0800b125
 800afe8:	0800b04f 	.word	0x0800b04f
 800afec:	0800b0db 	.word	0x0800b0db
 800aff0:	0800afa1 	.word	0x0800afa1
 800aff4:	0800afa1 	.word	0x0800afa1
 800aff8:	0800b147 	.word	0x0800b147
 800affc:	0800afa1 	.word	0x0800afa1
 800b000:	0800b04f 	.word	0x0800b04f
 800b004:	0800afa1 	.word	0x0800afa1
 800b008:	0800afa1 	.word	0x0800afa1
 800b00c:	0800b0e3 	.word	0x0800b0e3
 800b010:	6833      	ldr	r3, [r6, #0]
 800b012:	1d1a      	adds	r2, r3, #4
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6032      	str	r2, [r6, #0]
 800b018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b01c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b020:	2301      	movs	r3, #1
 800b022:	e09d      	b.n	800b160 <_printf_i+0x1e8>
 800b024:	6833      	ldr	r3, [r6, #0]
 800b026:	6820      	ldr	r0, [r4, #0]
 800b028:	1d19      	adds	r1, r3, #4
 800b02a:	6031      	str	r1, [r6, #0]
 800b02c:	0606      	lsls	r6, r0, #24
 800b02e:	d501      	bpl.n	800b034 <_printf_i+0xbc>
 800b030:	681d      	ldr	r5, [r3, #0]
 800b032:	e003      	b.n	800b03c <_printf_i+0xc4>
 800b034:	0645      	lsls	r5, r0, #25
 800b036:	d5fb      	bpl.n	800b030 <_printf_i+0xb8>
 800b038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b03c:	2d00      	cmp	r5, #0
 800b03e:	da03      	bge.n	800b048 <_printf_i+0xd0>
 800b040:	232d      	movs	r3, #45	@ 0x2d
 800b042:	426d      	negs	r5, r5
 800b044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b048:	4859      	ldr	r0, [pc, #356]	@ (800b1b0 <_printf_i+0x238>)
 800b04a:	230a      	movs	r3, #10
 800b04c:	e010      	b.n	800b070 <_printf_i+0xf8>
 800b04e:	6821      	ldr	r1, [r4, #0]
 800b050:	6833      	ldr	r3, [r6, #0]
 800b052:	0608      	lsls	r0, r1, #24
 800b054:	f853 5b04 	ldr.w	r5, [r3], #4
 800b058:	d402      	bmi.n	800b060 <_printf_i+0xe8>
 800b05a:	0649      	lsls	r1, r1, #25
 800b05c:	bf48      	it	mi
 800b05e:	b2ad      	uxthmi	r5, r5
 800b060:	2f6f      	cmp	r7, #111	@ 0x6f
 800b062:	4853      	ldr	r0, [pc, #332]	@ (800b1b0 <_printf_i+0x238>)
 800b064:	6033      	str	r3, [r6, #0]
 800b066:	d159      	bne.n	800b11c <_printf_i+0x1a4>
 800b068:	2308      	movs	r3, #8
 800b06a:	2100      	movs	r1, #0
 800b06c:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b070:	6866      	ldr	r6, [r4, #4]
 800b072:	60a6      	str	r6, [r4, #8]
 800b074:	2e00      	cmp	r6, #0
 800b076:	db05      	blt.n	800b084 <_printf_i+0x10c>
 800b078:	6821      	ldr	r1, [r4, #0]
 800b07a:	432e      	orrs	r6, r5
 800b07c:	f021 0104 	bic.w	r1, r1, #4
 800b080:	6021      	str	r1, [r4, #0]
 800b082:	d04d      	beq.n	800b120 <_printf_i+0x1a8>
 800b084:	4616      	mov	r6, r2
 800b086:	fbb5 f1f3 	udiv	r1, r5, r3
 800b08a:	fb03 5711 	mls	r7, r3, r1, r5
 800b08e:	5dc7      	ldrb	r7, [r0, r7]
 800b090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b094:	462f      	mov	r7, r5
 800b096:	42bb      	cmp	r3, r7
 800b098:	460d      	mov	r5, r1
 800b09a:	d9f4      	bls.n	800b086 <_printf_i+0x10e>
 800b09c:	2b08      	cmp	r3, #8
 800b09e:	d10b      	bne.n	800b0b8 <_printf_i+0x140>
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	07df      	lsls	r7, r3, #31
 800b0a4:	d508      	bpl.n	800b0b8 <_printf_i+0x140>
 800b0a6:	6923      	ldr	r3, [r4, #16]
 800b0a8:	6861      	ldr	r1, [r4, #4]
 800b0aa:	4299      	cmp	r1, r3
 800b0ac:	bfde      	ittt	le
 800b0ae:	2330      	movle	r3, #48	@ 0x30
 800b0b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0b8:	1b92      	subs	r2, r2, r6
 800b0ba:	6122      	str	r2, [r4, #16]
 800b0bc:	f8cd a000 	str.w	sl, [sp]
 800b0c0:	464b      	mov	r3, r9
 800b0c2:	aa03      	add	r2, sp, #12
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	f7ff fee8 	bl	800ae9c <_printf_common>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d14c      	bne.n	800b16a <_printf_i+0x1f2>
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d4:	b004      	add	sp, #16
 800b0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	f043 0320 	orr.w	r3, r3, #32
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	4834      	ldr	r0, [pc, #208]	@ (800b1b4 <_printf_i+0x23c>)
 800b0e4:	2778      	movs	r7, #120	@ 0x78
 800b0e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	6831      	ldr	r1, [r6, #0]
 800b0ee:	061f      	lsls	r7, r3, #24
 800b0f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0f4:	d402      	bmi.n	800b0fc <_printf_i+0x184>
 800b0f6:	065f      	lsls	r7, r3, #25
 800b0f8:	bf48      	it	mi
 800b0fa:	b2ad      	uxthmi	r5, r5
 800b0fc:	6031      	str	r1, [r6, #0]
 800b0fe:	07d9      	lsls	r1, r3, #31
 800b100:	bf44      	itt	mi
 800b102:	f043 0320 	orrmi.w	r3, r3, #32
 800b106:	6023      	strmi	r3, [r4, #0]
 800b108:	b11d      	cbz	r5, 800b112 <_printf_i+0x19a>
 800b10a:	2310      	movs	r3, #16
 800b10c:	e7ad      	b.n	800b06a <_printf_i+0xf2>
 800b10e:	4828      	ldr	r0, [pc, #160]	@ (800b1b0 <_printf_i+0x238>)
 800b110:	e7e9      	b.n	800b0e6 <_printf_i+0x16e>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	f023 0320 	bic.w	r3, r3, #32
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	e7f6      	b.n	800b10a <_printf_i+0x192>
 800b11c:	230a      	movs	r3, #10
 800b11e:	e7a4      	b.n	800b06a <_printf_i+0xf2>
 800b120:	4616      	mov	r6, r2
 800b122:	e7bb      	b.n	800b09c <_printf_i+0x124>
 800b124:	6833      	ldr	r3, [r6, #0]
 800b126:	6825      	ldr	r5, [r4, #0]
 800b128:	6961      	ldr	r1, [r4, #20]
 800b12a:	1d18      	adds	r0, r3, #4
 800b12c:	6030      	str	r0, [r6, #0]
 800b12e:	062e      	lsls	r6, r5, #24
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	d501      	bpl.n	800b138 <_printf_i+0x1c0>
 800b134:	6019      	str	r1, [r3, #0]
 800b136:	e002      	b.n	800b13e <_printf_i+0x1c6>
 800b138:	0668      	lsls	r0, r5, #25
 800b13a:	d5fb      	bpl.n	800b134 <_printf_i+0x1bc>
 800b13c:	8019      	strh	r1, [r3, #0]
 800b13e:	2300      	movs	r3, #0
 800b140:	6123      	str	r3, [r4, #16]
 800b142:	4616      	mov	r6, r2
 800b144:	e7ba      	b.n	800b0bc <_printf_i+0x144>
 800b146:	6833      	ldr	r3, [r6, #0]
 800b148:	1d1a      	adds	r2, r3, #4
 800b14a:	6032      	str	r2, [r6, #0]
 800b14c:	681e      	ldr	r6, [r3, #0]
 800b14e:	6862      	ldr	r2, [r4, #4]
 800b150:	2100      	movs	r1, #0
 800b152:	4630      	mov	r0, r6
 800b154:	f7f5 f834 	bl	80001c0 <memchr>
 800b158:	b108      	cbz	r0, 800b15e <_printf_i+0x1e6>
 800b15a:	1b80      	subs	r0, r0, r6
 800b15c:	6060      	str	r0, [r4, #4]
 800b15e:	6863      	ldr	r3, [r4, #4]
 800b160:	6123      	str	r3, [r4, #16]
 800b162:	2300      	movs	r3, #0
 800b164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b168:	e7a8      	b.n	800b0bc <_printf_i+0x144>
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	4632      	mov	r2, r6
 800b16e:	4649      	mov	r1, r9
 800b170:	4640      	mov	r0, r8
 800b172:	47d0      	blx	sl
 800b174:	3001      	adds	r0, #1
 800b176:	d0ab      	beq.n	800b0d0 <_printf_i+0x158>
 800b178:	6823      	ldr	r3, [r4, #0]
 800b17a:	079b      	lsls	r3, r3, #30
 800b17c:	d413      	bmi.n	800b1a6 <_printf_i+0x22e>
 800b17e:	68e0      	ldr	r0, [r4, #12]
 800b180:	9b03      	ldr	r3, [sp, #12]
 800b182:	4298      	cmp	r0, r3
 800b184:	bfb8      	it	lt
 800b186:	4618      	movlt	r0, r3
 800b188:	e7a4      	b.n	800b0d4 <_printf_i+0x15c>
 800b18a:	2301      	movs	r3, #1
 800b18c:	4632      	mov	r2, r6
 800b18e:	4649      	mov	r1, r9
 800b190:	4640      	mov	r0, r8
 800b192:	47d0      	blx	sl
 800b194:	3001      	adds	r0, #1
 800b196:	d09b      	beq.n	800b0d0 <_printf_i+0x158>
 800b198:	3501      	adds	r5, #1
 800b19a:	68e3      	ldr	r3, [r4, #12]
 800b19c:	9903      	ldr	r1, [sp, #12]
 800b19e:	1a5b      	subs	r3, r3, r1
 800b1a0:	42ab      	cmp	r3, r5
 800b1a2:	dcf2      	bgt.n	800b18a <_printf_i+0x212>
 800b1a4:	e7eb      	b.n	800b17e <_printf_i+0x206>
 800b1a6:	2500      	movs	r5, #0
 800b1a8:	f104 0619 	add.w	r6, r4, #25
 800b1ac:	e7f5      	b.n	800b19a <_printf_i+0x222>
 800b1ae:	bf00      	nop
 800b1b0:	0800d123 	.word	0x0800d123
 800b1b4:	0800d134 	.word	0x0800d134

0800b1b8 <_scanf_chars>:
 800b1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1bc:	4615      	mov	r5, r2
 800b1be:	688a      	ldr	r2, [r1, #8]
 800b1c0:	4680      	mov	r8, r0
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	b932      	cbnz	r2, 800b1d4 <_scanf_chars+0x1c>
 800b1c6:	698a      	ldr	r2, [r1, #24]
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	bf14      	ite	ne
 800b1cc:	f04f 32ff 	movne.w	r2, #4294967295
 800b1d0:	2201      	moveq	r2, #1
 800b1d2:	608a      	str	r2, [r1, #8]
 800b1d4:	6822      	ldr	r2, [r4, #0]
 800b1d6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b268 <_scanf_chars+0xb0>
 800b1da:	06d1      	lsls	r1, r2, #27
 800b1dc:	bf5f      	itttt	pl
 800b1de:	681a      	ldrpl	r2, [r3, #0]
 800b1e0:	1d11      	addpl	r1, r2, #4
 800b1e2:	6019      	strpl	r1, [r3, #0]
 800b1e4:	6816      	ldrpl	r6, [r2, #0]
 800b1e6:	2700      	movs	r7, #0
 800b1e8:	69a0      	ldr	r0, [r4, #24]
 800b1ea:	b188      	cbz	r0, 800b210 <_scanf_chars+0x58>
 800b1ec:	2801      	cmp	r0, #1
 800b1ee:	d107      	bne.n	800b200 <_scanf_chars+0x48>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	781a      	ldrb	r2, [r3, #0]
 800b1f4:	6963      	ldr	r3, [r4, #20]
 800b1f6:	5c9b      	ldrb	r3, [r3, r2]
 800b1f8:	b953      	cbnz	r3, 800b210 <_scanf_chars+0x58>
 800b1fa:	2f00      	cmp	r7, #0
 800b1fc:	d031      	beq.n	800b262 <_scanf_chars+0xaa>
 800b1fe:	e022      	b.n	800b246 <_scanf_chars+0x8e>
 800b200:	2802      	cmp	r0, #2
 800b202:	d120      	bne.n	800b246 <_scanf_chars+0x8e>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b20c:	071b      	lsls	r3, r3, #28
 800b20e:	d41a      	bmi.n	800b246 <_scanf_chars+0x8e>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	06da      	lsls	r2, r3, #27
 800b214:	bf5e      	ittt	pl
 800b216:	682b      	ldrpl	r3, [r5, #0]
 800b218:	781b      	ldrbpl	r3, [r3, #0]
 800b21a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b21e:	682a      	ldr	r2, [r5, #0]
 800b220:	686b      	ldr	r3, [r5, #4]
 800b222:	3201      	adds	r2, #1
 800b224:	602a      	str	r2, [r5, #0]
 800b226:	68a2      	ldr	r2, [r4, #8]
 800b228:	3b01      	subs	r3, #1
 800b22a:	3a01      	subs	r2, #1
 800b22c:	606b      	str	r3, [r5, #4]
 800b22e:	3701      	adds	r7, #1
 800b230:	60a2      	str	r2, [r4, #8]
 800b232:	b142      	cbz	r2, 800b246 <_scanf_chars+0x8e>
 800b234:	2b00      	cmp	r3, #0
 800b236:	dcd7      	bgt.n	800b1e8 <_scanf_chars+0x30>
 800b238:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b23c:	4629      	mov	r1, r5
 800b23e:	4640      	mov	r0, r8
 800b240:	4798      	blx	r3
 800b242:	2800      	cmp	r0, #0
 800b244:	d0d0      	beq.n	800b1e8 <_scanf_chars+0x30>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	f013 0310 	ands.w	r3, r3, #16
 800b24c:	d105      	bne.n	800b25a <_scanf_chars+0xa2>
 800b24e:	68e2      	ldr	r2, [r4, #12]
 800b250:	3201      	adds	r2, #1
 800b252:	60e2      	str	r2, [r4, #12]
 800b254:	69a2      	ldr	r2, [r4, #24]
 800b256:	b102      	cbz	r2, 800b25a <_scanf_chars+0xa2>
 800b258:	7033      	strb	r3, [r6, #0]
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	443b      	add	r3, r7
 800b25e:	6123      	str	r3, [r4, #16]
 800b260:	2000      	movs	r0, #0
 800b262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b266:	bf00      	nop
 800b268:	0800d161 	.word	0x0800d161

0800b26c <_scanf_i>:
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	4698      	mov	r8, r3
 800b272:	4b73      	ldr	r3, [pc, #460]	@ (800b440 <_scanf_i+0x1d4>)
 800b274:	460c      	mov	r4, r1
 800b276:	4682      	mov	sl, r0
 800b278:	4616      	mov	r6, r2
 800b27a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b27e:	b087      	sub	sp, #28
 800b280:	ab03      	add	r3, sp, #12
 800b282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b286:	4b6f      	ldr	r3, [pc, #444]	@ (800b444 <_scanf_i+0x1d8>)
 800b288:	69a1      	ldr	r1, [r4, #24]
 800b28a:	4a6f      	ldr	r2, [pc, #444]	@ (800b448 <_scanf_i+0x1dc>)
 800b28c:	2903      	cmp	r1, #3
 800b28e:	bf08      	it	eq
 800b290:	461a      	moveq	r2, r3
 800b292:	68a3      	ldr	r3, [r4, #8]
 800b294:	9201      	str	r2, [sp, #4]
 800b296:	1e5a      	subs	r2, r3, #1
 800b298:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b29c:	bf88      	it	hi
 800b29e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b2a2:	4627      	mov	r7, r4
 800b2a4:	bf82      	ittt	hi
 800b2a6:	eb03 0905 	addhi.w	r9, r3, r5
 800b2aa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b2ae:	60a3      	strhi	r3, [r4, #8]
 800b2b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b2b4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b2b8:	bf98      	it	ls
 800b2ba:	f04f 0900 	movls.w	r9, #0
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	463d      	mov	r5, r7
 800b2c2:	f04f 0b00 	mov.w	fp, #0
 800b2c6:	6831      	ldr	r1, [r6, #0]
 800b2c8:	ab03      	add	r3, sp, #12
 800b2ca:	7809      	ldrb	r1, [r1, #0]
 800b2cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	f7f4 ff75 	bl	80001c0 <memchr>
 800b2d6:	b328      	cbz	r0, 800b324 <_scanf_i+0xb8>
 800b2d8:	f1bb 0f01 	cmp.w	fp, #1
 800b2dc:	d158      	bne.n	800b390 <_scanf_i+0x124>
 800b2de:	6862      	ldr	r2, [r4, #4]
 800b2e0:	b92a      	cbnz	r2, 800b2ee <_scanf_i+0x82>
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	2108      	movs	r1, #8
 800b2e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2ea:	6061      	str	r1, [r4, #4]
 800b2ec:	6022      	str	r2, [r4, #0]
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b2f4:	6022      	str	r2, [r4, #0]
 800b2f6:	68a2      	ldr	r2, [r4, #8]
 800b2f8:	1e51      	subs	r1, r2, #1
 800b2fa:	60a1      	str	r1, [r4, #8]
 800b2fc:	b192      	cbz	r2, 800b324 <_scanf_i+0xb8>
 800b2fe:	6832      	ldr	r2, [r6, #0]
 800b300:	1c51      	adds	r1, r2, #1
 800b302:	6031      	str	r1, [r6, #0]
 800b304:	7812      	ldrb	r2, [r2, #0]
 800b306:	f805 2b01 	strb.w	r2, [r5], #1
 800b30a:	6872      	ldr	r2, [r6, #4]
 800b30c:	3a01      	subs	r2, #1
 800b30e:	2a00      	cmp	r2, #0
 800b310:	6072      	str	r2, [r6, #4]
 800b312:	dc07      	bgt.n	800b324 <_scanf_i+0xb8>
 800b314:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b318:	4631      	mov	r1, r6
 800b31a:	4650      	mov	r0, sl
 800b31c:	4790      	blx	r2
 800b31e:	2800      	cmp	r0, #0
 800b320:	f040 8083 	bne.w	800b42a <_scanf_i+0x1be>
 800b324:	f10b 0b01 	add.w	fp, fp, #1
 800b328:	f1bb 0f03 	cmp.w	fp, #3
 800b32c:	d1cb      	bne.n	800b2c6 <_scanf_i+0x5a>
 800b32e:	6861      	ldr	r1, [r4, #4]
 800b330:	b909      	cbnz	r1, 800b336 <_scanf_i+0xca>
 800b332:	210a      	movs	r1, #10
 800b334:	6061      	str	r1, [r4, #4]
 800b336:	4b45      	ldr	r3, [pc, #276]	@ (800b44c <_scanf_i+0x1e0>)
 800b338:	6960      	ldr	r0, [r4, #20]
 800b33a:	1a59      	subs	r1, r3, r1
 800b33c:	f000 f888 	bl	800b450 <__sccl>
 800b340:	f04f 0b00 	mov.w	fp, #0
 800b344:	68a3      	ldr	r3, [r4, #8]
 800b346:	6822      	ldr	r2, [r4, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d03d      	beq.n	800b3c8 <_scanf_i+0x15c>
 800b34c:	6831      	ldr	r1, [r6, #0]
 800b34e:	6960      	ldr	r0, [r4, #20]
 800b350:	f891 c000 	ldrb.w	ip, [r1]
 800b354:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b358:	2800      	cmp	r0, #0
 800b35a:	d035      	beq.n	800b3c8 <_scanf_i+0x15c>
 800b35c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b360:	d124      	bne.n	800b3ac <_scanf_i+0x140>
 800b362:	0510      	lsls	r0, r2, #20
 800b364:	d522      	bpl.n	800b3ac <_scanf_i+0x140>
 800b366:	f10b 0b01 	add.w	fp, fp, #1
 800b36a:	f1b9 0f00 	cmp.w	r9, #0
 800b36e:	d003      	beq.n	800b378 <_scanf_i+0x10c>
 800b370:	3301      	adds	r3, #1
 800b372:	f109 39ff 	add.w	r9, r9, #4294967295
 800b376:	60a3      	str	r3, [r4, #8]
 800b378:	6873      	ldr	r3, [r6, #4]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	6073      	str	r3, [r6, #4]
 800b380:	dd1b      	ble.n	800b3ba <_scanf_i+0x14e>
 800b382:	6833      	ldr	r3, [r6, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	6033      	str	r3, [r6, #0]
 800b388:	68a3      	ldr	r3, [r4, #8]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	60a3      	str	r3, [r4, #8]
 800b38e:	e7d9      	b.n	800b344 <_scanf_i+0xd8>
 800b390:	f1bb 0f02 	cmp.w	fp, #2
 800b394:	d1af      	bne.n	800b2f6 <_scanf_i+0x8a>
 800b396:	6822      	ldr	r2, [r4, #0]
 800b398:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b39c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b3a0:	d1c5      	bne.n	800b32e <_scanf_i+0xc2>
 800b3a2:	2110      	movs	r1, #16
 800b3a4:	6061      	str	r1, [r4, #4]
 800b3a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3aa:	e7a3      	b.n	800b2f4 <_scanf_i+0x88>
 800b3ac:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b3b0:	6022      	str	r2, [r4, #0]
 800b3b2:	780b      	ldrb	r3, [r1, #0]
 800b3b4:	f805 3b01 	strb.w	r3, [r5], #1
 800b3b8:	e7de      	b.n	800b378 <_scanf_i+0x10c>
 800b3ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	4798      	blx	r3
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d0df      	beq.n	800b388 <_scanf_i+0x11c>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	05db      	lsls	r3, r3, #23
 800b3cc:	d50d      	bpl.n	800b3ea <_scanf_i+0x17e>
 800b3ce:	42bd      	cmp	r5, r7
 800b3d0:	d909      	bls.n	800b3e6 <_scanf_i+0x17a>
 800b3d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b3d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3da:	4632      	mov	r2, r6
 800b3dc:	4650      	mov	r0, sl
 800b3de:	4798      	blx	r3
 800b3e0:	f105 39ff 	add.w	r9, r5, #4294967295
 800b3e4:	464d      	mov	r5, r9
 800b3e6:	42bd      	cmp	r5, r7
 800b3e8:	d027      	beq.n	800b43a <_scanf_i+0x1ce>
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	f012 0210 	ands.w	r2, r2, #16
 800b3f0:	d112      	bne.n	800b418 <_scanf_i+0x1ac>
 800b3f2:	702a      	strb	r2, [r5, #0]
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	9e01      	ldr	r6, [sp, #4]
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	4650      	mov	r0, sl
 800b3fc:	47b0      	blx	r6
 800b3fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b402:	6821      	ldr	r1, [r4, #0]
 800b404:	1d1a      	adds	r2, r3, #4
 800b406:	f8c8 2000 	str.w	r2, [r8]
 800b40a:	068e      	lsls	r6, r1, #26
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	d50f      	bpl.n	800b430 <_scanf_i+0x1c4>
 800b410:	6018      	str	r0, [r3, #0]
 800b412:	68e3      	ldr	r3, [r4, #12]
 800b414:	3301      	adds	r3, #1
 800b416:	60e3      	str	r3, [r4, #12]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	1bed      	subs	r5, r5, r7
 800b41c:	445d      	add	r5, fp
 800b41e:	442b      	add	r3, r5
 800b420:	6123      	str	r3, [r4, #16]
 800b422:	2000      	movs	r0, #0
 800b424:	b007      	add	sp, #28
 800b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42a:	f04f 0b00 	mov.w	fp, #0
 800b42e:	e7cb      	b.n	800b3c8 <_scanf_i+0x15c>
 800b430:	07ca      	lsls	r2, r1, #31
 800b432:	bf4c      	ite	mi
 800b434:	8018      	strhmi	r0, [r3, #0]
 800b436:	6018      	strpl	r0, [r3, #0]
 800b438:	e7eb      	b.n	800b412 <_scanf_i+0x1a6>
 800b43a:	2001      	movs	r0, #1
 800b43c:	e7f2      	b.n	800b424 <_scanf_i+0x1b8>
 800b43e:	bf00      	nop
 800b440:	0800ba60 	.word	0x0800ba60
 800b444:	0800b739 	.word	0x0800b739
 800b448:	0800a81d 	.word	0x0800a81d
 800b44c:	0800d155 	.word	0x0800d155

0800b450 <__sccl>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	780b      	ldrb	r3, [r1, #0]
 800b454:	4604      	mov	r4, r0
 800b456:	2b5e      	cmp	r3, #94	@ 0x5e
 800b458:	bf0b      	itete	eq
 800b45a:	784b      	ldrbeq	r3, [r1, #1]
 800b45c:	1c4a      	addne	r2, r1, #1
 800b45e:	1c8a      	addeq	r2, r1, #2
 800b460:	2100      	movne	r1, #0
 800b462:	bf08      	it	eq
 800b464:	2101      	moveq	r1, #1
 800b466:	3801      	subs	r0, #1
 800b468:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b46c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b470:	42a8      	cmp	r0, r5
 800b472:	d1fb      	bne.n	800b46c <__sccl+0x1c>
 800b474:	b90b      	cbnz	r3, 800b47a <__sccl+0x2a>
 800b476:	1e50      	subs	r0, r2, #1
 800b478:	bd70      	pop	{r4, r5, r6, pc}
 800b47a:	f081 0101 	eor.w	r1, r1, #1
 800b47e:	54e1      	strb	r1, [r4, r3]
 800b480:	4610      	mov	r0, r2
 800b482:	4602      	mov	r2, r0
 800b484:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b488:	2d2d      	cmp	r5, #45	@ 0x2d
 800b48a:	d005      	beq.n	800b498 <__sccl+0x48>
 800b48c:	2d5d      	cmp	r5, #93	@ 0x5d
 800b48e:	d016      	beq.n	800b4be <__sccl+0x6e>
 800b490:	2d00      	cmp	r5, #0
 800b492:	d0f1      	beq.n	800b478 <__sccl+0x28>
 800b494:	462b      	mov	r3, r5
 800b496:	e7f2      	b.n	800b47e <__sccl+0x2e>
 800b498:	7846      	ldrb	r6, [r0, #1]
 800b49a:	2e5d      	cmp	r6, #93	@ 0x5d
 800b49c:	d0fa      	beq.n	800b494 <__sccl+0x44>
 800b49e:	42b3      	cmp	r3, r6
 800b4a0:	dcf8      	bgt.n	800b494 <__sccl+0x44>
 800b4a2:	3002      	adds	r0, #2
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	3201      	adds	r2, #1
 800b4a8:	4296      	cmp	r6, r2
 800b4aa:	54a1      	strb	r1, [r4, r2]
 800b4ac:	dcfb      	bgt.n	800b4a6 <__sccl+0x56>
 800b4ae:	1af2      	subs	r2, r6, r3
 800b4b0:	3a01      	subs	r2, #1
 800b4b2:	42b3      	cmp	r3, r6
 800b4b4:	bfa8      	it	ge
 800b4b6:	2200      	movge	r2, #0
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	4413      	add	r3, r2
 800b4bc:	e7e1      	b.n	800b482 <__sccl+0x32>
 800b4be:	4610      	mov	r0, r2
 800b4c0:	e7da      	b.n	800b478 <__sccl+0x28>

0800b4c2 <__submore>:
 800b4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b4ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4ce:	4299      	cmp	r1, r3
 800b4d0:	d11d      	bne.n	800b50e <__submore+0x4c>
 800b4d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b4d6:	f7ff f8a7 	bl	800a628 <_malloc_r>
 800b4da:	b918      	cbnz	r0, 800b4e4 <__submore+0x22>
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b4ea:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b4ee:	6360      	str	r0, [r4, #52]	@ 0x34
 800b4f0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b4f4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b4f8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b4fc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b500:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b504:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b508:	6020      	str	r0, [r4, #0]
 800b50a:	2000      	movs	r0, #0
 800b50c:	e7e8      	b.n	800b4e0 <__submore+0x1e>
 800b50e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b510:	0077      	lsls	r7, r6, #1
 800b512:	463a      	mov	r2, r7
 800b514:	f000 f868 	bl	800b5e8 <_realloc_r>
 800b518:	4605      	mov	r5, r0
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d0de      	beq.n	800b4dc <__submore+0x1a>
 800b51e:	eb00 0806 	add.w	r8, r0, r6
 800b522:	4601      	mov	r1, r0
 800b524:	4632      	mov	r2, r6
 800b526:	4640      	mov	r0, r8
 800b528:	f000 f844 	bl	800b5b4 <memcpy>
 800b52c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b530:	f8c4 8000 	str.w	r8, [r4]
 800b534:	e7e9      	b.n	800b50a <__submore+0x48>

0800b536 <memmove>:
 800b536:	4288      	cmp	r0, r1
 800b538:	b510      	push	{r4, lr}
 800b53a:	eb01 0402 	add.w	r4, r1, r2
 800b53e:	d902      	bls.n	800b546 <memmove+0x10>
 800b540:	4284      	cmp	r4, r0
 800b542:	4623      	mov	r3, r4
 800b544:	d807      	bhi.n	800b556 <memmove+0x20>
 800b546:	1e43      	subs	r3, r0, #1
 800b548:	42a1      	cmp	r1, r4
 800b54a:	d007      	beq.n	800b55c <memmove+0x26>
 800b54c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b550:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b554:	e7f8      	b.n	800b548 <memmove+0x12>
 800b556:	4402      	add	r2, r0
 800b558:	4282      	cmp	r2, r0
 800b55a:	d100      	bne.n	800b55e <memmove+0x28>
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b562:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b566:	e7f7      	b.n	800b558 <memmove+0x22>

0800b568 <strncmp>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	b16a      	cbz	r2, 800b588 <strncmp+0x20>
 800b56c:	3901      	subs	r1, #1
 800b56e:	1884      	adds	r4, r0, r2
 800b570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b574:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b578:	429a      	cmp	r2, r3
 800b57a:	d103      	bne.n	800b584 <strncmp+0x1c>
 800b57c:	42a0      	cmp	r0, r4
 800b57e:	d001      	beq.n	800b584 <strncmp+0x1c>
 800b580:	2a00      	cmp	r2, #0
 800b582:	d1f5      	bne.n	800b570 <strncmp+0x8>
 800b584:	1ad0      	subs	r0, r2, r3
 800b586:	bd10      	pop	{r4, pc}
 800b588:	4610      	mov	r0, r2
 800b58a:	e7fc      	b.n	800b586 <strncmp+0x1e>

0800b58c <__gettzinfo>:
 800b58c:	4800      	ldr	r0, [pc, #0]	@ (800b590 <__gettzinfo+0x4>)
 800b58e:	4770      	bx	lr
 800b590:	20000220 	.word	0x20000220

0800b594 <_sbrk_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d06      	ldr	r5, [pc, #24]	@ (800b5b0 <_sbrk_r+0x1c>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	f7fc fe30 	bl	8008204 <_sbrk>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_sbrk_r+0x1a>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_sbrk_r+0x1a>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	20002804 	.word	0x20002804

0800b5b4 <memcpy>:
 800b5b4:	440a      	add	r2, r1
 800b5b6:	4291      	cmp	r1, r2
 800b5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5bc:	d100      	bne.n	800b5c0 <memcpy+0xc>
 800b5be:	4770      	bx	lr
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ca:	4291      	cmp	r1, r2
 800b5cc:	d1f9      	bne.n	800b5c2 <memcpy+0xe>
 800b5ce:	bd10      	pop	{r4, pc}

0800b5d0 <__env_lock>:
 800b5d0:	4801      	ldr	r0, [pc, #4]	@ (800b5d8 <__env_lock+0x8>)
 800b5d2:	f7fe bf5e 	b.w	800a492 <__retarget_lock_acquire_recursive>
 800b5d6:	bf00      	nop
 800b5d8:	20002809 	.word	0x20002809

0800b5dc <__env_unlock>:
 800b5dc:	4801      	ldr	r0, [pc, #4]	@ (800b5e4 <__env_unlock+0x8>)
 800b5de:	f7fe bf5a 	b.w	800a496 <__retarget_lock_release_recursive>
 800b5e2:	bf00      	nop
 800b5e4:	20002809 	.word	0x20002809

0800b5e8 <_realloc_r>:
 800b5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ec:	4607      	mov	r7, r0
 800b5ee:	4614      	mov	r4, r2
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	b921      	cbnz	r1, 800b5fe <_realloc_r+0x16>
 800b5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	f7ff b815 	b.w	800a628 <_malloc_r>
 800b5fe:	b92a      	cbnz	r2, 800b60c <_realloc_r+0x24>
 800b600:	f7fe ff5a 	bl	800a4b8 <_free_r>
 800b604:	4625      	mov	r5, r4
 800b606:	4628      	mov	r0, r5
 800b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60c:	f000 f896 	bl	800b73c <_malloc_usable_size_r>
 800b610:	4284      	cmp	r4, r0
 800b612:	4606      	mov	r6, r0
 800b614:	d802      	bhi.n	800b61c <_realloc_r+0x34>
 800b616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b61a:	d8f4      	bhi.n	800b606 <_realloc_r+0x1e>
 800b61c:	4621      	mov	r1, r4
 800b61e:	4638      	mov	r0, r7
 800b620:	f7ff f802 	bl	800a628 <_malloc_r>
 800b624:	4680      	mov	r8, r0
 800b626:	b908      	cbnz	r0, 800b62c <_realloc_r+0x44>
 800b628:	4645      	mov	r5, r8
 800b62a:	e7ec      	b.n	800b606 <_realloc_r+0x1e>
 800b62c:	42b4      	cmp	r4, r6
 800b62e:	4622      	mov	r2, r4
 800b630:	4629      	mov	r1, r5
 800b632:	bf28      	it	cs
 800b634:	4632      	movcs	r2, r6
 800b636:	f7ff ffbd 	bl	800b5b4 <memcpy>
 800b63a:	4629      	mov	r1, r5
 800b63c:	4638      	mov	r0, r7
 800b63e:	f7fe ff3b 	bl	800a4b8 <_free_r>
 800b642:	e7f1      	b.n	800b628 <_realloc_r+0x40>

0800b644 <_strtol_l.isra.0>:
 800b644:	2b24      	cmp	r3, #36	@ 0x24
 800b646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b64a:	4686      	mov	lr, r0
 800b64c:	4690      	mov	r8, r2
 800b64e:	d801      	bhi.n	800b654 <_strtol_l.isra.0+0x10>
 800b650:	2b01      	cmp	r3, #1
 800b652:	d106      	bne.n	800b662 <_strtol_l.isra.0+0x1e>
 800b654:	f7fe fef2 	bl	800a43c <__errno>
 800b658:	2316      	movs	r3, #22
 800b65a:	6003      	str	r3, [r0, #0]
 800b65c:	2000      	movs	r0, #0
 800b65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b662:	4834      	ldr	r0, [pc, #208]	@ (800b734 <_strtol_l.isra.0+0xf0>)
 800b664:	460d      	mov	r5, r1
 800b666:	462a      	mov	r2, r5
 800b668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b66c:	5d06      	ldrb	r6, [r0, r4]
 800b66e:	f016 0608 	ands.w	r6, r6, #8
 800b672:	d1f8      	bne.n	800b666 <_strtol_l.isra.0+0x22>
 800b674:	2c2d      	cmp	r4, #45	@ 0x2d
 800b676:	d110      	bne.n	800b69a <_strtol_l.isra.0+0x56>
 800b678:	782c      	ldrb	r4, [r5, #0]
 800b67a:	2601      	movs	r6, #1
 800b67c:	1c95      	adds	r5, r2, #2
 800b67e:	f033 0210 	bics.w	r2, r3, #16
 800b682:	d115      	bne.n	800b6b0 <_strtol_l.isra.0+0x6c>
 800b684:	2c30      	cmp	r4, #48	@ 0x30
 800b686:	d10d      	bne.n	800b6a4 <_strtol_l.isra.0+0x60>
 800b688:	782a      	ldrb	r2, [r5, #0]
 800b68a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b68e:	2a58      	cmp	r2, #88	@ 0x58
 800b690:	d108      	bne.n	800b6a4 <_strtol_l.isra.0+0x60>
 800b692:	786c      	ldrb	r4, [r5, #1]
 800b694:	3502      	adds	r5, #2
 800b696:	2310      	movs	r3, #16
 800b698:	e00a      	b.n	800b6b0 <_strtol_l.isra.0+0x6c>
 800b69a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b69c:	bf04      	itt	eq
 800b69e:	782c      	ldrbeq	r4, [r5, #0]
 800b6a0:	1c95      	addeq	r5, r2, #2
 800b6a2:	e7ec      	b.n	800b67e <_strtol_l.isra.0+0x3a>
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1f6      	bne.n	800b696 <_strtol_l.isra.0+0x52>
 800b6a8:	2c30      	cmp	r4, #48	@ 0x30
 800b6aa:	bf14      	ite	ne
 800b6ac:	230a      	movne	r3, #10
 800b6ae:	2308      	moveq	r3, #8
 800b6b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b6b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	fbbc f9f3 	udiv	r9, ip, r3
 800b6be:	4610      	mov	r0, r2
 800b6c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b6c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b6c8:	2f09      	cmp	r7, #9
 800b6ca:	d80f      	bhi.n	800b6ec <_strtol_l.isra.0+0xa8>
 800b6cc:	463c      	mov	r4, r7
 800b6ce:	42a3      	cmp	r3, r4
 800b6d0:	dd1b      	ble.n	800b70a <_strtol_l.isra.0+0xc6>
 800b6d2:	1c57      	adds	r7, r2, #1
 800b6d4:	d007      	beq.n	800b6e6 <_strtol_l.isra.0+0xa2>
 800b6d6:	4581      	cmp	r9, r0
 800b6d8:	d314      	bcc.n	800b704 <_strtol_l.isra.0+0xc0>
 800b6da:	d101      	bne.n	800b6e0 <_strtol_l.isra.0+0x9c>
 800b6dc:	45a2      	cmp	sl, r4
 800b6de:	db11      	blt.n	800b704 <_strtol_l.isra.0+0xc0>
 800b6e0:	fb00 4003 	mla	r0, r0, r3, r4
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6ea:	e7eb      	b.n	800b6c4 <_strtol_l.isra.0+0x80>
 800b6ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b6f0:	2f19      	cmp	r7, #25
 800b6f2:	d801      	bhi.n	800b6f8 <_strtol_l.isra.0+0xb4>
 800b6f4:	3c37      	subs	r4, #55	@ 0x37
 800b6f6:	e7ea      	b.n	800b6ce <_strtol_l.isra.0+0x8a>
 800b6f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b6fc:	2f19      	cmp	r7, #25
 800b6fe:	d804      	bhi.n	800b70a <_strtol_l.isra.0+0xc6>
 800b700:	3c57      	subs	r4, #87	@ 0x57
 800b702:	e7e4      	b.n	800b6ce <_strtol_l.isra.0+0x8a>
 800b704:	f04f 32ff 	mov.w	r2, #4294967295
 800b708:	e7ed      	b.n	800b6e6 <_strtol_l.isra.0+0xa2>
 800b70a:	1c53      	adds	r3, r2, #1
 800b70c:	d108      	bne.n	800b720 <_strtol_l.isra.0+0xdc>
 800b70e:	2322      	movs	r3, #34	@ 0x22
 800b710:	f8ce 3000 	str.w	r3, [lr]
 800b714:	4660      	mov	r0, ip
 800b716:	f1b8 0f00 	cmp.w	r8, #0
 800b71a:	d0a0      	beq.n	800b65e <_strtol_l.isra.0+0x1a>
 800b71c:	1e69      	subs	r1, r5, #1
 800b71e:	e006      	b.n	800b72e <_strtol_l.isra.0+0xea>
 800b720:	b106      	cbz	r6, 800b724 <_strtol_l.isra.0+0xe0>
 800b722:	4240      	negs	r0, r0
 800b724:	f1b8 0f00 	cmp.w	r8, #0
 800b728:	d099      	beq.n	800b65e <_strtol_l.isra.0+0x1a>
 800b72a:	2a00      	cmp	r2, #0
 800b72c:	d1f6      	bne.n	800b71c <_strtol_l.isra.0+0xd8>
 800b72e:	f8c8 1000 	str.w	r1, [r8]
 800b732:	e794      	b.n	800b65e <_strtol_l.isra.0+0x1a>
 800b734:	0800d161 	.word	0x0800d161

0800b738 <_strtol_r>:
 800b738:	f7ff bf84 	b.w	800b644 <_strtol_l.isra.0>

0800b73c <_malloc_usable_size_r>:
 800b73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b740:	1f18      	subs	r0, r3, #4
 800b742:	2b00      	cmp	r3, #0
 800b744:	bfbc      	itt	lt
 800b746:	580b      	ldrlt	r3, [r1, r0]
 800b748:	18c0      	addlt	r0, r0, r3
 800b74a:	4770      	bx	lr

0800b74c <__udivmoddi4>:
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	9d08      	ldr	r5, [sp, #32]
 800b752:	460f      	mov	r7, r1
 800b754:	4604      	mov	r4, r0
 800b756:	468c      	mov	ip, r1
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d148      	bne.n	800b7ee <__udivmoddi4+0xa2>
 800b75c:	428a      	cmp	r2, r1
 800b75e:	4616      	mov	r6, r2
 800b760:	d961      	bls.n	800b826 <__udivmoddi4+0xda>
 800b762:	fab2 f382 	clz	r3, r2
 800b766:	b14b      	cbz	r3, 800b77c <__udivmoddi4+0x30>
 800b768:	f1c3 0220 	rsb	r2, r3, #32
 800b76c:	fa01 fc03 	lsl.w	ip, r1, r3
 800b770:	fa20 f202 	lsr.w	r2, r0, r2
 800b774:	409e      	lsls	r6, r3
 800b776:	ea42 0c0c 	orr.w	ip, r2, ip
 800b77a:	409c      	lsls	r4, r3
 800b77c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b780:	b2b7      	uxth	r7, r6
 800b782:	fbbc f1fe 	udiv	r1, ip, lr
 800b786:	0c22      	lsrs	r2, r4, #16
 800b788:	fb0e cc11 	mls	ip, lr, r1, ip
 800b78c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800b790:	fb01 f007 	mul.w	r0, r1, r7
 800b794:	4290      	cmp	r0, r2
 800b796:	d909      	bls.n	800b7ac <__udivmoddi4+0x60>
 800b798:	18b2      	adds	r2, r6, r2
 800b79a:	f101 3cff 	add.w	ip, r1, #4294967295
 800b79e:	f080 80ee 	bcs.w	800b97e <__udivmoddi4+0x232>
 800b7a2:	4290      	cmp	r0, r2
 800b7a4:	f240 80eb 	bls.w	800b97e <__udivmoddi4+0x232>
 800b7a8:	3902      	subs	r1, #2
 800b7aa:	4432      	add	r2, r6
 800b7ac:	1a12      	subs	r2, r2, r0
 800b7ae:	b2a4      	uxth	r4, r4
 800b7b0:	fbb2 f0fe 	udiv	r0, r2, lr
 800b7b4:	fb0e 2210 	mls	r2, lr, r0, r2
 800b7b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b7bc:	fb00 f707 	mul.w	r7, r0, r7
 800b7c0:	42a7      	cmp	r7, r4
 800b7c2:	d909      	bls.n	800b7d8 <__udivmoddi4+0x8c>
 800b7c4:	1934      	adds	r4, r6, r4
 800b7c6:	f100 32ff 	add.w	r2, r0, #4294967295
 800b7ca:	f080 80da 	bcs.w	800b982 <__udivmoddi4+0x236>
 800b7ce:	42a7      	cmp	r7, r4
 800b7d0:	f240 80d7 	bls.w	800b982 <__udivmoddi4+0x236>
 800b7d4:	4434      	add	r4, r6
 800b7d6:	3802      	subs	r0, #2
 800b7d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800b7dc:	1be4      	subs	r4, r4, r7
 800b7de:	2100      	movs	r1, #0
 800b7e0:	b11d      	cbz	r5, 800b7ea <__udivmoddi4+0x9e>
 800b7e2:	40dc      	lsrs	r4, r3
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	e9c5 4300 	strd	r4, r3, [r5]
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	428b      	cmp	r3, r1
 800b7f0:	d906      	bls.n	800b800 <__udivmoddi4+0xb4>
 800b7f2:	b10d      	cbz	r5, 800b7f8 <__udivmoddi4+0xac>
 800b7f4:	e9c5 0100 	strd	r0, r1, [r5]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b800:	fab3 f183 	clz	r1, r3
 800b804:	2900      	cmp	r1, #0
 800b806:	d148      	bne.n	800b89a <__udivmoddi4+0x14e>
 800b808:	42bb      	cmp	r3, r7
 800b80a:	d302      	bcc.n	800b812 <__udivmoddi4+0xc6>
 800b80c:	4282      	cmp	r2, r0
 800b80e:	f200 8107 	bhi.w	800ba20 <__udivmoddi4+0x2d4>
 800b812:	1a84      	subs	r4, r0, r2
 800b814:	eb67 0203 	sbc.w	r2, r7, r3
 800b818:	2001      	movs	r0, #1
 800b81a:	4694      	mov	ip, r2
 800b81c:	2d00      	cmp	r5, #0
 800b81e:	d0e4      	beq.n	800b7ea <__udivmoddi4+0x9e>
 800b820:	e9c5 4c00 	strd	r4, ip, [r5]
 800b824:	e7e1      	b.n	800b7ea <__udivmoddi4+0x9e>
 800b826:	2a00      	cmp	r2, #0
 800b828:	f000 8092 	beq.w	800b950 <__udivmoddi4+0x204>
 800b82c:	fab2 f382 	clz	r3, r2
 800b830:	2b00      	cmp	r3, #0
 800b832:	f040 80a8 	bne.w	800b986 <__udivmoddi4+0x23a>
 800b836:	1a8a      	subs	r2, r1, r2
 800b838:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b83c:	fa1f fc86 	uxth.w	ip, r6
 800b840:	2101      	movs	r1, #1
 800b842:	0c20      	lsrs	r0, r4, #16
 800b844:	fbb2 f7fe 	udiv	r7, r2, lr
 800b848:	fb0e 2217 	mls	r2, lr, r7, r2
 800b84c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800b850:	fb0c f007 	mul.w	r0, ip, r7
 800b854:	4290      	cmp	r0, r2
 800b856:	d907      	bls.n	800b868 <__udivmoddi4+0x11c>
 800b858:	18b2      	adds	r2, r6, r2
 800b85a:	f107 38ff 	add.w	r8, r7, #4294967295
 800b85e:	d202      	bcs.n	800b866 <__udivmoddi4+0x11a>
 800b860:	4290      	cmp	r0, r2
 800b862:	f200 80e2 	bhi.w	800ba2a <__udivmoddi4+0x2de>
 800b866:	4647      	mov	r7, r8
 800b868:	1a12      	subs	r2, r2, r0
 800b86a:	b2a4      	uxth	r4, r4
 800b86c:	fbb2 f0fe 	udiv	r0, r2, lr
 800b870:	fb0e 2210 	mls	r2, lr, r0, r2
 800b874:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b878:	fb0c fc00 	mul.w	ip, ip, r0
 800b87c:	45a4      	cmp	ip, r4
 800b87e:	d907      	bls.n	800b890 <__udivmoddi4+0x144>
 800b880:	1934      	adds	r4, r6, r4
 800b882:	f100 32ff 	add.w	r2, r0, #4294967295
 800b886:	d202      	bcs.n	800b88e <__udivmoddi4+0x142>
 800b888:	45a4      	cmp	ip, r4
 800b88a:	f200 80cb 	bhi.w	800ba24 <__udivmoddi4+0x2d8>
 800b88e:	4610      	mov	r0, r2
 800b890:	eba4 040c 	sub.w	r4, r4, ip
 800b894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b898:	e7a2      	b.n	800b7e0 <__udivmoddi4+0x94>
 800b89a:	f1c1 0620 	rsb	r6, r1, #32
 800b89e:	408b      	lsls	r3, r1
 800b8a0:	fa22 fc06 	lsr.w	ip, r2, r6
 800b8a4:	ea4c 0c03 	orr.w	ip, ip, r3
 800b8a8:	fa07 f401 	lsl.w	r4, r7, r1
 800b8ac:	fa20 f306 	lsr.w	r3, r0, r6
 800b8b0:	40f7      	lsrs	r7, r6
 800b8b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800b8b6:	4323      	orrs	r3, r4
 800b8b8:	fa00 f801 	lsl.w	r8, r0, r1
 800b8bc:	fa1f fe8c 	uxth.w	lr, ip
 800b8c0:	fbb7 f0f9 	udiv	r0, r7, r9
 800b8c4:	0c1c      	lsrs	r4, r3, #16
 800b8c6:	fb09 7710 	mls	r7, r9, r0, r7
 800b8ca:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800b8ce:	fb00 f70e 	mul.w	r7, r0, lr
 800b8d2:	42a7      	cmp	r7, r4
 800b8d4:	fa02 f201 	lsl.w	r2, r2, r1
 800b8d8:	d90a      	bls.n	800b8f0 <__udivmoddi4+0x1a4>
 800b8da:	eb1c 0404 	adds.w	r4, ip, r4
 800b8de:	f100 3aff 	add.w	sl, r0, #4294967295
 800b8e2:	f080 809b 	bcs.w	800ba1c <__udivmoddi4+0x2d0>
 800b8e6:	42a7      	cmp	r7, r4
 800b8e8:	f240 8098 	bls.w	800ba1c <__udivmoddi4+0x2d0>
 800b8ec:	3802      	subs	r0, #2
 800b8ee:	4464      	add	r4, ip
 800b8f0:	1be4      	subs	r4, r4, r7
 800b8f2:	b29f      	uxth	r7, r3
 800b8f4:	fbb4 f3f9 	udiv	r3, r4, r9
 800b8f8:	fb09 4413 	mls	r4, r9, r3, r4
 800b8fc:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800b900:	fb03 fe0e 	mul.w	lr, r3, lr
 800b904:	45a6      	cmp	lr, r4
 800b906:	d909      	bls.n	800b91c <__udivmoddi4+0x1d0>
 800b908:	eb1c 0404 	adds.w	r4, ip, r4
 800b90c:	f103 37ff 	add.w	r7, r3, #4294967295
 800b910:	f080 8082 	bcs.w	800ba18 <__udivmoddi4+0x2cc>
 800b914:	45a6      	cmp	lr, r4
 800b916:	d97f      	bls.n	800ba18 <__udivmoddi4+0x2cc>
 800b918:	3b02      	subs	r3, #2
 800b91a:	4464      	add	r4, ip
 800b91c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b920:	eba4 040e 	sub.w	r4, r4, lr
 800b924:	fba0 e702 	umull	lr, r7, r0, r2
 800b928:	42bc      	cmp	r4, r7
 800b92a:	4673      	mov	r3, lr
 800b92c:	46b9      	mov	r9, r7
 800b92e:	d363      	bcc.n	800b9f8 <__udivmoddi4+0x2ac>
 800b930:	d060      	beq.n	800b9f4 <__udivmoddi4+0x2a8>
 800b932:	b15d      	cbz	r5, 800b94c <__udivmoddi4+0x200>
 800b934:	ebb8 0203 	subs.w	r2, r8, r3
 800b938:	eb64 0409 	sbc.w	r4, r4, r9
 800b93c:	fa04 f606 	lsl.w	r6, r4, r6
 800b940:	fa22 f301 	lsr.w	r3, r2, r1
 800b944:	431e      	orrs	r6, r3
 800b946:	40cc      	lsrs	r4, r1
 800b948:	e9c5 6400 	strd	r6, r4, [r5]
 800b94c:	2100      	movs	r1, #0
 800b94e:	e74c      	b.n	800b7ea <__udivmoddi4+0x9e>
 800b950:	0862      	lsrs	r2, r4, #1
 800b952:	0848      	lsrs	r0, r1, #1
 800b954:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800b958:	0c0b      	lsrs	r3, r1, #16
 800b95a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b95e:	b28a      	uxth	r2, r1
 800b960:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b964:	fbb3 f1f6 	udiv	r1, r3, r6
 800b968:	07e4      	lsls	r4, r4, #31
 800b96a:	46b4      	mov	ip, r6
 800b96c:	4637      	mov	r7, r6
 800b96e:	46b6      	mov	lr, r6
 800b970:	231f      	movs	r3, #31
 800b972:	fbb0 f0f6 	udiv	r0, r0, r6
 800b976:	1bd2      	subs	r2, r2, r7
 800b978:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b97c:	e761      	b.n	800b842 <__udivmoddi4+0xf6>
 800b97e:	4661      	mov	r1, ip
 800b980:	e714      	b.n	800b7ac <__udivmoddi4+0x60>
 800b982:	4610      	mov	r0, r2
 800b984:	e728      	b.n	800b7d8 <__udivmoddi4+0x8c>
 800b986:	f1c3 0120 	rsb	r1, r3, #32
 800b98a:	fa20 f201 	lsr.w	r2, r0, r1
 800b98e:	409e      	lsls	r6, r3
 800b990:	fa27 f101 	lsr.w	r1, r7, r1
 800b994:	409f      	lsls	r7, r3
 800b996:	433a      	orrs	r2, r7
 800b998:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b99c:	fa1f fc86 	uxth.w	ip, r6
 800b9a0:	fbb1 f7fe 	udiv	r7, r1, lr
 800b9a4:	fb0e 1017 	mls	r0, lr, r7, r1
 800b9a8:	0c11      	lsrs	r1, r2, #16
 800b9aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b9ae:	fb07 f80c 	mul.w	r8, r7, ip
 800b9b2:	4588      	cmp	r8, r1
 800b9b4:	fa04 f403 	lsl.w	r4, r4, r3
 800b9b8:	d93a      	bls.n	800ba30 <__udivmoddi4+0x2e4>
 800b9ba:	1871      	adds	r1, r6, r1
 800b9bc:	f107 30ff 	add.w	r0, r7, #4294967295
 800b9c0:	d201      	bcs.n	800b9c6 <__udivmoddi4+0x27a>
 800b9c2:	4588      	cmp	r8, r1
 800b9c4:	d81f      	bhi.n	800ba06 <__udivmoddi4+0x2ba>
 800b9c6:	eba1 0108 	sub.w	r1, r1, r8
 800b9ca:	fbb1 f8fe 	udiv	r8, r1, lr
 800b9ce:	fb08 f70c 	mul.w	r7, r8, ip
 800b9d2:	fb0e 1118 	mls	r1, lr, r8, r1
 800b9d6:	b292      	uxth	r2, r2
 800b9d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b9dc:	42ba      	cmp	r2, r7
 800b9de:	d22f      	bcs.n	800ba40 <__udivmoddi4+0x2f4>
 800b9e0:	18b2      	adds	r2, r6, r2
 800b9e2:	f108 31ff 	add.w	r1, r8, #4294967295
 800b9e6:	d2c6      	bcs.n	800b976 <__udivmoddi4+0x22a>
 800b9e8:	42ba      	cmp	r2, r7
 800b9ea:	d2c4      	bcs.n	800b976 <__udivmoddi4+0x22a>
 800b9ec:	f1a8 0102 	sub.w	r1, r8, #2
 800b9f0:	4432      	add	r2, r6
 800b9f2:	e7c0      	b.n	800b976 <__udivmoddi4+0x22a>
 800b9f4:	45f0      	cmp	r8, lr
 800b9f6:	d29c      	bcs.n	800b932 <__udivmoddi4+0x1e6>
 800b9f8:	ebbe 0302 	subs.w	r3, lr, r2
 800b9fc:	eb67 070c 	sbc.w	r7, r7, ip
 800ba00:	3801      	subs	r0, #1
 800ba02:	46b9      	mov	r9, r7
 800ba04:	e795      	b.n	800b932 <__udivmoddi4+0x1e6>
 800ba06:	eba6 0808 	sub.w	r8, r6, r8
 800ba0a:	4441      	add	r1, r8
 800ba0c:	1eb8      	subs	r0, r7, #2
 800ba0e:	fbb1 f8fe 	udiv	r8, r1, lr
 800ba12:	fb08 f70c 	mul.w	r7, r8, ip
 800ba16:	e7dc      	b.n	800b9d2 <__udivmoddi4+0x286>
 800ba18:	463b      	mov	r3, r7
 800ba1a:	e77f      	b.n	800b91c <__udivmoddi4+0x1d0>
 800ba1c:	4650      	mov	r0, sl
 800ba1e:	e767      	b.n	800b8f0 <__udivmoddi4+0x1a4>
 800ba20:	4608      	mov	r0, r1
 800ba22:	e6fb      	b.n	800b81c <__udivmoddi4+0xd0>
 800ba24:	4434      	add	r4, r6
 800ba26:	3802      	subs	r0, #2
 800ba28:	e732      	b.n	800b890 <__udivmoddi4+0x144>
 800ba2a:	3f02      	subs	r7, #2
 800ba2c:	4432      	add	r2, r6
 800ba2e:	e71b      	b.n	800b868 <__udivmoddi4+0x11c>
 800ba30:	eba1 0108 	sub.w	r1, r1, r8
 800ba34:	4638      	mov	r0, r7
 800ba36:	fbb1 f8fe 	udiv	r8, r1, lr
 800ba3a:	fb08 f70c 	mul.w	r7, r8, ip
 800ba3e:	e7c8      	b.n	800b9d2 <__udivmoddi4+0x286>
 800ba40:	4641      	mov	r1, r8
 800ba42:	e798      	b.n	800b976 <__udivmoddi4+0x22a>

0800ba44 <_init>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	bf00      	nop
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr

0800ba50 <_fini>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	bf00      	nop
 800ba54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba56:	bc08      	pop	{r3}
 800ba58:	469e      	mov	lr, r3
 800ba5a:	4770      	bx	lr
 800ba5c:	0000      	movs	r0, r0
	...
